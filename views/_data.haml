.info
  %span.loc
    We analyzed
    .num
      =@stats[:loc]
    lines of code from
    .num
      =@stats[:projects].size
    popular ruby projects:
  -@stats[:projects].map{|x| x.split("_").first(x.split("_").size-1).join("_")}.each do |p|
    %span.proj
      =p
.search
  %form{:action => '/', :method => :get}
    %label
      Min # Projects
    %input{:type => :text, :placeholder => "min # projects", :name => "projects", :value => @proj_count}
    %label
      Min Count
    %input{:type => :text, :placeholder => "min # count", :name => "count", :value => @count}
    %input{:type => :hidden, :name => "file", :value => params[:file]}
    %input{:type => :submit}
.patterns
  -@data.each do |datum|
    -unique_projects = datum[@len+1].map{|d| d[0].split("/")[2]}.uniq.size
      -if unique_projects >= @proj_count && datum[@len] >= @count
      .pattern
        .count= datum[@len]
        .p_count
          %b
            =unique_projects.to_s
          projects
        -blank = "<span class='blank'>&nbsp;&nbsp;&nbsp;&nbsp;</span>"
        -states = datum.first(@len)
        -states.each do |s|
          .s1= s == "" ? blank : s
        .showHide
          %span.button
            show / hide
        .code
          -datum[@len+1].each do |lst|
            %pre.block
              -highlight = lst[2].split("\n")
              -(0..(@len-1)).each {|i| highlight[lst[3].to_i+i] = "<span class='highlight'>"+highlight[lst[3].to_i+i]+"</span>"}
              -highlight = highlight.join("\n")
              ="## #{lst[0]} :: #{lst[1]}\n#{highlight.gsub("/","//")}"            
        .clear