.info
  %span.loc
    We analyzed
    .num
      =@stats[:loc]
    lines of code from
    .num
      =@stats[:projects].size
    popular ruby projects:
  -@stats[:projects].map{|x| x.split("_").first(x.split("_").size-1).join("_")}.each do |p|
    %span.proj
      =p
.search
  %form{:action => '/all', :method => :get}
    .field
      %label
        Min Projects
      %input{:type => :text, :placeholder => "min # projects", :name => "projects", :value => @proj_count}
    .field
      %label
        Min Count
      %input{:type => :text, :placeholder => "min # count", :name => "count", :value => @count}
    .field
      %label{:class => 'tip', :title => "Total information divided by length of pattern" }
        %span.bdr
          Min ID
      %input.tip{:type => :text, :placeholder => "min density bits", :name => "bits", :value => @bits}
    .field
      %label{:class => 'tip', :title => "Pointwise mutual information: P(X1..XN)/P(X1)...P(XN)" }
        %span.bdr
          Min PMI
      %input{:type => :text, :placeholder => "min # pmf", :name => "pmf", :value => @pmf}
    .field
      %label
        Min Info
      %input{:type => :text, :placeholder => "min # bits", :title => "Total information via unique token count", :name => "info", :value => @info}
    .field.submit
      %input{:type => :submit, :value => "Filter Patterns"}
  .top_results
    Out of
    %b=@total_size
    patterns we found
    %b=@data.size
    results
.clear
.patterns
  -@data.each do |d|
    -unique_projects = d.p_count
    -states = d.pattern
    -bits = d.bits
    .pattern
      .count= d.count
      .p_count
        %b
          =unique_projects.to_s
        proj
        \/
        %b
          =bits
        bits
      .pmf
        %b
          =d.pmf.to_i
        pmi
      -blank = "<span class='blank'>&nbsp;&nbsp;&nbsp;&nbsp;</span>"
      -states.each do |s|
        .s1= s == "" ? blank : s
      .showHide
        %span.button
          show / hide
      .code
        -d.code.each do |lst|
          %pre.block
            -highlight = lst[2].map{|x| CGI::escapeHTML(x)}
            -(0..(states.size-1)).each {|i| highlight[lst[3].to_i+i] = "<span class='highlight'>"+highlight[lst[3].to_i+i]+"</span>"}
            -highlight = highlight.join("\n")
            ="## #{lst[0]} :: #{lst[1]}\n#{highlight}"            
      .clear