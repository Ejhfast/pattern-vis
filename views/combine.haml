.info
  %span.loc
    We analyzed
    .num
      =@stats[:loc]
    lines of code from
    .num
      =@stats[:projects].size
    popular ruby projects:
  -@stats[:projects].each do |p|
    %span.proj
      =p
.search
  %form{:action => '/all', :method => :get}
    .field
      %label
        Min # Projects
      %input{:type => :text, :placeholder => "min # projects", :name => "projects", :value => @proj_count}
    .field
      %label
        Min Total Count
      %input{:type => :text, :placeholder => "min # count", :name => "count", :value => @count}
    .field
      %label{:class => 'tip', :title => "Total information divided by length of pattern" }
        Min
        %span.bdr
          I. Density
      %input{:type => :text, :placeholder => "min density bits", :name => "info_d", :value => @info_d}
    .field
      %label{:class => 'tip', :title => "Pointwise mutual information: P(X1..XN)/P(X1)...P(XN)" }
        Min
        %span.bdr
          PMI
      %input{:type => :text, :placeholder => "min # pmi", :name => "pmi", :value => @pmi}
    .field
      %label{:class => 'tip', :title => "Total information via unique token count"}
        Min
        %span.bdr
          Information
      %input{:type => :text, :placeholder => "min # bits", :name => "info", :value => @info}
    .field
      %label
        Min # Lines
      %input{:type => :text, :placeholder => "min # lines", :name => "min_l", :value => @min_lines}
    .field
      %label{:class => 'tip', :title => "Search the generic-name patterns for a substring"}
        Contains
      %input{:type => :text, :name => "substr", :value => @substr}
    .field.submit
      %input{:type => :submit, :value => "Filter Patterns"}
  .top_results
    Out of
    %b=@total_size
    patterns we found
    %b=@data.size
    results
.clear
.patterns
  -@data.each do |d|
    -unique_projects = d.p_count
    -bestNames = d.pattern.map do |line|
      -newLine = Ripper.lex(line).map do |token|
        -token = token[2]
        -d.names.include?(token) ? d.names[token][0][0] : token
      -newLine.join
    -states = d.pattern
    -bits = d.info_d
    .pattern
      .meta
        .fifth
          %b.n=d.count
          Total Count
        .fifth
          %b.n=d.p_count
          Project Count
        .fifth
          %b.n=d.info
          Information
        .fifth
          %b.n=d.info_d
          Info. Density
        .fifth
          %b.n=d.pmi
          PMI
      .break
      -blank = "<span class='blank'>&nbsp;&nbsp;&nbsp;&nbsp;</span>"
      .states
        -states.each_index do |i|
          .s1
            =#%label{:class => 'tip', :title => (bestNames[i] == '' ? blank : "#{Ripper.lex(bestNames[i]).map{|t| color_token(t)}.join}") }
            %label{:class => 'tip', :title => "Snippet with most popular tokens:\n #{bestNames.join("\n")}" }
              //<![CDATA[
              = states[i] == "" ? blank : "#{Ripper.lex(states[i]).map{|t| color_token(t)}.join}"
              //]>
            .numeral="#{i+1}."
        .showHide.code_toggle
          %span.button
            snippets
        .showHide.token_toggle
          %span.button
            tokens
        .showHide.name_toggle
          %span.button
            names
        .tokens
          %pre.block=Ripper.lex(d.pattern.join("\n")).map{|t| "<span class='term'>#{t[1]}</span>(\"#{t[2].strip}\")"}.join("\n")
        .code
          -d.code.each do |lst|
          -link = "<a href='/file?f=#{lst[2]}&hl=#{lst[0]}'>#{lst[2]}</a>"
            %pre.block
              -highlight = lst[3].map{|x| CGI::escapeHTML(x)}
              -(0..[states.size-1,highlight.size-1-lst[1].to_i].min).each {|i| highlight[lst[1].to_i+i] = "<span class='highlight'>"+highlight[lst[1].to_i+i]+"</span>"}
              -highlight = highlight.join("\n")
              ="## #{lst[0]} :: #{link}\n#{highlight}"            
        .names
          -d.names.each do |token, namelst|
            %pre.block
              -nameInfo = "<table><tr />" + namelst.map{|name| "<td /><span class='term'>#{name[0]}</span><td /> was used #{name[1]} times among #{name[2]} projects</td>"}.join("\n<tr />") + "</table>"
              ="## #{token} :: \n#{nameInfo}"
        .clear
