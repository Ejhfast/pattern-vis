[{:lociñÚ:projects[I"activemodel_proj:ETI"backup_proj;TI"compass_proj;TI"devise_proj;TI"diaspora_proj;TI"haml_proj;TI"homebrew_proj;TI"jekyll_proj;TI"nokogiri_proj;TI"omni_proj;TI"paperclip_proj;TI"rescue_proj;TI"sinatra_proj;TI"state_machine_proj;TI"twitter_proj;TI"whenever_proj;T[Å[	I"#   end;FI"#;FiÅ[Å[	I"Aprojects//activemodel_proj/active_model/attribute_methods.rb;Ti0I"l      #       send("#{attr}=", nil)
      #     end
      #   end
      #
      #   person = Person.new;Fi[	@iTI"l      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new;Fi[	@ixI"Z      #       ...
      #     end
      #   end
      #
      #   person = Person.new;Fi[	@iêI"l      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new;Fi[	@i‘I"l      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new;Fi[	@i˜I"l      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new;Fi[	I"9projects//activemodel_proj/active_model/callbacks.rb;Ti&I"\    #
    #     before_create AnotherClass
    #   end
    #
    #   class AnotherClass;Fi[	I":projects//activemodel_proj/active_model/conversion.rb;TiI"q    #   class Person
    #     include ActiveModel::Conversion
    #   end
    #
    #   person = Person.new;Fi[	@.iI"e    #
    #   class Person < ActiveRecord::Base
    #   end
    #
    #   person = Person.create;Fi[	@.i,I"e    #
    #   class Person < ActiveRecord::Base
    #   end
    #
    #   person = Person.create;Fi[	@.i9I"q    #   class Person
    #     include ActiveModel::Conversion
    #   end
    #
    #   person = Person.new;Fi[	I"6projects//activemodel_proj/active_model/errors.rb;TiiI"™    #   person.errors.each do |attribute, error|
    #     # Will yield :name and "can't be blank"
    #   end
    #
    #   person.errors.add(:name, "must be specified");Fi[	@7i!I"±    #     validates_presence_of :name, :address, :email
    #     validates_length_of :name, in: 5..30
    #   end
    #
    #   person = Person.create(address: '123 First St.');Fi[	I"5projects//activemodel_proj/active_model/model.rb;TiI"é    #     include ActiveModel::Model
    #     attr_accessor :name, :age
    #   end
    #
    #   person = Person.new(name: 'bob', age: '18');Fi[	I"6projects//activemodel_proj/active_model/naming.rb;TiI"Ç    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name == 'BlogPost'  # => true;Fi[	@?i*I"É    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name === 'BlogPost'  # => true;Fi[	@?i8I"Ä    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name <=> 'BlogPost'  # => 0;Fi[	@?iII"    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name =~ /Post/ # => 4;Fi[	@?iXI"~    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name !~ /Post/ # => false;Fi[	@?igI"Ö    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name.eql?('BlogPost')  # => true;Fi[	@?iuI"~    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name.to_s # => "BlogPost";Fi[	@?iÅI"e    #     class Bar
    #     end
    #   end
    #
    #   ActiveModel::Name.new(Foo::Bar).to_s;Fi[	@?iõI"Ä    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name.human # => "Blog post";Fi[	@?i∏I"u    #
    #   class Person < ActiveModel::Model
    #   end
    #
    #   Person.model_name          # => Person;Fi[	I"?projects//activemodel_proj/active_model/secure_password.rb;Ti%I"∏      #   class User < ActiveRecord::Base
      #     has_secure_password
      #   end
      #
      #   user = User.new(name: 'david', password: '', password_confirmation: 'nomatch');Fi[	@TiHI"∂      #   class User < ActiveRecord::Base
      #     has_secure_password validations: false
      #   end
      #
      #   user = User.new(name: 'david', password: 'mUc3m00RsqyRe');Fi[	@TiWI"å      #   class User < ActiveRecord::Base
      #     has_secure_password validations: false
      #   end
      #
      #   user = User.new;Fi[	I"=projects//activemodel_proj/active_model/serialization.rb;TiI"\    #       name.capitalize
    #     end
    #   end
    #
    #   person = Person.new;Fi[	I"@projects//activemodel_proj/active_model/serializers/json.rb;TitI"É      #       instance_values
      #     end
      #   end
      #
      #   json = { name: 'bob', age: 22, awesome:true }.to_json;Fi[	I"?projects//activemodel_proj/active_model/serializers/xml.rb;Ti–I"Å      #       instance_values
      #     end
      #   end
      #
      #   xml = { name: 'bob', age: 22, awesome:true }.to_xml;Fi[	I"Cprojects//activemodel_proj/active_model/validations/absence.rb;TiI"ª      #   class Person < ActiveRecord::Base
      #     validates_absence_of :first_name
      #   end
      #
      # The first_name attribute must be in the object and it must be blank.;Fi[	I"Fprojects//activemodel_proj/active_model/validations/acceptance.rb;Ti!I"‡      #     validates_acceptance_of :terms_of_service
      #     validates_acceptance_of :eula, message: 'must be abided'
      #   end
      #
      # If the database column does not exist, the +terms_of_service+ attribute;Fi[	I"Eprojects//activemodel_proj/active_model/validations/callbacks.rb;Ti"I"l        #       name.strip!
        #     end
        #   end
        #
        #   person = Person.new;Fi[	@jiDI"|        #       self.status = errors.empty?
        #     end
        #   end
        #
        #   person = Person.new;Fi[	I"Eprojects//activemodel_proj/active_model/validations/exclusion.rb;TiI"ÿ      #                            message: 'should not be the same as your username or first name'
      #     validates_exclusion_of :karma, in: :reserved_karmas
      #   end
      #
      # Configuration options:;Fi[	I"Bprojects//activemodel_proj/active_model/validations/format.rb;Ti>I"˘      #   class Person < ActiveRecord::Base
      #     validates_format_of :email, with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i, on: :create
      #   end
      #
      # Alternatively, you can require that the specified attribute does _not_;Fi[	@riEI"       #   class Person < ActiveRecord::Base
      #     validates_format_of :email, without: /NOSPAM/
      #   end
      #
      # You can also provide a proc or lambda which will determine the regular;Fi[	@riNI"      #     validates_format_of :screen_name,
      #                         with: ->(person) { person.admin? ? /\A[a-z0-9][a-z0-9_\-]*\z/i : /\A[a-z][a-z0-9_\-]*\z/i }
      #   end
      #
      # Note: use <tt>\A</tt> and <tt>\Z</tt> to match the start and end of the;Fi[	I"Eprojects//activemodel_proj/active_model/validations/inclusion.rb;TiI"À      #     validates_inclusion_of :states, in: ->(person) { STATES[person.country] }
      #     validates_inclusion_of :karma, in: :available_karmas
      #   end
      #
      # Configuration options:;Fi[	I"Bprojects//activemodel_proj/active_model/validations/length.rb;TiMI"Ê      #     validates_length_of :essay, minimum: 100, too_short: 'Your essay must be at least 100 words.',
      #                         tokenizer: ->(str) { str.scan(/\w+/) }
      #   end
      #
      # Configuration options:;Fi[	I"Hprojects//activemodel_proj/active_model/validations/numericality.rb;TiSI"ö      #   class Person < ActiveRecord::Base
      #     validates_numericality_of :value, on: :create
      #   end
      #
      # Configuration options:;Fi[	I"Dprojects//activemodel_proj/active_model/validations/presence.rb;TiI"æ      #   class Person < ActiveRecord::Base
      #     validates_presence_of :first_name
      #   end
      #
      # The first_name attribute must be in the object and it cannot be blank.;Fi[	I"Eprojects//activemodel_proj/active_model/validations/validates.rb;Ti"I"É      #         value =~ /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i
      #     end
      #   end
      #
      #   class Person;Fi[	@Äi*I"Ò      #     validates :name, presence: true, uniqueness: true, length: { maximum: 100 }
      #     validates :email, presence: true, email: true
      #   end
      #
      # Validator classes may also exist within the class being validated;Fi[	@Äi9I"ì      #
      #     validates :name, title: true
      #   end
      #
      # Additionally validator classes may be in another namespace and still;Fi[	@ÄiÄI"Ä      #     attr_accessor :name
      #     validates! :name, presence: true
      #   end
      #
      #   person = Person.new;Fi[	I"@projects//activemodel_proj/active_model/validations/with.rb;Ti$I"û      #     include ActiveModel::Validations
      #     validates_with MyValidator
      #   end
      #
      #   class MyValidator < ActiveModel::Validator;Fi[	@âi1I"z      #         # ...
      #       end
      #   end
      #
      # You may also pass it multiple classes, like so:;Fi[	@âi8I"ß      #     include ActiveModel::Validations
      #     validates_with MyValidator, MyOtherValidator, on: :create
      #   end
      #
      # Configuration options:;Fi[	@âiQI"¿      #     include ActiveModel::Validations
      #     validates_with MyValidator, my_custom_key: 'my custom value'
      #   end
      #
      #   class MyValidator < ActiveModel::Validator;Fi[	@âirI"í    #       validates_with MyValidator
    #     end
    #   end
    #
    # Please consult the class method documentation for more information on;Fi[	@âi|I"ù    #       validates_with MyValidator, MyOtherValidator
    #     end
    #   end
    #
    # Standard configuration options (<tt>:on</tt>, <tt>:if</tt> and;Fi[	I";projects//activemodel_proj/active_model/validations.rb;Ti"I"Ñ      #       record.errors.add attr, 'starts with z.' if value.to_s[0] == ?z
      #     end
      #   end
      #
      # Options:;Fi[	@ñiDI"‡      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #
      # With a block which is passed with the current record to be validated:;Fi[	@ñiRI"„      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #
      # Or with a block where self points to the current record to be validated:;Fi[	@ñi\I"£      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #
      # Options:;Fi[	@ñi{I"°      #     validates_with OtherValidator, on: :create
      #     validates_with StrictValidator, strict: true
      #   end
      #
      #   Person.validators;Fi[	@ñiêI"ñ      #     validates_presence_of :name
      #     validates_inclusion_of :age, in: 0..99
      #   end
      #
      #   Person.validators_on(:name);Fi[	@ñiøI"v    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new;Fi[	@ñi–I"v    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new;Fi[	@ñi‡I"{    #     attr_accessor :name
    #     validates_presence_of :name, on: :new
    #   end
    #
    #   person = Person.new;Fi[	@ñi˜I"v    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new;Fi[	@ñiI"{    #     attr_accessor :name
    #     validates_presence_of :name, on: :new
    #   end
    #
    #   person = Person.new;Fi[	I"2projects//backup_proj/backup/encryptor/gpg.rb;Ti^I"i      #       s2k-digest-algo SHA512
      #     EOF
      #   end
      #
      # @see #gpg_homedir;Fi[	@≠iíI"~      #
      #     EOS
      #   end
      #
      # All leading spaces/tabs will be stripped from the key, so the above;Fi[	@≠iÊI"Z      #       ]
      #     end
      #   end
      #
      # @return [String, Array];Fi[	@≠iI"≠      #   Backup::Encryptor::GPG.defaults do |enc|
      #     enc.passphrase = 'secret phrase'
      #   end
      #
      #   Backup::Model.new(:my_backup, 'My Backup') do;Fi[	@≠iI"}      #       enc.passphrase_file = '/path/to/passphrase.file'
      #     end
      #   end
      #
      # @return [String];Fi[	@≠i%I"~      #
      #     encryptor.recipients = 'joe@example.com'
      #   end
      #
      #   # Encryptor set in the model;Fi[	@≠i+I"}      #     # archives, storage options, etc...
      #     encrypt_with GPG
      #   end
      #
      # @!scope class;Fi[	@≠iGI"R      #
      #     notify_by Mail
      #   end
      #
      # @api private;Fi[	I"8projects//devise_proj/devise/controllers/helpers.rb;TiòI"—      #   map.namespace :user do |user|
      #     user.root :controller => 'users' # creates user_root_path
      #   end
      #
      # If the resource root path is not defined, root_path is used. However,;Fi[	@æi§I"Z      #         super
      #       end
      #   end
      #
      def function(var);Fi[	I";projects//devise_proj/devise/models/authenticatable.rb;TiôI"¶        #     conditions[:active] = true
        #     super
        #   end
        #
        # Finally, notice that Devise also queries for users in other scenarios;Fi[	I"Dprojects//devise_proj/devise/models/database_authenticatable.rb;TiGI"s      #     params.delete(:email)
      #     super(params)
      #   end
      #
      def function(var, var);Fi[	I"1projects//devise_proj/devise/rails/routes.rb;TiäI"î    #   scope "/my" do
    #     devise_for :users
    #   end
    #
    # However, since Devise uses the request path to retrieve the current user,;Fi[	@…iëI"à    #   scope ":locale" do
    #     devise_for :users
    #   end
    #
    # you are required to configure default_url_options in your;Fi[	@…iöI"    #       { :locale => I18n.locale }
    #     end
    #   end
    #
    # ==== Adding custom actions to override controllers;Fi[	@…i·I"h    #   authenticate do
    #     resources :post
    #   end
    #
    #   authenticate(:admin) do;Fi[	@…iÂI"ä    #   authenticate(:admin) do
    #     resources :users
    #   end
    #
    #   authenticate :user, lambda {|u| u.role == "admin"} do;Fi[	@…iÈI"ó    #   authenticate :user, lambda {|u| u.role == "admin"} do
    #     root :to => "admin/dashboard#show"
    #   end
    #
    def function(var, var);Fi[	@…i¯I"|    #   authenticated :admin do
    #     root :to => 'admin/dashboard#show'
    #   end
    #
    #   authenticated do;Fi[	@…i¸I"ê    #   authenticated do
    #     root :to => 'dashboard#show'
    #   end
    #
    #   authenticated :user, lambda {|u| u.role == "admin"} do;Fi[	@…i I"†    #   authenticated :user, lambda {|u| u.role == "admin"} do
    #     root :to => "admin/dashboard#show"
    #   end
    #
    #   root :to => 'landing#show';Fi[	@…iI"|    #       root :to => 'devise/registrations#new'
    #     end
    #   end
    #
    #   root :to => 'dashboard#show';Fi[	@…i!I"≠    #   as :user do
    #     get "sign_in", :to => "devise/sessions#new"
    #   end
    #
    # Notice you cannot have two scopes mapping to the same URL. And remember, if;Fi[	I"6projects//nokogiri_proj/nokogiri/html/document.rb;Ti=I"â      #   node.serialize(:encoding => 'UTF-8') do |config|
      #     config.format.as_xml
      #   end
      #
      def function(var);Fi[	I"1projects//nokogiri_proj/nokogiri/xml/node.rb;Ti§I"é      #   node.serialize(:encoding => 'UTF-8') do |config|
      #     config.format.as_xml
      #   end
      #
      def function(var, var);Fi[	I"-projects//omni_proj/omniauth/strategy.rb;Ti-I"Å      #       c.foo = 'bar'
      #     end
      #   end
      #
      # @example Using a hash to configure the default options.;Fi[	I",projects//rescue_proj/resque/helpers.rb;Ti)I"æ    #     C               # => 'inside'
    #     'C'.constantize # => 'outside', same as ::C
    #   end
    #
    # NameError is raised when the name is not in CamelCase or the constant is;Fi[	I"?projects//state_machine_proj/state_machine/eval_helpers.rb;TiI"V    #       @name
    #     end
    #   end
    #   
    #   class PersonCallback;Fi[	@Ïi I"g    #       person.name
    #     end
    #   end
    # 
    #   person = Person.new('John Smith');Fi[	I"Cprojects//state_machine_proj/state_machine/event_collection.rb;Ti#I"m    #       end
    #     end
    #   end
    #   
    #   events = Vehicle.state_machine(:state).events;Fi[	@ÒiHI"e    #       end
    #     end
    #   end
    #   
    #   events = Vehicle.state_machine.events;Fi[	@ÒihI"è    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                       # => #<Vehicle id: nil, state: "parked">;Fi[	I"=projects//state_machine_proj/state_machine/extensions.rb;TiTI"™    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">;Fi[	@¯iÅI"™    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">;Fi[	I"Dprojects//state_machine_proj/state_machine/integrations/base.rb;TiDI"ë        #       end
        #     end
        #   end
        # 
        # In the above example, a version override is defined for the ORMLibrary;Fi[	I"Tprojects//state_machine_proj/state_machine/integrations/data_mapper/observer.rb;Ti I"i        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver;Fi[	@ i9I"ò        #       # log message
        #     end
        #   end
        # 
        # *Note* that in each of the above +before_transition+ callbacks, the;Fi[	@ i]I"i        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver;Fi[	@ iiI"†        #       # track end time
        #     end
        #   end
        # 
        # See +before_transition+ for a description of the possible configurations;Fi[	@ i|I"i        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver;Fi[	@ iÜI"ù        #       # log failure
        #     end
        #   end
        # 
        # See +before_transition+ for a description of the possible configurations;Fi[	I"Eprojects//state_machine_proj/state_machine/machine_collection.rb;TiI"›    #   machines.initialize_states(object) do
    #     # After static state initialization, before dynamic state initialization
    #   end
    # 
    # If no block is provided, then all states will still be initialized.;Fi[	I"@projects//state_machine_proj/state_machine/macro_methods.rb;Ti@I"|    #       end
    #     end
    #   end
    # 
    # The above example will define a state machine named "state" that will;Fi[	@iLI"X    #       ...
    #     end
    #   end
    # 
    # With a static initial state:;Fi[	@iTI"Y    #       ...
    #     end
    #   end
    # 
    # With a dynamic initial state:;Fi[	@i\I"L    #       ...
    #     end
    #   end
    # 
    # == Class Methods;Fi[	@ivI"w    #       end
    #     end
    #   end
    #   
    #   Vehicle.human_state_name(:parked)         # => "parked";Fi[	@ißI"U    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new;Fi[	@i‹I"}    #       ...
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">;Fi[	@iÌI"{    #     def initialize
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c77678>;Fi[	@i I"Å    #       super()
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">;Fi[	@iI"ì    #       initialize_state_machines
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">;Fi[	@i,I"}    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">;Fi[	@iII"|    #       end
    #     end
    #   end
    # 
    # ...will generate the following instance methods (assuming they're not;Fi[	@iaI"ã    #       start :idling, :value => 1
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new # => #<Vehicle:0xb712da60 @state=0>;Fi[	@iòI"^    #       end
    #     end
    #   end
    #   
    #   # Fire +ignite+ event directly;Fi[	@i”I"Ñ    #       end
    #     end
    #   end
    # 
    # The above class defines two state machines: +heater_state+ and +alarm_state+.;Fi[	I"Bprojects//state_machine_proj/state_machine/matcher_helpers.rb;TiI"}    #       end
    #     end
    #   end
    # 
    # In the above example, +all+ will match the following states since they;Fi[	@/i0I"    #       end
    #     end
    #   end
    # 
    # In the above example, +same+ will match whichever the from state is.  In;Fi[	I"Cprojects//state_machine_proj/state_machine/state_collection.rb;TiI"v    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states;Fi[	@4i-I"v    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states;Fi[	@4iHI"v    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states;Fi[	I"@projects//state_machine_proj/state_machine/state_context.rb;Ti(I"ı    #       transition :from => [:idling, :parked], :on => :park, :unless => :seatbelt_on?  # Transitions to :parked if seatbelt is off
    #     end
    #   end
    # 
    # See StateMachine::Machine#transition for a description of the possible;Fi[	I"=projects//state_machine_proj/state_machine/transition.rb;TiµI"U    #       ...
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new;Fi[	@>iÈI"U    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new;Fi[	@>iI"    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new     # => #<Vehicle:0xb7b7f568 @state="parked">;Fi[	I"def function;FI""STRING";Fio[o[	I"5projects//backup_proj/backup/database/mongodb.rb;Ti®I"›      # Returns the MongoDB syntax for determining where to output all the database dumps,
      # e.g. ~/Backup/.tmp/databases/MongoDB/<databases here>/<database collections>
      def function
        "STRING"
      end;Fi[	I"3projects//backup_proj/backup/database/redis.rb;TiWI"h      ##
      # Returns the Redis database file name
      def function
        "STRING"
      end;Fi[	I"2projects//backup_proj/backup/database/riak.rb;Ti6I"}      ##
      # Builds the full riak-admin string based on all attributes
      def function
        "STRING"
      end;Fi[	I",projects//backup_proj/backup/package.rb;Ti+I"9    end
    
    def function
      "STRING"
    end;Fi[	I"7projects//backup_proj/backup/storage/cloudfiles.rb;Ti#I"}      ##
      # This is the provider that Fog uses for the Cloud Files Storage
      def function
        "STRING"
      end;Fi[	I"5projects//backup_proj/backup/storage/ninefold.rb;TiI"      ##
      # This is the provider that Fog uses for the Ninefold storage
      def function
        "STRING"
      end;Fi[	I"2projects//backup_proj/backup/storage/rsync.rb;TiyI"z      ##
      # Returns Rsync syntax for defining a port to connect to
      def function
        "STRING"
      end;Fi[	@[i{I"ò      # RSync options
      # -z = Compresses the bytes that will be transferred to reduce bandwidth usage
      def function
        "STRING"
      end;Fi[	I"/projects//backup_proj/backup/storage/s3.rb;Ti!I"y      ##
      # This is the provider that Fog uses for the S3 Storage
      def function
        "STRING"
      end;Fi[	I"=projects//backup_proj/backup/syncer/cloud/cloud_files.rb;Ti@I"        ##
        # This is the provider that Fog uses for the Cloud Files
        def function
          "STRING"
        end;Fi[	I"4projects//backup_proj/backup/syncer/cloud/s3.rb;Ti7I"        ##
        # This is the provider that Fog uses for the Cloud Files
        def function
          "STRING"
        end;Fi[	I"6projects//backup_proj/backup/syncer/rsync/base.rb;Ti)I"~        ##
        # Returns Rsync syntax for invoking "archive" mode
        def function
          "STRING"
        end;Fi[	I"6projects//backup_proj/backup/syncer/rsync/push.rb;TiOI"        ##
        # Returns Rsync syntax for defining a port to connect to
        def function
          "STRING"
        end;Fi[	I"Yprojects//compass_proj/compass/app_integration/stand_alone/configuration_defaults.rb;TiI"M        end
        
        def function
          "STRING"
        end;Fi[	@oiI"M        end
        
        def function
          "STRING"
        end;Fi[	@oiI"M        end
        
        def function
          "STRING"
        end;Fi[	@oiI"M        end
        
        def function
          "STRING"
        end;Fi[	@oiI"M        end
        
        def function
          "STRING"
        end;Fi[	I"=projects//compass_proj/compass/configuration/defaults.rb;TiI"]  module Configuration
    module Defaults
      def function
        "STRING"
      end;Fi[	@ziI"C      end
      
      def function
        "STRING"
      end;Fi[	@ziI"C      end
      
      def function
        "STRING"
      end;Fi[	I"6projects//compass_proj/compass/installers/base.rb;Ti†I"Ü      
      # Emits an HTML fragment that can be used to link to the compiled css files
      def function
        "STRING"
      end;Fi[	I"Mprojects//compass_proj/compass/sass_extensions/sprites/sprite_methods.rb;Ti,I"M        end
        
        def function
          "STRING"
        end;Fi[	I"+projects//devise_proj/devise/models.rb;TiI"C      end
      
      def function
        "STRING"
      end;Fi[	I"Gprojects//devise_proj/generators/active_record/devise_generator.rb;Ti&I"C      end
      
      def function
        "STRING"
      end;Fi[	I";projects//devise_proj/generators/devise/orm_helpers.rb;TiI"\  module Generators
    module OrmHelpers
      def function
        "STRING"
      end;Fi[	I"?projects//devise_proj/generators/devise/views_generator.rb;TihI"C      end
      
      def function
        "STRING"
      end;Fi[	I"Aprojects//devise_proj/generators/mongoid/devise_generator.rb;TiI"C      end
      
      def function
        "STRING"
      end;Fi[	I"Cprojects//diaspora_proj/models/notifications/also_commented.rb;Ti
I"/  end
  
  def function
    "STRING"
  end;Fi[	@ñiI"/  end
  
  def function
    "STRING"
  end;Fi[	I"Dprojects//diaspora_proj/models/notifications/comment_on_post.rb;Ti
I"/  end
  
  def function
    "STRING"
  end;Fi[	@õiI"/  end
  
  def function
    "STRING"
  end;Fi[	I":projects//diaspora_proj/models/notifications/liked.rb;Ti
I"/  end
  
  def function
    "STRING"
  end;Fi[	@†iI"/  end
  
  def function
    "STRING"
  end;Fi[	I">projects//diaspora_proj/models/notifications/mentioned.rb;Ti
I"/  end
  
  def function
    "STRING"
  end;Fi[	@•iI"/  end
  
  def function
    "STRING"
  end;Fi[	I"Dprojects//diaspora_proj/models/notifications/private_message.rb;Ti
I"/  end
  
  def function
    "STRING"
  end;Fi[	I"Eprojects//diaspora_proj/models/notifications/request_accepted.rb;Ti
I"/  end
  
  def function
    "STRING"
  end;Fi[	I"=projects//diaspora_proj/models/notifications/reshared.rb;Ti
I"/  end
  
  def function
    "STRING"
  end;Fi[	@∞iI"/  end
  
  def function
    "STRING"
  end;Fi[	I"Dprojects//diaspora_proj/models/notifications/started_sharing.rb;Ti
I"/  end
  
  def function
    "STRING"
  end;Fi[	I"-projects//diaspora_proj/models/person.rb;Ti∆I"/  end
  
  def function
    "STRING"
  end;Fi[	I"+projects//diaspora_proj/models/post.rb;Ti>I"/  end
  
  def function
    "STRING"
  end;Fi[	I"8projects//diaspora_proj/models/services/facebook.rb;TiI"F  MAX_CHARACTERS = "LITERAL"
  
  def function
    "STRING"
  end;Fi[	@æi'I"/  end
  
  def function
    "STRING"
  end;Fi[	I"6projects//diaspora_proj/models/services/tumblr.rb;TiI"F  MAX_CHARACTERS = "LITERAL"
  
  def function
    "STRING"
  end;Fi[	I"7projects//diaspora_proj/models/services/twitter.rb;TiI"L  SHORTENED_URL_LENGTH = "LITERAL"
  
  def function
    "STRING"
  end;Fi[	I"9projects//diaspora_proj/uploaders/processed_image.rb;TiI"L  include(CarrierWave::MiniMagick)
  
  def function
    "STRING"
  end;Fi[	I";projects//diaspora_proj/uploaders/unprocessed_image.rb;TiI"L  include(CarrierWave::MiniMagick)
  
  def function
    "STRING"
  end;Fi[	I"'projects//haml_proj/haml/buffer.rb;Ti£I"]    
    if (RUBY_VERSION < "STRING") then
      def function
        "STRING"
      end;Fi[	I")projects//haml_proj/haml/compiler.rb;Ti>I"√    # Returns the string used as the return value of the precompiled method.
    # This method exists so it can be monkeypatched to return modified values.
    def function
      "STRING"
    end;Fi[	I"(projects//haml_proj/haml/helpers.rb;TiI"y      
      # @return [String] A human-readable string representation
      def function
        "STRING"
      end;Fi[	I")projects//haml_proj/haml/template.rb;TiI"Imodule Haml
  class Compiler
    def function
      "STRING"
    end;Fi[	I"'projects//homebrew_proj/bottles.rb;Ti=I"F  Pathname::OLD_BOTTLE_EXTNAME_RX
end
def function
  "STRING"
end;Fi[	I",projects//homebrew_proj/cmd/--config.rb;TiXI"/  end
  
  def function
    "STRING"
  end;Fi[	I"4projects//homebrew_proj/compat/compatibility.rb;TiLI"/  end
  
  def function
    "STRING"
  end;Ti[	I"*projects//homebrew_proj/exceptions.rb;Ti;I"wend
class FormulaInstallationAlreadyAttemptedError < Homebrew::InstallationError
  def function
    "STRING"
  end;Fi[	I"-projects//homebrew_proj/macos/xquartz.rb;Ti'I"/  end
  
  def function
    "STRING"
  end;Fi[	I"2projects//homebrew_proj/test/test_patching.rb;TiI"arequire("test/testball")
class DefaultPatchBall < TestBall
  def function
    "STRING"
  end;Fi[	I")projects//jekyll_proj/jekyll/page.rb;TiáI"]    
    # Returns the object as a debug String.
    def function
      "STRING"
    end;Fi[	I")projects//jekyll_proj/jekyll/post.rb;TiﬂI"m    
    # Returns the shorthand String identifier of this Post.
    def function
      "STRING"
    end;Fi[	I"Aprojects//nokogiri_proj/nokogiri/html/element_description.rb;TiI"i      ###
      # Convert this description to a string
      def function
        "STRING"
      end;Fi[	@ÛiI"[      ###
      # Inspection information
      def function
        "STRING"
      end;Fi[	I";projects//nokogiri_proj/nokogiri/xml/attribute_decl.rb;TiI"u      undef_method("LITERAL") if method_defined?("LITERAL")
      
      def function
        "STRING"
      end;Fi[	I"2projects//nokogiri_proj/nokogiri/xml/cdata.rb;Ti
I"d      ###
      # Get the name of this CDATA node
      def function
        "STRING"
      end;Fi[	I"5projects//nokogiri_proj/nokogiri/xml/document.rb;TiRI"w      
      # The name of this document.  Always returns "document"
      def function
        "STRING"
      end;Fi[	@˛iﬂI"G      private
      
      def function
        "STRING"
      end;Fi[	I">projects//nokogiri_proj/nokogiri/xml/document_fragment.rb;TiI"i      ###
      # return the name for DocumentFragment
      def function
        "STRING"
      end;Fi[	I"9projects//nokogiri_proj/nokogiri/xml/element_decl.rb;TiI"u      undef_method("LITERAL") if method_defined?("LITERAL")
      
      def function
        "STRING"
      end;Fi[	I"8projects//nokogiri_proj/nokogiri/xml/entity_decl.rb;TiI"C      end
      
      def function
        "STRING"
      end;Fi[	@„ikI"C      end
      
      def function
        "STRING"
      end;Fi[	I"5projects//nokogiri_proj/nokogiri/xml/node_set.rb;Ti<I"s      ###
      # Return a nicely formated string representation
      def function
        "STRING"
      end;Fi[	I">projects//nokogiri_proj/nokogiri/xml/pp/character_data.rb;TiI"S        
        # :nodoc:
        def function
          "STRING"
        end;Fi[	I")projects//omni_proj/omniauth/form.rb;TiZI"?    protected
    
    def function
      "STRING"
    end;Fi[	@Êi|I"9    end
    
    def function
      "STRING"
    end;Fi[	I"$projects//omni_proj/omniauth.rb;TicI"E    module_function
    
    def function
      "STRING"
    end;Fi[	I"Iprojects//paperclip_proj/generators/paperclip/paperclip_generator.rb;TiI"5  protected
  
  def function
    "STRING"
  end;Fi[	@iI"/  end
  
  def function
    "STRING"
  end;Fi[	I"Gprojects//paperclip_proj/paperclip/io_adapters/abstract_adapter.rb;TiI"9    end
    
    def function
      "STRING"
    end;Fi[	I"Bprojects//paperclip_proj/paperclip/io_adapters/nil_adapter.rb;TiI"9    end
    
    def function
      "STRING"
    end;Fi[	@$iI"9    end
    
    def function
      "STRING"
    end;Fi[	I"Nprojects//paperclip_proj/paperclip/matchers/have_attached_file_matcher.rb;TiI"M        end
        
        def function
          "STRING"
        end;Fi[	@)i"I"M        end
        
        def function
          "STRING"
        end;Fi[	@)i&I"M        end
        
        def function
          "STRING"
        end;Fi[	I"\projects//paperclip_proj/paperclip/matchers/validate_attachment_content_type_matcher.rb;Ti4I"M        end
        
        def function
          "STRING"
        end;Fi[	@0iJI"M        end
        
        def function
          "STRING"
        end;Fi[	I"Xprojects//paperclip_proj/paperclip/matchers/validate_attachment_presence_matcher.rb;TiI"M        end
        
        def function
          "STRING"
        end;Fi[	@5i!I"M        end
        
        def function
          "STRING"
        end;Fi[	@5i%I"M        end
        
        def function
          "STRING"
        end;Fi[	I"Tprojects//paperclip_proj/paperclip/matchers/validate_attachment_size_matcher.rb;Ti0I"M        end
        
        def function
          "STRING"
        end;Fi[	@<i4I"M        end
        
        def function
          "STRING"
        end;Fi[	@<i8I"M        end
        
        def function
          "STRING"
        end;Fi[	I"+projects//rescue_proj/resque/worker.rb;TiÁI"9    end
    
    def function
      "STRING"
    end;Fi[	I"$projects//rescue_proj/resque.rb;Ti∂I"/  end
  
  def function
    "STRING"
  end;Fi[	I"Oprojects//state_machine_proj/state_machine/integrations/sequel/versions.rb;Ti4I"—          (defined? ::Sequel::MAJOR.! or ((::Sequel::MAJOR == "LITERAL") or ((::Sequel::MAJOR == "LITERAL") and (::Sequel::MINOR <= "LITERAL"))))
        end
        def function
          "STRING"
        end;Fi[	@Ii7I"W          "STRING"
        end
        def function
          "STRING"
        end;Fi[	@Ii@I"œ          defined? ::Sequel::MAJOR and ((::Sequel::MAJOR == "LITERAL") and ((::Sequel::MINOR >= "LITERAL") and (::Sequel::MINOR <= "LITERAL")))
        end
        def function
          "STRING"
        end;Fi[	@IiCI"W          "STRING"
        end
        def function
          "STRING"
        end;Fi[	I":projects//state_machine_proj/state_machine/matcher.rb;Ti0I"t    
    # A human-readable description of this matcher.  Always "all".
    def function
      "STRING"
    end;Fi[	@Ri\I"d    
    # A human-readable description of this matcher
    def function
      "STRING"
    end;Fi[	@RiqI"u    
    # A human-readable description of this matcher.  Always "same".
    def function
      "STRING"
    end;Fi[	@>i'I"    #   transition = StateMachine::Transition.new(object, machine, :ignite, :parked, :idling)
    #   transition   # => #<StateMachine::Transition attribute=:state event=:ignite from="parked" from_name=:parked to="idling" to_name=:idling>
    def function
      "STRING"
    end;Fi[	I"5projects//whenever_proj/whenever/command_line.rb;TimI"9    end
    
    def function
      "STRING"
    end;Fi[	@[iqI"9    end
    
    def function
      "STRING"
    end;Fi[	@[iuI"9    end
    
    def function
      "STRING"
    end;Fi[	I";projects//whenever_proj/whenever/output_redirection.rb;Ti;I"C      end
      
      def function
        "STRING"
      end;Fi[	I",# @authentication Requires user context;FI"g# @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fii[i[	I":projects//twitter_proj/twitter/api/direct_messages.rb;TiI"∏      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Direct messages sent to the authenticating user.;Fi[	@ii&I"∏      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Direct messages sent by the authenticating user.;Fi[	@ii9I"ò      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::DirectMessage] The requested messages.;Fi[	@iiGI"ü      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] The requested messages.;Fi[	@iipI"û      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Deleted direct message.;Fi[	@ii}I"5      # @see https://dev.twitter.com/docs/api/1.1/post/direct_messages/new
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::DirectMessage] The sent message.;Fi[	I"4projects//twitter_proj/twitter/api/favorites.rb;TiI".      # @see https://dev.twitter.com/docs/api/1.1/get/favorites/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] favorite Tweets.;Fi[	@vi4I"9      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The un-favorited Tweets.;Fi[	@viLI"5      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The favorited Tweets.;Fi[	I"@projects//twitter_proj/twitter/api/friends_and_followers.rb;TiI"      # @see https://dev.twitter.com/docs/api/1.1/get/friends/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@}i+I"      # @see https://dev.twitter.com/docs/api/1.1/get/followers/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@}iFI"5      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/lookup
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The requested users.;Fi[	@}i\I"      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/incoming
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@}ikI"      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/outgoing
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@}izI"4      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The followed users.;Fi[	@}iéI"4      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The followed users.;Fi[	@}i´I"7      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The unfollowed users.;Fi[	@}iøI"!      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/update
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Relationship];Fi[	@}i—I"      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Relationship];Fi[	@}iÎI"A      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Boolean] true if user_a follows user_b, otherwise false.;Fi[	@}i˝I"      # @see https://dev.twitter.com/docs/api/1.1/get/followers/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@}iI"      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@}i=I"#      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/no_retweets/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Integer>];Fi[	I"/projects//twitter_proj/twitter/api/help.rb;TiI";      # @see https://dev.twitter.com/docs/api/1.1/get/help/configuration
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Configuration] Twitter's configuration.;Fi[	@öiI"       # @see https://dev.twitter.com/docs/api/1.1/get/help/languages
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Language>];Fi[	@öi+I"      # @see https://dev.twitter.com/docs/api/1.1/get/help/privacy
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [String];Fi[	@öi8I"      # @see https://dev.twitter.com/docs/api/1.1/get/help/tos
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [String];Fi[	I"0projects//twitter_proj/twitter/api/lists.rb;TiI"      # @see https://dev.twitter.com/docs/api/1.1/get/lists/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::List>];Fi[	@£i0I"      # @see https://dev.twitter.com/docs/api/1.1/get/lists/statuses
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@£iUI"&      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.;Fi[	@£irI"      # @see https://dev.twitter.com/docs/api/1.1/get/lists/memberships
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@£iÜI"A      # @see https://dev.twitter.com/docs/api/1.1/get/lists/subscribers
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor] The subscribers of the specified list.;Fi[	@£i°I"3      # @see https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The specified list.;Fi[	@£i∫I"\      # @see https://dev.twitter.com/docs/api/1.1/get/lists/subscribers/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Boolean] true if user is a subscriber of the specified list, otherwise false.;Fi[	@£iÿI"4      # @see https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The specified list.;Fi[	@£iÚI"f      # @note Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.;Fi[	@£i-I"      # @see https://dev.twitter.com/docs/api/1.1/get/lists/members
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@£iJI"      # @note Lists are limited to having 500 members.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.;Fi[	@£igI"      # @note Must be owned by the authenticated user.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The deleted list.;Fi[	@£iÅI"%      # @see https://dev.twitter.com/docs/api/1.1/post/lists/update
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The created list.;Fi[	@£i†I"      # @note Accounts are limited to 20 lists.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The created list.;Fi[	@£i≤I"F      # @note Private lists will only be shown if the authenticated user owns the specified list.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The specified list.;Fi[	@£iÃI"      # @see https://dev.twitter.com/docs/api/1.1/get/lists/subscriptions
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor];Fi[	@£i„I"*      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy_all
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.;Fi[	I"9projects//twitter_proj/twitter/api/places_and_geo.rb;TiI"|      # @see https://dev.twitter.com/docs/api/1.1/get/geo/id/:place_id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param place_id [String] A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.;Fi[	@∆i I"U      # @note This request is an informative call and will deliver generalized results about geography.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.;Fi[	@∆i3I".      # @see https://dev.twitter.com/docs/api/1.1/get/geo/search
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.;Fi[	@∆iMI"      # @note Conceptually, you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to {Twitter::API::PlacesAndGeo#place} to create a new one. The token contained in the response is the token necessary to create a new place.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.;Fi[	@∆ibI".      # @see https://dev.twitter.com/docs/api/1.1/post/geo/place
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.;Fi[	I"9projects//twitter_proj/twitter/api/saved_searches.rb;TiI"˘      
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::SavedSearch>] The saved searches.;Fi[	@—i2I"9      # @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::SavedSearch] The saved searches.;Fi[	@—iAI"=      # @see https://dev.twitter.com/docs/api/1.1/post/saved_searches/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::SavedSearch] The created saved search.;Fi[	@—iQI"L      # @note The search specified by ID must be owned by the authenticating user.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::SavedSearch>] The deleted saved searches.;Fi[	I"1projects//twitter_proj/twitter/api/search.rb;TiI"±      # @note Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param q [String] A search term.;Fi[	I"9projects//twitter_proj/twitter/api/spam_reporting.rb;TiI"4      # @see https://dev.twitter.com/docs/api/1.1/post/users/report_spam
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The reported users.;Fi[	I":projects//twitter_proj/twitter/api/suggested_users.rb;TiI"      # @return [Array<Twitter::Suggestion>]
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @overload suggestions(options={});Fi[	I"4projects//twitter_proj/twitter/api/timelines.rb;TiI"      # @note This method can only return up to 800 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@„i+I"      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@„iCI"      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@„i[I"      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@„ipI"(      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@„iÇI"(      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@„ióI"&      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets_of_me
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	I"1projects//twitter_proj/twitter/api/trends.rb;TiI"      # @see https://dev.twitter.com/docs/api/1.1/get/trends/place
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param id [Integer] The {https://developer.yahoo.com/geo/geoplanet Yahoo! Where On Earth ID} of the location to return trending information for. WOEIDs can be retrieved by calling {Twitter::API::Trends#trend_locations}. Global information is available by using 1 as the WOEID.;Fi[	@Úi'I"4      # @see https://dev.twitter.com/docs/api/1.1/get/trends/available
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.;Fi[	@Úi7I"2      # @see https://dev.twitter.com/docs/api/1.1/get/trends/closest
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.;Fi[	I"1projects//twitter_proj/twitter/api/tweets.rb;TiI"$      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@˘i%I"      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array];Fi[	@˘i9I".      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.;Fi[	@˘iII"6      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The requested Tweets.;Fi[	@˘i]I"=      # @note The authenticating user must be the author of the specified Tweets.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The deleted Tweets.;Fi[	@˘isI"h      # @note A status update with text identical to the authenticating user's current status will be ignored to prevent duplicates.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The created Tweet.;Fi[	@˘iÉI"W      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The original tweets with retweet details embedded.;Fi[	@˘iπI"[      # @note A status update with text/media identical to the authenticating user's current status will NOT be ignored
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The created Tweet.;Fi[	@˘iœI"8      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::OEmbed] OEmbed for the requested Tweet.;Fi[	@˘iÂI"A      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::OEmbed>] OEmbeds for the requested Tweets.;Fi[	I"7projects//twitter_proj/twitter/api/undocumented.rb;TiI"˜      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array] An array of actions;Fi[	@i2I"”      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      #;Fi[	@iPI"      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.;Fi[	@icI"	      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The requested Tweets.;Fi[	I"0projects//twitter_proj/twitter/api/users.rb;TiI"      # @see https://dev.twitter.com/docs/api/1.1/get/account/settings
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Settings];Fi[	@i.I"9      # @see https://dev.twitter.com/docs/api/1.1/get/account/verify_credentials
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.;Fi[	@i?I"=      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_delivery_device
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.;Fi[	@iOI"!      # @note Only the options specified will be updated.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.;Fi[	@iaI"F      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile_background_image
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.;Fi[	@iqI"<      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile_colors
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.;Fi[	@iÅI"      # @note This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.;Fi[	@iêI"P      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] User objects that the authenticating user is blocking.;Fi[	@iüI"?      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array] Numeric user ids the authenticating user is blocking.;Fi[	@i∞I"Y      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Boolean] true if the authenticating user is blocking the target user, otherwise false.;Fi[	@iÃI"0      # @note Destroys a friendship to the blocked user if it exists.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The blocked users.;Fi[	@iﬂI"2      # @see https://dev.twitter.com/docs/api/1.1/post/blocks/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The un-blocked users.;Fi[	@iÚI"/      # @see https://dev.twitter.com/docs/api/1.1/get/users/lookup
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The requested users.;Fi[	@iI"%      # @see https://dev.twitter.com/docs/api/1.1/get/users/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The requested user.;Fi[	@i+I"¸      #
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Boolean] true if the user exists, otherwise false.;Fi[	@i@I"      # @see https://dev.twitter.com/docs/api/1.1/get/users/search
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>];Fi[	@iQI"       # @see https://dev.twitter.com/docs/api/1.1/get/users/contributees
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>];Fi[	@ihI"       # @see https://dev.twitter.com/docs/api/1.1/get/users/contributors
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>];Fi[	@iI"      # @see https://dev.twitter.com/docs/api/1.1/post/account/remove_profile_banner
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [nil];Fi[	@i•I"9      # @note If the user has not uploaded a profile banner, a HTTP 404 will be served instead.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::ProfileBanner];Fi[	I"when "LITERAL" then;F@Fi[[[[	I"6projects//backup_proj/backup/notifier/campfire.rb;Ti1I"~      def function(var)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Ci3I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Ci5I"o        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	I"3projects//backup_proj/backup/notifier/prowl.rb;Ti/I"~      def function(var)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Ji1I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Ji3I"o        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	I"6projects//backup_proj/backup/notifier/pushover.rb;Ti9I"~      def function(var)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Qi;I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Qi=I"o        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	I"5projects//backup_proj/backup/notifier/twitter.rb;Ti-I"~      def function(var)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Xi/I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Xi1I"o        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	I"Mprojects//compass_proj/compass/sass_extensions/functions/inline_image.rb;Ti'I"f    return var if var
    case var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i)I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i+I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i-I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i/I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i1I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i3I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i5I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i7I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@_i9I"[    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	I")projects//homebrew_proj/blacklist.rb;TiI"e  when "STRING" then
    "STRING".undent
  when "LITERAL" then
    "STRING"
  when "STRING" then;Fi[	I"*projects//homebrew_proj/cmd/update.rb;TièI"y      when "LITERAL" then
        File.basename(var, "STRING")
      when "LITERAL" then
        "STRING"
      else;Fi[	I"1projects//homebrew_proj/download_strategy.rb;Ti"I"π        safe_system(@@git, "STRING", "STRING", @url)
        safe_system(@@git, "STRING", "STRING", case @spec
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@zi$I"o        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	I"(projects//homebrew_proj/hardware.rb;Ti.I"  def self.cores_as_words
    case Hardware.processor_count
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@i0I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@i2I"[    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	I"+projects//homebrew_proj/macos/xcode.rb;TiI"i  def function
    case MacOS.version
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@Üi I"[    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	@ÜiPI"û    raise if ($1.nil? or $?.success?.!)
    $1) rescue case MacOS.llvm_build_version.to_i
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@ÜiRI"t      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@ÜiTI"t      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@ÜiVI"t      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@ÜiXI"t      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@ÜiZI"e      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else;Fi[	@Üi^I"é      else
        case (MacOS.clang_version.to_f * "LITERAL").to_i
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Üi`I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜibI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜidI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜifI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜihI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜijI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜilI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜinI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜipI"o        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@ÁiI"ç      if (prefix.to_s == "STRING") then
        case MacOS.version
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÁiI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÁiI"o        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	I",projects//homebrew_proj/requirements.rb;Ti/I"e  def function
    case @language
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@±i1I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@±i3I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@±i5I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@±i7I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@±i9I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@±i;I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@±i=I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@±i?I"[    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	I"1projects//homebrew_proj/test/test_formula.rb;TiZI"ò    assert_equal("LITERAL", var.devel.checksum.hash_type)
    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@ƒi\I"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@ƒi^I"[    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	@ƒiÒI"è    assert_equal("LITERAL", var.bottle.revision)
    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@ƒiÛI"j    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@ƒiıI"[    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	I",projects//jekyll_proj/jekyll/filters.rb;TiwI"t      var = "STRING"
      case var.length
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@—i{I"p      when "LITERAL" then
        var["LITERAL"].to_s
      when "LITERAL" then
        "STRING"
      else;Fi[	@izI"    def function
      case self.site.permalink_style
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@i|I"t      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@i~I"e      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else;Fi[	I":projects//nokogiri_proj/nokogiri/css/xpath_visitor.rb;TiI"£        return self.send(var, var) if self.respond_to?(var)
        case var.value.first
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹iI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹iI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹iI"ë            (var == "LITERAL") ? ("STRING") : ("STRING")
          end
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹i!I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹i#I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹i%I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹i'I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹i)I"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹iMI"é        when "LITERAL" then
          ((var + "STRING") + "STRING")
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹iOI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹iQI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@‹iSI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	I"Bprojects//twitter_proj/twitter/request/multipart_with_file.rb;TiI"x      def function(var)
        case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@˜iI"~        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@˜iI"o        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	I"# @rate_limited Yes;F@eiO[O[	@iiI"ù      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@ii%I"¢      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/sent
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@ii8I"¢      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iiFI"^      
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@viI"¸      
      # @see https://dev.twitter.com/docs/api/1.1/get/favorites/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}iI"˘      
      # @see https://dev.twitter.com/docs/api/1.1/get/friends/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}i*I"˚      
      # @see https://dev.twitter.com/docs/api/1.1/get/followers/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}iEI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/lookup
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}i[I"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/incoming
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}ijI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/outgoing
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}i–I"ˇ      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}iÍI"ˇ      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}i¸I"˝      #
      # @see https://dev.twitter.com/docs/api/1.1/get/followers/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}iI"ˇ      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}i<I"      # =>
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/no_retweets/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@öiI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/help/configuration
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@öiI"˝      #
      # @see https://dev.twitter.com/docs/api/1.1/get/help/languages
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@öi*I"˚      #
      # @see https://dev.twitter.com/docs/api/1.1/get/help/privacy
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@öi7I"˜      #
      # @see https://dev.twitter.com/docs/api/1.1/get/help/tos
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iI"˘      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£i/I"˝      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/statuses
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iqI"       #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/memberships
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iÖI"       #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/subscribers
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iπI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/subscribers/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£i,I"¸      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/members
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£i±I"S      # @see https://dev.twitter.com/docs/api/1.1/get/lists/show
      # @note Private lists will only be shown if the authenticated user owns the specified list.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iÀI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/subscriptions
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@∆iI"ˇ      #
      # @see https://dev.twitter.com/docs/api/1.1/get/geo/id/:place_id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@∆iI"b      # @see https://dev.twitter.com/docs/api/1.1/get/geo/reverse_geocode
      # @note This request is an informative call and will deliver generalized results about geography.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@∆i2I"˘      #
      # @see https://dev.twitter.com/docs/api/1.1/get/geo/search
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@∆iLI")      # @see https://dev.twitter.com/docs/api/1.1/get/geo/similar_places
      # @note Conceptually, you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to {Twitter::API::PlacesAndGeo#place} to create a new one. The token contained in the response is the token necessary to create a new place.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@∆iaI"˘      #
      # @see https://dev.twitter.com/docs/api/1.1/post/geo/place
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@—iI"⁄      include(Twitter::API::Utils)
      
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@—i1I"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@⁄iI"ø      # @see https://dev.twitter.com/docs/using-search
      # @note Please note that Twitter's search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@›iI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/users/report_spam
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@‡iI"‰      
      # @return [Array<Twitter::Suggestion>]
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@‡i-I"Ë      #
      # @see https://dev.twitter.com/docs/api/1.1/get/users/suggestions/:slug/members
      # @rate_limited Yes
      # @authentication Requires user context
      # @param slug [String] The short name of list or a category.;Fi[	@„iI"=      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/mentions_timeline
      # @note This method can only return up to 800 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@„i*I";      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@„iBI";      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@„iZI";      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@„ioI"M      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@„iÅI"M      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@„iñI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets_of_me
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@ÚiI"˚      #
      # @see https://dev.twitter.com/docs/api/1.1/get/trends/place
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@Úi&I"ˇ      #
      # @see https://dev.twitter.com/docs/api/1.1/get/trends/available
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@Úi6I"˝      #
      # @see https://dev.twitter.com/docs/api/1.1/get/trends/closest
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘iI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘i$I"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘i8I"       #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘iHI"       #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘iÇI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘iúI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::AlreadyRetweeted] Error raised when tweet has already been retweeted.;Fi[	@˘iŒI"˛      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘i‰I"˛      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iI"”      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@i#I"‘      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid./;Fi[	@i1I"“      
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iOI"”      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@ibI"”      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iI"?      # @see https://dev.twitter.com/docs/api/1.1/post/account/settings
      # @see https://dev.twitter.com/docs/api/1.1/get/account/settings
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@i-I"	      #
      # @see https://dev.twitter.com/docs/api/1.1/get/account/verify_credentials
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@ièI"˙      #
      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iûI"˘      #
      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iØI"˘      #
      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iÀI";      # @see https://dev.twitter.com/docs/api/1.1/post/blocks/create
      # @note Destroys a friendship to the blocked user if it exists.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iÒI"˚      #
      # @see https://dev.twitter.com/docs/api/1.1/get/users/lookup
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iI"¯      
      # @see https://dev.twitter.com/docs/api/1.1/get/users/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@i*I"Í      # Returns true if the specified user exists
      #
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@i?I"˚      #
      # @see https://dev.twitter.com/docs/api/1.1/get/users/search
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iPI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/users/contributees
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@igI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/users/contributors
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@i§I"[      # @see https://dev.twitter.com/docs/api/1.1/get/users/profile_banner
      # @note If the user has not uploaded a profile banner, a HTTP 404 will be served instead.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@F@@iK[K[	@Ci2I"y        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Ci4I"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Ji0I"y        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Ji2I"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Qi:I"y        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Qi<I"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Xi.I"y        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Xi0I"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@_i(I"_    case var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@_i*I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@_i,I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@_i.I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@_i0I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@_i2I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@_i4I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@_i6I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@_i8I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	I"*projects//homebrew_proj/cmd/search.rb;TiI"y        var = case var
        when nil then
          "STRING"
        when "LITERAL" then
          Regexp.new($1);Fi[	@zi#I"ó        safe_system(@@git, "STRING", "STRING", case @spec
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@i/I"t    case Hardware.processor_count
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@i1I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@ÜiI"i    case MacOS.version
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@ÜiQI"á    $1) rescue case MacOS.llvm_build_version.to_i
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ÜiSI"k        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ÜiUI"k        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ÜiWI"k        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ÜiYI"k        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@Üi_I"ñ        case (MacOS.clang_version.to_f * "LITERAL").to_i
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜiaI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜicI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜieI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜigI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜiiI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜikI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜimI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜioI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÁiI"}        case MacOS.version
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÁiI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@±i0I"e    case @language
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@±i2I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@±i4I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@±i6I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@±i8I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@±i:I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@±i<I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@±i>I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@ƒi[I"r    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@ƒi]I"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@ƒiÚI"r    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@ƒiÙI"a      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	I"'projects//homebrew_proj/version.rb;TiI"j      "STRING"
    when "STRING", "STRING" then
      "STRING"
    when "LITERAL" then
      var.to_i;Fi[	@—ixI"{      case var.length
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        var["LITERAL"].to_s;Fi[	@i{I"      case self.site.permalink_style
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@i}I"k        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@‹iI"        case var.value.first
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹iI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹iI"Ã          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          if var.value["LITERAL"].is_a?(Nokogiri::CSS::Node) and (var.value["LITERAL"].type == "LITERAL") then;Fi[	@‹i I"p          end
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹i"I"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹i$I"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹i&I"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹i(I"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹i*I"â          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          var.value["LITERAL"].accept(self);Fi[	@‹iNI"Ö          ((var + "STRING") + "STRING")
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹iPI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹iRI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@‹iTI"}          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          ("STRING" + "STRING");Fi[	@˜iI"s        case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@˜iI"u          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	I"-projects//whenever_proj/whenever/cron.rb;TiGI"~        var = case @time
        when *KEYWORDS then
          "STRING"
        when "LITERAL" then
          "LITERAL".months;Fi[	I"#     end;F@iI[I[	@i/I"t      #     def clear_attribute(attr)
      #       send("#{attr}=", nil)
      #     end
      #   end
      #;Fi[	@iSI"u      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #;Fi[	@iwI"n      #     def reset_attribute_to_default!(attr)
      #       ...
      #     end
      #   end
      #;Fi[	@ièI"u      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #;Fi[	@i∑I"r      #     def clear_attribute(attr)
      #       ...
      #     end
      #   end
      def function(var);Fi[	@i”I"u      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #;Fi[	@iˆI"u      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #;Fi[	@+i+I"¶    #     def self.before_create( obj )
    #       # obj is the MyModel instance that the callback is being called on
    #     end
    #   end
    def function(var);Fi[	@7iI"|    #     def initialize
    #       @errors = ActiveModel::Errors.new(self)
    #     end
    #   end
    def function(var);Fi[	@?iÄI"K    #   module Foo
    #     class Bar
    #     end
    #   end
    #;Fi[	@[iI"_    #     def capitalized_name
    #       name.capitalize
    #     end
    #   end
    #;Fi[	@[iLI"ß    #     def read_attribute_for_serialization(key)
    #       @data[key]
    #     end
    #   end
    # Add associations specified via the <tt>:include</tt> option.;Fi[	@^isI"c      #     def attributes
      #       instance_values
      #     end
      #   end
      #;Fi[	@aiœI"c      #     def attributes
      #       instance_values
      #     end
      #   end
      #;Fi[	@ji!I"q        #     def remove_whitespaces
        #       name.strip!
        #     end
        #   end
        #;Fi[	@jiCI"y        #     def set_status
        #       self.status = errors.empty?
        #     end
        #   end
        #;Fi[	@Äi!I"«      #       record.errors.add attribute, (options[:message] || "is not an email") unless
      #         value =~ /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i
      #     end
      #   end
      #;Fi[	@âiVI"ò      #     def validate(record)
      #       options[:my_custom_key] # => "my custom value"
      #     end
      #   end
      def function(var, var);Fi[	@âiqI"n    #     def instance_validations
    #       validates_with MyValidator
    #     end
    #   end
    #;Fi[	@âi{I"{    #     def instance_validations
    #       validates_with MyValidator, MyOtherValidator
    #     end
    #   end
    #;Fi[	@ñi!I"“      #     validates_each :first_name, :last_name, allow_blank: true do |record, attr, value|
      #       record.errors.add attr, 'starts with z.' if value.to_s[0] == ?z
      #     end
      #   end
      #;Fi[	@ñiCI"≤      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #;Fi[	@ñiQI"≤      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #;Fi[	@ñi[I"™      #     validate do
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #;Fi[	@ñi"I"w    #     def read_attribute_for_validation(key)
    #       @data[key]
    #     end
    #   end
    def function;Fi[	@≠iÂI"c      #         'mary.smith@example.com'
      #       ]
      #     end
      #   end
      #;Fi[	@≠i
I"á      #       enc.passphrase = nil
      #       enc.passphrase_file = '/path/to/passphrase.file'
      #     end
      #   end
      #;Fi[	@…iôI"r    #     def self.default_url_options
    #       { :locale => I18n.locale }
    #     end
    #   end
    #;Fi[	@…iI"m    #     as :user do
    #       root :to => 'devise/registrations#new'
    #     end
    #   end
    #;Fi[	@Êi,I"c      #     configure do |c|
      #       c.foo = 'bar'
      #     end
      #   end
      #;Fi[	@ÏiI"L    #     def name
    #       @name
    #     end
    #   end
    #   ;Fi[	@ÏiI"\    #     def self.run(person)
    #       person.name
    #     end
    #   end
    # ;Fi[	@Òi"I"c    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	@ÒiGI"c    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	@ÒigI"c    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	@¯iSI"\    #         transition all => :off
    #       end
    #     end
    #   end
    #   ;Fi[	@¯iÄI"\    #         transition all => :off
    #       end
    #     end
    #   end
    #   ;Fi[	@˝iCI"[        #         end
        #       end
        #     end
        #   end
        # ;Fi[	@ iI"w        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   ;Fi[	@ i8I"        #     before_transition do |transition|
        #       # log message
        #     end
        #   end
        # ;Fi[	@ i\I"w        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   ;Fi[	@ ihI"m        #       block.call
        #       # track end time
        #     end
        #   end
        # ;Fi[	@ i{I"w        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   ;Fi[	@ iÖI"É        #     after_transition_failure :on => :ignite do
        #       # log failure
        #     end
        #   end
        # ;Fi[	@i?I"G    #         ...
    #       end
    #     end
    #   end
    # ;Fi[	@iKI"u    #     state_machine :status, :attribute => :status_value do
    #       ...
    #     end
    #   end
    # ;Fi[	@iSI"m    #     state_machine :status, :initial => :parked do
    #       ...
    #     end
    #   end
    # ;Fi[	@i[I"ö    #     state_machine :status, :initial => lambda {|vehicle| vehicle.speed == 0 ? :parked : :idling} do
    #       ...
    #     end
    #   end
    # ;Fi[	@iuI"g    #         transition :idling => :first_gear
    #       end
    #     end
    #   end
    #   ;Fi[	@i¶I"c    #         transition :idling => :parked
    #       end
    #     end
    #   end
    #   ;Fi[	@i€I"n    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #   end
    #   ;Fi[	@iÏI"K    #     
    #     def initialize
    #     end
    #   end
    #   ;Fi[	@iˇI"K    #       ...
    #       super()
    #     end
    #   end
    #   ;Fi[	@iI"]    #       ...
    #       initialize_state_machines
    #     end
    #   end
    #   ;Fi[	@i+I"I    #         ...
    #       end
    #     end
    #   end
    #   ;Fi[	@iHI"]    #         transition all => :idling
    #       end
    #     end
    #   end
    # ;Fi[	@i`I"u    #       state :parked, :value => 0
    #       start :idling, :value => 1
    #     end
    #   end
    #   ;Fi[	@ióI"\    #         transition all => :off
    #       end
    #     end
    #   end
    #   ;Fi[	@i“I"Z    #         transition all => :off
    #       end
    #     end
    #   end
    # ;Fi[	@/iI"h    #         transition all - :parked => :stalled
    #       end
    #     end
    #   end
    # ;Fi[	@/i/I"m    #         transition [:idling, :first_gear] => same
    #       end
    #     end
    #   end
    # ;Fi[	@4iI"w    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   ;Fi[	@4i,I"w    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   ;Fi[	@4iGI"w    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   ;Fi[	@;i'I"    #       transition :to => :idling, :on => [:ignite, :shift_up]                          # Transitions to :idling
    #       transition :from => [:idling, :parked], :on => :park, :unless => :seatbelt_on?  # Transitions to :parked if seatbelt is off
    #     end
    #   end
    # ;Fi[	@>i¥I"c    #     state_machine :action => :save do
    #       ...
    #     end
    #   end
    #   ;Fi[	@>iËI"c    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	@>iI"c    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	I"def function(var);FI"@var = var;FiF[F[	@7iI"U    #     end
    #   end
    def function(var)
      @var = var
      @var = {};Fi[	I",projects//backup_proj/backup/archive.rb;Ti8I"Ü    # Adds the given String of +options+ to the `tar` command.
    # e.g. '-h --xattrs'
    def function(var)
      @var = var
    end;Fi[	I"2projects//backup_proj/backup/database/base.rb;TiI"µ      # Creates a new instance of the MongoDB database object
      # * Called using super(model) from subclasses *
      def function(var)
        @var = var
        load_defaults!;Fi[	I"2projects//backup_proj/backup/notifier/base.rb;Ti!I"{      ##
      # Called with super(model) from subclasses
      def function(var)
        @var = var
        load_defaults!;Fi[	I"=projects//devise_proj/devise/controllers/rememberable.rb;TiI"Ç        delegate("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
        
        def function(var)
          @var = var
        end;Fi[	I"=projects//devise_proj/devise/controllers/scoped_views.rb;TiI"T        end
        
        def function(var)
          @var = var
        end;Fi[	@∆iI"ƒ      
      # Generates password encryption based on the given value.
      def function(var)
        @var = var
        self.encrypted_password = password_digest(@password) if @password.present?;Fi[	@áiI"t  module Models
    class MissingAttribute < StandardError
      def function(var)
        @var = var
      end;Fi[	I"4projects//devise_proj/devise/omniauth/config.rb;TiI"{  module OmniAuth
    class StrategyNotFound < NameError
      def function(var)
        @var = var
        super("STRING");Fi[	I"$projects//devise_proj/devise.rb;Ti˛I"E  
  class Getter
    def function(var)
      @var = var
    end;Fi[	I"8projects//diaspora_proj/models/signed_retraction.rb;TiBI"J  end
  
  def function(var)
    @var = var
    @var = var.class.to_s;Fi[	I";projects//diaspora_proj/presenters/aspect_presenter.rb;TiI"Sclass AspectPresenter < BasePresenter
  def function(var)
    @var = var
  end;Fi[	I"<projects//diaspora_proj/presenters/comment_presenter.rb;TiI"Tclass CommentPresenter < BasePresenter
  def function(var)
    @var = var
  end;Fi[	I"Hprojects//diaspora_proj/presenters/last_three_comments_decorator.rb;TiI"Nclass LastThreeCommentsDecorator
  def function(var)
    @var = var
  end;Fi[	I"<projects//diaspora_proj/presenters/service_presenter.rb;TiI"Tclass ServicePresenter < BasePresenter
  def function(var)
    @var = var
  end;Fi[	@“iI"d    attr_accessor("LITERAL")
    
    def function(var)
      @var = var
      @var = "LITERAL";Fi[	I"%projects//haml_proj/haml/exec.rb;TiI"†    class Generic
      # @param args [Array<String>] The command-line arguments
      def function(var)
        @var = var
        @var = { "LITERAL" => ({}) };Fi[	I"%projects//haml_proj/haml/util.rb;Ti∞I"Æ    class StaticConditionalContext
      # @param set [#include?] The set of variables that are defined for this context.
      def function(var)
        @var = var
      end;Fi[	I"'projects//homebrew_proj/caveats.rb;TiI"I  attr_reader("LITERAL")
  
  def function(var)
    @var = var
  end;Fi[	I")projects//homebrew_proj/cmd/audit.rb;TiJI"∂  BUILD_TIME_DEPS = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
  
  def function(var)
    @var = var
    @var = [];Fi[	I"*projects//homebrew_proj/cmd/create.rb;TiEI"^  attr("LITERAL", true)
  
  def function(var)
    @var = var
    var = Pathname.new(var);Fi[	I")projects//homebrew_proj/compilers.rb;Ti2I"b  attr_reader("LITERAL", "LITERAL")
  
  def function(var)
    @var = var
    @var = case var;Fi[	@iWI"è  NAMES = { "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => "STRING" }
  
  def function(var)
    @var = var
    @var = ENV.compiler;Fi[	@‰iI"P  attr("LITERAL")
  
  def function(var)
    @var = var
    super("STRING");Fi[	@‰iI"P  attr("LITERAL")
  
  def function(var)
    @var = var
    super("STRING");Fi[	@‰i*I"6  end
  
  def function(var)
    @var = var
  end;Fi[	@±imI"I  env("LITERAL")
  
  def function(var)
    @var = var
    @var = [];Fi[	@¸iñI"Mend
class VersionSchemeDetector
  def function(var)
    @var = var
  end;Fi[	I".projects//jekyll_proj/jekyll/converter.rb;TiI"a    #
    # Returns an initialized Converter.
    def function(var)
      @var = var
    end;Fi[	I"6projects//nokogiri_proj/nokogiri/css/tokenizer.rb;Ti$I"å      alias "LITERAL" "LITERAL"
      
      def function(var)
        @var = var
        open(var, "STRING") { |var| scan_setup(var.read) };Fi[	@‡inI"}        attr_reader("LITERAL")
        
        def function(var)
          @var = var
          super(("STRING" % var));Fi[	@‡iÅI"~        
        class JumpSAXHandler < SAXHandler
          def function(var)
            @var = var
            super();Fi[	@‡i±I"]        end
        
        def function(var)
          @var = var
          @var = nil;Fi[	I">projects//nokogiri_proj/nokogiri/xml/node/save_options.rb;Ti4I"ß        # Integer representation of the SaveOptions
        # Create a new SaveOptions object with +options+
        def function(var)
          @var = var
        end;Fi[	I":projects//nokogiri_proj/nokogiri/xml/parse_options.rb;TiOI"´      # the default options used for parsing XML documents
      # the default options used for parsing HTML documents
      def function(var)
        @var = var
      end;Fi[	I"5projects//omni_proj/omniauth/failure_endpoint.rb;TiI"@    end
    
    def function(var)
      @var = var
    end;Fi[	I"7projects//omni_proj/omniauth/test/phony_session.rb;TiI"Pclass OmniAuth::Test::PhonySession
  def function(var)
    @var = var
  end;Fi[	I"@projects//paperclip_proj/paperclip/content_type_detector.rb;TiI"X    SENSIBLE_DEFAULT = "STRING"
    
    def function(var)
      @var = var
    end;Fi[	I"Mprojects//paperclip_proj/paperclip/file_command_content_type_detector.rb;Ti	I"X    SENSIBLE_DEFAULT = "STRING"
    
    def function(var)
      @var = var
    end;Fi[	I"Dprojects//paperclip_proj/paperclip/geometry_detector_factory.rb;TiI"omodule Paperclip
  class GeometryDetector
    def function(var)
      @var = var
      raise_if_blank_file;Fi[	I"Bprojects//paperclip_proj/paperclip/geometry_parser_factory.rb;Ti	I"O    FORMAT = "LITERAL"
    
    def function(var)
      @var = var
    end;Fi[	I"Cprojects//paperclip_proj/paperclip/io_adapters/file_adapter.rb;TiI"}module Paperclip
  class FileAdapter < AbstractAdapter
    def function(var)
      @var = var
      cache_current_values;Fi[	I"Gprojects//paperclip_proj/paperclip/io_adapters/stringio_adapter.rb;TiI"|module Paperclip
  class StringioAdapter < AbstractAdapter
    def function(var)
      @var = var
      cache_current_values;Fi[	I"Lprojects//paperclip_proj/paperclip/io_adapters/uploaded_file_adapter.rb;TiI"Ämodule Paperclip
  class UploadedFileAdapter < AbstractAdapter
    def function(var)
      @var = var
      cache_current_values;Fi[	I"Bprojects//paperclip_proj/paperclip/io_adapters/uri_adapter.rb;TiI"module Paperclip
  class UriAdapter < AbstractAdapter
    def function(var)
      @var = var
      @var = download_content;Fi[	I"1projects//paperclip_proj/paperclip/logger.rb;TiI"@    end
    
    def function(var)
      @var = var
    end;Fi[	@)iI"j      
      class HaveAttachedFileMatcher
        def function(var)
          @var = var
        end;Fi[	@)iI"~        end
        
        def function(var)
          @var = var
          @var = @subject.class unless Class.===(@subject);Fi[	@0iI"      
      class ValidateAttachmentContentTypeMatcher
        def function(var)
          @var = var
          @var = [];Fi[	@0i&I"~        end
        
        def function(var)
          @var = var
          @var = @subject.new if (@subject.class == Class);Fi[	@5iI"t      
      class ValidateAttachmentPresenceMatcher
        def function(var)
          @var = var
        end;Fi[	@5iI"y        end
        
        def function(var)
          @var = var
          @var = var.new if (var.class == Class);Fi[	@<iI"p      
      class ValidateAttachmentSizeMatcher
        def function(var)
          @var = var
        end;Fi[	@<iI"W        end
        
        def function(var)
          @var = var
          self;Fi[	@<i I"W        end
        
        def function(var)
          @var = var
          self;Fi[	@<i*I"~        end
        
        def function(var)
          @var = var
          @var = @subject.new if (@subject.class == Class);Fi[	I";projects//paperclip_proj/paperclip/tempfile_factory.rb;Ti	I"á    ILLEGAL_FILENAME_CHARACTERS = "LITERAL"
    
    def function(var)
      @var = var
      var = Tempfile.new([basename, extension]);Fi[	I"5projects//sinatra_proj/sinatra/showexceptions.rb;TiI"W    end
    
    def function(var)
      @var = var
      @var = ERB.new(TEMPLATE);Fi[	I"Bprojects//state_machine_proj/state_machine/node_collection.rb;Ti8I"Ô    # Changes the current machine associated with the collection.  In turn, this
    # will change the state machine associated with each node in the collection.
    def function(var)
      @var = var
      each { |var| var.machine = var };Fi[	@;iI"ø    # The state that must be present in an object for this context to be active
    # Creates a new context for the given state
    def function(var)
      @var = var
      @var = var.machine;Fi[	I"+projects//twitter_proj/twitter/base.rb;Ti:I"k    # @param attrs [Hash]
    # @return [Twitter::Base]
    def function(var)
      @var = var
    end;Fi[	I"1projects//twitter_proj/twitter/rate_limit.rb;TiI"[    
    # @return [Twitter::RateLimit]
    def function(var)
      @var = var
    end;Fi[	@[iI"_    end
    
    def function(var)
      @var = var
      @options["LITERAL"] ||= "STRING";Fi[	I",projects//whenever_proj/whenever/job.rb;Ti
I"y    attr_reader("LITERAL", "LITERAL")
    
    def function(var)
      @var = var
      @var = var.delete("LITERAL");Fi[	@biI"_  module Output
    class Redirection
      def function(var)
        @var = var
      end;Fi[	@≤@≤iD[D[	@CibI"£        # necessary arguments (@room_id, @subdomain, @api_token)
        def function(var, var, var)
          @var = var
          @var = var
          @var = var;Fi[	@CicI"s        def function(var, var, var)
          @var = var
          @var = var
          @var = var
        end;Fi[	I"-projects//backup_proj/backup/splitter.rb;Ti
I"N    
    def function(var, var)
      @var = var
      @var = var
    end;Fi[	I"1projects//backup_proj/backup/storage/base.rb;TiI"h      def function(var, var)
        load_defaults!
        @var = var
        @var = var
      end;Fi[	@ÅiI"l      
      def function(var, var, var)
        @var = var
        @var = var
        @var = Dir.getwd;Fi[	I":projects//compass_proj/compass/installers/manifest.rb;TiRI"l      def function(var, var)
        if var then
          @var = var
          @var = var
        else;Fi[	I"Bprojects//compass_proj/compass/installers/template_context.rb;TiI"X      
      def function(var, var)
        @var = var
        @var = var
      end;Fi[	I"Iprojects//compass_proj/compass/sass_extensions/sprites/sprite_map.rb;Ti$I"z        
        def function(var, var, var, var, var)
          @var = var
          @var = var
          @var = var;Fi[	@ri%I"Å        def function(var, var, var, var, var)
          @var = var
          @var = var
          @var = var
          @var = var;Fi[	@ri&I"ê          @var = var
          @var = var
          @var = var
          @var = var
          @kwargs["STRING"] ||= Sass::Script::Bool.new(true);Fi[	@ iI"Ö      
      def function(var, var)
        @var = var
        @var = var
        @var = @args.last.is_a?(Hash) ? (@args.last) : ({});Fi[	I"0projects//diaspora_proj/mailers/notifier.rb;Ti&I"\  
  def function(var, var, var, var, var)
    @var = var
    @var = var
    @var = var;Fi[	@{i'I"h  def function(var, var, var, var, var)
    @var = var
    @var = var
    @var = var
    @var = var;Fi[	@{i(I"    @var = var
    @var = var
    @var = var
    @var = var
    var = { "LITERAL" => (var), "LITERAL" => (AppConfig.mail.sender_address), "LITERAL" => (I18n.t("STRING", "LITERAL" => (@inviter.name))), "LITERAL" => (AppConfig.pod_uri.host) };Fi[	I"Aprojects//diaspora_proj/presenters/extreme_post_presenter.rb;TiI"\class ExtremePostPresenter
  def function(var, var)
    @var = var
    @var = var
  end;Fi[	I"<projects//diaspora_proj/presenters/o_embed_presenter.rb;TiI"D  
  def function(var, var)
    @var = var
    @var = var
  end;Fi[	I";projects//diaspora_proj/presenters/person_presenter.rb;TiI"Wclass PersonPresenter
  def function(var, var)
    @var = var
    @var = var
  end;Fi[	I"9projects//diaspora_proj/presenters/post_presenter.rb;Ti
I"D  
  def function(var, var)
    @var = var
    @var = var
  end;Fi[	@ãiEI"`class PostInteractionPresenter
  def function(var, var)
    @var = var
    @var = var
  end;Fi[	@œiVI"s    def function(var, var)
      @var = true
      @var = var
      @var = var
      @var = new_encoded_string;Fi[	@‰iÉI"c  
  def function(var, var)
    @var = var
    @var = var
    @var = var.hash_type.to_s.upcase;Fi[	I"1projects//homebrew_proj/formula_installer.rb;TiI"O  
  def function(var, var)
    @var = var
    @var = var
    @var = false;Fi[	I"/projects//homebrew_proj/formula_support.rb;TiI"L  
  def function(var, var)
    @var = var
    @var = var
    @var = [];Fi[	@óiiI"V  
  def function(var, var)
    @var = var
    @var = var
    @var = case @reason;Fi[	I"'projects//homebrew_proj/patches.rb;TiBI"a  # Used by audit
  def function(var, var, var)
    @var = var
    @var = var
    @var = nil;Fi[	@±i	I"[  
  def function(var, var, var)
    @var = var
    @var = var
    @var = (var or var);Fi[	@±iôI"ñ  # The user can chose to force installation even in the face of conflicts.
  def function(var, var, var)
    @var = var
    @var = var
    @var = var;Fi[	@±iöI"U  def function(var, var, var)
    @var = var
    @var = var
    @var = var
  end;Fi[	I"+projects//jekyll_proj/jekyll/layout.rb;TiI"Ö    # name - The String filename of the post file.
    def function(var, var, var)
      @var = var
      @var = var
      @var = var;Fi[	@•iI"l    def function(var, var, var)
      @var = var
      @var = var
      @var = var
      self.data = {};Fi[	@ÌiI"Ö    # name - The String filename of the file.
    def function(var, var, var, var)
      @var = var
      @var = var
      @var = var;Fi[	@ÌiI"m    def function(var, var, var, var)
      @var = var
      @var = var
      @var = var
      @var = var;Fi[	@ÌiI"`      @var = var
      @var = var
      @var = var
      @var = var
      self.process(var);Fi[	I"0projects//jekyll_proj/jekyll/static_file.rb;TiI"Ö    # name - The String filename of the file.
    def function(var, var, var, var)
      @var = var
      @var = var
      @var = var;Fi[	@∞iI"m    def function(var, var, var, var)
      @var = var
      @var = var
      @var = var
      @var = var;Fi[	@∞iI"P      @var = var
      @var = var
      @var = var
      @var = var
    end;Fi[	I"1projects//nokogiri_proj/nokogiri/css/node.rb;TiI"~      # Create a new Node with +type+ and +value+
      def function(var, var)
        @var = var
        @var = var
      end;Fi[	I"=projects//nokogiri_proj/nokogiri/html/sax/push_parser.rb;Ti
I"õ      class PushParser
        def function(var, var, var)
          @var = var
          @var = var
          @var = HTML::SAX::Parser.new(var, @encoding);Fi[	I"4projects//nokogiri_proj/nokogiri/xml/builder.rb;TiÇI"q      class NodeBuilder
        def function(var, var)
          @var = var
          @var = var
        end;Fi[	I"7projects//nokogiri_proj/nokogiri/xml/sax/parser.rb;Ti/I"}        def function(var, var)
          check_encoding(var)
          @var = var
          @var = var
          @var = false;Fi[	I"<projects//nokogiri_proj/nokogiri/xml/sax/push_parser.rb;TiI"©        # an optional +file_name+ and +encoding+
        def function(var, var, var)
          @var = var
          @var = var
          @var = XML::SAX::Parser.new(var);Fi[	I"5projects//paperclip_proj/paperclip/attachment.rb;Ti,I"∑    # +escape_url+ - Perform URI escaping to URLs. Defaults to true
    def function(var, var, var)
      @var = var
      @var = var
      var = self.class.default_options.merge(var);Fi[	I"4projects//paperclip_proj/paperclip/processor.rb;Ti
I"\    
    def function(var, var, var)
      @var = var
      @var = var
      @var = var;Fi[	@…iI"_    def function(var, var, var)
      @var = var
      @var = var
      @var = var
    end;Fi[	I"0projects//paperclip_proj/paperclip/style.rb;TiI"Ç    # can be string, array or hash
    def function(var, var, var)
      @var = var
      @var = var
      if var.is_a?(Hash) then;Fi[	I"8projects//paperclip_proj/paperclip/url_generator.rb;Ti	I"^  class UrlGenerator
    def function(var, var)
      @var = var
      @var = var
    end;Fi[	I"1projects//rescue_proj/resque/failure/base.rb;TiI"ô      # The payload object associated with the failed job
      def function(var, var, var, var)
        @var = var
        @var = var
        @var = var;Fi[	@‘iI"w      def function(var, var, var, var)
        @var = var
        @var = var
        @var = var
        @var = var;Fi[	@‘iI"Z        @var = var
        @var = var
        @var = var
        @var = var
      end;Fi[	I"(projects//rescue_proj/resque/job.rb;TiI"{    # This job's associated payload object.
    def function(var, var)
      @var = var
      @var = var
      @var = false;Fi[	I"*projects//rescue_proj/resque/queue.rb;TiI"`      @var = var
      @var = "STRING"
      @var = var
      @var = var
      @var = false;Fi[	I"8projects//state_machine_proj/state_machine/event.rb;Ti4I"∞    def function(var, var, var)
      assert_valid_keys(var, "LITERAL")
      @var = var
      @var = var
      @var = var.namespace ? (:"#{var}STRING#{var.namespace}") : (var);Fi[	I"@projects//state_machine_proj/state_machine/helper_module.rb;TiI"g  class HelperModule < Module
    def function(var, var)
      @var = var
      @var = var
    end;Fi[	I"7projects//state_machine_proj/state_machine/path.rb;TiI"ê    def function(var, var, var)
      assert_valid_keys(var, "LITERAL", "LITERAL")
      @var = var
      @var = var
      @var = var["LITERAL"];Fi[	I"Bprojects//state_machine_proj/state_machine/path_collection.rb;Ti!I"˘      var = { "LITERAL" => (false), "LITERAL" => (var.states.match!(var).name) }.merge(var)
      assert_valid_keys(var, "LITERAL", "LITERAL", "LITERAL", "LITERAL")
      @var = var
      @var = var
      @var = var.states.fetch(var["LITERAL"]).name;Fi[	I"8projects//state_machine_proj/state_machine/state.rb;Ti=I"‰    def function(var, var, var)
      assert_valid_keys(var, "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL")
      @var = var
      @var = var
      @var = var and var.namespace ? (:"#{var.namespace}STRING#{var}") : (var);Fi[	@>iRI"â    # Creates a new, specific transition
    def function(var, var, var, var, var, var)
      @var = var
      @var = var
      @var = [];Fi[	I"-projects//twitter_proj/twitter/cursor.rb;TiI"Å    # @return [Twitter::Cursor]
    def function(var, var, var, var, var, var)
      @var = var
      @var = var
      @var = var;Fi[	@ÚiI"w    def function(var, var, var, var, var, var)
      @var = var
      @var = var
      @var = var
      @var = var;Fi[	@ÚiI"õ      @var = var
      @var = var
      @var = var
      @var = var
      @var = Array(var[var.to_sym]).map { |var| var ? (var.fetch_or_new(var)) : (var) };Fi[	@#iI"f      
      def function(var, var, var)
        @var = var
        @var = var
        @var = var;Fi[	@#iI"É      def function(var, var, var)
        @var = var
        @var = var
        @var = var
        @var = if var.is_a?(String) then;Fi[	I"1projects//whenever_proj/whenever/job_list.rb;Ti&I"R    
    def function(var, var)
      @var = var
      @var = var
      yield;Fi[	I"puts("STRING");F@ i@[@[	I"0projects//backup_proj/backup/cli/utility.rb;Ti©I"u        unless options.any? then
          puts
          puts("STRING")
          puts("STRING")
          puts;Fi[	@i¨I"m          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          puts;Fi[	@iØI"m          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          exit;Fi[	@i∑I"|            puts
            puts(var)
            puts("STRING")
            puts("STRING")
            puts("STRING");Fi[	@i∏I"Å            puts(var)
            puts("STRING")
            puts("STRING")
            puts("STRING")
            puts("STRING");Fi[	@iπI"~            puts("STRING")
            puts("STRING")
            puts("STRING")
            puts("STRING")
          end;Fi[	@iøI"|        if options["LITERAL"] then
          puts
          puts("STRING")
          puts("STRING")
          puts("STRING");Fi[	@i¿I"w          puts
          puts("STRING")
          puts("STRING")
          puts("STRING")
          puts("STRING");Fi[	@i¡I"€          puts("STRING")
          puts("STRING")
          puts("STRING")
          puts("STRING")
          puts(`gem install #{options["LITERAL"]}STRING#{Backup::Dependency.all[options["LITERAL"]]["LITERAL"]}STRING`);Fi[	I"3projects//compass_proj/compass/dependencies.rb;TiI"[    require("sass")
  rescue LoadError
    puts("STRING")
    puts("STRING")
    raise;Fi[	I"%projects//homebrew_proj/build.rb;Ti^I"Ç    if ARGV.flag?("STRING") then
      ohai("STRING")
      puts("STRING")
      puts("STRING")
      if ARGV.flag?("STRING") then;Fi[	@iaI"|      puts("STRING")
      if ARGV.flag?("STRING") then
        puts("STRING")
        puts("STRING")
        puts("STRING");Fi[	@ibI"v      if ARGV.flag?("STRING") then
        puts("STRING")
        puts("STRING")
        puts("STRING")
      end;Fi[	@ﬁigI"é  # we try to keep output minimal
  def function
    puts("STRING")
    puts("STRING")
    puts("STRING") if HOMEBREW_PREFIX.to_s.!=("STRING");Fi[	@ﬁisI"t      puts("STRING") if gcc_40
      puts("STRING") if gcc_42
      puts("STRING")
      puts("STRING")
    end;Fi[	@ﬁiÄI"O  
  def function
    puts("STRING")
    puts("STRING")
    puts("STRING");Fi[	@ﬁiÅI"_  def function
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING");Fi[	@ﬁiÇI"c    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING");Fi[	@ﬁiÉI"c    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts(hardware);Fi[	@ﬁiãI"Ü    puts("STRING") if gcc_40
    puts("STRING") if gcc_42
    puts("STRING")
    puts("STRING")
    puts("STRING") if macports_or_fink;Fi[	@ﬁiéI"w    puts("STRING")
    puts("STRING") if macports_or_fink
    puts("STRING")
    puts("STRING")
    puts("STRING");Fi[	@ﬁièI"w    puts("STRING") if macports_or_fink
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING");Fi[	@ﬁiêI"c    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING");Fi[	@ﬁiëI"V    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
  end;Fi[	I"*projects//homebrew_proj/cmd/bottle.rb;TiI"•      ohai("STRING")
      safe_system("STRING", "STRING", (var / var), "STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING") if (var > "LITERAL");Fi[	@6iI"u      puts("STRING")
      puts("STRING") if (var > "LITERAL")
      puts("STRING")
      puts("STRING")
    end;Fi[	I")projects//homebrew_proj/cmd/fetch.rb;TiI"á      next unless var.kind_of?(Pathname)
      puts("STRING") unless var
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@;iI"o      puts("STRING") unless var
      puts("STRING")
      puts("STRING")
      puts("STRING")
      begin;Fi[	I"+projects//homebrew_proj/cmd/install.rb;Ti:I"y    unless MacOS.macports_or_fink.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
    end;Fi[	I"'projects//homebrew_proj/cmd/irb.rb;TiI"v  def function
    if ARGV.include?("STRING") then
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@CiI"|    if ARGV.include?("STRING") then
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@CiI"a      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
    else;Fi[	I"'projects//homebrew_proj/cmd/tap.rb;Ti#I"Ñ    puts("STRING")
    curl("STRING", "STRING", "STRING") rescue puts
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@Ji$I"Ü    curl("STRING", "STRING", "STRING") rescue puts
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@Ji%I"c      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts;Fi[	@Ji(I"Y      puts("STRING")
      puts
      puts("STRING")
      puts("STRING")
      puts;Fi[	I"&projects//homebrew_proj/debrew.rb;Ti]I"Iend
def function(var, var)
  puts("STRING")
  puts("STRING")
  begin;Fi[	@ziÓI"ü    if (var["LITERAL"] == "LITERAL") and (var["LITERAL"] <= "LITERAL") then
      onoe("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@ziÔI"`      onoe("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
    end;Fi[	@îi“I"à    rescue Exception => var
      onoe("STRING")
      puts("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?;Fi[	@îiÁI"à    rescue Exception => var
      onoe("STRING")
      puts("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?;Fi[	@îiÛI"Å      if f.class.skip_clean_all? then
        opoo("STRING")
        puts("STRING")
        puts("STRING")
        puts("STRING");Fi[	@îiÙI"w        opoo("STRING")
        puts("STRING")
        puts("STRING")
        puts("STRING")
        puts("STRING");Fi[	@îiıI"o        puts("STRING")
        puts("STRING")
        puts("STRING")
        puts("STRING")
        return;Fi[	@îiI"}    if (f.prefix + "STRING").directory? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      @var = true;Fi[	@îi#I"}    if (f.prefix + "STRING").directory? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      @var = true;Fi[	@îi.I"s    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îi/I"m      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îi0I"m      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îi1I"h      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts(var);Fi[	@îiAI"n    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var);Fi[	@îiMI"n    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var);Fi[	@îiYI"n    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var);Fi[	@óiI"Ü    rescue ChecksumMissingError
      opoo("STRING")
      puts("STRING")
      puts("STRING")
    rescue ChecksumMismatchError => var;Fi[	I"3projects//jekyll_proj/jekyll/commands/build.rb;TiI"      rescue Jekyll::FatalException => var
        puts
        puts("STRING")
        puts("STRING")
        puts(var.message);Fi[	I">projects//jekyll_proj/jekyll/migrators/wordpressdotcom.rb;Ti*I"t          end)
        rescue => var
          puts("STRING")
          puts("STRING")
          puts("STRING");Fi[	@{i+I"~        rescue => var
          puts("STRING")
          puts("STRING")
          puts("STRING")
          puts("STRING");Fi[	@{i,I"w          puts("STRING")
          puts("STRING")
          puts("STRING")
          puts("STRING")
          next;Fi[	@[i)I"Ä        else
          puts(Whenever.cron(@options))
          puts("STRING")
          puts("STRING")
          exit("LITERAL");Fi[	@EI"
begin;Fi:[:[	@i%I"ﬁ      # as well as the base path for any option specified as a relative path.
      # Any option given as an absolute path will be used "as-is".
      def function
        begin
          (Logger.quiet = options["LITERAL"];Fi[	@IiAI"π      # collections to dump, it'll loop through the array of collections and invoke the
      # 'mongodump' command once per collection
      def function
        begin
          (super;Fi[	@≠iZI"R      #
      # @api private
      def function
        begin
          (log!;Fi[	@≠iíI"â      # secret key listing which we don't care about.
      #
      def function
        begin
          (return false unless gpg_homedir;Fi[	@≠i≤I"ü      # We'll cleanup to remove the tempdir (if created) and raise an error.
      #
      def function
        begin
          (return false unless gpg_config;Fi[	@≠iI"ú      # Return false if no :passphrase is set or an error occurs.
      #
      def function
        begin
          (return false if passphrase.to_s.empty?;Fi[	I"-projects//backup_proj/backup/pipeline.rb;Ti'I"ˆ    # Use `#success?` to determine if all commands in the pipeline succeeded.
    # If `#success?` returns `false`, use `#error_messages` to get an error report.
    def function
      begin
        (Open4.popen4(pipeline) do |var, var, var, var|;Fi[	I"4projects//backup_proj/backup/storage/dropbox.rb;Ti3I"Ë      # connection with Dropbox at a later time. This allows the user to avoid
      # having to go to a new Dropbox URL to authorize over and over again.
      def function
        begin
          (return @connection if @connection;Fi[	@ñi|I"º      # Create a new session, write a serialized version of it to the
      # .cache directory, and return the session object
      def function
        begin
          (require("timeout");Fi[	@[i:I"ô      ##
      # Transfers the archived file to the specified remote server
      def function
        begin
          (write_password_file! unless local;Fi[	I"6projects//backup_proj/backup/syncer/rsync/pull.rb;TiI"ë        # Performs the RSync::Pull operation
        # debug options: -vhP
        def function
          begin
            (write_password_file!;Fi[	@li.I"ê        # Performs the RSync:Push operation
        # debug options: -vhP
        def function
          begin
            (write_password_file!;Fi[	I"Lprojects//compass_proj/compass/app_integration/stand_alone/installer.rb;TiI"ò        end
        
        def function
          begin
            (var, Compass.configuration.project_path = Compass.configuration.project_path, nil;Fi[	I":projects//compass_proj/compass/exec/sub_command_ui.rb;TiI"F    end
    
    def function
      begin
        return perform!;Fi[	@•iI"S    protected
    
    def function
      begin
        ($command = args.shift;Fi[	I"5projects//compass_proj/compass/exec/switch_ui.rb;TiI"?    end
    
    def function
      begin
        perform!;Fi[	I"1projects//compass_proj/compass/frameworks.rb;Ti2I"B    end
    
    def function
      begin
        (@var = nil;Fi[	I"@projects//compass_proj/compass/installers/bare_installer.rb;TiI"é      end
      
      def function
        begin
          (var, Compass.configuration.project_path = Compass.configuration.project_path, nil;Fi[	I"-projects//compass_proj/compass/logger.rb;TiI"W    end
    
    def function
      begin
        ($stderr.write(color("LITERAL"));Fi[	@≥i*I"W    end
    
    def function
      begin
        ($stderr.write(color("LITERAL"));Fi[	I"=projects//diaspora_proj/controllers/photos_controller.rb;TiµI"2  end
  
  def function
    begin
      yield;Fi[	I"6projects//diaspora_proj/models/invitation_code.rb;TiI"U  end
  
  def function
    begin
      self.token = SecureRandom.hex("LITERAL");Fi[	I"4projects//diaspora_proj/models/o_embed_cache.rb;TiI"≠  end
  
  def function
    begin
      var = OEmbed::Providers.get(self.url, "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL");Fi[	@∏i∫I"T  end
  
  def function
    begin
      (var = URI.parse(@attributes["STRING"]);Fi[	I"+projects//diaspora_proj/models/user.rb;TigI"i  
  #@deprecated
  def function
    begin
      self.invitations_to_me.first.sender.invitation_code;Fi[	@·iI"Q      #
      # @see #parse
      def function
        begin
          parse;Fi[	I"?projects//haml_proj/haml/helpers/action_view_extensions.rb;Ti/I"Æ      # @yield A block in which all input to `#haml_concat` is treated as raw.
      # @see Haml::Util#rails_xss_safe?
      def function
        begin
          (@var = true;Fi[	@’iI"      #
      # @raise [Haml::Error] The error
      def function
        begin
          raise(Haml::Error.new(@message));Fi[	@’iHI"}    #
    # @yield A block which won't register as Haml
    def function
      begin
        (var = @haml_buffer.active?;Fi[	I"'projects//haml_proj/haml/parser.rb;Ti\I"^    end
    
    def function
      begin
        (@var = @var = ParseNode.new("LITERAL");Fi[	@‰i/I"í    #
    # @yield A block in which no output will be printed to STDERR
    def function
      begin
        (var, $stderr = $stderr, StringIO.new;Fi[	@iI"∏# the whole of everything must be run in at_exit because the formula has to
# be the run script as __END__ must work for *that* formula.
def function
  begin
    (if ENV["STRING"] then;Fi[	I"-projects//homebrew_proj/cmd/uninstall.rb;Ti
I"f  extend(self)
  
  def function
    begin
      (raise(KegUnspecifiedError) if ARGV.named.empty?;Fi[	@wi0I"M  private
  
  def function
    begin
      if Dir["STRING"].empty? then;Fi[	@zi8I"H  end
  
  def function
    begin
      (if @local_bottle_path then;Fi[	I"+projects//homebrew_proj/extend/ARGV.rb;TiI"7  end
  
  def function
    begin
      (var = nil;Fi[	@›i°I"9  end
  
  def function
    begin
      (var = clone;Fi[	I"0projects//homebrew_proj/extend/fileutils.rb;TiI"æ  # Create a temporary directory then yield. When the block returns,
  # recursively delete the temporary directory.
  def function
    begin
      (var = (ENV["STRING"].chuzzle or "STRING");Fi[	I"/projects//homebrew_proj/extend/pathname.rb;Ti|I"¶  # it is slow to enumerate the whole directory just to see if it is empty,
  # instead rely on good ol' libc and the filesystem
  def function
    begin
      (rmdir;Fi[	@ÂiI"7  end
  
  def function
    begin
      (var = nil;Fi[	@îi"I"M  end
  
  def function
    begin
      (if @@attempted.include?(f) then;Fi[	@îi°I"I  end
  
  def function
    begin
      (FileUtils.rm(Dir["STRING"]);Fi[	@îi‚I"P  end
  
  def function
    begin
      Keg.new(f.prefix).fix_install_names;Fi[	@îiÓI"M  end
  
  def function
    begin
      (ohai("STRING") if ARGV.verbose?;Fi[	I"7projects//jekyll_proj/jekyll/converters/textile.rb;TiI"^    pygments_suffix("STRING")
    
    def function
      begin
        (return if @setup;Fi[	I")projects//jekyll_proj/jekyll/site.rb;Ti©I"Z    #
    # Returns nothing.
    def function
      begin
        (var = site_payload;Fi[	I"0projects//nokogiri_proj/nokogiri/version.rb;Ti;I"G    end
    
    def function
      begin
        require("psych");Fi[	@iI"T    private
    
    def function
      begin
        silence_stream(STDERR) do;Fi[	I"4projects//paperclip_proj/paperclip/thumbnail.rb;TiiI"À    
    # Return true if ImageMagick's +identify+ returns an animated format
    def function
      begin
        ANIMATED_FORMATS.include?(identify("STRING", "LITERAL" => "STRING").to_s.downcase.strip);Fi[	@€imI"    
    # returns true if payload_class does not raise NameError
    def function
      begin
        payload_class.!=(Object);Fi[	@Ci5I"º    # is processing will not be completed. Send the child a TERM signal,
    # wait 5 seconds, and then a KILL signal if it has not quit
    def function
      begin
        if @child then;Fi[	@>i3I"°    # This will return true if the given block halts for a reason other than
    # getting paused.
    def function
      begin
        var = catch("LITERAL") do;Fi[	I"Hprojects//state_machine_proj/state_machine/transition_collection.rb;TiöI"®    # occur will automatically result in the transition rolling back any changes
    # that were made to the object involved.
    def function
      begin
        yield;Fi[	@FI"	else;Fi6[6[	@≠i‰I"y        end
        if var and File.exist?(var) then
          "STRING"
        else
          Logger.warn("STRING");Fi[	@Ci6I"j          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	@Ji4I"j          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	@Qi>I"j          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	@Xi2I"j          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	I"=projects//compass_proj/compass/configuration/comments.rb;TiI"ñ      def function
        if (top_level.preferred_syntax == "LITERAL") and top_level.sass_dir then
          "STRING"
        else
          "STRING";Fi[	I"@projects//compass_proj/compass/configuration/inheritance.rb;Ti<I"â          def function(var)
            if var = @data.raw(var) then
              "STRING"
            else
              var = "STRING";Fi[	I"Jprojects//compass_proj/compass/sass_extensions/functions/constants.rb;Ti!I"á            "STRING"
          when "STRING" then
            "STRING"
          else
            (Compass::Util.compass_warn("STRING");Fi[	@iMI"`          "STRING"
        when "STRING" then
          "STRING"
        else
          var;Fi[	@_i:I"i      "STRING"
    when "LITERAL" then
      "STRING"
    else
      raise(Compass::Error, "STRING");Fi[	@∏iÅI"î      var = var["LITERAL"]
      var = if (request.content_type.to_s == "STRING") then
        "STRING"
      else
        request.content_type.to_s;Fi[	I">projects//diaspora_proj/models/acts_as_taggable_on/tag.rb;TiI"ö  def self.normalize(var)
    if var =~ "LITERAL" then
      "STRING"
    else
      var.gsub(/[^#{self.tag_text_regexp}STRING/, "STRING").downcase if var;Fi[	@“i®I"è            (block_given?.! or (var["LITERAL"] or var["LITERAL"]))
          end) then
            "STRING"
          else
            "STRING";Fi[	@“iÎI"h      end
      if @options.html5? then
        "STRING"
      else
        if @options.xhtml? then;Fi[	@“iÔI"≥        if @options.xhtml? then
          if (@node.value["LITERAL"] == "STRING") then
            "STRING"
          else
            if (@node.value["LITERAL"] == "STRING") then;Fi[	@“iÚI"ô          else
            if (@node.value["LITERAL"] == "STRING") then
              "STRING"
            else
              case @node.value["LITERAL"];Fi[	@“i˛I"~                "STRING"
              when "STRING" then
                "STRING"
              else
                "STRING";Fi[	@“i
I"y              "STRING"
            when "STRING" then
              "STRING"
            else
              "STRING";Fi[	@’i≤I"ü    def function(var, var, var)
      var = if var.empty? then
        "STRING"
      else
        ("STRING" << var.map { |var, var| "STRING" }.join("STRING"));Fi[	@JicI"`      "STRING"
    when /^#{HOMEBREW_LIBRARY}STRING/ then
      "STRING"
    else
      nil;Fi[	@wiêI"t        File.basename(var, "STRING")
      when "LITERAL" then
        "STRING"
      else
        # do nothing;Fi[	@zi%I"f          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING";Fi[	@i3I"b      "STRING"
    when "LITERAL" then
      "STRING"
    else
      Hardware.processor_count;Fi[	@Üi!I"Ç      "STRING"
    when "LITERAL" then
      "STRING"
    else
      (MacOS.version >= "LITERAL") ? ("STRING") : (raise("STRING"));Fi[	@Üi[I"        "STRING"
      when "LITERAL" then
        "STRING"
      else
        case (MacOS.clang_version.to_f * "LITERAL").to_i;Fi[	@ÜiqI"f          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING";Fi[	@ÁiI"g          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "LITERAL";Fi[	@±i@I"V      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing;Fi[	@ƒi_I"V      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing;Fi[	@ƒiˆI"V      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing;Fi[	I"?projects//homebrew_proj/vendor/multi_json/vendor/okjson.rb;TisI"é        "STRING"
      when nil then
        "STRING"
      else
        var.respond_to?("LITERAL") ? (var.to_json) : (raise(Error, "STRING"));Fi[	@—i|I"g        var["LITERAL"].to_s
      when "LITERAL" then
        "STRING"
      else
        "STRING";Fi[	I"1projects//jekyll_proj/jekyll/migrators/mt.rb;Ti&I"é    def self.suffix(var)
      if (var.nil? or var.include?("STRING")) then
        "STRING"
      else
        if var.include?("STRING") then;Fi[	@Qi)I"û      else
        if var.include?("STRING") then
          "STRING"
        else
          ((var == "STRING") or var.include?("STRING")) ? ("STRING") : (var);Fi[	@ÌiBI"ç    def function
      if (self.site.permalink_style == "LITERAL") and (index?.! and html?) then
        "STRING"
      else
        "STRING";Fi[	@iI"r        "STRING"
      when "LITERAL" then
        "STRING"
      else
        self.site.permalink_style.to_s;Fi[	@‹i?I"≤      def function(var)
        var = if ((var.value.first.type == "LITERAL") or var.value.first.value.first =~ "LITERAL") then
          "STRING"
        else
          "STRING";Fi[	@‹irI"~            "STRING"
          when "STRING" then
            "STRING"
          else
            (var.value.first + "STRING");Fi[	I"6projects//paperclip_proj/paperclip/storage/fog.rb;TiVI"ñ      def function(var)
        if @options["LITERAL"] then
          "STRING"
        else
          if (fog_credentials["LITERAL"] == "STRING") then;Fi[	@^iYI"∞        else
          if (fog_credentials["LITERAL"] == "STRING") then
            "STRING"
          else
            directory.files.new("LITERAL" => (path(var))).public_url;Fi[	@^iäI"ù      def function
        if @options["LITERAL"].to_s.=~(Fog::AWS_BUCKET_SUBDOMAIN_RESTRICTON_REGEX) then
          "STRING"
        else
          "STRING";Fi[	@—i+I"ô      if var["LITERAL"] and timestamp_possible? then
        var = var.match("LITERAL") ? ("STRING") : ("STRING")
        "STRING"
      else
        var;Fi[	@Ii0I"∫    def function(var)
      if var.filename =~ "LITERAL" then
        "STRING"
      else
        if ((defined? Gem and var.filename.include?(Gem.dir)) or var.filename =~ "LITERAL") then;Fi[	@Ii3I"û      else
        if ((defined? Gem and var.filename.include?(Gem.dir)) or var.filename =~ "LITERAL") then
          "STRING"
        else
          "STRING";Fi[	I"Kprojects//state_machine_proj/state_machine/integrations/data_mapper.rb;Ti"I"q      def function(var)
        if var.errors.empty? then
          "STRING"
        else
          var = [];Fi[	I"9projects//twitter_proj/twitter/error/client_error.rb;TiI"~      def self.parse_error(var)
        if var.nil? then
          "STRING"
        else
          if var["LITERAL"] then;Fi[	@˜iI"f          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING";Fi[	@biI"o          redirect_from_hash
        when NilClass then
          "STRING"
        else
          "STRING";Fi[	@bi5I"c          "STRING"
        when stdout then
          "STRING"
        else
          "STRING";Fi[	@	I"# do nothing;Fi3[3[	@Ci7I"c        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	I"5projects//backup_proj/backup/notifier/hipchat.rb;TiOI"t        when "LITERAL" then
          ["STRING", failure_color]
        else
          # do nothing
        end;Fi[	I"2projects//backup_proj/backup/notifier/mail.rb;TiâI"k        when "LITERAL" then
          ["STRING", true]
        else
          # do nothing
        end;Fi[	@i±I"\        when "STRING" then
          {}
        else
          # do nothing
        end;Fi[	@Ji5I"c        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	@Qi?I"c        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	@Xi3I"c        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	I"?projects//devise_proj/devise/strategies/authenticatable.rb;Ti$I"`          fail!(var)
          return false
        else
          # do nothing
        end;Fi[	I"6projects//diaspora_proj/helpers/o_embed_helper.rb;TiI"d        var = link_to_oembed_image(var, "STRING")
      end
    else
      # do nothing
    end;Fi[	I"1projects//diaspora_proj/models/invitation.rb;Ti_I"V    when "STRING" then
      I18n.t("STRING")
    else
      # do nothing
    end;Fi[	@êikI"K    when "STRING" then
      false
    else
      # do nothing
    end;Fi[	@œiŸI"m        when "STRING" then
          var["STRING"] = var
        else
          # do nothing
        end;Fi[	@tiI"K  when "STRING" then
    "STRING".undent
  else
    # do nothing
  end;Fi[	I")projects//homebrew_proj/cmd/--env.rb;Ti*I"j          print("STRING") if File.symlink?(var)
        end
      else
        # do nothing
      end;Fi[	@ÍigI"r      when "STRING", "STRING" then
        problem("STRING".undent)
      else
        # do nothing
      end;Fi[	@ÍiïI"Z      when "LITERAL" then
        "LITERAL"
      else
        # do nothing
      end;Fi[	@Íi´I"b      when "LITERAL" then
        problem("STRING")
      else
        # do nothing
      end;Fi[	I"(projects//homebrew_proj/cmd/edit.rb;Ti+I"^      when "STRING", "STRING" then
        true
      else
        # do nothing
      end;Fi[	@@i I"h    when "LITERAL", "LITERAL" then
      abort("STRING".undent)
    else
      # do nothing
    end;Fi[	@wi|I"a      when "LITERAL" then
        Pathname.new($1)
      else
        # do nothing
      end;Fi[	@wiëI"Y      when "LITERAL" then
        "STRING"
      else
        # do nothing
      end;Fi[	@i;I"f    when "LITERAL" then
      MacOS.gcc_42_build_version.to_i
    else
      # do nothing
    end;Fi[	@i}I"?        end
      end
    else
      # do nothing
    end);Fi[	@ziI"h      @var = @specs.keys.first
      @var = @specs.values.first
    else
      # do nothing
    end;Fi[	@zizI"f    when "LITERAL" then
      Dir.chdir(var.first) rescue nil
    else
      # do nothing
    end;Fi[	@zi2I"w      when "LITERAL", "LITERAL" then
        ((var << "STRING") << @ref)
      else
        # do nothing
      end;Fi[	@ziHI"ó            quiet_safe_system(@@git, "STRING", { "LITERAL" => "STRING" }, @ref, "STRING")
          end
        else
          # do nothing
        end;Fi[	@Âi∫I"Y      when "STRING" then
        "LITERAL"
      else
        # do nothing
      end;Fi[	I"#projects//homebrew_proj/keg.rb;TiOI"X    when "LITERAL" then
      (self / "STRING")
    else
      # do nothing
    end;Fi[	@úiYI"á      @var = (@patch_filename + "STRING")
      FileUtils.mv(@patch_filename, @compressed_filename)
    else
      # do nothing
    end;Fi[	@±i(I"y    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    else
      # do nothing
    end;Fi[	@±iAI"O    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end;Fi[	@ƒi`I"o    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end, var.bottle.checksum.hexdigest);Fi[	@ƒi˜I"o    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end, var.bottle.checksum.hexdigest);Fi[	I"8projects//jekyll_proj/jekyll/converters/markdown.rb;TiwI"g      when "STRING" then
        Maruku.new(var).to_html
      else
        # do nothing
      end;Fi[	I"-projects//jekyll_proj/jekyll/core_ext.rb;Ti*I"m        when Array then
          var = var[var].compact
        else
          # do nothing
        end;Fi[	I"5projects//jekyll_proj/jekyll/migrators/tumblr.rb;TiZI"ã        var = var["STRING"]
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?
      else
        # do nothing
      end;Fi[	I"Iprojects//paperclip_proj/paperclip/io_adapters/attachment_adapter.rb;TiI"r      when Paperclip::Style then
        [var.attachment, var.name]
      else
        # do nothing
      end;Fi[	I"+projects//rescue_proj/resque/server.rb;TiAI"p        when "STRING" then
          Resque.redis.hlen(var)
        else
          # do nothing
        end;Fi[	@“iSI"s        when "STRING" then
          Resque.redis.hgetall(var)
        else
          # do nothing
        end;Fi[	I"Kprojects//state_machine_proj/state_machine/yard/handlers/transition.rb;Ti+I"l              AllMatcher.instance
            end
          else
            # do nothing
          end;Fi[	@£iJI"|          var["LITERAL"] = var.id
          merge_owner!(var, var.user)
        else
          # do nothing
        end;Fi[	@i¡I"e        when Twitter::User then
          var.id
        else
          # do nothing
        end;Fi[	I"0projects//twitter_proj/twitter/api/utils.rb;TiëI"ï        when Twitter::User then
          var[[var, "STRING"].compact.join("STRING").to_sym] = var.id
        else
          # do nothing
        end;Fi[	@ﬁiØI"x          when Twitter::User then
            (var << var.id)
          else
            # do nothing
          end;Fi[	@#iRI"i        when "LITERAL" then
          "LITERAL".hour
        else
          # do nothing
        end;Fi[	@EI"0assert_version_detected("STRING", "STRING");Fi1[1[	I"2projects//homebrew_proj/test/test_versions.rb;TiPI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiTI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiXI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi\I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi`I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËidI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËihI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËilI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËipI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËitI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËixI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi|I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi{I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiÉI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiáI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiãI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËièI"|  end
  
  def function
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiîI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiòI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiúI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi†I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi§I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi®I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi¨I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi∞I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi¥I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi∏I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiºI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi¿I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiƒI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi»I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiÃI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi–I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi‘I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiÿI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi‹I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi‡I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi‰I"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiËI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiÏI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@ËiÙI"R  end
  
  def function
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi¸I"È  #   assert_version_detected '7.0.4', 'http://www.haskell.org/ghc/dist/7.0.4/ghc-7.0.4-i386-apple-darwin.tar.bz2'
  # end
  def function
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@I"#   class Person;Fi&[&[	@i#I"√      # An instance method <tt>#{prefix}attribute</tt> must exist and accept
      # at least the +attr+ argument.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods;Fi[	@iGI"√      # An <tt>attribute#{suffix}</tt> instance method must exist and accept at
      # least the +attr+ argument.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods;Fi[	@ikI"Ã      # An <tt>#{prefix}attribute#{suffix}</tt> instance method must exist and
      # accept at least the +attr+ argument.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods;Fi[	@iÅI"ä      
      # Allows you to make aliases for attributes.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods;Fi[	@ißI"À      # +define_attribute_methods+ after you define any prefix, suffix or affix
      # methods, or they will not hook in.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods;Fi[	@i√I"…      # +define_attribute_method+ after you define any prefix, suffix or affix
      # method, or they will not hook in.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods;Fi[	@iÍI"¶      
      # Removes all the previously dynamically defined methods from the class.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods;Fi[	@.iI"®    # you can use the default <tt>:to_model</tt> implementation, which simply
    # returns +self+.
    #
    #   class Person
    #     include ActiveModel::Conversion;Fi[	@.i6I"›    # Returns a +string+ identifying the path associated with the object.
    # ActionPack uses this to find a suitable partial to represent the object.
    #
    #   class Person
    #     include ActiveModel::Conversion;Fi[	@7iI"Ç    
    # Pass in the instance of the object that is using the errors object.
    #
    #   class Person
    #     def initialize;Fi[	@7iI"é    
    # Returns all the full error messages in an array.
    #
    #   class Person
    #     validates_presence_of :name, :address, :email;Fi[	@<iI"{    
    # Initializes a new model with the given +params+.
    #
    #   class Person
    #     include ActiveModel::Model;Fi[	@[i
I"é  module Serialization
    # Returns a serialized hash of your object.
    #
    #   class Person
    #     include ActiveModel::Serialization;Fi[	@^ieI"†      
      # Sets the model +attributes+ from a JSON string. Returns +self+.
      #
      #   class Person
      #     include ActiveModel::Serializers::JSON;Fi[	@ai¡I"ü      
      # Sets the model +attributes+ from a JSON string. Returns +self+.
      #
      #   class Person
      #     include ActiveModel::Serializers::Xml;Fi[	@jiI"Æ        # Defines a callback that will get called right before validation
        # happens.
        #
        #   class Person
        #     include ActiveModel::Validations;Fi[	@ji4I"≠        # Defines a callback that will get called right after validation
        # happens.
        #
        #   class Person
        #     include ActiveModel::Validations;Fi[	@Äi#I"n      #     end
      #   end
      #
      #   class Person
      #     include ActiveModel::Validations;Fi[	@ÄiI"ª      # when validation fails. See <tt>validates</tt> for more information about
      # the validation itself.
      #
      #   class Person
      #     include ActiveModel::Validations;Fi[	@âi I"”      # Passes the record off to the class or classes specified and allows them
      # to add errors based on more complex conditions.
      #
      #   class Person
      #     include ActiveModel::Validations;Fi[	@âi4I"ã      #
      # You may also pass it multiple classes, like so:
      #
      #   class Person
      #     include ActiveModel::Validations;Fi[	@âiMI"       # If you pass any additional configuration options, they will be passed
      # to the class and available as +options+:
      #
      #   class Person
      #     include ActiveModel::Validations;Fi[	@âiiI"…    # Passes the record off to the class or classes specified and allows them
    # to add errors based on more complex conditions.
    #
    #   class Person
    #     include ActiveModel::Validations;Fi[	@âixI"Å    #
    # You may also pass it multiple classes, like so:
    #
    #   class Person
    #     include ActiveModel::Validations;Fi[	@ñiI"ï    module ClassMethods
      # Validates each attribute against a block.
      #
      #   class Person
      #     include ActiveModel::Validations;Fi[	@ñiyI"∏      # List all validators that are being used to validate the model using
      # +validates_with+ method.
      #
      #   class Person
      #     include ActiveModel::Validations;Fi[	@ñiàI"§      
      # List all validators that are being used to validate a specific attribute.
      #
      #   class Person
      #     include ActiveModel::Validations;Fi[	@ñiπI"®    # Returns the +Errors+ object that holds all information about attribute
    # error messages.
    #
    #   class Person
    #     include ActiveModel::Validations;Fi[	@ñi I"≤    # Runs all the specified validations and returns +true+ if no errors were
    # added otherwise +false+.
    #
    #   class Person
    #     include ActiveModel::Validations;Fi[	@ñi⁄I"ﬁ    # Context can optionally be supplied to define which callbacks to test
    # against (the context is defined on the validations using <tt>:on</tt>).
    #
    #   class Person
    #     include ActiveModel::Validations;Fi[	@ñiÒI"≥    # Performs the opposite of <tt>valid?</tt>. Returns +true+ if errors were
    # added, +false+ otherwise.
    #
    #   class Person
    #     include ActiveModel::Validations;Fi[	@ñiI"ﬁ    # Context can optionally be supplied to define which callbacks to test
    # against (the context is defined on the validations using <tt>:on</tt>).
    #
    #   class Person
    #     include ActiveModel::Validations;Fi[	@ÏiI"ö    # Below are examples of the various ways that a method can be evaluated
    # on an object:
    # 
    #   class Person
    #     def initialize(name);Fi[	@@I""LITERAL";Fi&[&[	@ÍièI"{      next if var.nil?
      var = case var.hash_type
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then;Fi[	@ÍiëI"v      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then;Fi[	@ÍiìI"g      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      else;Fi[	@Âi§I"Ñ    File.open(self) { |var| var = var.read("LITERAL") }
    case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@Âi¶I"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@Âi®I"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@Âi™I"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@Âi¨I"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@ÂiÆI"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@Âi∞I"]    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else;Fi[	@i	I"å    @@cpu_type ||= `/usr/sbin/sysctl -n hw.cputype`.to_i
    case @@cpu_type
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@iI"]    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else;Fi[	@iI"ñ    @@intel_family ||= `/usr/sbin/sysctl -n hw.cpufamily`.to_i
    case @@intel_family
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@iI"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@iI"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@iI"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@iI"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@iI"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@i!I"]    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else;Fi[	@πizI"l        when *var then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        else;Fi[	@πiÅI"~        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then;Fi[	@πiâI"        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then;Fi[	@πiãI"        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then;Fi[	@πièI"~        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then;Fi[	I"$projects//homebrew_proj/mach.rb;TiGI"i  def function
    case archs.length
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	I"%projects//homebrew_proj/macos.rb;TiQI"g  def function
    case default_cc
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@º	iSI"k    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "STRING" then;Fi[	I"3projects//homebrew_proj/test/test_compilers.rb;TiI"}    var.select_compiler
    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then
      "LITERAL"
    else;Fi[	@¡	iYI"}    var.select_compiler
    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then
      "LITERAL"
    else;Fi[	@¸i´I"v  compare do |var|
    super(Version.new(case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@¸i≠I"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@¸iØI"l    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@¸i±I"]    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else;Fi[	I"module Nokogiri;FI"module XML;Fi%[%[	I"1projects//nokogiri_proj/nokogiri/xml/attr.rb;Ti I"7module Nokogiri
  module XML
    class Attr < Node;Fi [	@¯i I"Omodule Nokogiri
  module XML
    class AttributeDecl < Nokogiri::XML::Node;Fi [	@Ωi I"3module Nokogiri
  module XML
    class Builder;Fi [	@˚i I"Gmodule Nokogiri
  module XML
    class CDATA < Nokogiri::XML::Text;Fi [	I";projects//nokogiri_proj/nokogiri/xml/character_data.rb;Ti I"Omodule Nokogiri
  module XML
    class CharacterData < Nokogiri::XML::Node;Fi [	@˛i I"Jmodule Nokogiri
  module XML
    class Document < Nokogiri::XML::Node;Fi [	@i I"Rmodule Nokogiri
  module XML
    class DocumentFragment < Nokogiri::XML::Node;Fi [	I"0projects//nokogiri_proj/nokogiri/xml/dtd.rb;Ti I"Emodule Nokogiri
  module XML
    class DTD < Nokogiri::XML::Node;Fi [	I"<projects//nokogiri_proj/nokogiri/xml/element_content.rb;Ti I":module Nokogiri
  module XML
    class ElementContent;Fi [	@i I"Mmodule Nokogiri
  module XML
    class ElementDecl < Nokogiri::XML::Node;Fi [	@	i I"Lmodule Nokogiri
  module XML
    class EntityDecl < Nokogiri::XML::Node;Fi [	I"6projects//nokogiri_proj/nokogiri/xml/namespace.rb;Ti I"5module Nokogiri
  module XML
    class Namespace;Fi [	@i I"0module Nokogiri
  module XML
    class Node;Fi [	@„iI"nrequire("stringio")
require("nokogiri/xml/node/save_options")
module Nokogiri
  module XML
    class Node;Fi[	@i I"3module Nokogiri
  module XML
    class NodeSet;Fi [	I"5projects//nokogiri_proj/nokogiri/xml/notation.rb;Ti I"bmodule Nokogiri
  module XML
    class Notation < Struct.new("LITERAL", "LITERAL", "LITERAL");Fi [	@i I"8module Nokogiri
  module XML
    class ParseOptions;Fi [	@i I"/module Nokogiri
  module XML
    module PP;Fi [	I"4projects//nokogiri_proj/nokogiri/xml/pp/node.rb;Ti I"/module Nokogiri
  module XML
    module PP;Fi [	I"Cprojects//nokogiri_proj/nokogiri/xml/processing_instruction.rb;Ti I"Hmodule Nokogiri
  module XML
    class ProcessingInstruction < Node;Fi [	I"3projects//nokogiri_proj/nokogiri/xml/reader.rb;Ti I"2module Nokogiri
  module XML
    class Reader;Fi [	I"5projects//nokogiri_proj/nokogiri/xml/relax_ng.rb;Ti I"3module Nokogiri
  module XML
    class << self;Fi [	I"9projects//nokogiri_proj/nokogiri/xml/sax/document.rb;Ti I"0module Nokogiri
  module XML
    module SAX;Fi [	@¿i I"0module Nokogiri
  module XML
    module SAX;Fi [	I"?projects//nokogiri_proj/nokogiri/xml/sax/parser_context.rb;Ti I"0module Nokogiri
  module XML
    module SAX;Fi [	@√i I"0module Nokogiri
  module XML
    module SAX;Fi [	I"3projects//nokogiri_proj/nokogiri/xml/schema.rb;Ti I"3module Nokogiri
  module XML
    class << self;Fi [	I"9projects//nokogiri_proj/nokogiri/xml/syntax_error.rb;Ti I"Qmodule Nokogiri
  module XML
    class SyntaxError < ::Nokogiri::SyntaxError;Fi [	I"1projects//nokogiri_proj/nokogiri/xml/text.rb;Ti I"Omodule Nokogiri
  module XML
    class Text < Nokogiri::XML::CharacterData;Fi [	I"?projects//nokogiri_proj/nokogiri/xml/xpath/syntax_error.rb;Ti I"1module Nokogiri
  module XML
    class XPath;Fi [	I"2projects//nokogiri_proj/nokogiri/xml/xpath.rb;TiI"\require("nokogiri/xml/xpath/syntax_error")
module Nokogiri
  module XML
    class XPath;Fi[	I":projects//nokogiri_proj/nokogiri/xml/xpath_context.rb;Ti I"8module Nokogiri
  module XML
    class XPathContext;Fi [	I"# @rate_limited No;F@ei$[$[	@iioI"•      # @see https://dev.twitter.com/docs/api/1.1/post/direct_messages/destroy
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@ii|I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/direct_messages/new
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@vi3I"       #
      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@viKI"ˇ      #
      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@vilI"¸      #
      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::AlreadyFavorited] Error raised when tweet has already been favorited.;Fi[	@}iyI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}içI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}i™I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@}iæI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/update
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iTI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£i†I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£i◊I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/subscribers/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iÒI"å      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/create_all
      # @note Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iII"2      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/create
      # @note Lists are limited to having 500 members.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£ifI"+      # @see https://dev.twitter.com/docs/api/1.1/post/lists/destroy
      # @note Must be owned by the authenticated user.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iÄI"˚      #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/update
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£iüI"#      # @see https://dev.twitter.com/docs/api/1.1/post/lists/create
      # @note Accounts are limited to 20 lists.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@£i‚I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy_all
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@—i@I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/saved_searches/create
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@—iPI"T      # @see https://dev.twitter.com/docs/api/1.1/post/saved_searches/destroy/:id
      # @note The search specified by ID must be owned by the authenticating user.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘i\I"M      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/destroy/:id
      # @note The authenticating user must be the author of the specified Tweets.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘irI"{      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/update
      # @note A status update with text identical to the authenticating user's current status will be ignored to prevent duplicates.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@˘i∏I"y      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/update_with_media
      # @note A status update with text/media identical to the authenticating user's current status will NOT be ignored
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@i>I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_delivery_device
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iNI"7      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile
      # @note Only the options specified will be updated.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@i`I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile_background_image
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@ipI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile_colors
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iÄI"c      # @note Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image.
      # @note This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iﬁI"˝      #
      # @see https://dev.twitter.com/docs/api/1.1/post/blocks/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@i~I"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/remove_profile_banner
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[	@iéI"˛      # @note Uploads a profile banner on behalf of the authenticating user. For best results, upload an <5MB image that is exactly 1252px by 626px. Images will be resized for a number of display options. Users with an uploaded profile banner will have a profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners.
      # @note Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::BadRequest] Error raised when either an image was not provided or the image data could not be processed.;Fi[	I"#       end;F@&i#[#[	@^inI"â      #       hash.each do |key, value|
      #         instance_variable_set("@#{key}", value)
      #       end
      #     end
      #;Fi[	@ai I"â      #       hash.each do |key, value|
      #         instance_variable_set("@#{key}", value)
      #       end
      #     end
      #;Fi[	@Äi5I"¡      #       def validate_each(record, attribute, value)
      #         record.errors.add attribute, "must start with 'the'" unless value =~ /\Athe/i
      #       end
      #     end
      #;Fi[	@âi*I"è      #       if some_complex_logic
      #         record.errors.add :base, 'This record is invalid'
      #       end
      #     end
      #;Fi[	@√i]I"      #       def pending_notifications
      #         @pending_notifications ||= []
      #       end
      #     end
      #;Fi[	@’i§I"b    #           haml_concat "more_data"
    #         end
    #       end
    #     end
    #;Fi[	@Òi!I"w    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end;Fi[	@ÒiFI"w    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end;Fi[	@ÒifI"w    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end;Fi[	@¯iHI"t    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end
    #     ;Fi[	@¯iRI"q    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end;Fi[	@¯izI"t    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end
    #     ;Fi[	@¯iI"q    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end;Fi[	@˝iBI"h        #           end
        #         end
        #       end
        #     end
        #   end;Fi[	@ iI"Ü        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end;Fi[	@ i[I"Ü        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end;Fi[	@ iI"Ü        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end;Fi[	@i>I"[    #       event :park do
    #         ...
    #       end
    #     end
    #   end;Fi[	@itI"}    #       event :shift_up do
    #         transition :idling => :first_gear
    #       end
    #     end
    #   end;Fi[	@i•I"u    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end
    #   end;Fi[	@i*I"|    #       initialize_state_machines(:static => :force) do
    #         ...
    #       end
    #     end
    #   end;Fi[	@iGI"s    #       event :ignite do
    #         transition all => :idling
    #       end
    #     end
    #   end;Fi[	@iêI"v    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #     ;Fi[	@iñI"q    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end;Fi[	@i«I"q    #       event :turn_off do
    #         transition all => :off
    #       end
    #     end
    #     ;Fi[	@i—I"r    #       event :turn_off do
    #         transition all => :off
    #       end
    #     end
    #   end;Fi[	@/iI"z    #       event :crash
    #         transition all - :parked => :stalled
    #       end
    #     end
    #   end;Fi[	@/i.I"{    #       event :ignite
    #         transition [:idling, :first_gear] => same
    #       end
    #     end
    #   end;Fi[	@>iÁI"w    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end;Fi[	@>i I"w    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end;Fi[	@I"#   class Vehicle;Fi#[#[	@ÒiI"i    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	@Òi=I"i    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	@¯i?I"h    # 
    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	@¯iqI"h    # 
    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	@ iI"u        # 
        # == Examples
        # 
        #   class Vehicle
        #     include DataMapper::Resource;Fi[	@ iQI"u        # 
        # == Examples
        # 
        #   class Vehicle
        #     include DataMapper::Resource;Fi[	@ iuI"t        # 
        # == Example
        # 
        #   class Vehicle
        #     include DataMapper::Resource;Fi[	@i9I"    # 
    # With the default name/attribute and no configuration:
    # 
    #   class Vehicle
    #     state_machine do;Fi[	@iGI"â    # 
    # With a custom name / attribute:
    # 
    #   class Vehicle
    #     state_machine :status, :attribute => :status_value do;Fi[	@iOI"~    # 
    # With a static initial state:
    # 
    #   class Vehicle
    #     state_machine :status, :initial => :parked do;Fi[	@iWI"±    # 
    # With a dynamic initial state:
    # 
    #   class Vehicle
    #     state_machine :status, :initial => lambda {|vehicle| vehicle.speed == 0 ? :parked : :idling} do;Fi[	@ikI"r    # 
    # For example,
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do;Fi[	@iúI"r    # 
    # For example,
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do;Fi[	@i◊I"r    # 
    # For example,
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do;Fi[	@iÂI"£    # 
    # In the following example, a custom +initialize+ method is defined:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do;Fi[	@iˆI"∞    # are called, the custom method *must* call +super+ without any arguments
    # like so:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do;Fi[	@iI"’    # If you want to avoid calling the superclass's constructor, but still want
    # to initialize the state machine attributes:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do;Fi[	@iI"÷    # set.  For example, the following example forces the initialization of
    # static states regardless of their current value:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do;Fi[	@iBI"ø    # When a new state is defined, a predicate method for that state is
    # generated on the class.  For example,
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	@iXI"ß    # state machine.  In most cases, this is the same as the name of the state
    # machine.  For example:
    # 
    #   class Vehicle
    #     attr_accessor :state;Fi[	@iàI"b    # 
    # For example,
    # 
    #   class Vehicle
    #     include DataMapper::Resource;Fi[	@iæI"â    # 
    # For example,
    # 
    #   class Vehicle
    #     state_machine :heater_state, :initial => :off, :namespace => 'heater' do;Fi[	@/i
I"U    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine do;Fi[	@/i)I"U    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine do;Fi[	@4iI"i    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	@4i(I"i    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	@4iCI"i    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	@>i∞I"f    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :action => :save do;Fi[	@>i‚I"T    # 
    # == Example
    # 
    #   class Vehicle
    #     state_machine do;Fi[	@>i˚I"h    # 
    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do;Fi[	I"def function(var, var);F@≤i![![	@ai8I"É        attr_reader("LITERAL")
        
        def function(var, var)
          @var = var
          @var = var ? (var.dup) : ({});Fi[	I"9projects//activemodel_proj/active_model/validator.rb;TiMI"f  
  class BlockValidator < EachValidator
    def function(var, var)
      @var = var
      super;Fi[	@di	I"h    include(Backup::CLI::Helpers)
    
    def function(var, var)
      @var = var
      @var = var;Fi[	@oiI"X      end
      
      def function(var, var)
        @var = var
        @var = var;Fi[	@ iI"á      attr_reader("LITERAL", "LITERAL", "LITERAL", "LITERAL")
      
      def function(var, var)
        @var = var
        @var = var;Fi[	@ÇiI"Vclass ExtremePostPresenter
  def function(var, var)
    @var = var
    @var = var;Fi[	@ÖiI"i  include(ActionView::Helpers::TextHelper)
  
  def function(var, var)
    @var = var
    @var = var;Fi[	@àiI"Qclass PersonPresenter
  def function(var, var)
    @var = var
    @var = var;Fi[	@ãi	I"d  attr_accessor("LITERAL", "LITERAL")
  
  def function(var, var)
    @var = var
    @var = var;Fi[	@ãiDI"^end
class PostInteractionPresenter
  def function(var, var)
    @var = var
    @var = var;Fi[	I")projects//homebrew_proj/checksums.rb;Ti
I"o  TYPES = ["LITERAL", "LITERAL", "LITERAL"]
  
  def function(var, var)
    @var = var
    @var = var.to_s;Fi[	@iGI"p  attr_reader("LITERAL")
  
  def function(var, var)
    @var = var
    instance_eval(&var) if block_given?;Fi[	@‰iBI"  attr("LITERAL")
  
  def function(var, var)
    @var = var
    var = (var.length == "LITERAL") ? ("STRING") : ("STRING");Fi[	@‰iÇI"P  attr("LITERAL")
  
  def function(var, var)
    @var = var
    @var = var;Fi[	@îiI"V  attr("LITERAL", true)
  
  def function(var, var)
    @var = var
    @var = var;Fi[	@óiI"m  attr_reader("LITERAL", "LITERAL", "LITERAL")
  
  def function(var, var)
    @var = var
    @var = var;Fi[	@óihI"b  attr_reader("LITERAL", "LITERAL")
  
  def function(var, var)
    @var = var
    @var = var;Fi[	@∑iI"ó      # Get the value of this node
      # Create a new Node with +type+ and +value+
      def function(var, var)
        @var = var
        @var = var;Fi[	@ΩiÅI"l      
      class NodeBuilder
        def function(var, var)
          @var = var
          @var = var;Fi[	@iI"Ω      # The Document this NodeSet is associated with
      # Create a NodeSet with +document+ defaulting to +list+
      def function(var, var)
        @var = var
        var.decorate(self);Fi[	@—iI"gmodule Paperclip
  class UrlGenerator
    def function(var, var)
      @var = var
      @var = var;Fi[	@€iI"{    # placed)
    # This job's associated payload object.
    def function(var, var)
      @var = var
      @var = var;Fi[	I"8projects//state_machine_proj/state_machine/error.rb;Ti
I"c    
    # The object that failed
    def function(var, var)
      @var = var
      super(var);Fi[	@·iI"}    
    # The event that was attempted to be run
    def function(var, var)
      @var = var
      super(var, "STRING");Fi[	@‰iI"smodule StateMachine
  class HelperModule < Module
    def function(var, var)
      @var = var
      @var = var;Fi[	@>i3I"Å    
    # The set of events that failed the transition(s)
    def function(var, var)
      @var = var
      super(var, "STRING");Fi[	I";projects//twitter_proj/twitter/response/raise_error.rb;TiI"X      end
      
      def function(var, var)
        @var = var
        super(var);Fi[	@˝i%I"N    end
    
    def function(var, var)
      @var = var
      @var = var;Fi[	@@±i![![	@≠i'I"ü      # @raise [Backup::Errors::Encryptor::GPG::InvalidModeError]
      #   if mode given is invalid.
      #
      def function(var)
        @var = var.to_sym;Fi[	@≠i«I"≥      # If so, raise the returned error message.
      # Note that Cli::Helpers#run may also raise an error here.
      #
      def function(var)
        var = run("STRING").chomp;Fi[	@≠i9I"Œ      # Strip out all spaces, upcase non-email identifiers,
      # and wrap email addresses in <> to perform exact matching.
      #
      def function(var)
        var = var.to_s.gsub("LITERAL", "STRING");Fi[	@Ci.I"À      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var = case var;Fi[	@|iFI"–      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var, var = case var;Fi[	@iÄI"–      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var, var = case var;Fi[	@Ji,I"À      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var = case var;Fi[	@Qi6I"À      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var = case var;Fi[	@Xi*I"À      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var = case var;Fi[	@æi]I"Æ      #   sign_out :user     # sign_out(scope)
      #   sign_out @user     # sign_out(resource)
      #
      def function(var)
        return sign_out_all_scopes unless var;Fi[	@æi~I"î      #
      #   redirect_to stored_location_for(:user) || root_path
      #
      def function(var)
        var = Devise::Mapping.find_scope!(var);Fi[	@æi•I"~      #       end
      #   end
      #
      def function(var)
        (stored_location_for(var) or signed_in_root_path(var));Fi[	I"4projects//devise_proj/devise/mailers/helpers.rb;TiTI"ˆ      #         confirmation_instructions:
      #           subject: '...'
      #
      def function(var)
        I18n.t(:"#{devise_mapping.name}STRING", "LITERAL" => (["LITERAL", "LITERAL", var]), "LITERAL" => (["LITERAL", var.to_s.humanize]));Fi[	@ái2I"¬    # with specific values for this model. Please check your Devise initializer
    # for a complete description on those values.
    #
    def function(var)
      var = var.extract_options!.dup;Fi[	@…i≥I"ü    #       post "deactivate", :to => "registrations#deactivate", :as => "deactivate_registration"
    #     end
    #
    def function(var)
      @var = false;Fi[	@…iI"ô    #
    #   root :to => 'dashboard#show'
    #
    def function(var)
      var = lambda { |var| var.env["STRING"].authenticate?("LITERAL" => (var)).! };Fi[	I"1projects//devise_proj/devise/test_helpers.rb;Ti3I"•    #   sign_out :user     # sign_out(scope)
    #   sign_out @user     # sign_out(resource)
    #
    def function(var)
      var = Devise::Mapping.find_scope!(var);Fi[	@œi≤I"    #   (however, "x?," is a method call and not a literal)
    # - and not "?\," which is a character literal
    #
    def function(var)
      var and ((var.length > "LITERAL") and ((var["LITERAL"] == "STRING") and (var["LITERAL"] =~ "LITERAL" or (var["LITERAL"] == "STRING")).!));Fi[	@‡i>I"é      #     config.format.as_xml
      #   end
      #
      def function(var)
        var["LITERAL"] ||= XML::Node::SaveOptions::DEFAULT_HTML;Fi[	@„iÜI"z      #     end
      #   }.new)
      #
      def function(var)
        return NodeSet.new(document) unless document;Fi[	@„i∑I"¬      # found in an XML document, where tags names are case-sensitive
      # (e.g., "H1" is distinct from "h1").
      #
      def function(var)
        var, var, var, var = extract_params(var);Fi[	@„i‘I"ò      # Equivalent to <tt>xpath(paths).first</tt>
      # See Node#xpath for more information.
      #
      def function(var)
        xpath(*var).first;Fi[	@„i›I"í      # Equivalent to <tt>css(rules).first</tt>
      # See Node#css for more information.
      #
      def function(var)
        css(*var).first;Fi[	@iÑI"õ      # Equivalent to <tt>xpath(paths).first</tt>
      # See NodeSet#xpath for more information.
      #
      def function(var)
        xpath(*var).first;Fi[	@içI"ï      # Equivalent to <tt>css(rules).first</tt>
      # See NodeSet#css for more information.
      #
      def function(var)
        css(*var).first;Fi[	I"5projects//paperclip_proj/paperclip/validators.rb;TiI"∑      #      :content_type => { :content_type => "image/jpg" },
      #      :size => { :in => 0..10.kilobytes }
      #
      def function(var)
        var = var.extract_options!.dup;Fi[	@˝iDI"“    # and breaks it into variable/value pairs. Used for setting variables at runtime from the command line.
    # Only works for setting values as strings.
    #
    def function(var)
      return if var.blank?;Fi[	@˝i`I"Î    # at 3:02am and 4:02am, instead of creating two jobs this method combines
    # them into one that runs on the 2nd minute at the 3rd and 4th hour.
    #
    def function(var)
      var.map! { |var| var.split("LITERAL", "LITERAL") };Fi[	@Ü	@	i![![	I"4projects//devise_proj/devise/models/lockable.rb;Ti\I"é        else
          if lock_strategy_enabled?("LITERAL") and attempts_exceeded? then
            "LITERAL"
          else
            super;Fi[	I"6projects//diaspora_proj/helpers/publics_helper.rb;TiI"é    if var.save then
      if (var["LITERAL"] == "STRING") then
        "LITERAL"
      else
        "LITERAL" if (var["LITERAL"] == "STRING");Fi[	I"'projects//homebrew_proj/cleaner.rb;Ti&I"  def function(var)
    var = if (var.mach_o_executable? or var.text_executable?) then
      "LITERAL"
    else
      "LITERAL";Fi[	@ÍiîI"b        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      else
        # do nothing;Fi[	@ÌiI"Ñ    var.url = var
    var.mode = if ARGV.include?("STRING") then
      "LITERAL"
    else
      "LITERAL" if ARGV.include?("STRING");Fi[	@ijI"ß    when "LITERAL" then
      if @compilers.include?("LITERAL") then
        "LITERAL"
      else
        @compilers.include?("LITERAL") ? ("LITERAL") : (ENV.compiler);Fi[	@ipI"Ω    when "LITERAL" then
      if @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL"
      else
        if @compilers.include?("LITERAL") then;Fi[	@isI"¢      else
        if @compilers.include?("LITERAL") then
          "LITERAL"
        else
          @compilers.include?("LITERAL") ? ("LITERAL") : (ENV.compiler);Fi[	@izI"Ω    when "LITERAL" then
      if @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL"
      else
        if @compilers.include?("LITERAL") then;Fi[	@i}I"¢      else
        if @compilers.include?("LITERAL") then
          "LITERAL"
        else
          @compilers.include?("LITERAL") ? ("LITERAL") : (ENV.compiler);Fi[	@Âi±I"X      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      case extname;Fi[	@ÂiπI"a        "LITERAL"
      when "STRING" then
        "LITERAL"
      else
        # do nothing;Fi[	@iI"U      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL";Fi[	@i"I"U      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL";Fi[	@πi{I"i          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        else
          "LITERAL";Fi[	@πiíI"h          "LITERAL"
        when "STRING" then
          "LITERAL"
        else
          "LITERAL";Fi[	@π	i.I"l        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      else
        "LITERAL";Fi[	@π	i8I"j        "LITERAL"
      when "LITERAL", "LITERAL" then
        "LITERAL"
      else
        "LITERAL";Fi[	@º	iI"t  def function
    if (version == "LITERAL") then
      "LITERAL"
    else
      if (version == "LITERAL") then;Fi[	@º	iI"v    else
      if (version == "LITERAL") then
        "LITERAL"
      else
        if (version == "LITERAL") then;Fi[	@º	iI"â      else
        if (version == "LITERAL") then
          "LITERAL"
        else
          (version == "LITERAL") ? ("LITERAL") : (nil);Fi[	@º	iVI"n      "LITERAL"
    when "STRING" then
      "LITERAL"
    else
      if (Xcode.version >= "STRING") then;Fi[	@º	iYI"è    else
      if (Xcode.version >= "STRING") then
        "LITERAL"
      else
        (Xcode.version >= "STRING") ? ("LITERAL") : ("LITERAL");Fi[	@±i`I"≈    raise(TypeError, "STRING") unless var.is_a?(X11Dependency)
    if var.min_version.nil? then
      "LITERAL"
    else
      @min_version.nil? ? ("LITERAL") : ((@min_version <=> var.min_version));Fi[	@¡	iI"u    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL";Fi[	@¡	iZI"u    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL";Fi[	@Li)I"Ú        var[(var + "LITERAL")] = Utagx.|((var >> "LITERAL").&(Umaskx)).chr
        var[(var + "LITERAL")] = Utagx.|(var.&(Umaskx)).chr
        "LITERAL"
      else
        (var[(var + "LITERAL")] = Utag4.|((var >> "LITERAL").&("LITERAL")).chr;Fi[	@¸i≤I"T      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      var.to_s;Fi[	@	@Fi![![	@iúI"±        var = if ["STRING", "STRING", "STRING", "STRING", "STRING"].index(@delivery_method.to_s) then
          @delivery_method.to_s
        else
          "STRING"
        end;Fi[	@iI"è        if (top_level.preferred_syntax == "LITERAL") and top_level.sass_dir then
          "STRING"
        else
          "STRING"
        end;Fi[	@zi|I"x        if var = top_level.fonts_dir_without_default then
          var
        else
          "STRING"
        end;Fi[	I"Bprojects//compass_proj/compass/configuration/serialization.rb;TiCI"ä        if var.respond_to?("LITERAL") then
          (var.serialize_to_config(var) + "STRING")
        else
          "STRING"
        end;Fi[	@≥i8I"ø      if Compass.configuration.color_output and (var and COLORS.has_key?(var.to_sym)) then
        defined? $boring and $boring ? ("STRING") : ("STRING")
      else
        "STRING"
      end;Fi[	I"?projects//diaspora_proj/controllers/profiles_controller.rb;TiJI"ä    @profile_attrs["LITERAL"] = if params["LITERAL"] then
      params["LITERAL"].gsub("STRING", "STRING")
    else
      "STRING"
    end;Fi[	I":projects//diaspora_proj/helpers/application_helper.rb;Ti	I"w    if AppConfig.settings.pod_name.present? then
      AppConfig.settings.pod_name
    else
      "STRING"
    end;Fi[	I"9projects//diaspora_proj/helpers/open_graph_helper.rb;Ti'I"¢    var = if AppConfig.services.facebook.open_graph_namespace.present? then
      AppConfig.services.facebook.open_graph_namespace
    else
      "STRING"
    end;Fi[	@Øi;I"s    if image_path("STRING").include?("STRING") then
      image_path("STRING")
    else
      "STRING"
    end;Fi[	@“i©I"a          end) then
            "STRING"
          else
            "STRING"
          end));Fi[	@“iˇI"|              when "STRING" then
                "STRING"
              else
                "STRING"
              end;Fi[	@“iI"r            when "STRING" then
              "STRING"
            else
              "STRING"
            end;Fi[	@“i"I"Ä      var = if (var.! or (@dont_indent_next_line or @options["LITERAL"])) then
        var
      else
        "STRING"
      end;Fi[	@zi&I"`        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end);Fi[	@ÜirI"_        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end;Fi[	@—i}I"U      when "LITERAL" then
        "STRING"
      else
        "STRING"
      end;Fi[	@ÌiCI"Ü      if (self.site.permalink_style == "LITERAL") and (index?.! and html?) then
        "STRING"
      else
        "STRING"
      end;Fi[	I"1projects//jekyll_proj/jekyll/tags/include.rb;TiI"          var = Liquid::Template.parse(var)
          var.stack { var.render(var) }
        else
          "STRING"
        end;Fi[	@‹iI"Ã          if var.value["LITERAL"].is_a?(Nokogiri::CSS::Node) and (var.value["LITERAL"].type == "LITERAL") then
            an_plus_b(var.value["LITERAL"])
          else
            "STRING"
          end;Fi[	@‹i@I"¶        var = if ((var.value.first.type == "LITERAL") or var.value.first.value.first =~ "LITERAL") then
          "STRING"
        else
          "STRING"
        end;Fi[	@^iãI"ñ        if @options["LITERAL"].to_s.=~(Fog::AWS_BUCKET_SUBDOMAIN_RESTRICTON_REGEX) then
          "STRING"
        else
          "STRING"
        end;Fi[	@FiDI"~    self.redis = if Redis.respond_to?("LITERAL") then
      Redis.connect("LITERAL" => (true))
    else
      "STRING"
    end;Fi[	@Ii4I"ü        if ((defined? Gem and var.filename.include?(Gem.dir)) or var.filename =~ "LITERAL") then
          "STRING"
        else
          "STRING"
        end;Fi[	I"Hprojects//state_machine_proj/state_machine/yard/handlers/machine.rb;TirI"´          @var ||= if machine.states.any? then
            machine.states.map { |var| var.name }.compact.first.class.to_s
          else
            "STRING"
          end;Fi[	@˜i I"_        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end;Fi[	@YiI"†      @options["LITERAL"] = if var.has_key?("LITERAL") then
        Whenever::Output::Redirection.new(var["LITERAL"]).to_s
      else
        "STRING"
      end;Fi[	@biI"^        when NilClass then
          "STRING"
        else
          "STRING"
        end;Fi[	@bi6I"\        when stdout then
          "STRING"
        else
          "STRING"
        end;Fi[	@&@i [ [	@[iI"z    #     def attributes
    #       {'name' => nil, 'age' => nil}
    #     end
    #
    #     def capitalized_name;Fi[	@[iHI"Ñ    #     def initialize(data = {})
    #       @data = data
    #     end
    #
    #     def read_attribute_for_serialization(key);Fi[	@^ioI"|      #         instance_variable_set("@#{key}", value)
      #       end
      #     end
      #
      #     def attributes;Fi[	@aiÀI"|      #         instance_variable_set("@#{key}", value)
      #       end
      #     end
      #
      #     def attributes;Fi[	I"Hprojects//activemodel_proj/active_model/validations/confirmation.rb;TiI"¨      #       validates_confirmation_of :email_address,
      #                                 message: 'should match confirmation'
      #     end
      #
      #   View:;Fi[	@Äi6I"∞      #         record.errors.add attribute, "must start with 'the'" unless value =~ /\Athe/i
      #       end
      #     end
      #
      #     validates :name, title: true;Fi[	@âi+I"      #         record.errors.add :base, 'This record is invalid'
      #       end
      #     end
      #
      #     private;Fi[	@ñiMI"      #     validate do |comment|
      #       comment.must_be_friends
      #     end
      #
      #     def must_be_friends;Fi[	@ñiI"Å    #     def initialize(data = {})
    #       @data = data
    #     end
    #
    #     def read_attribute_for_validation(key);Fi[	@≠i:I"è      #     archive :my_archive do |archive|
      #       archive.add '/some/directory'
      #     end
      #
      #     compress_with Gzip;Fi[	@≠iBI"∞      #       encryptor.passphrase = 'a secret'
      #       encryptor.recipients = ['joe@example.com', 'mary@example.com']
      #     end
      #
      #     store_with SFTP;Fi[	@√i^I"y      #         @pending_notifications ||= []
      #       end
      #     end
      #
      def function(var, var);Fi[	@…i≤I"≠    #     devise_scope :owner do
    #       post "deactivate", :to => "registrations#deactivate", :as => "deactivate_registration"
    #     end
    #
    def function(var);Fi[	@’i•I"H    #         end
    #       end
    #     end
    #
    # outputs;Fi[	@ÏiI"h    #     def initialize(name)
    #       @name = name
    #     end
    #     
    #     def name;Fi[	@¯iII"§    #         transition :idling => :parked
    #       end
    #     end
    #     
    #     state_machine :alarm_state, :namespace => 'alarm', :initial => :on do;Fi[	@¯i{I"®    #         transition :idling => :parked
    #       end
    #     end
    #     
    #     state_machine :alarm_state, :namespace => 'alarm', :initial => :active do;Fi[	@ i)I"Ü        #     before :save do
        #       # log message
        #     end
        #     
        #     # Target all state machines;Fi[	@ i.I"∏        #     before_transition :parked => :idling, :on => :ignite do
        #       # put on seatbelt
        #     end
        #     
        #     # Target a specific state machine;Fi[	@ i3I"ª        #     before_transition :state, any => :idling do
        #       # put on seatbelt
        #     end
        #     
        #     # Target all state machines without requirements;Fi[	@ iÅI"Æ        #     after_transition_failure do |transition|
        #       # log failure
        #     end
        #     
        #     after_transition_failure :on => :ignite do;Fi[	@iÈI"}    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize;Fi[	@i˙I"â    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize(attributes = {});Fi[	@iI"â    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize(attributes = {});Fi[	@i$I"v    #       state nil, :idling
    #       ...
    #     end
    #     
    #     def initialize(attributes = {});Fi[	@iëI"ë    #         transition :parked => :idling
    #       end
    #     end
    #     
    #     state_machine :alarm_state, :initial => :active do;Fi[	@i»I"°    #         transition all => :off
    #       end
    #     end
    #     
    #     state_machine :alarm_state, :initial => :active, :namespace => 'alarm' do;Fi[	@E@wi[[	@aieI"U        private
        
        def function
          # do nothing
        end;Fi[	@Ë
iGI"∞    # that the arguments supplied are valid. You could for example raise an
    # +ArgumentError+ when invalid options are supplied.
    def function
      # do nothing
    end;Fi[	@gi2I"á      ##
      # Each subclass must define a +path+ where remote files will be stored
      def function
        # do nothing
      end;Fi[	@[iOI"j      ##
      # Note: Storage::RSync doesn't cycle
      def function
        # do nothing
      end;Fi[	@¢i.I"Q        end
        
        def function
          # do nothing
        end;Fi[	@∞iI"i  module Installers
    class BareInstaller < Base
      def function
        # do nothing
      end;Fi[	@∞iI"G      end
      
      def function
        # do nothing
      end;Fi[	@Åi&I"§      # The default prepare method -- it is a no-op.
      # Generally you would create required directories, etc.
      def function
        # do nothing
      end;Fi[	@√i.I"G      end
      
      def function
        # do nothing
      end;Fi[	@∆iQI"G      end
      
      def function
        # do nothing
      end;Fi[	I"7projects//devise_proj/devise/models/recoverable.rb;TiQI"G      end
      
      def function
        # do nothing
      end;Fi[	I"Aprojects//devise_proj/devise/models/token_authenticatable.rb;Ti%I"m      
      # Hook called after token authentication.
      def function
        # do nothing
      end;Fi[	@ªi:I"3  end
  
  def function
    # do nothing
  end;Fi[	I".projects//diaspora_proj/models/service.rb;Ti'I"3  end
  
  def function
    # do nothing
  end;Fi[	@“izI"=    end
    
    def function
      # do nothing
    end;Fi[	I"=projects//haml_proj/haml/helpers/safe_erubis_template.rb;TiI"nmodule Haml
  class SafeErubisTemplate < Tilt::ErubisTemplate
    def function
      # do nothing
    end;Fi[	I"-projects//homebrew_proj/extend/string.rb;Ti%I"=end
class NilClass
  def function
    # do nothing
  end;Fi[	@
iI"v        ###
        # Called when document starts parsing
        def function
          # do nothing
        end;Fi[	@
iI"t        ###
        # Called when document ends parsing
        def function
          # do nothing
        end;Fi[	I"<projects//omni_proj/omniauth/test/strategy_test_case.rb;TiI"G      end
      
      def function
        # do nothing
      end;Fi[	@…iI"=    end
    
    def function
      # do nothing
    end;Fi[	@‘iI"Ñ      #
      # This is where you POST or PUT or whatever to your Failure service.
      def function
        # do nothing
      end;Fi[	I"Uprojects//state_machine_proj/state_machine/integrations/mongo_mapper/versions.rb;Ti1I"{          (action == "LITERAL") ? ("LITERAL") : (super)
        end
        def function
          # do nothing
        end;Fi[	@Ii:I"W          true
        end
        def function
          # do nothing
        end;Fi[	@Ii"I"±          (defined? ::Sequel::MAJOR.! or ((::Sequel::MAJOR == "LITERAL") and (::Sequel::MINOR <= "LITERAL")))
        end
        def function
          # do nothing
        end;Fi[	@Ii%I"_          # do nothing
        end
        def function
          # do nothing
        end;Fi[	I"var;F@	i[[	@7iÃI"          var[var] = var.map { |var| full_message(var, var) }
        end
        var
      else
        self.messages.dup;Fi[	@≠iI"ò          var = clean_identifier(var)
          if system_identifiers.include?(var) then
            var
          else
            var = user_keys[var];Fi[	@zi{I"      def function
        if var = top_level.fonts_dir_without_default then
          var
        else
          "STRING";Fi[	@zi®I"é      def function(var)
        if (File::SEPARATOR == "STRING") then
          var
        else
          var.gsub(File::SEPARATOR, "STRING");Fi[	I"<projects//compass_proj/compass/configuration/helpers.rb;Ti!I"î        else
          if var.is_a?(Compass::Configuration::Data) then
            var
          else
            if var.respond_to?("LITERAL") then;Fi[	@≠ikI"      else
        if var = var.manifest(var).help then
          var
        else
          "STRING".gsub("LITERAL", "STRING");Fi[	I"Qprojects//compass_proj/compass/sass_extensions/functions/gradient_support.rb;Ti›I"ö      Sass::Script::List.new(var.map do |var|
        if ColorStop.===(var) then
          var
        else
          if Sass::Script::Color.===(var) then;Fi[	I"8projects//devise_proj/devise/models/rememberable.rb;Ti5I"è        else
          if respond_to?("LITERAL") and var = authenticatable_salt then
            var
          else
            raise("STRING");Fi[	I":projects//diaspora_proj/helpers/markdownify_helper.rb;Ti#I"n    var.gsub("LITERAL") do |var|
      if var =~ "LITERAL" then
        var
      else
        var.strip!;Fi[	I"7projects//diaspora_proj/helpers/notifier_helper.rb;TiI"≈      var = truncate(var.formatted_message("LITERAL" => (true)), "LITERAL" => (var["LITERAL"]))
      var = process_newlines(var) if var["LITERAL"]
      var
    else
      I18n.translate("STRING");Fi[	I"3projects//diaspora_proj/models/notification.rb;Ti"I"h        if var then
          var.email_the_user(var, var)
          var
        else
          nil;Fi[	@niNI"Y        nil
      end
      var
    else
      make_notification(var, var, var, var);Fi[	@“i!I"ñ    def function(var, var, var)
      var = if (var.! or (@dont_indent_next_line or @options["LITERAL"])) then
        var
      else
        "STRING";Fi[	I"9projects//haml_proj/haml/helpers/action_view_mods.rb;TiwI"º          var = (form_tag_without_haml(var, var, *var, &var) + "STRING")
          (var << "STRING") if var
          var
        else
          form_tag_without_haml(var, var, *var, &var);Fi[	@ziÌI"Õ  def self.detect(var, var)
    if var.is_a?(Class) and var.ancestors.include?(AbstractDownloadStrategy) then
      var
    else
      var.is_a?(Symbol) ? (detect_from_symbol(var)) : (detect_from_url(var));Fi[	@Üi*I"ü    @var ||= (var = Pathname.new(folder)
    if var.absolute? and (var / "STRING").executable? then
      var
    else
      if File.executable?("STRING") then;Fi[	I"Nprojects//homebrew_proj/vendor/multi_json/adapters/nsjsonserialization.rb;TiI"É        if var then
          var = symbolize_keys(var) if var["LITERAL"]
          var
        else
          super(var, var = {});Fi[	@ıi I"å      var = self.converters.select { |var| (var.class == var) }
      if var = var.first then
        var
      else
        raise("STRING");Fi[	@„ieI"°          var = var.to_s
          if var =~ "LITERAL" then
            var
          else
            CSS.xpath_for(var, "LITERAL" => (var), "LITERAL" => (var));Fi[	@ÊiYI"|        var = options[var].call(env)
        return nil unless var.is_a?(String)
        var
      else
        options[var];Fi[	I"9projects//paperclip_proj/paperclip/interpolations.rb;TioI"ù      else
        if var.include?(var) then
          var
        else
          var.empty?.! ? (var.first) : ("LITERAL".match(var.content_type)["LITERAL"]);Fi[	@^ióI"í          YAML.load(ERB.new(File.read(var)).result)
        when Hash then
          var
        else
          if var.respond_to?("LITERAL") then;Fi[	I"5projects//paperclip_proj/paperclip/storage/s3.rb;Ti˝I"é          YAML.load(ERB.new(File.read(var)).result)
        when Hash then
          var
        else
          raise(ArgumentError, "STRING");Fi[	@Ci-I"V        var = new(*var)
        var.to_s = var
        var
      else
        nil;Fi[	I"Lprojects//state_machine_proj/state_machine/integrations/active_model.rb;Ti∞I"           @callbacks[((var == "LITERAL") ? ("LITERAL") : (var))].insert("LITERAL", (var = Callback.new(var, var, &var)))
          add_states(var.known_states)
          var
        else
          super;Fi[	I" action { ["LITERAL", var] };FI"(when var = @ss.scan("LITERAL") then;Fi[[	@i<I"∫          case
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@i>I"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@i@I"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iBI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iDI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iFI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iHI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iJI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iLI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iNI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iPI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iRI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iTI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iVI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iXI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@iZI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@i\I"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@i^I"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@i`I"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@ibI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@idI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@ifI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@ihI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@ijI"”            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] };Fi[	@ilI"Õ            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { [var, var] };Fi[	I"+problem("STRING") if text =~ "LITERAL";F@»i[[	@Íi≤I"å  
  def function
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    unless (f.name == "STRING") then;Fi[	@ÍiπI"í      end
    end
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi∫I"≥    end
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiªI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiºI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiΩI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiæI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiøI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi¿I"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi¡I"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi¬I"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi√I"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiƒI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi≈I"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi∆I"Ó    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL" and text =~ "LITERAL".!;Fi[	@Íi…I"Ó    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL" and text =~ "LITERAL".!
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi I"Ó    problem("STRING") if text =~ "LITERAL" and text =~ "LITERAL".!
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiÀI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiÃI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiÕI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiŒI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiœI"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi–I"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi—I"÷    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi“I"±    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
  end;Fi[	@Ü	@@i[[	@ÍiêI"{      var = case var.hash_type
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL";Fi[	@ÍiíI"n        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL";Fi[	@Âi•I"a    case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ÂißI"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@Âi©I"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@Âi´I"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@Âi≠I"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ÂiØI"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@i
I"h    case @@cpu_type
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@iI"l    case @@intel_family
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@iI"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@iI"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@iI"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@iI"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@i I"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@πiyI"s          "LITERAL"
        when *var then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[	@πiÄI"w          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[	@πiàI"w          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[	@πiäI"x          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[	@πiéI"w          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[	@π	iHI"l    case archs.length
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      archs.first;Fi[	@º	iRI"h    case default_cc
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@¸i¨I"s    super(Version.new(case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@¸iÆI"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@¸i∞I"d      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ì@íi[[	@i;I"®        when nil then
          case
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@i=I"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@i?I"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iAI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iCI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iEI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iGI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iII"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iKI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iMI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iOI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iQI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iSI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iUI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iWI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iYI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@i[I"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@i]I"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@i_I"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iaI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@icI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@ieI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@igI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@iiI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@ikI"Ÿ          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then
            action { ["LITERAL", var] }
          when var = @ss.scan("LITERAL") then;Fi[	@EI"
super;Fi[[	I"/projects//activemodel_proj/active_model.rb;Ti:I"N  end
  
  def function
    super
    ActiveModel::Serializer.eager_load!;Fi[	I"3projects//backup_proj/backup/database/mysql.rb;Ti6I"¨      # Performs the mysqldump command and outputs the
      # data to the specified path based on the 'trigger'
      def function
        super
        var = Pipeline.new;Fi[	I"8projects//backup_proj/backup/database/postgresql.rb;Ti6I"©      # Performs the pgdump command and outputs the
      # data to the specified path based on the 'trigger'
      def function
        super
        var = Pipeline.new;Fi[	@Li4I"€      # the Redis server to persist the current state to the dump file
      # before copying the dump to get the most recent updates in to the backup
      def function
        super
        invoke_save! if invoke_save;Fi[	@Oi%I"Ã      # Performs the riak-admin command and outputs the
      # data to the specified path based on the 'trigger'
      def function
        super
        FileUtils.chown_R("STRING", "STRING", @dump_path);Fi[	I"6projects//backup_proj/backup/syncer/cloud/base.rb;Ti'I"¡        # the Cloud specific defaults are set here before evaluating
        # any block provided in the user's configuration file.
        def function
          super
          @var ||= false;Fi[	@iiI"ü        # Instantiates a new RSync Syncer object
        # and sets the default configuration
        def function
          super
          @var ||= Array.new;Fi[	I"<projects//compass_proj/compass/commands/project_base.rb;TiI"@      end
      
      def function
        super
      end;Fi[	I"0projects//compass_proj/compass/test_case.rb;TiI"Q    Test::Unit::TestCase
  end
    def function
      super
      @var = nil;Fi[	I"7projects//devise_proj/devise/models/confirmable.rb;TißI"Y      end
      
      def function
        super
        confirm! unless confirmed?;Fi[	I"Dprojects//diaspora_proj/controllers/registrations_controller.rb;TiI",  end
  
  def function
    super
  end;Fi[	@·i—I"–      # Processes the options set by the command-line arguments,
      # and runs the Haml compiler appropriately.
      def function
        super
        @options["LITERAL"]["LITERAL"] = @options["LITERAL"];Fi[	@Âi\I"fend
module ObserverPathnameExtension
  def function
    super
    puts("STRING") if ARGV.verbose?;Fi[	@ÂibI"J  end
  
  def function
    super
    puts("STRING") if ARGV.verbose?;Fi[	@ÂimI"J  end
  
  def function
    super
    puts("STRING") if ARGV.verbose?;Fi[	@ÂirI"J  end
  
  def function
    super
    puts("STRING") if ARGV.verbose?;Fi[	@èirI"Ñ      
      # Initializes class-level extensions and defaults for this machine
      def function
        super
        load_locale;Fi[	@èiñI"®      
      # Adds hooks into validation for automatically firing events
      def function
        super
        define_validation_hook if runs_validations_on_action?;Fi[	I"Vprojects//state_machine_proj/state_machine/integrations/active_record/versions.rb;Ti>I"Õ          (action == "LITERAL") ? ("LITERAL") : (super)
        end
        def function
          super
          unless (::ActiveRecord::Observer < StateMachine::Integrations::ActiveModel::Observer) then;Fi[	@ki2I"ë      
      # Initializes class-level extensions and defaults for this machine
      def function
        super
        load_observer_extensions;Fi[	@kijI"™      
      # Adds hooks into validation for automatically firing events
      def function
        super
        if (action == "LITERAL") and supports_validations? then;Fi[	I"Fprojects//state_machine_proj/state_machine/integrations/sequel.rb;TiWI"≠      
      # Defines validation hooks if the machine's action is to save the model
      def function
        super
        define_validation_hook if (action == "LITERAL");Fi[	@i’I"X    
    # Resets callback tracking
    def function
      super
      @var = false;Fi[	@i€I"É    
    # Resets the event attribute so it can be re-evaluated if attempted again
    def function
      super
      each do |var|;Fi[	I"Zprojects//state_machine_proj/state_machine/yard/templates/default/class/html/setup.rb;TiI"ërequire("tempfile")
# Define where state machine descriptions will be rendered
def function
  super
  sections.place("LITERAL").before("LITERAL");Fi[	@±@Ñi[[	@ñiÂI"Æ    #   person.valid?       # => true
    #   person.valid?(:new) # => false
    def function(var)
      begin
        (var, self.validation_context = validation_context, var;Fi[	@litI"Q      end
      
      def function(var)
        begin
          (@var = var;Fi[	@“iI"y    end
    
    def function(var)
      begin
        (var = instance_variable_defined?("STRING") ? (@node) : (nil);Fi[	@’iI"∫    # @param i [Fixnum] The number of tabs to use
    # @yield A block in which the indentation will be `i` spaces
    def function(var)
      begin
        (var = haml_buffer.tabulation;Fi[	@’i5I"Ã    # @param buffer [Haml::Buffer] The Haml buffer to use temporarily
    # @yield A block in which the given buffer should be used
    def function(var)
      begin
        (@var, var = var, @haml_buffer;Fi[	@‰iWI"J    end
    
    def function(var)
      begin
        (var = var.pos;Fi[	@iqI"q  end
end
def function(var)
  begin
    (var = if var.linked_keg.directory? and var.linked_keg.symlink? then;Fi[	@ﬁizI"@  end
  
  def function(var)
    begin
      (var = $stdout;Fi[	I"(projects//homebrew_proj/cmd/info.rb;TiBI"k  end
  
  def function(var)
    begin
      (exec("STRING", github_info(var)) if ARGV.flag?("STRING");Fi[	@@iSI"R  end
  
  def function(var)
    begin
      (var = FormulaInstaller.new(var);Fi[	I"+projects//homebrew_proj/cmd/upgrade.rb;Ti0I"V  end
  
  def function(var)
    begin
      (var = if var.opt_prefix.exist? then;Fi[	@îijI"M  end
  
  def function(var)
    begin
      (var = Tab.for_formula(var);Fi[	@óiI"P  end
  
  def function(var)
    begin
      var.verify_checksum(@checksum);Fi[	@πicI"b  end
  
  def function(var)
    begin
      (raise("STRING") if linked_keg_record.directory?;Fi[	@πiØI"_  protected
  
  def function(var)
    begin
      if var.symlink? and var.directory? then;Fi[	@i[I"z    #
    # Returns nothing.
    def function(var)
      begin
        (var, var, var, var, var = *var.match(MATCHER);Fi[	@<iFI"m        end
        
        def function(var)
          begin
            (var = StringIO.new("STRING");Fi[	@äi§I"|      end
      
      def function(var)
        begin
          original_filename ? (s3_object(var).exists?) : (false);Fi[	@€iùI"O    end
    
    def function(var)
      begin
        (var = (args or []);Fi[	I"/projects//rescue_proj/resque/json_coder.rb;Ti	I"emodule Resque
  class JsonCoder < Coder
    def function(var)
      begin
        JSON.dump(var);Fi[	@CiùI"Ä    
    # Processes a given job in the child.
    def function(var)
      begin
        (run_hook("LITERAL", var) if will_fork?;Fi[	@Fi⁄I"\  #
  # Returns a Ruby object.
  def function(var)
    begin
      queue(var).pop(true);Fi[	@IiI"J    end
    
    def function(var)
      begin
        @app.call(var);Fi[	@QiAI"É    #
    # @param method [String, Symbol] Message to send to the object
    def function(var)
      begin
        send(var.to_sym);Fi[	@I"# Returns nothing.;Fi[[	I"0projects//jekyll_proj/jekyll/convertible.rb;TiI"¢    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #
    # Returns nothing.
    def function(var, var);Fi[	@›i#I"o    
    # Transform the contents based on the content type.
    #
    # Returns nothing.
    def function;Fi[	@›i=I"é    # payload - The site payload Hash.
    # layouts - A Hash of {"name" => "layout"}.
    #
    # Returns nothing.
    def function(var, var);Fi[	I":projects//jekyll_proj/jekyll/generators/pagination.rb;TiI"T    #
    # site - The Site.
    #
    # Returns nothing.
    def function(var);Fi[	@•i&I"r    #
    # name - The String filename of the layout file.
    #
    # Returns nothing.
    def function(var);Fi[	@Ìi$I"¢    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #
    # Returns nothing.
    def function(var, var);Fi[	@Ìi\I"p    #
    # name - The String filename of the page file.
    #
    # Returns nothing.
    def function(var);Fi[	@ÌigI"ö    # layouts      - The Hash of {"name" => "layout"}.
    # site_payload - The site payload Hash.
    #
    # Returns nothing.
    def function(var, var);Fi[	@Ìi~I"r    #
    # dest - The String path to the destination dir.
    #
    # Returns nothing.
    def function(var);Fi[	@iBI"¢    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #
    # Returns nothing.
    def function(var, var);Fi[	@iYI"p    #
    # name - The String filename of the post file.
    #
    # Returns nothing.
    def function(var);Fi[	@i∫I"ò    # layouts      - A Hash of {"name" => "layout"}.
    # site_payload - The site payload hash.
    #
    # Returns nothing.
    def function(var, var);Fi[	@iœI"r    #
    # dest - The String path to the destination dir.
    #
    # Returns nothing.
    def function(var);Fi[	@ıi"I"s    
    # Public: Read, process, and write this Site to output.
    #
    # Returns nothing.
    def function;Fi[	@ıiBI"|    
    # Load necessary libraries, plugins, converters, and generators.
    #
    # Returns nothing.
    def function;Fi[	@ıiUI"|    
    # Read Site data from disk and load it into internal data structures.
    #
    # Returns nothing.
    def function;Fi[	@ıi^I"ê    # Read all the files in <source>/<layouts> and create a new Layout object
    # with each one.
    #
    # Returns nothing.
    def function;Fi[	@ıipI"Ñ    #
    # dir - The String relative path of the directory to read. Default: ''.
    #
    # Returns nothing.
    def function(var);Fi[	@ıiàI"|    #
    # dir - The String relative path of the directory to read.
    #
    # Returns nothing.
    def function(var);Fi[	@ıi†I"Y    
    # Run each of the Generators.
    #
    # Returns nothing.
    def function;Fi[	@ıißI"a    
    # Render the site to the destination.
    #
    # Returns nothing.
    def function;Fi[	@ıi∂I"y    
    # Remove orphaned files and empty directories in destination.
    #
    # Returns nothing.
    def function;Fi[	@ıiŸI"c    
    # Write static files, pages, and posts.
    #
    # Returns nothing.
    def function;Fi[	I"$projects//jekyll_proj/jekyll.rb;Ti
I"k#
# path - The String relative path from here to the directory.
#
# Returns nothing.
def function(var);Fi[	I"version("STRING") do;FI"def self.active?;Fi[[	I"Uprojects//state_machine_proj/state_machine/integrations/active_model/versions.rb;TiI"æ  module Integrations
    module ActiveModel
      version("STRING") do
        def self.active?
          (defined? ::ActiveModel::VERSION.! or (::ActiveModel::VERSION::MAJOR == "LITERAL"));Fi[	@iI"“      end
      
      version("STRING") do
        def self.active?
          defined? ::ActiveModel::VERSION and ((::ActiveModel::VERSION::MAJOR == "LITERAL") and (::ActiveModel::VERSION::MINOR == "LITERAL"));Fi[	@îiI"   module Integrations
    module ActiveRecord
      version("STRING") do
        def self.active?
          ((::ActiveRecord::VERSION::MAJOR == "LITERAL") or ((::ActiveRecord::VERSION::MAJOR == "LITERAL") and (::ActiveRecord::VERSION::MINOR == "LITERAL")));Fi[	@îiI"|      end
      
      version("STRING") do
        def self.active?
          (::ActiveRecord::VERSION::MAJOR == "LITERAL");Fi[	@îiHI"≠      end
      
      version("STRING") do
        def self.active?
          (::ActiveRecord::VERSION::MAJOR == "LITERAL") and (::ActiveRecord::VERSION::MINOR < "LITERAL");Fi[	@îiQI"ﬁ      end
      
      version("STRING") do
        def self.active?
          (::ActiveRecord::VERSION::MAJOR == "LITERAL") and ((::ActiveRecord::VERSION::MINOR < "LITERAL") or (::ActiveRecord::VERSION::TINY < "LITERAL"));Fi[	@îiZI"·      end
      
      version("STRING") do
        def self.active?
          (::ActiveRecord::VERSION::MAJOR == "LITERAL") and ((::ActiveRecord::VERSION::MINOR == "LITERAL") and (::ActiveRecord::VERSION::TINY >= "LITERAL"));Fi[	@îicI"Æ      end
      
      version("STRING") do
        def self.active?
          (::ActiveRecord::VERSION::MAJOR == "LITERAL") and (::ActiveRecord::VERSION::MINOR == "LITERAL");Fi[	I"Tprojects//state_machine_proj/state_machine/integrations/data_mapper/versions.rb;TiI"å  module Integrations
    module DataMapper
      version("STRING") do
        def self.active?
          ::DataMapper::VERSION =~ "LITERAL";Fi[	@%iI"ô      end
      
      version("STRING") do
        def self.active?
          (::DataMapper::VERSION =~ "LITERAL" or ::DataMapper::VERSION =~ "LITERAL");Fi[	@%iI"v      end
      
      version("STRING") do
        def self.active?
          ::DataMapper::VERSION =~ "LITERAL";Fi[	@%i%I"w      end
      
      version("STRING") do
        def self.active?
          (::DataMapper::VERSION == "STRING");Fi[	@IiI"å  module Integrations
    module MongoMapper
      version("STRING") do
        def self.active?
          defined? ::MongoMapper::Plugins.!;Fi[	@IiI"ô      end
      
      version("STRING") do
        def self.active?
          (defined? ::MongoMapper::Version.! or ::MongoMapper::Version =~ "LITERAL");Fi[	@IiI"ô      end
      
      version("STRING") do
        def self.active?
          (defined? ::MongoMapper::Version.! or ::MongoMapper::Version =~ "LITERAL");Fi[	@IiBI"Ω      end
      
      version("STRING") do
        def self.active?
          defined? ::MongoMapper::Plugins and (defined? ::MongoMapper::Version.! or ::MongoMapper::Version =~ "LITERAL");Fi[	@IiKI"ñ      end
      
      version("STRING") do
        def self.active?
          defined? ::MongoMapper::Version and ::MongoMapper::Version =~ "LITERAL";Fi[	I"Pprojects//state_machine_proj/state_machine/integrations/mongoid/versions.rb;TiI"Ü  module Integrations
    module Mongoid
      version("STRING") do
        def self.active?
          ::Mongoid::VERSION =~ "LITERAL";Fi[	@8iI"s      end
      
      version("STRING") do
        def self.active?
          ::Mongoid::VERSION =~ "LITERAL";Fi[	@IiI"Ì  module Integrations
    module Sequel
      version("STRING") do
        def self.active?
          (defined? ::Sequel::MAJOR.! or ((::Sequel::MAJOR == "LITERAL") or ((::Sequel::MAJOR == "LITERAL") and (::Sequel::MINOR <= "LITERAL"))));Fi[	@IiI"≤      end
      
      version("STRING") do
        def self.active?
          (defined? ::Sequel::MAJOR.! or ((::Sequel::MAJOR == "LITERAL") and (::Sequel::MINOR <= "LITERAL")));Fi[	@Ii0I"÷      end
      
      version("STRING") do
        def self.active?
          (defined? ::Sequel::MAJOR.! or ((::Sequel::MAJOR == "LITERAL") or ((::Sequel::MAJOR == "LITERAL") and (::Sequel::MINOR <= "LITERAL"))));Fi[	@Ii<I"‘      end
      
      version("STRING") do
        def self.active?
          defined? ::Sequel::MAJOR and ((::Sequel::MAJOR == "LITERAL") and ((::Sequel::MINOR >= "LITERAL") and (::Sequel::MINOR <= "LITERAL")));Fi[	I"when "STRING" then;F@Fi[[	@iI"ù        if var.is_a?(Sass::Script::String) then
          var = case var.value
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@iI"Ä          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@iI"Ä          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@iI"Ä          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@i I"w          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          else;Fi[	@iDI"ç      var = var.value.split("LITERAL").map do |var|
        case var
        when "STRING" then
          "STRING"
        when "STRING" then;Fi[	@iFI"{        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then;Fi[	@iHI"{        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then;Fi[	@iJI"{        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then;Fi[	@iLI"m        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        else;Fi[	@“iıI"ï            else
              case @node.value["LITERAL"]
              when "STRING" then
                "STRING"
              when "STRING" then;Fi[	@“i˜I"î              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then;Fi[	@“i˘I"î              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then;Fi[	@“i˚I"î              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then;Fi[	@“i˝I"Ü              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              else;Fi[	@“iI"û          if @options.html4? then
            case @node.value["LITERAL"]
            when "STRING" then
              "STRING"
            when "STRING" then;Fi[	@“i	I"|            when "STRING" then
              "STRING"
            when "STRING" then
              "STRING"
            else;Fi[	@‹igI"ä          when "STRING", "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@‹iiI"Ä          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@‹ikI"Ä          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@‹imI"Ä          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@‹ioI"Ä          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@‹iqI"w          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          else;Fi[	I"# == Examples;F@i[[	I"=projects//state_machine_proj/state_machine/assertions.rb;Ti
I"ö    # If any invalid keys are found, an ArgumentError will be raised.
    #
    # == Examples
    # 
    #   options = {:name => 'John Smith', :age => 30};Fi[	@yiI"d    # raised.
    # 
    # == Examples
    # 
    #   options = {:only => :on, :except => :off};Fi[	I"9projects//state_machine_proj/state_machine/branch.rb;Ti<I"ò    # conditions pass on the given object.
    # 
    # == Examples
    # 
    #   branch = StateMachine::Branch.new(:parked => :idling, :on => :ignite);Fi[	@~ieI"≠    #   conditionals defined for this branch.  Default is true.
    # 
    # == Examples
    # 
    #   branch = StateMachine::Branch.new(:parked => :idling, :on => :ignite);Fi[	@ÏiI"    # * String
    # 
    # == Examples
    # 
    # Below are examples of the various ways that a method can be evaluated;Fi[	@ÒiI"w    #   conditionals defined for each one.  Default is true.
    # 
    # == Examples
    # 
    #   class Vehicle;Fi[	@Òi<I"w    #   conditionals defined for each one.  Default is true.
    # 
    # == Examples
    # 
    #   class Vehicle;Fi[	@Òi`I"s    # that transition will be used.
    # 
    # == Examples
    # 
    #   class Vehicle < ActiveRecord::Base;Fi[	@ iI"é        # information about the various configuration options available.
        # 
        # == Examples
        # 
        #   class Vehicle;Fi[	@ iPI"        # as the given requirements match the transition.
        # 
        # == Examples
        # 
        #   class Vehicle;Fi[	@i6I"y    # the section below.
    # 
    # == Examples
    # 
    # With the default name/attribute and no configuration:;Fi[	@RiI"≠    # Generates a blacklist matcher based on the given set of values
    # 
    # == Examples
    # 
    #   matcher = StateMachine::AllMatcher.instance - [:parked, :idling];Fi[	@Ri9I"Ä    # for this matcher.
    # 
    # == Examples
    # 
    #   matcher = StateMachine::WhitelistMatcher.new([:parked, :idling]);Fi[	@RiLI"Ä    # for this matcher.
    # 
    # == Examples
    # 
    #   matcher = StateMachine::BlacklistMatcher.new([:parked, :idling]);Fi[	@RigI"ã    # This value should be defined in the context.
    # 
    # == Examples
    # 
    #   matcher = StateMachine::LoopbackMatcher.instance;Fi[	@/i	I"    # Represents a state that matches all known states in a machine.
    # 
    # == Examples
    # 
    #   class Vehicle;Fi[	@/i(I"n    # for defining transitions which are loopbacks.
    # 
    # == Examples
    # 
    #   class Vehicle;Fi[	@4iI"P    # will be raised.
    # 
    # == Examples
    # 
    #   class Vehicle;Fi[	@4i'I"j    # the value of the attribute on the object.
    # 
    # == Examples
    # 
    #   class Vehicle;Fi[	@4iBI"H    # raised.
    # 
    # == Examples
    # 
    #   class Vehicle;Fi[	@>iØI"f    # can be skipped by passing in +false+.
    # 
    # == Examples
    # 
    #   class Vehicle;Fi[	I"var = var["LITERAL"];F@•i[[	@œiπI"≠    # just like you can do with `dom_id()` and `dom_class()` in Rails
    def function(var)
      var = var["LITERAL"]
      var = var["LITERAL"]
      return {} if var.nil?;Fi[	@“iÑI"z        var = false
      else
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@“iÖI"~      else
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@“iÜI"ê        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@“iáI"}        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
      end;Fi[	I"5projects//jekyll_proj/jekyll/migrators/drupal.rb;TiI"∂      File.open("STRING", "STRING") { |var| var.puts("STRING") }
      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@≤iI"í      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@≤iI"é        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = Time.at(var);Fi[	I"5projects//jekyll_proj/jekyll/migrators/joomla.rb;TiI"à      var = "STRING"
      var[var].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@πiI"ê      var[var].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@πiI"≤        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ("STRING" % [var.year, var.month, var.day, var]);Fi[	I"7projects//jekyll_proj/jekyll/migrators/mephisto.rb;TiI"ó      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@¿iI"í      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@¿iI"¡        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ([var.year, var.month, var.day, var].join("STRING") + "STRING");Fi[	@QiI"™        var = var["LITERAL"]
        var = var["LITERAL"].gsub("LITERAL", "STRING")
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@QiI"™        var = var["LITERAL"].gsub("LITERAL", "STRING")
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@QiI"©        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ((var + "STRING") + var) if var.!=(nil);Fi[	I":projects//jekyll_proj/jekyll/migrators/textpattern.rb;TiI"ó      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@ÕiI"í      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@ÕiI"ª        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ([var.strftime("STRING"), var].join("STRING") + "STRING");Fi[	I"8projects//jekyll_proj/jekyll/migrators/wordpress.rb;Ti"I"ï    
    def self.process_post(var, var, var)
      var = var["LITERAL"]
      var = var["LITERAL"]
      var = clean_entities(var) if var["LITERAL"];Fi[	@@Ei[[	@≠ikI"≥      ##
      # Remove any temporary directories and reset all instance variables.
      #
      def function
        FileUtils.rm_rf(@tempdirs, "LITERAL" => (true)) if @tempdirs;Fi[	@≠i}I"≤      # messages, like the "Reading passphrase from file descriptor..."
      # messages during symmetric encryption
      #
      def function
        @var ||= (var = ["STRING"];Fi[	@≠iëI"´      # we will get those messages on STDOUT for the log, without the actual
      # secret key listing which we don't care about.
      #
      def function
        begin;Fi[	@≠i±I"∫      # If any errors occur during this process, we can not proceed.
      # We'll cleanup to remove the tempdir (if created) and raise an error.
      #
      def function
        begin;Fi[	@≠i–I"Ã      # Returns the options needed for the gpg command line to perform
      # the encryption based on the #mode.
      #
      def function
        @var ||= (var = symmetric_options if mode.!=("LITERAL");Fi[	@≠i›I"≥      # try to use :passphrase_file if it's set.
      # If the option can not be set, log a warning and return nil.
      #
      def function
        var = setup_passphrase_file;Fi[	@≠iÔI"≠      # return the file's path. If an error occurs, log a warning.
      # Return false if no :passphrase is set or an error occurs.
      #
      def function
        begin;Fi[	@≠iI"÷      # and return the command line options to perform asymmetric encryption.
      # Log a warning and return nil if no valid recipients are found.
      #
      def function
        if user_recipients.empty? then;Fi[	@≠iI"»      # a warning will be issued; as we will attempt to encrypt the backup
      # and proceed if at all possible.
      #
      def function
        @var ||= [recipients].flatten.compact.map do |var|;Fi[	@≠i-I"¬      # (Hash keys) 'cleaned' for exact matching. If the cleaning process
      # creates duplicate keys, the user will be warned.
      #
      def function
        @var ||= (var = (keys or {});Fi[	@≠iXI"√      # keyring (based on #gpg_homedir setting) and return an Array of all
      # identifiers which could be used to specify a valid key.
      #
      def function
        @var ||= (var = false;Fi[	@Äi}I"˘      #   # allow_unconfirmed_access_for = 0.days
      #   confirmation_period_valid?   # will always return false
      #
      def function
        confirmation_sent_at and (confirmation_sent_at.utc >= self.class.allow_unconfirmed_access_for.ago);Fi[	@ÄiçI"È      #   # confirm_within = nil
      #   confirmation_period_expired?  # will always return false
      #
      def function
        self.class.confirm_within and (Time.now > (self.confirmation_sent_at + self.class.confirm_within));Fi[	@+i3I"Ò      #   # reset_password_within = 0.days
      #   reset_password_period_valid?   # will always return false
      #
      def function
        reset_password_sent_at and (reset_password_sent_at.utc >= self.class.reset_password_within.ago);Fi[	@äi?I"˚      #   * If any of the authorization headers were sent;
      #   * If all authentication keys are present;
      #
      def function
        http_authenticatable? and (request.authorization and with_authentication_hash("LITERAL", http_auth_hash));Fi[	@äiJI"      #   * If the params[scope] returns a hash with credentials;
      #   * If all authentication keys are present;
      #
      def function
        params_authenticatable? and (valid_params_request? and (valid_params? and with_authentication_hash("LITERAL", params_auth_hash)));Fi[	@’i9I"§    #     context.init_haml_helpers
    #     context.haml_tag :p, "Stuff"
    #
    def function
      @var = Haml::Buffer.new(haml_buffer, Options.new.for_buffer);Fi[	@˛ixI"«      # namespaces, and as a result the order may be dependent on the
      # implementation of the underlying XML library.
      #
      def function
        xpath("STRING").inject({}) do |var, var|;Fi[	@˛iöI"Ø      #   irb> doc.slop!
      #   ... which does absolutely nothing.
      #
      def function
        unless decorators(XML::Node).include?(Nokogiri::Decorators::Slop) then;Fi[	@CiI"q    
    # Find Resque worker pids on Linux and OS X.
    #
    def function
      get_worker_pids("STRING");Fi[	@CiI"j    
    # Find Resque worker pids on Solaris.
    #
    def function
      get_worker_pids("STRING");Fi[	@EI"	true;Fi[[	@zi(I"?      end
      
      def function
        true
      end;Fi[	@ziçI"?      end
      
      def function
        true
      end;Fi[	I"Vprojects//compass_proj/compass/sass_extensions/functions/cross_browser_support.rb;TiI"5    end
    
    def function
      true
    end;Fi[	@biBI"5    end
    
    def function
      true
    end;Fi[	@√i&I"?      end
      
      def function
        true
      end;Fi[	I"7projects//devise_proj/devise/models/validatable.rb;Ti)I"?      end
      
      def function
        true
      end;Fi[	I"<projects//devise_proj/devise/strategies/rememberable.rb;Ti$I"?      end
      
      def function
        true
      end;Fi[	I"Eprojects//devise_proj/devise/strategies/token_authenticatable.rb;TiI"è      
      # Token Authenticatable can be authenticated with params in any controller and any verb.
      def function
        true
      end;Fi[	I"7projects//diaspora_proj/models/account_deletion.rb;Ti-I"+  end
  
  def function
    true
  end;Fi[	I"=projects//diaspora_proj/models/activity_streams/photo.rb;TiI"^  # A better solution is needed.
  # @return [Boolean] true
  def function
    true
  end;Fi[	I",projects//diaspora_proj/models/photo.rb;TiÄI"+  end
  
  def function
    true
  end;Fi[	I";projects//diaspora_proj/models/relayable_retraction.rb;Ti!I"+  end
  
  def function
    true
  end;Fi[	I"0projects//haml_proj/haml/template/plugin.rb;TiI"~    # the ERB handler does.
    # In Rails 3.1+, we don't need to include Compilable.
    def function
      true
    end;Fi[	@ÿiI"]    undef "LITERAL" if defined? rails_xss_safe?
    
    def function
      true
    end;Fi[	I"1projects//homebrew_proj/test/test_bottles.rb;TiI"U  def function
    alias "LITERAL" "LITERAL"
    def function
      true
    end;Fi[	@$iI"5    end
    
    def function
      true
    end;Fi[	@$iI"5    end
    
    def function
      true
    end;Fi[	@îi/I"ë          defined? I18n ? (super) : (var ? (var.to_s.humanize.downcase) : ("STRING"))
        end
        def function
          true
        end;Fi[	@îi2I"O          true
        end
        def function
          true
        end;Fi[	@îi5I"O          true
        end
        def function
          true
        end;Fi[	@Ii7I"P          false
        end
        def function
          true
        end;Fi[	I"# For example,;F@i[[	@’i≈I"Ω    # Returns a hash containing default assignments for the `xmlns`, `lang`, and `xml:lang`
    # attributes of the `html` HTML element.
    # For example,
    #
    #     %html{html_attrs};Fi[	@’iôI"^    # use \{#capture\_haml\}.
    #
    # For example,
    #
    #     haml_tag :table do;Fi[	@Ïi0I"v    # then all arguments are required.
    # 
    # For example,
    # 
    #   person = Person.new('John Smith');Fi[	@·iƒI"°    # Generates a nicely formatted description of this event's contents.
    # 
    # For example,
    # 
    #   event = StateMachine::Event.new(machine, :park);Fi[	@ijI"n    #   libraries if supported by the integration.
    # 
    # For example,
    # 
    #   class Vehicle;Fi[	@iõI"x    #   conditionals defined for each one.  Default is true.
    # 
    # For example,
    # 
    #   class Vehicle;Fi[	@i÷I"c    # without properly calling +super+.
    # 
    # For example,
    # 
    #   class Vehicle;Fi[	@iáI"O    # the machine).
    # 
    # For example,
    # 
    #   class Vehicle;Fi[	@iΩI"f    # between the various states / events.
    # 
    # For example,
    # 
    #   class Vehicle;Fi[	@iÚI"≥    # attribute set to one of a given set of states.
    # 
    # For example,
    # 
    #   Vehicle.with_state(:parked)               # => All vehicles where the state is parked;Fi[	@Ái+I"¨    # Lists all of the from states that can be reached through this path.
    # 
    # For example,
    # 
    #   path.to_states  # => [:parked, :idling, :first_gear, ...];Fi[	@Ái:I"™    # Lists all of the to states that can be reached through this path.
    # 
    # For example,
    # 
    #   path.to_states  # => [:parked, :idling, :first_gear, ...];Fi[	@ÁiCI"ù    # Lists all of the events that can be fired through this path.
    # 
    # For example,
    # 
    #   path.events # => [:park, :ignite, :shift_up, ...];Fi[	@Íi-I"{    # this collection.
    # 
    # For example,
    # 
    #   paths.from_states # => [:parked, :idling, :first_gear, ...];Fi[	@Íi7I"~    # this collection.
    # 
    # For example,
    # 
    #   paths.to_states # => [:idling, :first_gear, :second_gear, ...];Fi[	@ÍiAI"s    # collection.
    # 
    # For example,
    # 
    #   paths.events  # => [:park, :ignite, :shift_up, ...];Fi[	@ÌipI"«    # Generates a human-readable description of this state's name / value:
    # 
    # For example,
    # 
    #   State.new(machine, :parked).description                               # => "parked";Fi[	@ÌiÅI"Ö    # returned.
    # 
    # For example,
    # 
    #   State.new(machine, :parked, :value => 1).value                        # => 1;Fi[	@ÌiòI"y    # Otherwise, the matcher will determine the result.
    # 
    # For example,
    # 
    #   # Without a matcher;Fi[	@Ìi‹I"¬    # Generates a nicely formatted description of this state's contents.
    # 
    # For example,
    # 
    #   state = StateMachine::State.new(machine, :parked, :value => 1, :initial => true);Fi[	@>i#I"Õ    # Generates a nicely formatted description of this transitions's contents.
    # 
    # For example,
    # 
    #   transition = StateMachine::Transition.new(object, machine, :ignite, :parked, :idling);Fi[	@I"# Configuration options:;Fi[[	@diI"œ      #
      # The first_name attribute must be in the object and it must be blank.
      #
      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "must be blank").;Fi[	@gi&I"Ó      # is entirely virtual. This check is performed only if +terms_of_service+
      # is not +nil+ and by default on save.
      #
      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "must be;Fi[	@Êi/I"Œ      #
      #   validates_presence_of :password_confirmation, if: :password_changed?
      #
      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "doesn't match;Fi[	@oiI"ƒ      #     validates_exclusion_of :karma, in: :reserved_karmas
      #   end
      #
      # Configuration options:
      # * <tt>:in</tt> - An enumerable object of items that the value shouldn't;Fi[	@ri[I"      # In addition, both must be a regular expression or a proc or lambda, or
      # else an exception will be raised.
      #
      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "is invalid").;Fi[	@yiI"√      #     validates_inclusion_of :karma, in: :available_karmas
      #   end
      #
      # Configuration options:
      # * <tt>:in</tt> - An enumerable object of available items. This can be;Fi[	@|iNI"º      #                         tokenizer: ->(str) { str.scan(/\w+/) }
      #   end
      #
      # Configuration options:
      # * <tt>:minimum</tt> - The minimum size of the attribute.;Fi[	@iTI"ƒ      #     validates_numericality_of :value, on: :create
      #   end
      #
      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "is not a number").;Fi[	@}iI"È      # This is due to the way Object#blank? handles boolean values:
      # <tt>false.blank? # => true</tt>.
      #
      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "can't be blank").;Fi[	@âi9I"º      #     validates_with MyValidator, MyOtherValidator, on: :create
      #   end
      #
      # Configuration options:
      # * <tt>:on</tt> - Specifies when this validation is active;Fi[	@·i/I"›    # branches/transitions as the source
    # Creates a new event within the context of the given machine
    # 
    # Configuration options:
    # * <tt>:human_name</tt> - The human-readable version of this event's name;Fi[	@·i∑I"≥    # 
    # A collection of the generated edges will be returned.
    # 
    # Configuration options:
    # * <tt>:human_name</tt> - Whether to use the event's human name for the;Fi[	@i
I"Í    # Creates a new state machine with the given name.  The default name, if not
    # specified, is <tt>:state</tt>.
    # 
    # Configuration options:
    # * <tt>:attribute</tt> - The name of the attribute to store the state value;Fi[	@LiI"ﬂ    # Creates a new collection of nodes for the given state machine.  By default,
    # the collection is empty.
    # 
    # Configuration options:
    # * <tt>:index</tt> - One or more attributes to automatically generate;Fi[	@ÁiI"–    # empty path.  In order to start walking the path, it must be populated with
    # an initial transition.
    # 
    # Configuration options:
    # * <tt>:target</tt> - The target state to end the path on;Fi[	@ÍiI"∆    # The target state for each path
    # Creates a new collection of paths with the given requirements.
    # 
    # Configuration options:
    # * <tt>:from</tt> - The initial state to start from;Fi[	@Ìi/I"›    # Maps :method_name => UnboundMethod
    # Creates a new state within the context of the given machine.
    # 
    # Configuration options:
    # * <tt>:initial</tt> - Whether this state is the beginning state for the;Fi[	@ÌiwI"/    #   State.new(machine, :parked, :value => 1).description                  # => "parked (1)"
    #   State.new(machine, :parked, :value => lambda {Time.now}).description  # => "parked (*)
    # 
    # Configuration options:
    # * <tt>:human_name</tt> - Whether to use this state's human name in the;Fi[	@ÌiŒI"∂    # 
    # The actual node generated on the graph will be returned.
    # 
    # Configuration options:
    # * <tt>:human_name</tt> - Whether to use the state's human name for the;Fi[	@>iÃI"Ù    # Runs the before / after callbacks for this transition.  If a block is
    # provided, then it will be executed between the before and after callbacks.
    # 
    # Configuration options:
    # * +before+ - Whether to run before callbacks.;Fi[	@iI"ˇ    # Creates a new collection of transitions that can be run in parallel.  Each
    # transition *must* be for a different attribute.
    # 
    # Configuration options:
    # * <tt>:actions</tt> - Whether to run the action configured for each transition;Fi[	@@vi[[	@yi	I"≤    # Validates that the given hash *only* includes the specified valid keys.
    # If any invalid keys are found, an ArgumentError will be raised.
    #
    # == Examples
    # ;Fi[	@yiI"|    # exclusive keys.  If more than one key is found, an ArgumentError will be
    # raised.
    # 
    # == Examples
    # ;Fi[	@~i;I"ñ    # and to state, this will also check whether the configured :if/:unless
    # conditions pass on the given object.
    # 
    # == Examples
    # ;Fi[	@~idI"•    # * <tt>:guard</tt> - Whether to guard matches with the if/unless
    #   conditionals defined for this branch.  Default is true.
    # 
    # == Examples
    # ;Fi[	@ÏiI"I    # * Method / Proc
    # * String
    # 
    # == Examples
    # ;Fi[	@ÒiI"¶    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # 
    # == Examples
    # ;Fi[	@Òi;I"¶    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # 
    # == Examples
    # ;Fi[	@Òi_I"î    # *Note* that if a transition has already been generated for the event, then
    # that transition will be used.
    # 
    # == Examples
    # ;Fi[	@ iI"≥        # See StateMachine::Machine#before_transition for more
        # information about the various configuration options available.
        # 
        # == Examples
        # ;Fi[	@ iOI"µ        # Creates a callback that will be invoked *around* a transition so long
        # as the given requirements match the transition.
        # 
        # == Examples
        # ;Fi[	@i5I"à    # For examples on the types of state machine configurations and blocks, see
    # the section below.
    # 
    # == Examples
    # ;Fi[	@RiI"n    
    # Generates a blacklist matcher based on the given set of values
    # 
    # == Examples
    # ;Fi[	@Ri8I"É    # Checks whether the given value exists within the whitelist configured
    # for this matcher.
    # 
    # == Examples
    # ;Fi[	@RiKI"Ñ    # Checks whether the given value exists outside the blacklist configured
    # for this matcher.
    # 
    # == Examples
    # ;Fi[	@RifI"û    # Checks whether the given value matches what the value originally was.
    # This value should be defined in the context.
    # 
    # == Examples
    # ;Fi[	@/iI"|  module MatcherHelpers
    # Represents a state that matches all known states in a machine.
    # 
    # == Examples
    # ;Fi[	@/i'I"§    # Represents a state that matches the original +from+ state.  This is useful
    # for defining transitions which are loopbacks.
    # 
    # == Examples
    # ;Fi[	@4iI"Ö    # false, otherwise true.  If the given state is unknown, then an IndexError
    # will be raised.
    # 
    # == Examples
    # ;Fi[	@4i&I"ö    # state machine.  This will attempt to find a known state that matches
    # the value of the attribute on the object.
    # 
    # == Examples
    # ;Fi[	@4iAI"|    # state machine.  If no state is found, then an ArgumentError will be
    # raised.
    # 
    # == Examples
    # ;Fi[	@>iÆI"ô    # with the transition.  The action associated with the transition/machine
    # can be skipped by passing in +false+.
    # 
    # == Examples
    # ;Fi[	@@:i[[	@’iòI"s    # If you need to get the results as a string,
    # use \{#capture\_haml\}.
    #
    # For example,
    #;Fi[	@Ïi/I"î    # the method defines additional arguments other than the object context,
    # then all arguments are required.
    # 
    # For example,
    # ;Fi[	@·i√I"s    
    # Generates a nicely formatted description of this event's contents.
    # 
    # For example,
    # ;Fi[	@iiI"õ    #   the given event.  This may be generated by internationalization
    #   libraries if supported by the integration.
    # 
    # For example,
    # ;Fi[	@iöI"ß    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # 
    # For example,
    # ;Fi[	@i’I"ì    # behavior will *not* work if the class defines an +initialize+ method
    # without properly calling +super+.
    # 
    # For example,
    # ;Fi[	@iÜI"Ä    # generated for the event) or indirectly (through attributes defined on
    # the machine).
    # 
    # For example,
    # ;Fi[	@iºI"ò    # has multiple state machines and it would be difficult to differentiate
    # between the various states / events.
    # 
    # For example,
    # ;Fi[	@iÒI"£    # be automatically created for assisting in finding objects that have the
    # attribute set to one of a given set of states.
    # 
    # For example,
    # ;Fi[	@Ái*I"t    
    # Lists all of the from states that can be reached through this path.
    # 
    # For example,
    # ;Fi[	@Ái9I"r    
    # Lists all of the to states that can be reached through this path.
    # 
    # For example,
    # ;Fi[	@ÁiBI"m    
    # Lists all of the events that can be fired through this path.
    # 
    # For example,
    # ;Fi[	@Íi,I"à    # Lists all of the states that can be transitioned from through the paths in
    # this collection.
    # 
    # For example,
    # ;Fi[	@Íi6I"Ü    # Lists all of the states that can be transitioned to through the paths in
    # this collection.
    # 
    # For example,
    # ;Fi[	@Íi@I"|    # Lists all of the events that can be fired through the paths in this
    # collection.
    # 
    # For example,
    # ;Fi[	@ÌioI"u    
    # Generates a human-readable description of this state's name / value:
    # 
    # For example,
    # ;Fi[	@ÌiÄI"}    # original block if it's a lambda block.  Otherwise, the static value is
    # returned.
    # 
    # For example,
    # ;Fi[	@ÌióI"¢    # configured, then this will check whether the values are equivalent.
    # Otherwise, the matcher will determine the result.
    # 
    # For example,
    # ;Fi[	@Ìi€I"s    
    # Generates a nicely formatted description of this state's contents.
    # 
    # For example,
    # ;Fi[	@>i"I"y    
    # Generates a nicely formatted description of this transitions's contents.
    # 
    # For example,
    # ;Fi[	@±@ei[[	@≠iJI"s      #
      # @api private
      def function(var)
        super
        instance_eval(&var) if block_given?;Fi[	I"7projects//backup_proj/backup/encryptor/open_ssl.rb;TiI"∂      # Creates a new instance of Backup::Encryptor::OpenSSL and
      # sets the password attribute to what was provided
      def function(var)
        super
        @var ||= false;Fi[	@ci(I"Ë        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var)
          super
          instance_eval(&var) if block_given?;Fi[	@fiI"Ë        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var)
          super
          instance_eval(&var) if block_given?;Fi[	I"7projects//backup_proj/backup/syncer/rsync/local.rb;TiI"Ë        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var)
          super
          instance_eval(&var) if block_given?;Fi[	@li$I"◊        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var)
          super
          @var ||= "LITERAL";Fi[	I"Aprojects//compass_proj/compass/exec/global_options_parser.rb;TiI"hmodule Compass::Exec::GlobalOptionsParser
  def function(var)
    super
    set_global_options(var);Fi[	I"Bprojects//compass_proj/compass/exec/project_options_parser.rb;TiI"jmodule Compass::Exec::ProjectOptionsParser
  def function(var)
    super
    set_project_options(var);Fi[	@iI"j      private
      
      def function(var)
        super
        if var.respond_to?("LITERAL") then;Fi[	@·iûI"û    class Haml < Generic
      # @param args [Array<String>] The command-line arguments
      def function(var)
        super
        @options["LITERAL"] = {};Fi[	@·i®I"s      #
      # @param opts [OptionParser]
      def function(var)
        super
        var.banner = "STRING";Fi[	@œiúI"ü    
    class ParseNode < Struct.new("LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL")
      def function(var)
        super
        self.children ||= [];Fi[	@ÂihI"E  end
  
  def function(var)
    super
    $n = ($n + "LITERAL");Fi[	I"6projects//nokogiri_proj/xsd/xmlparser/nokogiri.rb;TiI"o      ###
      # Handle the end_element event with +name+
      def function(var)
        super
      end;Fi[	I"5projects//rescue_proj/resque/failure/multiple.rb;TiI"y      end
      
      def function(var)
        super
        @var = self.class.classes.map { |var| var.new(*var) };Fi[	@·iEI"—    # Creates a copy of this event in addition to the list of associated
    # branches to prevent conflicts across events within a class hierarchy.
    def function(var)
      super
      @var = @branches.dup;Fi[	@Li(I"ü    # Creates a copy of this collection such that modifications don't affect
    # the original collection
    def function(var)
      super
      var = @nodes;Fi[	@ÁiI"D    end
    
    def function(var)
      super
      @var = nil;Fi[	@ÌiUI"ø    # Creates a copy of this state in addition to the list of associated
    # methods to prevent conflicts across different states.
    def function(var)
      super
      @var = methods.dup;Fi[	I"/projects//twitter_proj/twitter/identity.rb;TiI"     # @raise [ArgumentError] Error raised when supplied argument is missing an :id key.
    # @return [Twitter::Identity]
    def function(var)
      super
      raise(ArgumentError, "STRING") unless id;Fi[	@F@Ei[[	@iI"Ç          var = case var.value
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@iI"}            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@iI"}            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@iI"}            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@iEI"q        case var
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING";Fi[	@iGI"s          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING";Fi[	@iII"s          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING";Fi[	@iKI"s          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING";Fi[	@“iˆI"ù              case @node.value["LITERAL"]
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING";Fi[	@“i¯I"å                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING";Fi[	@“i˙I"å                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING";Fi[	@“i¸I"å                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING";Fi[	@“iI"ì            case @node.value["LITERAL"]
            when "STRING" then
              "STRING"
            when "STRING" then
              "STRING";Fi[	@tiI"d    "STRING".undent
  when "LITERAL" then
    "STRING"
  when "STRING" then
    "STRING".undent;Fi[	@‹ifI"Ç            "STRING"
          when "STRING", "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@‹ihI"}            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@‹ijI"}            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@‹ilI"}            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@‹inI"}            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@‹ipI"}            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@±I"+var = Twitter::API::Arguments.new(var);Fi[[	@iibI"Î      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var.empty? then;Fi[	@vi&I"’      #   @example Return the 20 most recent favorite Tweets for @sferik
      #     Twitter.favorites('sferik')
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var = var.pop then;Fi[	@viVI"˙      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	@vixI"˙      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	@}iRI"H      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        merge_users!(var.options, var);Fi[	@}iÄI".      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean] :follow (false) Enable notifications for the target user.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.options["LITERAL"] = true if var.options.delete("LITERAL").!.!;Fi[	@}iôI".      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean] :follow (false) Enable notifications for the target user.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.options["LITERAL"] = true if var.options.delete("LITERAL").!.!;Fi[	@£iHI"›      #     Twitter.list_timeline(7505382, 'presidents')
      #     Twitter.list_timeline(7505382, 8863586)
      def function(var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop);Fi[	@—i%I"Î      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var.empty? then;Fi[	@—i[I"˙      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	@‡i!I"”      #   @example Return the users in the Art & Design category
      #     Twitter.suggestions("art-design")
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var = var.pop then;Fi[	@˘iéI"l      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	@˘i©I"l      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	@˘iˆI"Œ      #   @option options [String] :related A value for the TWT related parameter, as described in {https://dev.twitter.com/docs/intents Web Intents}. This value will be forwarded to all Web Intents calls.
      #   @option options [String] :lang Language code for the rendered embed. This will affect the text and localization of the rendered HTML.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	@imI"      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map { |var| status_activity(var, var.options) };Fi[	@i¶I"”      # @overload block(options={})
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop);Fi[	@iI"7      #     Twitter.users('sferik', 'pengwynn', :method => :get) # Retrieve users with a GET request
      #     Twitter.users(7505382, 14100886, :method => :get)    # Same as above
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var = (var.options.delete("LITERAL") or "LITERAL");Fi[	@iI"∫      #     Twitter.user('sferik')
      #     Twitter.user(7505382)  # Same as above
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var = var.pop then;Fi[	@i∞I"˜      #     Twitter.profile_banner('sferik')
      #     Twitter.profile_banner(7505382)  # Same as above
      def function(var)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[	@EI"var = "STRING";Fi[[	@§i)I"~      end
      
      def function
        var = "STRING"
        (required_libraries or []).each { |var| (var << "STRING") };Fi[	I"Dprojects//compass_proj/compass/installers/manifest_installer.rb;Ti'I"i      end
      
      def function
        var = "STRING"
        manifest.each_stylesheet do |var|;Fi[	I"@projects//devise_proj/generators/devise/devise_generator.rb;TiI"Õ      class_option("LITERAL", "LITERAL" => "STRING", "LITERAL" => "LITERAL", "LITERAL" => (true))
      
      def function
        var = "STRING"
        (var << "STRING") if class_name.include?("STRING");Fi[	@√i®I"y  end
  
  def function
    var = "STRING"
    if self.username_changed? and Person.exists?("LITERAL" => (var)) then;Fi[	@“i∆I"V    end
    
    def function
      var = "STRING"
      unless block_given? then;Fi[	@œi°I"^      end
      
      def function
        var = "STRING"
        children.each do |var|;Fi[	@ÂiëI"S  end
  
  def function
    var = "STRING"
    var = `find #{to_s}STRING`.to_i;Fi[	@îifI"Nend
class Formula
  def function
    var = "STRING"
    (var << "STRING");Fi[	@±iûI"Y  end
  
  def function
    var = "STRING"
    (var << "STRING") if @opts["LITERAL"];Fi[	I"3projects//homebrew_proj/test/test_inreplace.rb;TiI"érequire("extend/string")
class InreplaceTest < Test::Unit::TestCase
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension);Fi[	@ÖiI"X  end
  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension);Fi[	@ÖiI"X  end
  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension);Fi[	@ÖiI"X  end
  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension);Fi[	@Öi$I"X  end
  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension);Fi[	@Öi+I"X  end
  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension);Fi[	@Öi2I"X  end
  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension);Fi[	I"3projects//paperclip_proj/paperclip/geometry.rb;TiII"∑    
    # Returns the width and height in a format suitable to be passed to Geometry.parse
    def function
      var = "STRING"
      (var << width.to_i.to_s) if (width > "LITERAL");Fi[	@˝iPI"π        # integration.  This file will only exist for integrations that actually
        # support i18n.
        def function
          var = "STRING"
          var if File.exists?(var);Fi[	I"module Twitter;FI"class Error;Fi[[	I">projects//twitter_proj/twitter/error/already_favorited.rb;TiI"prequire("twitter/error/forbidden")
module Twitter
  class Error
    class AlreadyFavorited < Twitter::Error;Fi[	I">projects//twitter_proj/twitter/error/already_retweeted.rb;TiI"prequire("twitter/error/forbidden")
module Twitter
  class Error
    class AlreadyRetweeted < Twitter::Error;Fi[	I"8projects//twitter_proj/twitter/error/bad_gateway.rb;TiI"zrequire("twitter/error/server_error")
module Twitter
  class Error
    class BadGateway < Twitter::Error::ServerError;Fi[	I"8projects//twitter_proj/twitter/error/bad_request.rb;TiI"zrequire("twitter/error/client_error")
module Twitter
  class Error
    class BadRequest < Twitter::Error::ClientError;Fi[	@niI"arequire("twitter/error")
module Twitter
  class Error
    class ClientError < Twitter::Error;Fi[	I"@projects//twitter_proj/twitter/error/configuration_error.rb;TiI"irequire("twitter/error")
module Twitter
  class Error
    class ConfigurationError < ::ArgumentError;Fi[	I"9projects//twitter_proj/twitter/error/decode_error.rb;TiI"arequire("twitter/error")
module Twitter
  class Error
    class DecodeError < Twitter::Error;Fi[	I"6projects//twitter_proj/twitter/error/forbidden.rb;TiI"yrequire("twitter/error/client_error")
module Twitter
  class Error
    class Forbidden < Twitter::Error::ClientError;Fi[	I"<projects//twitter_proj/twitter/error/gateway_timeout.rb;TiI"~require("twitter/error/server_error")
module Twitter
  class Error
    class GatewayTimeout < Twitter::Error::ServerError;Fi[	I"Cprojects//twitter_proj/twitter/error/identity_map_key_error.rb;TiI"grequire("twitter/error")
module Twitter
  class Error
    class IdentityMapKeyError < ::IndexError;Fi[	I"Bprojects//twitter_proj/twitter/error/internal_server_error.rb;TiI"~require("twitter/error/server_error")
module Twitter
  class Error
    class InternalServerError < Twitter::Error::ServerError;Fi[	I";projects//twitter_proj/twitter/error/not_acceptable.rb;TiI"}require("twitter/error/client_error")
module Twitter
  class Error
    class NotAcceptable < Twitter::Error::ClientError;Fi[	I"6projects//twitter_proj/twitter/error/not_found.rb;TiI"xrequire("twitter/error/client_error")
module Twitter
  class Error
    class NotFound < Twitter::Error::ClientError;Fi[	I"9projects//twitter_proj/twitter/error/server_error.rb;TiI"arequire("twitter/error")
module Twitter
  class Error
    class ServerError < Twitter::Error;Fi[	I"@projects//twitter_proj/twitter/error/service_unavailable.rb;TiI"}require("twitter/error/server_error")
module Twitter
  class Error
    class ServiceUnavailable < Twitter::Error::ServerError;Fi[	I">projects//twitter_proj/twitter/error/too_many_requests.rb;TiI"require("twitter/error/client_error")
module Twitter
  class Error
    class TooManyRequests < Twitter::Error::ClientError;Fi[	I"9projects//twitter_proj/twitter/error/unauthorized.rb;TiI"|require("twitter/error/client_error")
module Twitter
  class Error
    class Unauthorized < Twitter::Error::ClientError;Fi[	I"Aprojects//twitter_proj/twitter/error/unprocessable_entity.rb;TiI"~require("twitter/error/client_error")
module Twitter
  class Error
    class UnprocessableEntity < Twitter::Error::ClientError;Fi[	I" def function(var, var, var);F@≤i[[	@∑iI"ç    ##
    # Takes the name of the archive and the configuration block
    def function(var, var, var)
      @var = var
      @var = var.to_s;Fi[	@CiaI"“        # Instantiates a new Campfire::Room object and sets all the
        # necessary arguments (@room_id, @subdomain, @api_token)
        def function(var, var, var)
          @var = var
          @var = var;Fi[	@ÅiI"r      attr_accessor("LITERAL")
      
      def function(var, var, var)
        @var = var
        @var = var;Fi[	@{iI"S  end
  
  def function(var, var, var)
    @var = var
    @var = var.html_safe;Fi[	I".projects//diaspora_proj/models/comment.rb;Ti`I"X    end
    
    def function(var, var, var)
      @var = var
      super(var, var);Fi[	@úiAI"}  # Used by formula to unpack after downloading
  # Used by audit
  def function(var, var, var)
    @var = var
    @var = var;Fi[	@±iI"Q  fatal(true)
  
  def function(var, var, var)
    @var = var
    @var = var;Fi[	@±iòI"ä  
  # The user can chose to force installation even in the face of conflicts.
  def function(var, var, var)
    @var = var
    @var = var;Fi[	@•iI"†    # base - The String path to the source.
    # name - The String filename of the post file.
    def function(var, var, var)
      @var = var
      @var = var;Fi[	@∫i	I"x    module SAX
      class PushParser
        def function(var, var, var)
          @var = var
          @var = var;Fi[	@
iJI"É      # The encoding for the document
      # The XML source
      def function(var, var, var)
        @var = var
        @var = [];Fi[	@√iI"         # Create a new PushParser with +doc+ as the SAX Document, providing
        # an optional +file_name+ and +encoding+
        def function(var, var, var)
          @var = var
          @var = var;Fi[	@ÊirI"¨    #
    # @yield [Options] Yields options to block for further configuration.
    def function(var, var, var)
      @var = var
      @var = self.class.default_options.dup;Fi[	@∆i+I"˚    # +url_generator+ - the object used to generate URLs, using the interpolator. Defaults to Paperclip::UrlGenerator
    # +escape_url+ - Perform URI escaping to URLs. Defaults to true
    def function(var, var, var)
      @var = var
      @var = var;Fi[	@…i	I"~    attr_accessor("LITERAL", "LITERAL", "LITERAL")
    
    def function(var, var, var)
      @var = var
      @var = var;Fi[	@ŒiI"≠    # +definition+ is the style definition from has_attached_file, which
    # can be string, array or hash
    def function(var, var, var)
      @var = var
      @var = var;Fi[	@>iI"≤    # The machine attempting to be transitioned
    # The current state value for the machine
    def function(var, var, var)
      @var = var
      @var = var.states.match!(var);Fi[	@#iI"}      attr_accessor("LITERAL", "LITERAL")
      
      def function(var, var, var)
        @var = var
        @var = var;Fi[	I"@var = nil;F@˙i[[	@≠ioI"è        FileUtils.rm_rf(@tempdirs, "LITERAL" => (true)) if @tempdirs
        @var = []
        @var = nil
        @var = nil
        @var = nil;Fi[	@≠ipI"b        @var = []
        @var = nil
        @var = nil
        @var = nil
        @var = nil;Fi[	@≠iqI"c        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil;Fi[	@≠irI"Z        @var = nil
        @var = nil
        @var = nil
        @var = nil
      end;Fi[	@ri*I"æ          @kwargs["STRING"] ||= Sass::Script::Bool.new(true)
          @kwargs["STRING"] ||= Sass::Script::String.new("STRING")
          @var = nil
          @var = nil
          @var = nil;Fi[	@ri+I"ñ          @kwargs["STRING"] ||= Sass::Script::String.new("STRING")
          @var = nil
          @var = nil
          @var = nil
          @var = nil;Fi[	@ri,I"m          @var = nil
          @var = nil
          @var = nil
          @var = nil
          @var = var;Fi[	@œi∂I"W    def function(var)
      @var = false
      @var = nil
      @var = nil
    end;Fi[	@úiDI"O    @var = var
    @var = var
    @var = nil
    @var = nil
    @var = nil;Fi[	@úiEI"y    @var = var
    @var = nil
    @var = nil
    @var = nil
    if (var.kind_of?(IO) or var.kind_of?(StringIO)) then;Fi[	I".projects//homebrew_proj/test/test_ARGV.rb;TiI"[module ExtendArgvPlusYeast
  def function
    @var = nil
    @var = nil
    @var = nil;Fi[	@i	I"O  def function
    @var = nil
    @var = nil
    @var = nil
    @var = nil;Fi[	@i
I"g    @var = nil
    @var = nil
    @var = nil
    @var = nil
    while (ARGV.length > "LITERAL") do;Fi[	@‡i≥I"i        def function(var)
          @var = var
          @var = nil
          @var = nil
        end;Fi[	@Ωi'I"_          @var = @doc
        end
        @var = nil
        @var = nil
        @var = nil;Fi[	@Ωi(I"Ñ        end
        @var = nil
        @var = nil
        @var = nil
        var.each { |var, var| @doc.send(:"#{var}STRING", var) };Fi[	@CiHI"{    def function(var)
      @var = var.map { |var| var.to_s.strip }
      @var = nil
      @var = nil
      validate_queues;Fi[	I"+#     include ActiveModel::Validations;F@i[[	@[iDI"u    #
    #   class MyClass
    #     include ActiveModel::Validations
    #
    #     def initialize(data = {});Fi[	@Äi0I"è      #
      #   class Film
      #     include ActiveModel::Validations
      #
      #     class TitleValidator < ActiveModel::EachValidator;Fi[	@Äi|I"x      #
      #   class Person
      #     include ActiveModel::Validations
      #
      #     attr_accessor :name;Fi[	@âikI"y    #
    #   class Person
    #     include ActiveModel::Validations
    #
    #     validate :instance_validations;Fi[	@âizI"Å    #
    #   class Person
    #     include ActiveModel::Validations
    #
    #     validate :instance_validations, on: :create;Fi[	@ñiI"Ö      #
      #   class Person
      #     include ActiveModel::Validations
      #
      #     attr_accessor :first_name, :last_name;Fi[	@ñi=I"      #
      #   class Comment
      #     include ActiveModel::Validations
      #
      #     validate :must_be_friends;Fi[	@ñiII"{      #
      #   class Comment
      #     include ActiveModel::Validations
      #
      #     validate do |comment|;Fi[	@ñiWI"q      #
      #   class Comment
      #     include ActiveModel::Validations
      #
      #     validate do;Fi[	@ñi{I"      #
      #   class Person
      #     include ActiveModel::Validations
      #
      #     validates_with MyValidator;Fi[	@ñiäI"      #
      #   class Person
      #     include ActiveModel::Validations
      #
      #     attr_accessor :name , :age;Fi[	@ñiªI"n    #
    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name;Fi[	@ñiÃI"n    #
    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name;Fi[	@ñi‹I"n    #
    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name;Fi[	@ñiÛI"n    #
    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name;Fi[	@ñiI"n    #
    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name;Fi[	@ñiI"u    #
    #   class MyClass
    #     include ActiveModel::Validations
    #
    #     def initialize(data = {});Fi[	@	@Ri[[	@7ilI"K      when Proc then
        var.call
      else
        var
      end;Fi[	I"Oprojects//activemodel_proj/active_model/forbidden_attributes_protection.rb;TiI"ì      if var.respond_to?("LITERAL") and var.permitted?.! then
        raise(ActiveModel::ForbiddenAttributesError)
      else
        var
      end;Fi[	@ziZI"d            File.join(var, var["LITERAL"])
          end
        else
          var
        end;Fi[	I"=projects//compass_proj/compass/configuration/adapters.rb;Ti*I"¶          if var.is_a?(String) and (project_path and absolute_path?(var).!) then
            File.join(project_path, var)
          else
            var
          end;Fi[	@]iÅI"õ        if (var[("LITERAL"..(var.size - "LITERAL"))] == var) then
          var[((var.size + "LITERAL").."LITERAL")]
        else
          var
        end;Fi[	@iNI"Y        when "STRING" then
          "STRING"
        else
          var
        end;Fi[	@
i?I"l          var.options = options
          var.send(:"to_#{var}")
        else
          var
        end;Fi[	@bi”I"|        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"])
        else
          var
        end;Fi[	I"Fprojects//compass_proj/compass/sass_extensions/functions/lists.rb;Ti^I"Ñ      if defined? Sass::Script::List and var.is_a?(Sass::Script::List) then
        var.value.first
      else
        var
      end;Fi[	I"Hprojects//compass_proj/compass/sass_extensions/functions/sprites.rb;Ti»I"i    when Sass::Script::Bool then
      Sass::Script::String.new(var.to_s)
    else
      var
    end;Fi[	@EiGI"è        if (var.first == "LITERAL") and intercept_401?(var) then
          _process_unauthenticated(var)
        else
          var
        end;Fi[	@EiLI"e      when Hash then
        _process_unauthenticated(var, var)
      else
        var
      end;Fi[	I"1projects//haml_proj/haml/helpers/xss_mods.rb;TirI"h        when String then
          Haml::Util.html_safe(var)
        else
          var
        end;Fi[	I"Bprojects//homebrew_proj/vendor/multi_json/adapters/ok_json.rb;Ti'I"^            var.merge!(var => (var))
          end
        else
          var
        end;Fi[	@¸iI"F    when "LITERAL" then
      var.to_i
    else
      var
    end;Fi[	@—i,I"s        var = var.match("LITERAL") ? ("STRING") : ("STRING")
        "STRING"
      else
        var
      end;Fi[	I"Oprojects//paperclip_proj/paperclip/validators/attachment_size_validator.rb;Ti6I"é        if var.is_a?(Range) then
          ["LITERAL", "LITERAL"].include?(var) ? (var.max) : (var.min)
        else
          var
        end;Fi[	@I"#   person = Person.new;Fi[[	@i1I"f      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[	@iUI"f      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[	@iyI"|      #     end
      #   end
      #
      #   person = Person.new
      #   person.name                         # => 'Gem';Fi[	@iëI"f      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[	@i’I"f      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[	@i¯I"f      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[	@.iI"É    #     include ActiveModel::Conversion
    #   end
    #
    #   person = Person.new
    #   person.to_model == person # => true;Fi[	@.i:I"ã    #     include ActiveModel::Conversion
    #   end
    #
    #   person = Person.new
    #   person.to_partial_path # => "people/person";Fi[	@[iI"\    #     end
    #   end
    #
    #   person = Person.new
    #   person.name = 'bob';Fi[	@ji#I"t        #     end
        #   end
        #
        #   person = Person.new
        #   person.name = '  bob  ';Fi[	@jiEI"m        #     end
        #   end
        #
        #   person = Person.new
        #   person.name = '';Fi[	@ÄiÅI"{      #     validates! :name, presence: true
      #   end
      #
      #   person = Person.new
      #   person.name = '';Fi[	@ñi¿I"y    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new
    #   person.valid? # => false;Fi[	@ñi—I"q    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new
    #   person.name = '';Fi[	@ñi·I"É    #     validates_presence_of :name, on: :new
    #   end
    #
    #   person = Person.new
    #   person.valid?       # => true;Fi[	@ñi¯I"q    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new
    #   person.name = '';Fi[	@ñiI"Ü    #     validates_presence_of :name, on: :new
    #   end
    #
    #   person = Person.new
    #   person.invalid?       # => false;Fi[	@A	@ i[[	@jiI"û        # happens.
        #
        #   class Person
        #     include ActiveModel::Validations
        #     include ActiveModel::Validations::Callbacks;Fi[	@ji5I"û        # happens.
        #
        #   class Person
        #     include ActiveModel::Validations
        #     include ActiveModel::Validations::Callbacks;Fi[	@Äi$I"Å      #   end
      #
      #   class Person
      #     include ActiveModel::Validations
      #     attr_accessor :name, :email;Fi[	@Äi{I"w      # the validation itself.
      #
      #   class Person
      #     include ActiveModel::Validations
      #;Fi[	@âi!I"™      # to add errors based on more complex conditions.
      #
      #   class Person
      #     include ActiveModel::Validations
      #     validates_with MyValidator;Fi[	@âi5I"…      # You may also pass it multiple classes, like so:
      #
      #   class Person
      #     include ActiveModel::Validations
      #     validates_with MyValidator, MyOtherValidator, on: :create;Fi[	@âiNI"≈      # to the class and available as +options+:
      #
      #   class Person
      #     include ActiveModel::Validations
      #     validates_with MyValidator, my_custom_key: 'my custom value';Fi[	@âijI"Å    # to add errors based on more complex conditions.
    #
    #   class Person
    #     include ActiveModel::Validations
    #;Fi[	@âiyI"Å    # You may also pass it multiple classes, like so:
    #
    #   class Person
    #     include ActiveModel::Validations
    #;Fi[	@ñiI"Ö      # Validates each attribute against a block.
      #
      #   class Person
      #     include ActiveModel::Validations
      #;Fi[	@ñizI"y      # +validates_with+ method.
      #
      #   class Person
      #     include ActiveModel::Validations
      #;Fi[	@ñiâI"•      # List all validators that are being used to validate a specific attribute.
      #
      #   class Person
      #     include ActiveModel::Validations
      #;Fi[	@ñi∫I"f    # error messages.
    #
    #   class Person
    #     include ActiveModel::Validations
    #;Fi[	@ñiÀI"o    # added otherwise +false+.
    #
    #   class Person
    #     include ActiveModel::Validations
    #;Fi[	@ñi€I"ô    # against (the context is defined on the validations using <tt>:on</tt>).
    #
    #   class Person
    #     include ActiveModel::Validations
    #;Fi[	@ñiÚI"p    # added, +false+ otherwise.
    #
    #   class Person
    #     include ActiveModel::Validations
    #;Fi[	@ñiI"ô    # against (the context is defined on the validations using <tt>:on</tt>).
    #
    #   class Person
    #     include ActiveModel::Validations
    #;Fi[	@ôI"module API;Fi[[	I"4projects//twitter_proj/twitter/api/arguments.rb;Ti I"<module Twitter
  module API
    class Arguments < Array;Fi [	@ii	I"trequire("twitter/direct_message")
require("twitter/user")
module Twitter
  module API
    module DirectMessages;Fi[	@viI"frequire("twitter/tweet")
require("twitter/user")
module Twitter
  module API
    module Favorites;Fi[	@}iI"wrequire("twitter/relationship")
require("twitter/user")
module Twitter
  module API
    module FriendsAndFollowers;Fi[	@öiI"mrequire("twitter/configuration")
require("twitter/language")
module Twitter
  module API
    module Help;Fi[	@£iI"brequire("twitter/tweet")
require("twitter/user")
module Twitter
  module API
    module Lists;Fi[	@∆iI"nrequire("twitter/api/utils")
require("twitter/place")
module Twitter
  module API
    module PlacesAndGeo;Fi[	@—iI"vrequire("twitter/api/utils")
require("twitter/saved_search")
module Twitter
  module API
    module SavedSearches;Fi[	@⁄iI"qrequire("twitter/api/utils")
require("twitter/search_results")
module Twitter
  module API
    module Search;Fi[	@›iI"nrequire("twitter/api/utils")
require("twitter/user")
module Twitter
  module API
    module SpamReporting;Fi[	@‡i	I"prequire("twitter/suggestion")
require("twitter/user")
module Twitter
  module API
    module SuggestedUsers;Fi[	@„iI"frequire("twitter/tweet")
require("twitter/user")
module Twitter
  module API
    module Timelines;Fi[	@ÚiI"drequire("twitter/place")
require("twitter/trend")
module Twitter
  module API
    module Trends;Fi[	@˘iI"erequire("twitter/oembed")
require("twitter/tweet")
module Twitter
  module API
    module Tweets;Fi[	@iI"irequire("twitter/tweet")
require("twitter/user")
module Twitter
  module API
    module Undocumented;Fi[	@iI"erequire("twitter/settings")
require("twitter/user")
module Twitter
  module API
    module Users;Fi[	@ﬁiI"crequire("twitter/cursor")
require("twitter/user")
module Twitter
  module API
    module Utils;Fi[	I"module StateMachine;FI"module Integrations;Fi[[	I"Uprojects//state_machine_proj/state_machine/integrations/active_model/observer.rb;Ti I"Emodule StateMachine
  module Integrations
    module ActiveModel;Fi [	I"\projects//state_machine_proj/state_machine/integrations/active_model/observer_update.rb;Ti I"Emodule StateMachine
  module Integrations
    module ActiveModel;Fi [	@i I"Emodule StateMachine
  module Integrations
    module ActiveModel;Fi [	@èi I"Emodule StateMachine
  module Integrations
    module ActiveModel;Fi [	@îi I"Fmodule StateMachine
  module Integrations
    module ActiveRecord;Fi [	I"Mprojects//state_machine_proj/state_machine/integrations/active_record.rb;TiI"yrequire("state_machine/integrations/active_model")
module StateMachine
  module Integrations
    module ActiveRecord;Fi[	@˝i I">module StateMachine
  module Integrations
    module Base;Fi [	@ i I"Dmodule StateMachine
  module Integrations
    module DataMapper;Fi [	@%i I"Dmodule StateMachine
  module Integrations
    module DataMapper;Fi [	@ki I"Dmodule StateMachine
  module Integrations
    module DataMapper;Fi [	@Ii I"Emodule StateMachine
  module Integrations
    module MongoMapper;Fi [	I"Lprojects//state_machine_proj/state_machine/integrations/mongo_mapper.rb;TiI"xrequire("state_machine/integrations/active_model")
module StateMachine
  module Integrations
    module MongoMapper;Fi[	@8i I"Amodule StateMachine
  module Integrations
    module Mongoid;Fi [	I"Gprojects//state_machine_proj/state_machine/integrations/mongoid.rb;Ti I"Amodule StateMachine
  module Integrations
    module Mongoid;Fi [	@Ii I"@module StateMachine
  module Integrations
    module Sequel;Fi [	@õi I"@module StateMachine
  module Integrations
    module Sequel;Fi [	@±I"super("STRING");Fi[[	I"-projects//homebrew_proj/test/testball.rb;TiI"xend
class TestBallWithRealPath < TestBall
  def function(var)
    super("STRING")
    @var = Pathname.new("STRING");Fi[	@iI"H  mirror("STRING")
  
  def function(var)
    super("STRING")
  end;Fi[	@i+I"k  
  # name parameter required for some Formula::factory
  def function(var)
    super("STRING")
  end;Fi[	@iyI";  end
  
  def function(var)
    super("STRING")
  end;Fi[	@içI";  end
  
  def function(var)
    super("STRING")
  end;Fi[	@iùI";  end
  
  def function(var)
    super("STRING")
  end;Fi[	@i¨I"M  bottle_sha1("STRING")
  
  def function(var)
    super("STRING")
  end;Fi[	@iµI"F  head("STRING")
  
  def function(var)
    super("STRING")
  end;Fi[	@i¿I"F  sha1("STRING")
  
  def function(var)
    super("STRING")
  end;Fi[	@iÀI"I  version("STRING")
  
  def function(var)
    super("STRING")
  end;Fi[	@iÿI"~  devel { url("STRING", "LITERAL" => "LITERAL", "LITERAL" => "STRING") }
  
  def function(var)
    super("STRING")
  end;Fi[	@iÂI"^  bottle { sha1("STRING" => "LITERAL") }
  
  def function(var)
    super("STRING")
  end;Fi[	@iÚI"^  bottle { sha1("STRING" => "LITERAL") }
  
  def function(var)
    super("STRING")
  end;Fi[	@iI";  end
  
  def function(var)
    super("STRING")
  end;Fi[	@iI";  end
  
  def function(var)
    super("STRING")
  end;Fi[	@i$I"b  version("STRING" => (CustomVersionScheme))
  
  def function(var)
    super("STRING")
  end;Fi[	@±@wi[[	I"Aprojects//compass_proj/compass/exec/command_option_parser.rb;TiI"B    end
    
    def function(var)
      # do nothing
    end;Fi[	@Åi1I"°      # The default finalize method -- it is a no-op.
      # This could print out a message or something.
      def function(var)
        # do nothing
      end;Fi[	@≥iRI"K  
  class NullLogger
    def function(var)
      # do nothing
    end;Fi[	@≥iVI"B    end
    
    def function(var)
      # do nothing
    end;Fi[	I",projects//compass_proj/compass/stats.rb;TiI"L      end
      
      def function(var)
        # do nothing
      end;Fi[	@7i"I"L      end
      
      def function(var)
        # do nothing
      end;Fi[	I"'projects//haml_proj/haml/engine.rb;Ti“I"f    
    if (RUBY_VERSION < "STRING") then
      def function(var)
        # do nothing
      end;Fi[	I"+projects//jekyll_proj/jekyll/plugin.rb;Ti&I"Y    #
    # Returns a new instance.
    def function(var)
      # do nothing
    end;Fi[	@
i'I"á        # Called at the end of an element
        # +name+ is the tag name
        def function(var)
          # do nothing
        end;Fi[	@
iHI"z        #
        # +string+ contains the character data
        def function(var)
          # do nothing
        end;Fi[	@
iOI"ò        # Called when comments are encountered
        # +string+ contains the comment data
        def function(var)
          # do nothing
        end;Fi[	@
iVI"ä        # Called on document warnings
        # +string+ contains the warning
        def function(var)
          # do nothing
        end;Fi[	@
i]I"Ü        # Called on document errors
        # +string+ contains the error
        def function(var)
          # do nothing
        end;Fi[	@
idI"ó        # Called when cdata blocks are found
        # +string+ contains the cdata content
        def function(var)
          # do nothing
        end;Fi[	@$iI"kmodule Paperclip
  class NilAdapter < AbstractAdapter
    def function(var)
      # do nothing
    end;Fi[	@$iI"B    end
    
    def function(var)
      # do nothing
    end;Fi[	I"Y#   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.;FI"=#   @param options [Hash] A customizable set of options.;Fi[[	@£i4I"w      # @return [Array<Twitter::Tweet>]
      # @overload list_timeline(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@£i>I"∑      # @overload list_timeline(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@£iäI"Î      # @return [Twitter::Cursor] The subscribers of the specified list.
      # @overload list_subscribers(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@£iíI"
      # @overload list_subscribers(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@£i•I"K      # @return [Twitter::List] The specified list.
      # @overload list_subscribe(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Subscribe to the authenticated user's "presidents" list;Fi[	@£i¨I"p      # @overload list_subscribe(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Subscribe to @sferik's "presidents" list;Fi[	@£i‹I"Q      # @return [Twitter::List] The specified list.
      # @overload list_unsubscribe(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Unsubscribe from the authenticated user's "presidents" list;Fi[	@£i„I"v      # @overload list_unsubscribe(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Unsubscribe from @sferik's "presidents" list;Fi[	@£i1I"¿      # @return [Twitter::Cursor]
      # @overload list_members(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@£i9I"      # @overload list_members(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@£ikI"A      # @return [Twitter::List] The deleted list.
      # @overload list_destroy(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Delete the authenticated user's "presidents" list;Fi[	@£irI"h      # @overload list_destroy(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Delete @sferik's "presidents" list;Fi[	@£iÖI"|      # @return [Twitter::List] The created list.
      # @overload list_update(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [String] :mode ('public') Whether your list is public or private. Values can be 'public' or 'private'.;Fi[	@£iéI"≤      # @overload list_update(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [String] :mode ('public') Whether your list is public or private. Values can be 'public' or 'private'.;Fi[	@£i∂I"9      # @return [Twitter::List] The specified list.
      # @overload list(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Show the authenticated user's "presidents" list;Fi[	@£iΩI"^      # @overload list(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Show @sferik's "presidents" list;Fi[	I"# For example:;F@i[[	@ixI"      # * <tt>:less_than_or_equal_to</tt>
      #
      # For example:
      #
      #   class Person < ActiveRecord::Base;Fi[	@…i°I"ˆ    # list of known actions.  This is important if you add a custom action to a controller that
    # overrides an out of the box Devise controller.
    # For example:
    #
    #    class RegistrationsController < Devise::RegistrationsController;Fi[	@<iEI"õ    # It extends {Haml::Helpers}, and various instance variables are set
    # (all prefixed with `haml_`).
    # For example:
    #
    #     s = "foobar";Fi[	@<iNI"⁄    #
    # `locals` is a hash of local variables to make available to the template.
    # For example:
    #
    #     Haml::Engine.new("%p= foo").render(Object.new, :foo => "Hello, world!") #=> "<p>Hello, world!</p>";Fi[	@<iáI"©    # the local variables which can be assigned must be pre-declared.
    # This is done with the `local_names` argument.
    # For example:
    #
    #     # This works;Fi[	@<i©I"ó    # If `object` is a class or module,
    # the method will instead by defined as an instance method.
    # For example:
    #
    #     t = Time.now;Fi[	@<i∂I"©    # the local variables which can be assigned must be pre-declared.
    # This is done with the `local_names` argument.
    # For example:
    #
    #     # This works;Fi[	@’i1I"´    # This is useful if you want to use the helpers in a context
    # other than the normal setup with ActionView.
    # For example:
    #
    #     context = Object.new;Fi[	@’i{I"¥    # and putting the result into `<li>` elements.
    # This creates a list of the results of the block.
    # For example:
    #
    #     = list_of([['hello'], ['yall']]) do |i|;Fi[	@’i’I"ê    # Increments the number of tabs the buffer automatically adds
    # to the lines of the template.
    # For example:
    #
    #     %h1 foo;Fi[	@’iıI"|    # to the lines of the template,
    # but only for the duration of the block.
    # For example:
    #
    #     %h1 foo;Fi[	@’iI"ë    # Surrounds a block of Haml code with strings,
    # with no whitespace in between.
    # For example:
    #
    #     = surround '(', ')' do;Fi[	@’i-I"è    # Prepends a string to the beginning of a Haml block,
    # with no whitespace between.
    # For example:
    #
    #     = precede '*' do;Fi[	@’i>I"}    # Appends a string to the end of a Haml block,
    # with no whitespace between.
    # For example:
    #
    #     click;Fi[	@‰i»I"€    # All conditionals based on the static parameters
    # are done as embedded Ruby within this template.
    # For example:
    #
    #     def_static_method(Foo, :my_static_method, [:foo, :bar], :baz, :bang, <<RUBY);Fi[	@‰iI"é    
    # Moves a scanner through a balanced pair of characters.
    # For example:
    #
    #     Foo (Bar (Baz bang) bop) (Bang (bop bip));Fi[	@	@Ü	i[[	I"Kprojects//compass_proj/compass/sass_extensions/functions/font_files.rb;TiI"Ä      var = if (var > (var + "LITERAL")) then
        var[(var + "LITERAL")].value.to_sym
      else
        "LITERAL"
      end;Fi[	I"Dprojects//compass_proj/compass/sass_extensions/sprites/image.rb;Ti[I"†          @var ||= if (position.unitless? or (position.unit_str == "STRING")) then
            position.value
          else
            "LITERAL"
          end;Fi[	@diI"a        "LITERAL" if (var["LITERAL"] == "STRING")
      end
    else
      "LITERAL"
    end;Fi[	@gi'I"x    var = if (var.mach_o_executable? or var.text_executable?) then
      "LITERAL"
    else
      "LITERAL"
    end;Fi[	@iI"M    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end;Fi[	@i#I"M    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end;Fi[	@πi|I"a        when "LITERAL" then
          "LITERAL"
        else
          "LITERAL"
        end;Fi[	@πiìI"`        when "STRING" then
          "LITERAL"
        else
          "LITERAL"
        end;Fi[	@π	i/I"d      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      else
        "LITERAL"
      end;Fi[	@π	i9I"b      when "LITERAL", "LITERAL" then
        "LITERAL"
      else
        "LITERAL"
      end;Fi[	@π	iKI"O    when "LITERAL" then
      archs.first
    else
      "LITERAL"
    end;Fi[	@ÁiI"`        when "LITERAL" then
          "STRING"
        else
          "LITERAL"
        end;Fi[	@¡	iI"\    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end, ENV.compiler);Fi[	@¡	i[I"\    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end, ENV.compiler);Fi[	@—i1I"ö          if var and ["LITERAL", "LITERAL"].include?(var.type) then
            extract_node_name(var)
          else
            "LITERAL"
          end);Fi[	@„
I"super(var);Fi[[	@Ii0I"ë      ##
      # Creates a new instance of the MongoDB database object
      def function(var, var)
        super(var)
        @var ||= Array.new;Fi[	@ki)I"é      ##
      # Creates a new instance of the MySQL adapter object
      def function(var, var)
        super(var)
        @var ||= Array.new;Fi[	@ni*I"¿      # Sets the PGPASSWORD environment variable to the password
      # so it doesn't prompt and hang in the process
      def function(var, var)
        super(var)
        @var ||= Array.new;Fi[	@Li&I"è      ##
      # Creates a new instance of the Redis database object
      def function(var, var)
        super(var)
        @var ||= Array.new;Fi[	@OiI"û      ##
      # Creates a new instance of the Riak adapter object
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?;Fi[	I"+projects//backup_proj/backup/errors.rb;TiI"x      end
      
      def function(var, var)
        super(var)
        set_backtrace(var.backtrace) if @var = var;Fi[	@CiI"á      ##
      # Campfire account's room id
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?;Fi[	@|i(I"≈      # The background color of an error message.
      # One of :yellow, :red, :green, :purple, or :random. (default: yellow)
      def function(var, var)
        super(var)
        @var ||= false;Fi[	@ilI"∞      # Default location is '$HOME/Backup/emails'
      # Example: '/tmp/test-mails'
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?;Fi[	@JiI"≤      # API-Key
      # Create a Prowl account and request an API key on prowlapp.com.
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?;Fi[	@QiI"ç      ##
      # The priority of the notification
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?;Fi[	@XiI"~      ##
      # OAuth credentials
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?;Fi[	I"&projects//haml_proj/haml/error.rb;TiI"î    # @param message [String] The error message
    # @param line [Fixnum] See \{#line}
    def function(var, var)
      super(var)
      @var = var;Fi[	@‰i2I"Z    attr("LITERAL")
    
    def function(var, var)
      super(var)
      @var = var;Fi[	@iI"«    # * <tt>:after</tt> - Whether to run after callbacks
    # * <tt>:transaction</tt> - Whether to wrap transitions within a transaction
    def function(var, var)
      super(var)
      @var = all?;Fi[	I"#:nodoc:;F@Ei[[	@iI"™      
      # Returns true if the attribute methods defined have been generated.
      #:nodoc:
      def function
        @var ||= Module.new.tap { |var| include(var) };Fi[	@iI"¿      # significantly (in our case our test suite finishes 10% faster with
      # this cache).
      #:nodoc:
      def function
        @var ||= ThreadSafe::Cache.new("LITERAL" => "LITERAL");Fi[	@.iBI"•    
    module ClassMethods
      #:nodoc:
      def function
        @var ||= (var = ActiveSupport::Inflector.underscore(ActiveSupport::Inflector.demodulize(self));Fi[	@ei[I"•        
        # Generate a token checking if one does not already exist in the database.
        #:nodoc:
        def function
          generate_token("LITERAL");Fi[	@EiI"¢    
    # We need to setup the environment variables and the response in the controller.
    #:nodoc:
    def function
      @request.env["STRING"] = @controller;Fi[	@EiI"°    
    # Quick access to Warden::Proxy.
    #:nodoc:
    def function
      @var ||= (var = Warden::Manager.new(nil) { |var| var.merge!(Devise.warden_config) };Fi[	@∆iOI"f    end
    
    #:nodoc:
    def function
      var = @options["LITERAL"].to_s.downcase.camelize;Fi[	@∆iïI"`    end
    
    #:nodoc:
    def function
      return if (@options["LITERAL"] or file?.!);Fi[	@∆i°I"P    end
    
    #:nodoc:
    def function
      @errors.each do |var, var|;Fi[	@/iI"k    end
    
    #:nodoc:
    def function
      @var ||= (options["LITERAL"] or ::Logger.new(STDOUT));Fi[	I"=projects//paperclip_proj/paperclip/storage/filesystem.rb;TiI"d      end
      
      #:nodoc:
      def function
        @queued_for_write.each do |var, var|;Fi[	@ıi#I"`      end
      
      #:nodoc:
      def function
        @queued_for_delete.each do |var|;Fi[	@äiºI"d      end
      
      #:nodoc:
      def function
        @queued_for_write.each do |var, var|;Fi[	@äi⁄I"`      end
      
      #:nodoc:
      def function
        @queued_for_delete.each do |var|;Fi[	I"`#   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;F@Ri[[	@£i=I"^      #     Twitter.list_timeline(8863586)
      # @overload list_timeline(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iaI"≥      #     Twitter.list_remove_member(8863586, 'BarackObama')
      # @overload list_remove_member(user, list, user_to_remove, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_remove [Integer, String] The user id or screen name of the list member to remove.;Fi[	@£iëI"d      #     Twitter.list_subscribers(8863586)
      # @overload list_subscribers(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£i´I"`      #     Twitter.list_subscribe(8863586)
      # @overload list_subscribe(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£i∆I"≥      #     Twitter.list_subscriber?('presidents', 'BarackObama')
      # @overload list_subscriber?(user, list, user_to_check, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@£i‚I"d      #     Twitter.list_unsubscribe(8863586)
      # @overload list_unsubscribe(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iˇI"‹      #     Twitter.list_add_members(8863586, [813286, 18755393])
      # @overload list_add_members(user, list, users, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.;Fi[	@£iI"õ      #     Twitter.list_member?(8863586, 'BarackObama')
      # @overload list_member?(user, list, user_to_check, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String] The user ID or screen name of the list member.;Fi[	@£i8I"\      #     Twitter.list_members(8863586)
      # @overload list_members(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iUI"ñ      #     Twitter.list_add_member(8863586, 813286)
      # @overload list_add_member(user, list, user_to_add, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_add [Integer, String] The user id or screen name to add to the list.;Fi[	@£iqI"\      #     Twitter.list_destroy(8863586)
      # @overload list_destroy(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£içI"ò      #     Twitter.list_update(8863586, :description => "Presidents of the United States of America")
      # @overload list_update(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iºI"L      #     Twitter.list(8863586)
      # @overload list(user, list, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iI"‚      #     Twitter.list_remove_members(8863586, [813286, 18755393])
      # @overload list_remove_members(user, list, users, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.;Fi[	@S@±i[[	@iiaI"      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@iiyI"1      # @overload direct_message_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        threaded_object_from_response(Twitter::DirectMessage, "LITERAL", "STRING", var);Fi[	@vi=I"      # @overload unfavorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        threaded_object_from_response(Twitter::Tweet, "LITERAL", "STRING", var);Fi[	@viUI"˙      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@viwI"˙      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@}iQI"P      # @overload friendships(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@}i¥I"d      # @overload unfollow(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        threaded_user_objects_from_response("LITERAL", "STRING", var);Fi[	@—i$I"       #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@—iZI"      # @overload saved_search_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@›iI"g      # @overload report_spam(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        threaded_user_objects_from_response("LITERAL", "STRING", var);Fi[	@ilI"      # @overload statuses_activity(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@i•I"»      #   Twitter.blocking_ids
      # @overload block(options={})
      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@i÷I"a      # @overload block(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        threaded_user_objects_from_response("LITERAL", "STRING", var);Fi[	@iÈI"c      # @overload unblock(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var)
        threaded_user_objects_from_response("LITERAL", "STRING", var);Fi[	I"module ActiveModel;FI"module Validations;Fi[[	@di I"Wmodule ActiveModel
  module Validations
    class AbsenceValidator < EachValidator;Fi [	@gi I"Zmodule ActiveModel
  module Validations
    class AcceptanceValidator < EachValidator;Fi [	@ji I"Amodule ActiveModel
  module Validations
    module Callbacks;Fi [	I"Eprojects//activemodel_proj/active_model/validations/clusivity.rb;TiI"jrequire("active_support/core_ext/range")
module ActiveModel
  module Validations
    module Clusivity;Fi[	@Êi I"\module ActiveModel
  module Validations
    class ConfirmationValidator < EachValidator;Fi [	@oiI"Çrequire("active_model/validations/clusivity")
module ActiveModel
  module Validations
    class ExclusionValidator < EachValidator;Fi[	@ri I"Vmodule ActiveModel
  module Validations
    class FormatValidator < EachValidator;Fi [	@yiI"Çrequire("active_model/validations/clusivity")
module ActiveModel
  module Validations
    class InclusionValidator < EachValidator;Fi[	@|i I"Vmodule ActiveModel
  module Validations
    class LengthValidator < EachValidator;Fi [	@i I"\module ActiveModel
  module Validations
    class NumericalityValidator < EachValidator;Fi [	@}i I"Xmodule ActiveModel
  module Validations
    class PresenceValidator < EachValidator;Fi [	@ÄiI"rrequire("active_support/core_ext/hash/slice")
module ActiveModel
  module Validations
    module ClassMethods;Fi[	@âi I"Emodule ActiveModel
  module Validations
    module HelperMethods;Fi [	@ñiI"¶require("active_support/core_ext/hash/keys")
require("active_support/core_ext/hash/except")
module ActiveModel
  module Validations
    extend(ActiveSupport::Concern);Fi[	@EI"var = [];Fi[[	@ìi\I"˝    # may be interleaved. Interleaving of the "index|exit status" outputs
    # should not be an issue, given the small byte size of the data being written.
    def function
      var = []
      @commands.each_with_index { |var, var| (var << "STRING") };Fi[	@NiI"z      end
      
      def function
        var = []
        (var << [sass_path, css_path]) if sass_path and css_path;Fi[	@Ni>I"a      end
      
      def function
        var = []
        (var << sass_path) if sass_path;Fi[	@¨i;I"±  # Require jQuery from CDN if possible, falling back to vendored copy, and require
  # vendored jquery_ujs
  def function
    var = []
    if AppConfig.privacy.jquery_cdn? then;Fi[	I"7projects//diaspora_proj/helpers/language_helper.rb;TiI"vmodule LanguageHelper
  def function
    var = []
    AVAILABLE_LANGUAGES.each { |var, var| (var << [var, var]) };Fi[	@ÁiI"@  end
  
  def function
    var = []
    (var << f.caveats);Fi[	@Ái*I"a  end
  
  def function
    var = []
    if (f.plist or (keg and keg.plist_installed?)) then;Fi[	@ÍiXI"C  end
  
  def function
    var = []
    var = Formula.aliases;Fi[	I"(projects//homebrew_proj/cmd/deps.rb;Ti$I"Tend
class Array
  def function
    var = []
    each { |var| var = var.|(var) };Fi[	I"+projects//homebrew_proj/cmd/missing.rb;Ti	I"\  extend(self)
  
  def function
    var = []
    HOMEBREW_CELLAR.subdirs.each do |var|;Fi[	I",projects//homebrew_proj/cmd/versions.rb;TiI"Mend
class Formula
  def function
    var = []
    rev_list.each do |var|;Fi[	I"5projects//homebrew_proj/keg_fix_install_names.rb;Ti@I"R  end
  
  def function
    var = []
    var = ["STRING", "STRING", "STRING"];Fi[	@º	iÇI"¨  # http://github.com/mxcl/homebrew/issues/#issue/41
  # http://github.com/mxcl/homebrew/issues/#issue/48
  def function
    var = []
    ["STRING", "STRING"].each do |var|;Fi[	@icI"z      alias "LITERAL" "LITERAL"
      
      def function
        var = []
        self.class.constants.each do |var|;Fi[	@EI"Jdefine_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"));Fi[[	@iI"⁄          (defined? ::ActiveModel::VERSION.! or (::ActiveModel::VERSION::MAJOR == "LITERAL"))
        end
        def function
          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end;Fi[	@îiI"          ((::ActiveRecord::VERSION::MAJOR == "LITERAL") or ((::ActiveRecord::VERSION::MAJOR == "LITERAL") and (::ActiveRecord::VERSION::MINOR == "LITERAL")))
        end
        def function
          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end;Fi[	@Ôi1I"ì      
      # Initializes static states
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	@Ôi6I"î      
      # Initializes dynamic states
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	@kiUI"≈      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	@IiI"ä          var
        end
        def function
          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end;Fi[	@IiFI"ı          defined? ::MongoMapper::Plugins and (defined? ::MongoMapper::Version.! or ::MongoMapper::Version =~ "LITERAL")
        end
        def function
          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end;Fi[	@¸i)I"≈      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	@8iI"¶          ::Mongoid::VERSION =~ "LITERAL"
        end
        def function
          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end;Fi[	@i-I"≈      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	@IiI"          (defined? ::Sequel::MAJOR.! or ((::Sequel::MAJOR == "LITERAL") or ((::Sequel::MAJOR == "LITERAL") and (::Sequel::MINOR <= "LITERAL"))))
        end
        def function
          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end;Fi[	@IiI"Ã          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end
        def function
          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end;Fi[	@õiII"≈      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	@õi]I"¥      
      # Adds hooks into validation for automatically firing events
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	I"Gassert_equal("LITERAL", (version("STRING") <=> version("STRING")));F@üi[[	@ËiI"Ê  
  def function
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"*  def function
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@ËiI"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@Ëi I"b    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@Ëi!I"L    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_nil((version("STRING") <=> "STRING"));Fi[	@±I"case var;Fi[[	@i5I"`      protected
      
      def function(var)
        case var
        when "LITERAL" then;Fi[	@ÄiïI"Z      end
      
      def function(var)
        case var
        when TrueClass then;Fi[	@YiI"ømodule Compass::SassExtensions::Functions::Lists
  # Returns true when the object is false, an empty string, or an empty list
  def function(var)
    case var
    when Sass::Script::Bool then;Fi[	@\i¬I"P  end
  
  def function(var)
    case var
    when Sass::Script::Color then;Fi[	I"+projects//compass_proj/compass/util.rb;TiI"Q  end
  
  def function(var)
    case var
    when NilClass, FalseClass then;Fi[	I"-projects//diaspora_proj/models/aspect.rb;TiI"A  end
  
  def function(var)
    case var
    when Post then;Fi[	@LiYI"Ç    # is not a String.
    # Strings contained in x must be valid UTF-8.
    def function(var)
      case var
      when Hash then;Fi[	@LidI"K    end
    
    def function(var)
      case var
      when Hash then;Fi[	@LiÅI"M    end
    
    def function(var)
      case var
      when String then;Fi[	@^iêI"U      end
      
      def function(var)
        case var
        when File then;Fi[	@äiˆI"Y      private
      
      def function(var)
        case var
        when File then;Fi[	@Fi"I"õ  #   5. An instance of `Redis`, `Redis::Client`, `Redis::DistRedis`,
  #      or `Redis::Namespace`.
  def function(var)
    case var
    when String then;Fi[	@˜iI"^      private
      
      def function(var)
        case var
        when "LITERAL" then;Fi[	I":projects//twitter_proj/twitter/response/parse_json.rb;Ti
I"è  module Response
    class ParseJson < Faraday::Response::Middleware
      def function(var)
        case var
        when "LITERAL", nil then;Fi[	I"opoo("STRING");F@ i[[	@ÌiWI"b    require("erb")
    if version.nil? then
      opoo("STRING")
      puts("STRING")
    end;Fi[	@@i9I"{  def function
    unless MacOS.macports_or_fink.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING");Fi[	I"(projects//homebrew_proj/cmd/link.rb;TiI"u    ARGV.kegs.each do |var|
      if var.linked? then
        opoo("STRING")
        puts("STRING")
        next;Fi[	@·i=I"à  # up in the DSL section.
  def function(var, var)
    opoo("STRING")
    puts("STRING")
    FailsWithLLVM.new(var, var).handle_failure;Ti[	@îiÚI"ë      (ohai("STRING") if ARGV.verbose?
      if f.class.skip_clean_all? then
        opoo("STRING")
        puts("STRING")
        puts("STRING");Fi[	@îi¸I"â      Cleaner.new(f))
    rescue Exception => var
      opoo("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?;Fi[	@îiI"∞        var = (HOMEBREW_PREFIX / var.basename).realpath
        unless ORIGINAL_PATHS.include?(var) then
          opoo("STRING")
          puts("STRING")
          @var = true;Fi[	@îiI"  def function
    if (f.prefix + "STRING").directory? then
      opoo("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îi"I"  def function
    if (f.prefix + "STRING").directory? then
      opoo("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îi-I"ô    var = f.lib.children.select { |var| var.to_s =~ "LITERAL" }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îi@I"f    end
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îiLI"©    var = f.bin.children.select { |var| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îiXI"™    var = f.sbin.children.select { |var| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING");Fi[	@óiI"É      var.verify_checksum(@checksum)
    rescue ChecksumMissingError
      opoo("STRING")
      puts("STRING")
      puts("STRING");Fi[	I"#       event :ignite do;FI",#         transition :parked => :idling;Fi[[	@ÒiI"z    #       end
    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@ÒiDI"z    #       end
    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@ÒidI"≤    #   class Vehicle < ActiveRecord::Base
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@¯iBI"ù    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@¯itI"ù    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@ iI"¶        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end;Fi[	@ iYI"¶        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end;Fi[	@ i}I"¶        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end;Fi[	@inI"•    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@iüI"•    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@iéI"í    #     
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@>iÂI"â    #   class Vehicle
    #     state_machine do
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@>i˛I"ù    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end;Fi[	@@e
i[[	@Òi I"x    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end;Fi[	@ÒiEI"x    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end;Fi[	@ÒieI"ï    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end;Fi[	@¯iCI"î    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       ;Fi[	@¯iuI"î    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       ;Fi[	@ iI"©        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end;Fi[	@ iZI"©        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end;Fi[	@ i~I"©        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end;Fi[	@ioI"ú    #     state_machine :state, :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       ;Fi[	@i†I"ú    #     state_machine :state, :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       ;Fi[	@ièI"ï    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end;Fi[	@>iÊI"Å    #     state_machine do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end;Fi[	@>iˇI"ï    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end;Fi[	I"var = "LITERAL";F@Ri[[	I"3projects//nokogiri_proj/nokogiri/css/parser.rb;Ti?I"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=iDI"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=iII"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=iNI"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=iSI"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=iXI"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=iQI"n      # reduce 62 omitted
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=iVI"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=i[I"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=i`I"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=ieI"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=ijI"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	@=ioI"[      
      def function(var, var, var)
        var = "LITERAL"
        var
      end;Fi[	I"&Backup::Dependency.load("STRING");FI"module Backup;Fi[[	@Ci I"FBackup::Dependency.load("STRING")
module Backup
  module Notifier;Fi [	@|i I"FBackup::Dependency.load("STRING")
module Backup
  module Notifier;Fi [	@i I"FBackup::Dependency.load("STRING")
module Backup
  module Notifier;Fi [	@Ji I"FBackup::Dependency.load("STRING")
module Backup
  module Notifier;Fi [	@Xi I"FBackup::Dependency.load("STRING")
module Backup
  module Notifier;Fi [	@Ui I"EBackup::Dependency.load("STRING")
module Backup
  module Storage;Fi [	@ñi I"EBackup::Dependency.load("STRING")
module Backup
  module Storage;Fi [	@Xi I"EBackup::Dependency.load("STRING")
module Backup
  module Storage;Fi [	@[i I"EBackup::Dependency.load("STRING")
module Backup
  module Storage;Fi [	@`i I"EBackup::Dependency.load("STRING")
module Backup
  module Storage;Fi [	I"0projects//backup_proj/backup/storage/scp.rb;TiI"gBackup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup
  module Storage;Fi[	I"1projects//backup_proj/backup/storage/sftp.rb;TiI"gBackup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup
  module Storage;Fi[	@uiI"fBackup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup
  module Syncer;Fi[	I"# @return [Integer];F@Ei[[	I"0projects//twitter_proj/twitter/geo/point.rb;Ti	I"{  class Geo
    class Point < Twitter::Geo
      # @return [Integer]
      def function
        coordinates["LITERAL"];Fi[	@{iI"w      alias "LITERAL" "LITERAL"
      
      # @return [Integer]
      def function
        coordinates["LITERAL"];Fi[	@i&I"R    end
    
    # @return [Integer]
    def function
      @attrs["LITERAL"];Fi[	I",projects//twitter_proj/twitter/place.rb;TiI"[    end
    
    # @return [Integer]
    def function
      @var ||= @attrs["LITERAL"];Fi[	@TiI"W    end
    
    # @return [Integer]
    def function
      var = @attrs["STRING"];Fi[	@TiI"W    end
    
    # @return [Integer]
    def function
      var = @attrs["STRING"];Fi[	@Ti"I"x    end
    
    # @return [Integer]
    def function
      [(reset_at - Time.now).ceil, "LITERAL"].max if reset_at;Fi[	I"5projects//twitter_proj/twitter/search_results.rb;TiI"q    end
    
    # @return [Integer]
    def function
      @attrs["LITERAL"]["LITERAL"] if search_metadata?;Fi[	@ãiI"q    end
    
    # @return [Integer]
    def function
      @attrs["LITERAL"]["LITERAL"] if search_metadata?;Fi[	@ãi%I"q    end
    
    # @return [Integer]
    def function
      @attrs["LITERAL"]["LITERAL"] if search_metadata?;Fi[	@ãi0I"q    end
    
    # @return [Integer]
    def function
      @attrs["LITERAL"]["LITERAL"] if search_metadata?;Fi[	I",projects//twitter_proj/twitter/tweet.rb;Ti"I"X    end
    
    # @return [Integer]
    def function
      var = @attrs["LITERAL"];Fi[	@îi]I"X    end
    
    # @return [Integer]
    def function
      var = @attrs["LITERAL"];Fi[	@„
@Ñi[[	@≠iDI"∫      # Note that errors raised by Cli::Helpers#run may also be rescued here.
      #
      def function(var, var)
        begin
          (var = Tempfile.open("STRING", Config.tmp_path);Fi[	@…iYI"q    end
    
    def function(var, var)
      begin
        (var, @scope["LITERAL"] = @scope["LITERAL"], nil;Fi[	@’i]I"‘    # @yield [args] A block of Haml code that will be converted to a string
    # @yieldparam args [Array] `args`
    def function(var, var)
      begin
        (var = (eval("STRING", var.binding) or haml_buffer);Fi[	@Ái(I"∆  # Allows us to ensure a puts happens before the block exits so that if say,
  # an exception is thrown, its output starts on a new line.
  def function(var, var)
    begin
      (Kernel.print(var);Fi[	I"-projects//homebrew_proj/extend/object.rb;TiI"zclass Object
  unless method_defined?("LITERAL") then
    def function(var, var)
      begin
        (var = "LITERAL";Fi[	@›iI"    #
    # Returns nothing.
    def function(var, var)
      begin
        (self.content = File.read(File.join(var, var));Fi[	@∆i|I"|    end
    
    def function(var, var)
      begin
        (raise(RuntimeError.new("STRING")) if var.processors.blank?;Fi[	@^irI"Y      end
      
      def function(var, var)
        begin
          (log("STRING");Fi[	@äiÁI"Y      end
      
      def function(var, var)
        begin
          (log("STRING");Fi[	@“ifI"l      end
      attr_reader :function
      def function(var, var)
        begin
          (@var = true;Fi[	@CieI"∫    # Also accepts a block which will be passed the job as soon as it
    # has completed processing. Useful for testing.
    def function(var, var)
      begin
        (var = Float(var);Fi[	@CièI"√    # DEPRECATED. Processes a single job. If none is given, it will
    # try to produce one. Usually run in the child.
    def function(var, var)
      begin
        (unless var ||= reserve then;Fi[	@i2I"ü      #   Twitter.user?('sferik')
      #   Twitter.user?(7505382)  # Same as above
      def function(var, var)
        begin
          (merge_user!(var, var);Fi[	@I"#     attr_accessor :name;Fi[[	@i&I"ù      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_prefix 'clear_';Fi[	@iJI"û      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?';Fi[	@inI"º      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_affix prefix: 'reset_', suffix: '_to_default!';Fi[	@iÑI"û      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?';Fi[	@i∆I"û      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?';Fi[	@iÌI"û      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?';Fi[	@jiI"û        #     include ActiveModel::Validations
        #     include ActiveModel::Validations::Callbacks
        #
        #     attr_accessor :name
        #;Fi[	@Äi}I"ò      #   class Person
      #     include ActiveModel::Validations
      #
      #     attr_accessor :name
      #     validates! :name, presence: true;Fi[	@ñiºI"â    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name;Fi[	@ñiÕI"â    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name;Fi[	@ñi›I"ì    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name, on: :new;Fi[	@ñiÙI"â    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name;Fi[	@ñiI"ì    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name, on: :new;Fi[	I"require("twitter/base");F@ôi[[	I"4projects//twitter_proj/twitter/configuration.rb;Ti I"Qrequire("twitter/base")
module Twitter
  class Configuration < Twitter::Base;Fi [	I"-projects//twitter_proj/twitter/entity.rb;Ti I"Jrequire("twitter/base")
module Twitter
  class Entity < Twitter::Base;Fi [	I"*projects//twitter_proj/twitter/geo.rb;Ti I"Grequire("twitter/base")
module Twitter
  class Geo < Twitter::Base;Fi [	I"/projects//twitter_proj/twitter/language.rb;Ti I"Lrequire("twitter/base")
module Twitter
  class Language < Twitter::Base;Fi [	I"/projects//twitter_proj/twitter/metadata.rb;Ti I"Lrequire("twitter/base")
module Twitter
  class Metadata < Twitter::Base;Fi [	I"-projects//twitter_proj/twitter/oembed.rb;Ti I"Jrequire("twitter/base")
module Twitter
  class OEmbed < Twitter::Base;Fi [	I"5projects//twitter_proj/twitter/profile_banner.rb;Ti I"Qrequire("twitter/base")
module Twitter
  class ProfileBanner < Twitter::Base;Fi [	I"3projects//twitter_proj/twitter/relationship.rb;Ti I"Prequire("twitter/base")
module Twitter
  class Relationship < Twitter::Base;Fi [	@ãi I"Qrequire("twitter/base")
module Twitter
  class SearchResults < Twitter::Base;Fi [	I"/projects//twitter_proj/twitter/settings.rb;Ti I"Lrequire("twitter/base")
module Twitter
  class Settings < Twitter::Base;Fi [	I"+projects//twitter_proj/twitter/size.rb;Ti I"Hrequire("twitter/base")
module Twitter
  class Size < Twitter::Base;Fi [	I"1projects//twitter_proj/twitter/suggestion.rb;Ti I"Nrequire("twitter/base")
module Twitter
  class Suggestion < Twitter::Base;Fi [	I",projects//twitter_proj/twitter/trend.rb;Ti I"Irequire("twitter/base")
module Twitter
  class Trend < Twitter::Base;Fi [	@˛@Si[[	@vi I"o      #   Returns the 20 most recent favorite Tweets for the specified user
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.;Fi[	@}iI"’      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@}i8I"2      #   Returns an array of numeric IDs for every user following the specified user
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@}iI"’      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@}i+I"’      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@£i!I"#      #     Twitter.lists
      # @overload lists(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Return all lists that @sferik subscribes to;Fi[	@£i|I"ƒ      #     Twitter.memberships
      # @overload memberships(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@£i’I"»      #     Twitter.subscriptions
      # @overload subscriptions(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@„i/I"~      # @return [Array<Twitter::Tweet>]
      # @overload user_timeline(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@iAI"ƒ      #   Returns users following followers of the authenticated user
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@iI"      #   Returns extended information for a given user
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Return extended information for @sferik;Fi[	@iZI"t      #     Twitter.contributees
      # @overload contributees(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.;Fi[	@iqI"t      #     Twitter.contributors
      # @overload contributors(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.;Fi[	@e
@i[[	@√iSI"µ      #       def send_devise_notification(notification)
      #         pending_notifications << notification
      #       end
      #
      #       def send_pending_notifications;Fi[	@√iYI"ã      #           devise_mailer.send(n, self).deliver
      #         end
      #       end
      #
      #       def pending_notifications;Fi[	@ÒiI"Ä    #       event :park do
    #         transition :idling => :parked
    #       end
    #       
    #       event :ignite do;Fi[	@ÒiBI"Ä    #       event :park do
    #         transition :idling => :parked
    #       end
    #       
    #       event :ignite do;Fi[	@¯iDI"Ä    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :park do;Fi[	@¯iNI"    #       event :enable do
    #         transition all => :active
    #       end
    #       
    #       event :disable do;Fi[	@¯ivI"Ä    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :park do;Fi[	@¯i{I"    #       event :enable do
    #         transition all => :active
    #       end
    #       
    #       event :disable do;Fi[	@ipI"Ñ    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :shift_up do;Fi[	@i°I"Ä    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :park do;Fi[	@i√I"}    #       event :turn_on do
    #         transition all => :on
    #       end
    #       
    #       event :turn_off do;Fi[	@iÕI"Å    #       event :turn_on do
    #         transition all => :active
    #       end
    #       
    #       event :turn_off do;Fi[	@/iI"z    #       event :park
    #         transition all => :parked
    #       end
    #       
    #       event :crash;Fi[	I"yield);FI"ensure;Fi[[	@liwI"]        begin
          (@var = var
          yield)
        ensure
          @var = nil;Fi[	@≥i#I"ï        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL"))
        yield)
      ensure
        ($stderr.write(color("LITERAL"));Fi[	@≥i.I"ï        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL"))
        yield)
      ensure
        ($stderr.write(color("LITERAL"));Fi[	@…ioI"ê        var.merge!(var.slice("LITERAL", "LITERAL", "LITERAL"))
        @scope.merge!(var)
        yield)
      ensure
        @scope.merge!(var);Fi[	@»i3I"r          (@var = true
          var = @_haml_concat_raw
          yield)
        ensure
          @var = var;Fi[	@’iLI"Ö        (var = @haml_buffer.active?
        @haml_buffer.active = false
        yield)
      ensure
        @haml_buffer.active = var;Fi[	@’i	I"ã        (var = haml_buffer.tabulation
        haml_buffer.tabulation = var
        yield)
      ensure
        haml_buffer.tabulation = var;Fi[	@’i:I"∞        var.active, var = false, var.active? if var
        @haml_buffer.active, var = true, @haml_buffer.active?
        yield)
      ensure
        (@haml_buffer.active = var;Fi[	@‰i2I"p      begin
        (var, $stderr = $stderr, StringIO.new
        yield)
      ensure
        $stderr = var;Fi[	@›ißI"Ç      var.concat(["STRING", "STRING"]) if quieter?
      var.each { |var| delete(var) }
      yield)
    ensure
      replace(var);Fi[	@‚iI"P      var = pwd
      cd(var)
      yield)
    ensure
      (cd(var) if var;Fi[	@ÂiI"W        chmod("LITERAL")
      end
      yield)
    ensure
      chmod(var) if var;Fi[	I"0projects//homebrew_proj/test/testing_env.rb;Ti.I"Ñ      $stderr.reopen("STRING", "STRING")
      $stdout.reopen("STRING", "STRING")
      yield)
    ensure
      ($stderr.reopen(var);Fi[	@	@ei[[	I":projects//backup_proj/backup/configuration/helpers.rb;TijI"•          self.class.log_deprecation_warning(var, var)
          var["LITERAL"].call(self, var["LITERAL"]) if var["LITERAL"]
        else
          super
        end;Fi[	@biòI"Œ      if ["STRING", "STRING"].include?(var) and (position_or_angle.is_a?(Sass::Script::Number) and position_or_angle.numerator_units.include?("STRING")) then
        false
      else
        super
      end;Fi[	@riEI"õ          if @evaluation_context.respond_to?(var) then
            @evaluation_context.send(var, *var, &var)
          else
            super
          end;Fi[	@ai]I"è          if lock_strategy_enabled?("LITERAL") and attempts_exceeded? then
            "LITERAL"
          else
            super
          end;Fi[	@˛i…I"|          raise("STRING") if (var.size > "LITERAL")
          super(var.first)
        else
          super
        end;Fi[	I"3projects//paperclip_proj/paperclip/tempfile.rb;TiI"h        var = Time.now.strftime("STRING")
        var = "STRING"
      else
        super
      end;Fi[	@èi±I"b          add_states(var.known_states)
          var
        else
          super
        end;Fi[	@Ôi>I"ß        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end;Fi[	@¸i7I"ß        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end;Fi[	@i;I"ß        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end;Fi[	@IiI"®          if (action == "LITERAL") then
            define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
          else
            super
          end;Fi[	@i…I"v          each { |var| var.machine.write(object, "LITERAL", var) }
        end
      else
        super
      end;Fi[	I",projects//twitter_proj/twitter/error.rb;TiI"      if @wrapped_exception.respond_to?("LITERAL") then
        @wrapped_exception.backtrace
      else
        super
      end;Fi[	I"module Devise;FI"module Models;Fi[[	@√iI"arequire("devise/hooks/activatable")
module Devise
  module Models
    module Authenticatable;Fi[	@Äi I"9module Devise
  module Models
    module Confirmable;Fi [	@∆iI"àrequire("devise/strategies/database_authenticatable")
require("bcrypt")
module Devise
  module Models
    module DatabaseAuthenticatable;Fi[	@aiI"Wrequire("devise/hooks/lockable")
module Devise
  module Models
    module Lockable;Fi[	I"8projects//devise_proj/devise/models/omniauthable.rb;TiI"Urequire("devise/omniauth")
module Devise
  module Models
    module Omniauthable;Fi[	@+i I"9module Devise
  module Models
    module Recoverable;Fi [	I"8projects//devise_proj/devise/models/registerable.rb;Ti I":module Devise
  module Models
    module Registerable;Fi [	@eiI"}require("devise/hooks/rememberable")
require("devise/hooks/forgetable")
module Devise
  module Models
    module Rememberable;Fi[	I"7projects//devise_proj/devise/models/timeoutable.rb;TiI"]require("devise/hooks/timeoutable")
module Devise
  module Models
    module Timeoutable;Fi[	@.iI"urequire("devise/strategies/token_authenticatable")
module Devise
  module Models
    module TokenAuthenticatable;Fi[	I"5projects//devise_proj/devise/models/trackable.rb;TiI"Yrequire("devise/hooks/trackable")
module Devise
  module Models
    module Trackable;Fi[	@i I"9module Devise
  module Models
    module Validatable;Fi [	@ái I"Mmodule Devise
  module Models
    class MissingAttribute < StandardError;Fi [	@“@:i[[	@=i>I"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iCI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iHI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iMI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iRI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iWI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iPI"k      
      # reduce 62 omitted
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iUI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iZI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=i_I"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=idI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=iiI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@=inI"[      end
      
      def function(var, var, var)
        var = "LITERAL"
        var;Fi[	@I"*#   class Person < ActiveRecord::Base;Fi[[	@.iI"€    # Returns an Enumerable of all key attributes if any is set, regardless if
    # the object is persisted or not. If there no key attributes, returns +nil+.
    #
    #   class Person < ActiveRecord::Base
    #   end;Fi[	@.i*I"æ    # Returns a +string+ representing the object's key suitable for use in URLs,
    # or +nil+ if <tt>persisted?</tt> is +false+.
    #
    #   class Person < ActiveRecord::Base
    #   end;Fi[	@diI"›      # Validates that the specified attributes are blank (as defined by
      # Object#blank?). Happens by default on save.
      #
      #   class Person < ActiveRecord::Base
      #     validates_absence_of :first_name;Fi[	@giI"      # Encapsulates the pattern of wanting to validate the acceptance of a
      # terms of service check box (or similar agreement).
      #
      #   class Person < ActiveRecord::Base
      #     validates_acceptance_of :terms_of_service;Fi[	@oiI"      # Validates that the value of the specified attribute is not in a
      # particular enumerable object.
      #
      #   class Person < ActiveRecord::Base
      #     validates_exclusion_of :username, in: %w( admin superuser ), message: "You don't belong here";Fi[	@ri;I"      # form, going by the regular expression provided.You can require that the
      # attribute matches the regular expression:
      #
      #   class Person < ActiveRecord::Base
      #     validates_format_of :email, with: /\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i, on: :create;Fi[	@riBI"‚      # Alternatively, you can require that the specified attribute does _not_
      # match the regular expression:
      #
      #   class Person < ActiveRecord::Base
      #     validates_format_of :email, without: /NOSPAM/;Fi[	@riII"      # You can also provide a proc or lambda which will determine the regular
      # expression that will be used to validate the attribute.
      #
      #   class Person < ActiveRecord::Base
      #     # Admin can have number as a first letter in their screen name;Fi[	@yiI"‰      # Validates whether the value of the specified attribute is available in a
      # particular enumerable object.
      #
      #   class Person < ActiveRecord::Base
      #     validates_inclusion_of :gender, in: %w( m f );Fi[	@|iBI"Ù      # Validates that the specified attribute matches the length restrictions
      # supplied. Only one option can be used at a time:
      #
      #   class Person < ActiveRecord::Base
      #     validates_length_of :first_name, maximum: 30;Fi[	@iPI"˘      # is +false+) or applying it to the regular expression <tt>/\A[\+\-]?\d+\Z/</tt>
      # (if <tt>only_integer</tt> is set to +true+).
      #
      #   class Person < ActiveRecord::Base
      #     validates_numericality_of :value, on: :create;Fi[	@iyI"¶      #
      # For example:
      #
      #   class Person < ActiveRecord::Base
      #     validates_numericality_of :width, less_than: ->(person) { person.height };Fi[	@}iI"‚      # Validates that the specified attributes are not blank (as defined by
      # Object#blank?). Happens by default on save.
      #
      #   class Person < ActiveRecord::Base
      #     validates_presence_of :first_name;Fi[	@Â@Âi[[	@ËiêI"|  
  def function
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
  end;Fi[	@Ëi˝I"¶  # end
  def function
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@Ëi˛I"Œ  def function
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiˇI"Ô    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@Ëi I"Ô    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiI"Ô    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiI"Ô    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiI"Ô    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiI"Ô    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiI"Ô    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiI"Ô    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@ËiI"≈    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
  end;Fi[	I"(var << "STRING");F@Ái[[	I"5projects//diaspora_proj/helpers/mobile_helper.rb;Ti(I"Z    else
      var = "STRING"
      (var << "STRING")
      (var << "STRING")
    end;Fi[	@Ái@I"¶        f.plist_startup ? ((var << "STRING")) : ((var << "STRING"))
        if f.plist_manual then
          (var << "STRING")
          (var << "STRING")
        end;Fi[	@ÁiGI"ó          (var << "STRING")
          if f.plist_startup then
            (var << "STRING")
            (var << "STRING")
            (var << "STRING");Fi[	@ÁiHI"ä          if f.plist_startup then
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
          else;Fi[	@ÁiKI"{            (var << "STRING")
          else
            (var << "STRING")
            (var << "STRING")
          end;Fi[	@wiII"ß    (var << "STRING") if ARGV.include?("STRING")
    (var << "STRING") unless ARGV.verbose?
    (var << "STRING")
    (var << "STRING")
    safe_system("STRING", *var);Fi[	@º	iDI"√        (var << `#{locate("STRING")}STRING#{var}STRING`.chomp)
      end
      (var << "STRING")
      (var << "STRING")
      var.map { |var| Pathname.new(var) }.detect { |var| var.directory? });Fi[	@=iI"Ø      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          (var << "STRING")
          (var << "STRING")
          var = Node.new("LITERAL", var);Fi[	@“i∂I"s      var = Resque.info
      var = []
      (var << "STRING")
      (var << "STRING")
      (var << "STRING");Fi[	@“i∑I"s      var = []
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      (var << "STRING");Fi[	@“i∏I"|      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      (var << "STRING");Fi[	@“iπI"î      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      Resque.queues.each { |var| (var << "STRING") };Fi[	I"I#   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;F@Si[[	@ii`I"ˆ      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@iixI"      #     Twitter.direct_message_destroy(1825785544)
      # @overload direct_message_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@vi<I"˘      #     Twitter.unfavorite(25938088801)
      # @overload unfavorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@viTI"ı      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@vivI"ı      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@—i#I"˘      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@—iYI"
      #     Twitter.saved_search_destroy(16129012)
      # @overload saved_search_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@˘iQI"ö      #     Twitter.statuses(25938088801)
      # @overload statuses(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@˘ieI"¶      #     Twitter.status_destroy(25938088801)
      # @overload status_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@˘iãI"ò      #     Twitter.retweet(28561922516)
      # @overload retweet(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@˘i¶I"ö      #     Twitter.retweet!(28561922516)
      # @overload retweet!(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@ikI"      #     Twitter.statuses_activity(25938088801)
      # @overload statuses_activity(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@EI"
false;Fi[[	@<i'I"|    #  person = Person.new(id: 1, name: 'bob')
    #  person.persisted? # => false
    def function
      false
    end;Fi[	@gi,I"∏      # Provider defaults to false. Overridden when using a service-based
      # storage such as Amazon S3, Rackspace Cloud Files or Dropbox
      def function
        false
      end;Fi[	@zicI"@      end
      
      def function
        false
      end;Fi[	@Åi5I"@      end
      
      def function
        false
      end;Fi[	@iI"j      
      # Do not use remember_me behavior with token.
      def function
        false
      end;Fi[	I"3projects//diaspora_proj/models/conversation.rb;Ti0I",  end
  
  def function
    false
  end;Fi[	@ªiwI"Ö  
  # @return Returns true if this Post will accept updates (i.e. updates to the caption of a photo).
  def function
    false
  end;Fi[	@ªi{I",  end
  
  def function
    false
  end;Fi[	@’i\I"∞  # Because `ActionView` helpers may be included in non-`ActionView::Base` classes,
  # it's a good idea to define \{#is\_haml?} for all objects.
  def function
    false
  end;Fi[	@‰iMI"G    #
    # @return [Boolean]
    def function
      false
    end;Fi[	@èiAI"¨      # invoked?  This is used to determine whether to fire off attribute-based
      # event transitions when the action is run.
      def function
        false
      end;Fi[	@Ii4I"X          # do nothing
        end
        def function
          false
        end;Fi[	@„
@ei[[	@zi&I"Z  attr_writer("LITERAL")
  
  def function(var, var)
    super
    @var = var.mirrors;Fi[	@zi§I"Öend
class CurlBottleDownloadStrategy < CurlDownloadStrategy
  def function(var, var)
    super
    @var = (HOMEBREW_CACHE / "STRING");Fi[	@zi∞I"~end
class SubversionDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @@svn ||= "STRING";Fi[	@ziI"wend
class GitDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @@git ||= "STRING";Fi[	@ziYI"ùend
class CVSDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"));Fi[	@ziÑI"£end
class MercurialDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"));Fi[	@zi¨I"†end
class BazaarDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"));Fi[	@zi I"†end
class FossilDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"));Fi[	@óiAI"Wend
class HeadSoftwareSpec < SoftwareSpec
  def function(var, var)
    super
  end;Fi[	@óiNI"X  attr_reader("LITERAL")
  
  def function(var, var)
    super
    @var = "LITERAL";Fi[	@‡iÜI"          end
          
          def function(var, var)
            super
            throw(@jumptag, @encoding) if @encoding;Fi[	@
iI"∏      ###
      # Create a new XSD parser with +host+ and +opt+
      def function(var, var)
        super
        @var = ::Nokogiri::XML::SAX::Parser.new(self, (@charset or "STRING"));Fi[	I"ï#   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.;F@Si[[	@}iPI"g      #     Twitter.friendships(7505382, 14100886)    # Same as above
      # @overload friendships(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@}i}I"á      #     Twitter.follow('sferik')
      # @overload follow(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean] :follow (false) Enable notifications for the target user.;Fi[	@}iñI"â      #     Twitter.follow!('sferik')
      # @overload follow!(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean] :follow (false) Enable notifications for the target user.;Fi[	@}i≥I"E      #     Twitter.unfollow('sferik')
      # @overload unfollow(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@£i˜I"—      # @overload list_add_members(list, users, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @example Add @BarackObama and @pengwynn to the authenticated user's "presidents" list;Fi[	@£iI"Ë      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @example Add @BarackObama and @pengwynn to @sferik's "presidents" list;Fi[	@£iËI"Ÿ      # @overload list_remove_members(list, users, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @example Remove @BarackObama and @pengwynn from the authenticated user's "presidents" list;Fi[	@£iÚI"Ì      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @example Remove @BarackObama and @pengwynn from @sferik's "presidents" list;Fi[	@›iI"[      #     Twitter.report_spam(14589771) # Same as above
      # @overload report_spam(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@i’I"O      #     Twitter.block(7505382)  # Same as above
      # @overload block(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@iËI"S      #     Twitter.unblock(7505382)  # Same as above
      # @overload unblock(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(var);Fi[	@i˚I"·      #     Twitter.users(7505382, 14100886)     # Same as above using twitter_ids
      # @overload users(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Symbol, String] :method Requests users via a GET request instead of the standard POST request if set to ':get'.;Fi[	@SI"Õ#   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[[	@}i I"≠      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return @sferik's friends' IDs;Fi[	@}i1I"∂      #   Returns an array of numeric IDs for every user following the authenticated user
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the authenticated user's followers' IDs;Fi[	@}iI"˛      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.;Fi[	@}i,I"˛      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.;Fi[	@£ivI"<      # @return [Twitter::Cursor]
      # @overload memberships(options={})
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :filter_to_owned_lists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.;Fi[	@£i}I"Ç      # @overload memberships(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :filter_to_owned_lists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.;Fi[	@£iãI"˙      # @overload list_subscribers(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the subscribers of the authenticated user's "presidents" list;Fi[	@£iìI"      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the subscribers of @sferik's "presidents" list;Fi[	@£i2I"Ú      # @overload list_members(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the members of the authenticated user's "presidents" list;Fi[	@£i:I"      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the members of @sferik's "presidents" list;Fi[	@£i–I"°      # @return [Twitter::Cursor]
      # @overload subscriptions(options={})
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example List the lists the authenticated user follows;Fi[	@£i÷I"›      # @overload subscriptions(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example List the lists that @sferik follows;Fi[	I"#       ...;F@&i[[	@ivI"n      #
      #     def reset_attribute_to_default!(attr)
      #       ...
      #     end
      #   end;Fi[	@i∂I"b      #
      #     def clear_attribute(attr)
      #       ...
      #     end
      #   end;Fi[	@iJI"    #   class Vehicle
    #     state_machine :status, :attribute => :status_value do
    #       ...
    #     end
    #   end;Fi[	@iRI"|    #   class Vehicle
    #     state_machine :status, :initial => :parked do
    #       ...
    #     end
    #   end;Fi[	@iZI"©    #   class Vehicle
    #     state_machine :status, :initial => lambda {|vehicle| vehicle.speed == 0 ? :parked : :idling} do
    #       ...
    #     end
    #   end;Fi[	@i⁄I"{    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #   end;Fi[	@iËI"z    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     ;Fi[	@i˘I"z    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     ;Fi[	@iI"z    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     ;Fi[	@i#I"~    #     state_machine :state, :initial => :parked do
    #       state nil, :idling
    #       ...
    #     end
    #     ;Fi[	@>i≥I"p    #   class Vehicle
    #     state_machine :action => :save do
    #       ...
    #     end
    #   end;Fi[	I"assert(var.ppc7400?.!);FI"assert(var.ppc64?.!);Fi[[	I".projects//homebrew_proj/test/test_mach.rb;TiI"|    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?);Fi[	@ßiI"    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?);Fi[	@ßi+I"    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?);Fi[	@ßi9I"~    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ßiGI"~    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ßiUI"|    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ßicI"|    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ßiqI"~    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ßiêI"~    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ßi†I"~    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ßi∞I"~    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	I"var.add("LITERAL");F@æi[[	I"+projects//diaspora_proj/models/like.rb;TiI"q  
  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@¡iI"Ä  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@¡iI"f    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
  end;Fi[	I"4projects//diaspora_proj/models/participation.rb;TiI"q  
  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@»iI"Ä  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@»iI"f    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
  end;Fi[	@∏iI"q  
  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@∏iI"≥  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add(lambda { |var| var.diaspora_handle }, "LITERAL" => "LITERAL");Fi[	@ iI"q  
  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@ iI"Ä  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@ iI"|    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add(lambda do |var|;Fi[	@E@Ü	i[[	@Âi∂I"å      when "STRING", "STRING", "STRING", "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      when "STRING" then;Fi[	@Âi∏I"e      when "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      else;Fi[	@πirI"â      link_dir("STRING", var) do |var|
        case var.to_s
        when "STRING" then
          "LITERAL"
        when INFOFILE_RX then;Fi[	@πi}I"Ü      link_dir("STRING", var) do |var|
        case var.to_s
        when "STRING" then
          "LITERAL"
        when "STRING" then;Fi[	@πiI"~        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then;Fi[	@πiÉI"~        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then;Fi[	@πiÖI"}        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then;Fi[	@πiáI"~        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then;Fi[	@πiçI"        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then;Fi[	@πiëI"p        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        else;Fi[	@º	iUI"\    when "LITERAL" then
      "LITERAL"
    when "STRING" then
      "LITERAL"
    else;Fi[	@	I"(flash["LITERAL"] = I18n.t("STRING");Fi[[	I"Dprojects//diaspora_proj/controllers/conversations_controller.rb;Ti$I"◊      Postzord::Dispatcher.build(current_user, @conversation).post
      flash["LITERAL"] = I18n.t("STRING")
    else
      flash["LITERAL"] = I18n.t("STRING")
      flash["LITERAL"] = I18n.t("STRING") if var.blank?;Fi[	I"?projects//diaspora_proj/controllers/messages_controller.rb;TiI"ï      Rails.logger.info("STRING")
      Postzord::Dispatcher.build(current_user, var).post
    else
      flash["LITERAL"] = I18n.t("STRING")
    end;Fi[	I"=projects//diaspora_proj/controllers/people_controller.rb;TiçI"°      @var = @contact.aspects
      @var = @aspects_with_person.map(&"LITERAL")
    else
      flash["LITERAL"] = I18n.t("STRING")
      redirect_to(people_path);Fi[	@∏i"I"l        end
      end
    else
      flash["LITERAL"] = I18n.t("STRING")
      redirect_to(people_path);Fi[	@©i,I"ú    if current_user.update_profile(@profile_attrs) then
      flash["LITERAL"] = I18n.t("STRING")
    else
      flash["LITERAL"] = I18n.t("STRING")
    end;Fi[	I"?projects//diaspora_proj/controllers/services_controller.rb;Ti$I"ƒ      end
      flash["LITERAL"] = I18n.t("STRING")
    else
      flash["LITERAL"] = I18n.t("STRING")
      if var = Service.where("LITERAL" => (var.type.to_s), "LITERAL" => (var.uid)).first then;Fi[	I"<projects//diaspora_proj/controllers/users_controller.rb;Ti(I"ì            var = true
            flash["LITERAL"] = I18n.t("STRING")
          else
            flash["LITERAL"] = I18n.t("STRING")
          end;Fi[	@i/I"µ            if @user.update_attributes(var) then
              flash["LITERAL"] = I18n.t("STRING")
            else
              flash["LITERAL"] = I18n.t("STRING")
            end;Fi[	@i7I"π                I18n.locale = @user.language
                flash["LITERAL"] = I18n.t("STRING")
              else
                flash["LITERAL"] = I18n.t("STRING")
              end;Fi[	@i@I"Î                  (@user.mail_confirm_email == @user.email)
                  flash["LITERAL"] = I18n.t("STRING") if @user.unconfirmed_email
                else
                  flash["LITERAL"] = I18n.t("STRING")
                end;Fi[	@iGI"”                  if @user.update_attributes(var) then
                    flash["LITERAL"] = I18n.t("STRING")
                  else
                    flash["LITERAL"] = I18n.t("STRING")
                  end;Fi[	I"# @return [String];F@Ei[[	@êiXI"G  end
  
  # @return [String]
  def function
    case self.service;Fi[	@êidI"G  end
  
  # @return [String]
  def function
    case self.service;Fi[	I".projects//diaspora_proj/models/request.rb;Ti!I"X  
  # Alias of sender_handle
  # @return [String]
  def function
    sender_handle;Fi[	@i'I"i  
  # @note Used for XML marshalling
  # @return [String]
  def function
    sender.diaspora_handle;Fi[	@i1I"l  
  # @note Used for XML marshalling
  # @return [String]
  def function
    recipient.diaspora_handle;Fi[	@ÇiI"q    end
    
    # @return [String]
    def function
      @var ||= (@attrs["LITERAL"] or @attrs["LITERAL"]);Fi[	@ÇiI"è    end
    
    # @return [String]
    def function
      @var ||= (@attrs["LITERAL"] or (@attrs["LITERAL"] and @attrs["LITERAL"]["LITERAL"]));Fi[	@ãi I"p    end
    
    # @return [String]
    def function
      @attrs["LITERAL"]["LITERAL"] if search_metadata?;Fi[	@îi2I"É    alias "LITERAL" "LITERAL"
    
    # @return [String]
    def function
      (@attrs["LITERAL"] or (user and user.screen_name));Fi[	@îizI"    alias "LITERAL" "LITERAL"
    
    # @return [String]
    def function
      var = (@attrs["LITERAL"] or @attrs["LITERAL"]);Fi[	I".projects//twitter_proj/twitter/version.rb;TiI"|    
    class << self
      # @return [String]
      def function
        [MAJOR, MINOR, PATCH, PRE].compact.join("STRING");Fi[	@@„
i[[	@Ui;I"        # method previously used to set the accessor being deprecated.
        # #method_missing will handle any calls to `name=`.
        #
        def function(var, var)
          deprecations[var] = { "LITERAL" => (nil), "LITERAL" => (nil), "LITERAL" => (nil) }.merge(var);Fi[	@Ui^I"¿      # i.e. if an option will accept being set as an Array, then it
      # should be explicitly set as such. e.g. option = [val1, val2]
      #
      def function(var, var)
        var = nil;Fi[	@≠iCI"©      # If the import fails, return nil.
      # Note that errors raised by Cli::Helpers#run may also be rescued here.
      #
      def function(var, var)
        begin;Fi[	@æiDI"È      #   sign_in @user, :event => :authentication  # sign_in(resource, options)
      #   sign_in @user, :bypass => true            # sign_in(resource, options)
      #
      def function(var, var)
        var = var.extract_options!;Fi[	@√i_I"~      #       end
      #     end
      #
      def function(var, var)
        devise_mailer.send(var, self, var).deliver;Fi[	@∆iHI"o      #     super(params)
      #   end
      #
      def function(var, var)
        var.delete("LITERAL");Fi[	@…iÍI"z    #     root :to => "admin/dashboard#show"
    #   end
    #
    def function(var, var)
      var = lambda do |var|;Fi[	@…iI"j    #
    #   root :to => 'landing#show'
    #
    def function(var, var)
      var = lambda do |var|;Fi[	@Ei$I"º    #   sign_in :user, @user   # sign_in(scope, resource)
    #   sign_in @user          # sign_in(resource)
    #
    def function(var, var)
      var ||= Devise::Mapping.find_scope!(var);Fi[	@„i•I"      #     config.format.as_xml
      #   end
      #
      def function(var, var)
        var = if var.first.is_a?(Hash) then;Fi[	@„iÁI"£      #
      #   node.write_to(io, :indent_text => '-', :indent => 2
      #
      def function(var, var)
        var = var.first.is_a?(Hash) ? (var.shift) : ({});Fi[	@@	i[[	@iwI"v    def function(var, var)
      if super then
        true
      else
        if var.! and super(var, true) then;Fi[	@i¥I"ö        def function(var)
          if super then
            true
          else
            inherited_data ? (inherited_data.respond_to?(var)) : (false);Fi[	@æiNI"µ        else
          if (warden.user(var) == var) and var.delete("LITERAL").! then
            true
          else
            warden.set_user(var, var.merge!("LITERAL" => (var)));Fi[	@aiJI"õ        unlock_access! if lock_expired?
        if super and access_locked?.! then
          true
        else
          self.failed_attempts ||= "LITERAL";Fi[	@äi)I"{        if var then
          decorate(var)
          true
        else
          fail!(var.unauthenticated_message) if var;Fi[	@√iKI"Ñ    if self.profile.update_attributes(var) then
      Postzord::Dispatcher.build(self, profile).post
      true
    else
      false;Fi[	@“iYI"¢    def function(var)
      if var.value and var.value["LITERAL"] then
        true
      else
        var.parent ? (nuke_inner_whitespace?(var.parent)) : (false);Fi[	I"+projects//homebrew_proj/cmd/cleanup.rb;TiWI"t  def function
    if (keg_only?.! or ARGV.force?) then
      true
    else
      if opt_prefix.directory? then;Fi[	@¢i*I"r      case File.basename(var)
      when "STRING", "STRING" then
        true
      else
        # do nothing;Fi[	@∆iII"î    def function
      if instance.valid? then
        true
      else
        instance.errors.none? { |var, var| var.to_s.start_with?(@name.to_s) };Fi[	@kiaI"µ            var = self.class.state_machine(var)
            if var.states.match(self) then
              true
            else
              [false, var.generate_message("LITERAL")];Fi[	I"%# @param request_method [Symbol];FI"# @param path [String];Fi[[	@£iI"y      private
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array];Fi[	@∆itI"z      private
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param params [Hash];Fi[	@˘iˇI"y      private
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array];Fi[	@ﬁiI"y      private
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array];Fi[	@ﬁiI"u      end
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array];Fi[	@ﬁi'I"É      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array];Fi[	@ﬁi2I"Ö      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash];Fi[	@ﬁiCI"É      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array];Fi[	@ﬁiOI"Ö      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash];Fi[	@ﬁiZI"§      # @param collection_name [Symbol]
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array];Fi[	@ﬁiiI"¶      # @param collection_name [Symbol]
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash];Fi[	@E@Ü	i[[	I";projects//activemodel_proj/active_model/translation.rb;Ti
I"Ä    
    # Returns the +i18n_scope+ for the class. Overwrite if you want custom lookup.
    def function
      "LITERAL"
    end;Fi[	@oi	I"r    module StandAlone
      module ConfigurationDefaults
        def function
          "LITERAL"
        end;Fi[	@ziI"D      end
      
      def function
        "LITERAL"
      end;Fi[	@ziI"D      end
      
      def function
        "LITERAL"
      end;Fi[	@ziëI"D      end
      
      def function
        "LITERAL"
      end;Fi[	@ziïI"D      end
      
      def function
        "LITERAL"
      end;Fi[	@√i"I"D      end
      
      def function
        "LITERAL"
      end;Fi[	@√i*I"D      end
      
      def function
        "LITERAL"
      end;Fi[	I"2projects//haml_proj/haml/sass_rails_filter.rb;TiI"b      self.default_mime_type = "STRING"
      
      def function
        "LITERAL"
      end;Fi[	@$iI":    end
    
    def function
      "LITERAL"
    end;Fi[	I".return var.captures.first unless var.nil?;FI"var = "LITERAL".match(var);Fi[[	@¸ixI"Â    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first.gsub("STRING", "STRING") unless var.nil?;Fi[	@¸i|I"‡    return var.captures.first.gsub("STRING", "STRING") unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@¸i~I"«    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@¸i{I"«    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@¸i}I"«    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@¸iI"«    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@¸iÅI"«    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@¸iÉI"«    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@¸iÖI"«    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@¸iáI"«    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	I"require("twitter/user");F@ôi[[	@iiI"wrequire("twitter/api/utils")
require("twitter/direct_message")
require("twitter/user")
module Twitter
  module API;Fi[	@vi
I"trequire("twitter/error/forbidden")
require("twitter/tweet")
require("twitter/user")
module Twitter
  module API;Fi[	@}i
I"{require("twitter/error/forbidden")
require("twitter/relationship")
require("twitter/user")
module Twitter
  module API;Fi[	@£iI"irequire("twitter/list")
require("twitter/tweet")
require("twitter/user")
module Twitter
  module API;Fi[	@›iI"Urequire("twitter/api/utils")
require("twitter/user")
module Twitter
  module API;Fi[	@‡iI"srequire("twitter/api/utils")
require("twitter/suggestion")
require("twitter/user")
module Twitter
  module API;Fi[	@„iI"nrequire("twitter/api/utils")
require("twitter/tweet")
require("twitter/user")
module Twitter
  module API;Fi[	@i
I"krequire("twitter/cursor")
require("twitter/tweet")
require("twitter/user")
module Twitter
  module API;Fi[	@iI"vrequire("twitter/profile_banner")
require("twitter/settings")
require("twitter/user")
module Twitter
  module API;Fi[	@ﬁiI"srequire("twitter/api/arguments")
require("twitter/cursor")
require("twitter/user")
module Twitter
  module API;Fi[	@YI"module Storage;Fi[[	@gi I"2module Backup
  module Storage
    class Base;Fi [	@UiI"aBackup::Dependency.load("STRING")
module Backup
  module Storage
    class CloudFiles < Base;Fi[	@ñiI"^Backup::Dependency.load("STRING")
module Backup
  module Storage
    class Dropbox < Base;Fi[	I"0projects//backup_proj/backup/storage/ftp.rb;TiI"Krequire("net/ftp")
module Backup
  module Storage
    class FTP < Base;Fi[	I"2projects//backup_proj/backup/storage/local.rb;Ti I":module Backup
  module Storage
    class Local < Base;Fi [	@XiI"_Backup::Dependency.load("STRING")
module Backup
  module Storage
    class Ninefold < Base;Fi[	@[iI"\Backup::Dependency.load("STRING")
module Backup
  module Storage
    class RSync < Base;Fi[	@`iI"YBackup::Dependency.load("STRING")
module Backup
  module Storage
    class S3 < Base;Fi[	@piI"|Backup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup
  module Storage
    class SCP < Base;Fi[	@siI"}Backup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup
  module Storage
    class SFTP < Base;Fi[	@I"#     private;Fi[[	@i*I"{      #     attribute_method_prefix 'clear_'
      #     define_attribute_methods :name
      #
      #     private
      #;Fi[	@iNI"|      #     attribute_method_suffix '_short?'
      #     define_attribute_methods :name
      #
      #     private
      #;Fi[	@irI"ö      #     attribute_method_affix prefix: 'reset_', suffix: '_to_default!'
      #     define_attribute_methods :name
      #
      #     private
      #;Fi[	@iäI"]      #
      #     alias_attribute :nickname, :name
      #
      #     private
      #;Fi[	@i≤I"ç      #     # attribute_method_affix declares.
      #     define_attribute_methods :name, :age, :address
      #
      #     private
      #;Fi[	@iŒI"|      #     # attribute_method_affix declares.
      #     define_attribute_method :name
      #
      #     private
      #;Fi[	@iÒI"{      #     attribute_method_suffix '_short?'
      #     define_attribute_method :name
      #
      #     private
      #;Fi[	@jiI"l        #
        #     before_validation :remove_whitespaces
        #
        #     private
        #;Fi[	@ji>I"c        #
        #     after_validation :set_status
        #
        #     private
        #;Fi[	@âi,I"g      #       end
      #     end
      #
      #     private
      #       def some_complex_logic;Fi[	@	I"8render("LITERAL" => (true), "LITERAL" => "LITERAL");Fi[[	I"?projects//diaspora_proj/controllers/comments_controller.rb;TiI"e        end
      end
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
    end;Fi[	I"<projects//diaspora_proj/controllers/likes_controller.rb;TiI"e        end
      end
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
    end;Fi[	@˙iI"≤      Webfinger.in_background(params["LITERAL"], "LITERAL" => (true))
      render("LITERAL" => (true))
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
    end;Fi[	@∏iFI"o          end
        end
      else
        render("LITERAL" => (true), "LITERAL" => "LITERAL")
      end;Fi[	@∏iII"ê        render("LITERAL" => (true), "LITERAL" => "LITERAL")
      end
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
    end;Fi[	I"<projects//diaspora_proj/controllers/posts_controller.rb;Ti0I"ø      var = OEmbedPresenter.new(var, params.slice("LITERAL", "LITERAL", "LITERAL"))
      render("LITERAL" => (var))
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
    end;Fi[	I">projects//diaspora_proj/controllers/publics_controller.rb;Ti#I"ë    if @person.present? and @person.local? then
      render("STRING")
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
    end;Fi[	I"?projects//diaspora_proj/controllers/reshares_controller.rb;TiI"#      current_user.dispatch_post(@reshare, "LITERAL" => (post_url(@reshare)), "LITERAL" => (@reshare.root_author))
      render("LITERAL" => (ExtremePostPresenter.new(@reshare, current_user)), "LITERAL" => "LITERAL")
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
    end;Fi[	I"Eprojects//diaspora_proj/controllers/tag_followings_controller.rb;TiI"∂      if @tag_following.save then
        render("LITERAL" => (@tag.to_json), "LITERAL" => "LITERAL")
      else
        render("LITERAL" => (true), "LITERAL" => "LITERAL")
      end;Fi[	@ièI"Ñ    if var.present? then
      redirect_to(var.image_url)
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
    end;Fi[	@„
I" assert_type(var, "LITERAL");Fi[[	I"Gprojects//compass_proj/compass/sass_extensions/functions/colors.rb;TiI"€module Compass::SassExtensions::Functions::Colors
  # a genericized version of lighten/darken so that negative values can be used.
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	@iI"  # If the amount is negative, the color is scaled darker, if positive, it is scaled lighter.
  # This will never return a pure light or dark color unless the amount is 100%.
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	@iI"≥  
  # a genericized version of saturation/desaturate so that negative values can be used.
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	@i I"  # If the amount is negative, the color is desaturated, if positive, it is saturated.
  # This will never return a pure saturated or desaturated color unless the amount is 100%.
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	@i&I"f  end
  
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	@i-I"f  end
  
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	@biGI"¥    
    # returns the end position of the gradient from the color stop
    def function(var, var)
      assert_type(var, "LITERAL")
      var = Sass::Script::Number.new("LITERAL");Fi[	@Yi I"Å  
  # Get the nth value from a list
  def function(var, var)
    assert_type(var, "LITERAL")
    if (var.value == "STRING") then;Fi[	I"Eprojects//compass_proj/compass/sass_extensions/functions/math.rb;Ti$I"å  Sass::Script::Functions.declare("LITERAL", [])
  
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	@i:I"ï  Sass::Script::Functions.declare("LITERAL", ["LITERAL"])
  
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	I"# states for the attribute;F@±i[[	@ÔiII"ƒ      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var)
        create_scope(var, lambda { |var| ["STRING", var] });Fi[	@ÔiOI"«      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var)
        create_scope(var, lambda { |var| ["STRING", var] });Fi[	@kiwI"¬      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var)
        lambda { |var, var| var.all(attribute => (var)) };Fi[	@ki}I"–      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var)
        lambda { |var, var| var.all(attribute.to_sym.not => (var)) };Fi[	@¸iBI"      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var)
        define_scope(var, lambda { |var| { "LITERAL" => ({ attribute => ({ "STRING" => (var) }) }) } });Fi[	@¸iHI"Û      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var)
        define_scope(var, lambda { |var| { "LITERAL" => ({ attribute => ({ "STRING" => (var) }) }) } });Fi[	@iFI"›      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var)
        define_scope(var, lambda { |var| { attribute => ({ "STRING" => (var) }) } });Fi[	@iLI"‡      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var)
        define_scope(var, lambda { |var| { attribute => ({ "STRING" => (var) }) } });Fi[	@õisI"ﬂ      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var)
        create_scope(var, lambda { |var, var| var.filter(attribute_column => (var)) });Fi[	@õiyI"„      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var)
        create_scope(var, lambda { |var, var| var.exclude(attribute_column => (var)) });Fi[	@	I"if var["LITERAL"] then;Fi[[	I".projects//compass_proj/compass/actions.rb;Ti-I"¨          log_action("LITERAL", basename(var), var)
          var = true
        else
          if var["LITERAL"] then
            log_action("LITERAL", basename(var), var);Fi[	@]ifI"√          if var.raw_project_type then
            add_configuration(var.raw_project_type.to_sym)
          else
            if var["LITERAL"] then
              add_configuration(var["LITERAL"]);Fi[	@i2I"¶              flash["LITERAL"] = I18n.t("STRING")
            end
          else
            if var["LITERAL"] then
              if @user.update_attributes(var) then;Fi[	@i:I"¥                flash["LITERAL"] = I18n.t("STRING")
              end
            else
              if var["LITERAL"] then
                @user.unconfirmed_email = var["LITERAL"];Fi[	@iCI"∫                  flash["LITERAL"] = I18n.t("STRING")
                end
              else
                if var["LITERAL"] then
                  if @user.update_attributes(var) then;Fi[	@ iWI"©      var = var.delete("LITERAL")
      var.unprocessed_image.store!(var)
    else
      if var["LITERAL"] then
        var.remote_unprocessed_image_url = var["LITERAL"];Fi[	@Li¡I"        if var["LITERAL"] and var["LITERAL"].! then
          ["LITERAL", var["LITERAL"], (Integer(var["LITERAL"]) * ("LITERAL" ** Integer(var["LITERAL"]["LITERAL"])))]
        else
          if var["LITERAL"] then
            ["LITERAL", var["LITERAL"], Float(var["LITERAL"])];Fi[	I"8projects//nokogiri_proj/nokogiri/decorators/slop.rb;TiI"µ            if var["LITERAL"] then
              var = css("STRING")
            else
              if var["LITERAL"] then
                var = Array(var["LITERAL"]).join("STRING");Fi[	@niI"y        if var.nil? then
          "STRING"
        else
          if var["LITERAL"] then
            var["LITERAL"];Fi[	@niI"ù          if var["LITERAL"] then
            var["LITERAL"]
          else
            if var["LITERAL"] then
              var = Array(var["LITERAL"]).first;Fi[	@	I"raise("STRING");Fi[[	@]i/I"¬                  if var.is_a?(Symbol) then
                    Compass::AppIntegration.lookup(var).configuration
                  else
                    raise("STRING")
                  end;Fi[	@ei6I"ê          if respond_to?("LITERAL") and var = authenticatable_salt then
            var
          else
            raise("STRING")
          end;Fi[	I"5projects//diaspora_proj/helpers/stream_helper.rb;TiI"∂          if controller.instance_of?(StreamsController) then
            stream_path("LITERAL" => (time_for_scroll(@stream)))
          else
            raise("STRING")
          end;Fi[	@Ãi$I"Z    when Photo then
      (self.photos << var)
    else
      raise("STRING")
    end;Fi[	@·iI"{          when ::Haml::Error then
            raise("STRING")
          else
            raise("STRING")
          end;Fi[	@∑irI"{        ohai("STRING")
        var.children.each { |var| puts("STRING") }
      else
        raise("STRING")
      end;Fi[	@zi,I"d    when "LITERAL" then
      SubversionDownloadStrategy
    else
      raise("STRING")
    end;Fi[	@π	i"I"}    when "LITERAL", "LITERAL", "LITERAL", "LITERAL" then
      (var << "LITERAL")
    else
      raise("STRING")
    end;Fi[	I"1projects//homebrew_proj/test/test_updater.rb;TiI"\      (@called << var)
      @outputs[var].shift
    else
      raise("STRING")
    end;Fi[	@ıi!I"[      if var = var.first then
        var
      else
        raise("STRING")
      end;Fi[	I"module SassExtensions;FI"module Sprites;Fi[[	I"Xprojects//compass_proj/compass/sass_extensions/sprites/engines/chunky_png_engine.rb;TiI"Ñend
module Compass
  module SassExtensions
    module Sprites
      class ChunkyPngEngine < Compass::SassExtensions::Sprites::Engine;Fi[	I"Fprojects//compass_proj/compass/sass_extensions/sprites/engines.rb;TiI"Qmodule Compass
  module SassExtensions
    module Sprites
      class Engine;Fi[	@ûiI"Pmodule Compass
  module SassExtensions
    module Sprites
      class Image;Fi[	I"Lprojects//compass_proj/compass/sass_extensions/sprites/image_methods.rb;TiI"Xmodule Compass
  module SassExtensions
    module Sprites
      module ImageMethods;Fi[	I"Hprojects//compass_proj/compass/sass_extensions/sprites/image_row.rb;TiI"jrequire("forwardable")
module Compass
  module SassExtensions
    module Sprites
      class ImageRow;Fi[	I"Mprojects//compass_proj/compass/sass_extensions/sprites/layout_methods.rb;TiI"Ymodule Compass
  module SassExtensions
    module Sprites
      module LayoutMethods;Fi[	I"Iprojects//compass_proj/compass/sass_extensions/sprites/row_fitter.rb;TiI"krequire("forwardable")
module Compass
  module SassExtensions
    module Sprites
      class RowFitter;Fi[	@riI"lmodule Compass
  module SassExtensions
    module Sprites
      class SpriteMap < Sass::Script::Literal;Fi[	@ÑiI"Ymodule Compass
  module SassExtensions
    module Sprites
      module SpriteMethods;Fi[	I">projects//compass_proj/compass/sass_extensions/sprites.rb;TiI"irequire("compass/sprite_importer")
module Compass
  module SassExtensions
    module Sprites
    end;Fi[	@	I"nil;Fi[[	@biªI"è        if var.value.is_a?(Array) and var.value.all? { |var| color_stop?(var) } then
          var.value
        else
          nil
        end;Fi[	I"Iprojects//diaspora_proj/controllers/aspect_memberships_controller.rb;TiI"~    var = if @contact then
      @contact.aspect_memberships.where("LITERAL" => (@aspect_id)).first
    else
      nil
    end;Fi[	@ni#I"`          var.email_the_user(var, var)
          var
        else
          nil
        end;Fi[	@∏i|I"â      if var["LITERAL"].present? and var = User.find_by_username(var["LITERAL"]) then
        var.person
      else
        nil
      end;Fi[	@<igI"ä      (var = if var.instance_variable_defined?("STRING") then
        var.instance_variable_get("STRING")
      else
        nil
      end;Fi[	@JidI"Y    when /^#{HOMEBREW_LIBRARY}STRING/ then
      "STRING"
    else
      nil
    end;Fi[	@iÁI"é      if var and (var < (self.site.posts.length - "LITERAL")) then
        self.site.posts[(var + "LITERAL")]
      else
        nil
      end;Fi[	@ÖiéI"x      when String then
        var.scan("LITERAL").first("LITERAL").join("STRING")
      else
        nil
      end;Fi[	@Ci.I"H        var.to_s = var
        var
      else
        nil
      end;Fi[	I"Eprojects//state_machine_proj/state_machine/yard/handlers/base.rb;TiI"v          when "LITERAL" then
            var.jump("LITERAL").source
          else
            nil
          end;Fi[	I"module Compass;F@ki[[	@oi
I"Z  require("chunky_png")
end
module Compass
  module SassExtensions
    module Sprites;Fi[	@ri I">module Compass
  module SassExtensions
    module Sprites;Fi [	@ûi I">module Compass
  module SassExtensions
    module Sprites;Fi [	@wi I">module Compass
  module SassExtensions
    module Sprites;Fi [	@ziI"Urequire("forwardable")
module Compass
  module SassExtensions
    module Sprites;Fi[	@}i I">module Compass
  module SassExtensions
    module Sprites;Fi [	@ÄiI"Urequire("forwardable")
module Compass
  module SassExtensions
    module Sprites;Fi[	@ri I">module Compass
  module SassExtensions
    module Sprites;Fi [	@Ñi I">module Compass
  module SassExtensions
    module Sprites;Fi [	@áiI"wrequire("digest/md5")
require("compass/sprite_importer")
module Compass
  module SassExtensions
    module Sprites;Fi[	I"##;FI"3# Creates a new instance of the storage object;Fi[[	@giI"„      # same type. This will be appended to the YAML storage file used for
      # cycling backups.
      ##
      # Creates a new instance of the storage object
      # * Called with super(model, storage_id) from each subclass;Fi[	@UiI"û      ##
      # Rackspace Cloud Files container name and path
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	@ñiI"ô      ##
      # Path to where the backups will be stored
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	@≈iI"Ç      ##
      # use passive mode?
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	@»iI"ñ      ##
      # Path where the backup will be stored.
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	@XiI"à      ##
      # Ninefold directory path
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	@[iI"ä      ##
      # Flag to use local backups
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	@`iI"í      ##
      # Region of the specified S3 bucket
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	@piI"â      ##
      # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	@siI"â      ##
      # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(var, var, var);Fi[	I"+unless method_defined?("LITERAL") then;F@Ei[[	I"-projects//homebrew_proj/extend/symbol.rb;TiI"zclass Symbol
  unless method_defined?("LITERAL") then
    def function
      proc { |var, var| var.send(self, *var) };Fi[	I"Jprojects//nokogiri_proj/nokogiri/html/element_description_defaults.rb;TiI"~      private("LITERAL")
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@ÿiI"t      end
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@ÿi%I"t      end
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@ÿi,I"t      end
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@ÿi3I"t      end
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@ÿi:I"t      end
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@ÿiAI"t      end
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@ÿiHI"t      end
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@ÿiOI"t      end
      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc;Fi[	@é@çi[[	@¸i{I"—    var = "LITERAL".match(var)
    return var.captures.first.gsub("STRING", "STRING") unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸i}I"∏    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸iI"∏    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸i|I"∏    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸i~I"∏    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸iÄI"∏    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸iÇI"∏    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸iÑI"∏    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸iÜI"∏    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸iàI"Ω    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s);Fi[	I"	puts;F@ i[[	@i®I"y      def function
        unless options.any? then
          puts
          puts("STRING")
          puts("STRING");Fi[	@i´I"w          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING");Fi[	@iÆI"w          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING");Fi[	@iæI"t        end
        if options["LITERAL"] then
          puts
          puts("STRING")
          puts("STRING");Fi[	@∑iNI"      puts(var.homepage)
      if var.keg_only? then
        puts
        puts("STRING")
        puts(var.keg_only_reason);Fi[	@πiI"Æ        if var.to_s.empty?.! and ($stdout.tty? and var = blacklisted?(var)) then
          unless var.empty? then
            puts
            puts("STRING")
            puts;Fi[	@Ji'I"c      puts("STRING")
      puts("STRING")
      puts
      puts("STRING")
      puts("STRING");Fi[	@‰iaI"X  def function
    if ARGV.verbose?.! then
      puts
      puts("STRING")
    else;Fi[	@xiI"~        var.process
      rescue Jekyll::FatalException => var
        puts
        puts("STRING")
        puts("STRING");Fi[	I"%# @return [Array<Twitter::User>];F@Ei[[	I"4projects//twitter_proj/twitter/action/follow.rb;TiI"…      # A collection of users who followed a user
      #
      # @return [Array<Twitter::User>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	@iI"…      # A collection containing the followed user
      #
      # @return [Array<Twitter::User>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	I"?projects//twitter_proj/twitter/action/list_member_added.rb;TiI"–      # A collection of users who added a user to a list
      #
      # @return [Array<Twitter::User>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	@iI"Œ      # A collection of users who were added to a list
      #
      # @return [Array<Twitter::User>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	I"5projects//twitter_proj/twitter/action/mention.rb;TiI"       # A collection of users who mentioned a user
      #
      # @return [Array<Twitter::User>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	@#i%I"       # A collection containing the mentioned user
      #
      # @return [Array<Twitter::User>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	I"5projects//twitter_proj/twitter/action/retweet.rb;TiI"       # A collection containing the retweeted user
      #
      # @return [Array<Twitter::User>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	I"3projects//twitter_proj/twitter/action/tweet.rb;TiI"æ      attr_reader("LITERAL", "LITERAL")
      
      # @return [Array<Twitter::User>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	@ˆiI"ò    end
    
    # @return [Array<Twitter::User>]
    def function
      @var ||= Array(@attrs["LITERAL"]).map { |var| Twitter::User.fetch_or_new(var) };Fi[	I"# == Example;F@i[[	@¯i>I"u    # transitions will continue to run their own callbacks.
    # 
    # == Example
    # 
    #   class Vehicle;Fi[	@¯ipI"~    # See StateMachine::InstanceMethods#fire_events for more information.
    # 
    # == Example
    # 
    #   class Vehicle;Fi[	@˝i4I"v        # also extend the integration.
        # 
        # == Example
        # 
        #   module StateMachine;Fi[	@ itI"ì        # be performed so long as the given requirements match the transition.
        # 
        # == Example
        # 
        #   class Vehicle;Fi[	@>iîI"c    # are the same)
    # 
    # == Example
    # 
    #   machine = StateMachine.new(Vehicle);Fi[	@>i¢I"Ü    # names as keys and values of the attributes as values.
    # 
    # == Example
    # 
    #   machine = StateMachine.new(Vehicle);Fi[	@>i·I"_    # until this transition is reset.
    # 
    # == Example
    # 
    #   class Vehicle;Fi[	@>i˙I"o    # will revert the state back to the +from+ value.
    # 
    # == Example
    # 
    #   class Vehicle;Fi[	@>ióI"w    # event, from state, and to state).
    # 
    # == Example
    # 
    #   machine = StateMachine.new(Vehicle);Fi[	@EI"&var.flatten.threaded_map do |var|;Fi[[	@viWI"ø      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin;Fi[	@viyI"ø      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin;Fi[	@—i\I"      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          object_from_response(Twitter::SavedSearch, "LITERAL", "STRING", var.options);Fi[	@˘ièI"=      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin;Fi[	@˘i™I"=      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin;Fi[	@˘i˜I"R      #   @option options [String] :lang Language code for the rendered embed. This will affect the text and localization of the rendered HTML.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          object_from_response(Twitter::OEmbed, "LITERAL", "STRING", var.options);Fi[	@˘iI"ı      # @return [Array<Twitter::Tweet>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          object_from_response(Twitter::Tweet, var, (var + "STRING"), var.options);Fi[	@ﬁiI"˜      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          object_from_response(Twitter::User, var, var, merge_user(var.options, var));Fi[	@ﬁiHI"Ï      # @return [Array]
      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          object_from_response(var, var, var, var.options.merge("LITERAL" => (var)));Fi[	@ª@“i[[	@UiI"≠      # Rackspace Cloud Files container name and path
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	@ñiI"®      # Path to where the backups will be stored
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	@≈iI"ë      # use passive mode?
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	@»iI"•      # Path where the backup will be stored.
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	@XiI"ó      # Ninefold directory path
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	@[iI"ô      # Flag to use local backups
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	@`iI"°      # Region of the specified S3 bucket
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	@piI"ò      # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	@siI"ò      # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var);Fi[	I"# Produces:;F@i[[	@’iÄI"L    #       = i[0]
    #
    # Produces:
    #
    #     <li>hello</li>;Fi[	@’iãI"C    #       %p= val
    #
    # Produces:
    #
    #     <li>;Fi[	@’iõI"g    #       %a{ href="#" }= item
    #
    # Produces:
    #
    #     <li class='nav' role='nav'>;Fi[	@’i›I"M    #     %strong baz
    #
    # Produces:
    #
    #     <h1>foo</h1>;Fi[	@’i¸I"M    #     %strong baz
    #
    # Produces:
    #
    #     <h1>foo</h1>;Fi[	@’iI"o    #       %a{:href => "food"} chicken
    #
    # Produces:
    #
    #     (<a href='food'>chicken</a>);Fi[	@’iI"]    #       %strong angry
    #
    # Produces:
    #
    #     *<strong>angry</strong>*;Fi[	@’i2I"t    #       %span.small Not really
    #
    # Produces:
    #
    #     *<span class='small'>Not really</span>;Fi[	@’iDI"T    #       %a{:href=>"thing"} here
    #
    # Produces:
    #
    #     click;Fi[	@@0i[[	@¯i=I"¢    # *after* callback with only affect that event's transition.  Other
    # transitions will continue to run their own callbacks.
    # 
    # == Example
    # ;Fi[	@¯ioI"t    # 
    # See StateMachine::InstanceMethods#fire_events for more information.
    # 
    # == Example
    # ;Fi[	@˝i3I"†        # integration is activated, each version that is marked as active will
        # also extend the integration.
        # 
        # == Example
        # ;Fi[	@ isI"Ã        # Creates a callback that will be invoked *after* a transition failures to
        # be performed so long as the given requirements match the transition.
        # 
        # == Example
        # ;Fi[	@>iìI"~    # Does this transition represent a loopback (i.e. the from and to state
    # are the same)
    # 
    # == Example
    # ;Fi[	@>i°I"©    # A hash of all the core attributes defined for this transition with their
    # names as keys and values of the attributes as values.
    # 
    # == Example
    # ;Fi[	@>i‡I"ë    # transition.  Once the state is persisted, it cannot be persisted again
    # until this transition is reset.
    # 
    # == Example
    # ;Fi[	@>i˘I"£    # Rolls back changes made to the object's state via this transition.  This
    # will revert the state back to the +from+ value.
    # 
    # == Example
    # ;Fi[	@>iñI"í    # Gets a hash of the context defining this unique transition (including
    # event, from state, and to state).
    # 
    # == Example
    # ;Fi[	I"assert(var.x86_64?.!);F@£i[[	@ßiI"Ä    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßiI"Ä    assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßi8I"Ä    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßiFI"Ä    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßiTI"Ä    assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßipI"Ç    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßièI"Ç    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßiüI"Ç    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßiØI"Ç    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@	@	i[[	@iI"  # a genericized version of lighten/darken so that negative values can be used.
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var.with("LITERAL" => (Compass::Util.restrict((var.lightness + var.value), "LITERAL")));Fi[	@iI"Ú  # This will never return a pure light or dark color unless the amount is 100%.
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var.with("LITERAL" => (scale_color_value(var.lightness, var.value)));Fi[	@iI"  # a genericized version of saturation/desaturate so that negative values can be used.
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var.with("LITERAL" => (Compass::Util.restrict((var.saturation + var.value), "LITERAL")));Fi[	@i!I"˛  # This will never return a pure saturated or desaturated color unless the amount is 100%.
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var.with("LITERAL" => (scale_color_value(var.saturation, var.value)));Fi[	@i'I"†  
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var = Sass::Script::Color.new(["LITERAL", "LITERAL", "LITERAL"]);Fi[	@i.I"†  
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var = Sass::Script::Color.new(["LITERAL", "LITERAL", "LITERAL"]);Fi[	@i%I"ó  
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    raise(Sass::SyntaxError, "STRING") unless var.unitless?;Fi[	@i;I"ó  
  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    raise(Sass::SyntaxError, "STRING") unless var.unitless?;Fi[	@\iòI"≠  #     background-position: 3px -36px;
  def function(var, var, var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var = convert_sprite_name(var);Fi[	@§
I"/#     state_machine :initial => :parked do;Fi[[	@ÒiI"}    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :park do;Fi[	@Òi>I"}    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :park do;Fi[	@¯i@I"~    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do;Fi[	@¯irI"~    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do;Fi[	@iCI"î    # generated on the class.  For example,
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do;Fi[	@4iI"~    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling;Fi[	@4i)I"~    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling;Fi[	@4iDI"~    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling;Fi[	@>i¸I"~    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do;Fi[	@æ@@i[[	@i6I"^      
      def function(var)
        case var
        when "LITERAL" then
          nil;Fi[	@_i&I"g  def function(var, var)
    return var if var
    case var
    when "LITERAL" then
      "STRING";Fi[	@“i7I"ô      var = "LITERAL"
      @to_merge.each do |var, var, var|
        case var
        when "LITERAL" then
          (var << inspect_obj(var)["LITERAL"]);Fi[	@wi~I"z  def function(var)
    fetch(var, []).map do |var|
      case var
      when "LITERAL" then
        Pathname.new($1);Fi[	@wiåI"Å  def function(var)
    fetch(var, []).map do |var|
      case var
      when "LITERAL" then
        File.basename(var, "STRING");Fi[	@ziˆI"f  
  def self.detect_from_url(var)
    case var
    when "LITERAL" then
      CVSDownloadStrategy;Fi[	@ziI"l  
  def self.detect_from_symbol(var)
    case var
    when "LITERAL" then
      BazaarDownloadStrategy;Fi[	@Âi£I"    var = nil
    File.open(self) { |var| var = var.read("LITERAL") }
    case var
    when "LITERAL" then
      "LITERAL";Fi[	@˜iI"c      
      def function(var)
        case var
        when "LITERAL" then
          "STRING";Fi[	@fI" # @return [Twitter::Cursor];Fi[[	@}iI"˚      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={});Fi[	@}i,I"˝      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload follower_ids(options={});Fi[	@}i]I"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @param options [Hash] A customizable set of options.;Fi[	@}ilI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @param options [Hash] A customizable set of options.;Fi[	@}i˛I"˚      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={});Fi[	@}iI"˚      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={});Fi[	@£isI"¸      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload memberships(options={});Fi[	@£i.I"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload list_members(list, options={});Fi[	@£iÕI"˛      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload subscriptions(options={});Fi[	@I"L# There is also a list of default options supported by every validator:;Fi[[	@diI"˜      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "must be blank").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.;Fi[	@gi1I"Ò      #   a database column, since the attribute is typecast from "1" to +true+
      #   before validation.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.;Fi[	@Êi3I"Ô      # * <tt>:message</tt> - A custom error message (default is: "doesn't match
      #   confirmation").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.;Fi[	@oi+I"      # * <tt>:allow_blank</tt> - If set to true, skips this validation if the
      #   attribute is blank(default is +false+).
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.;Fi[	@rilI"(      #   anchors that match the beginning or end of lines as opposed to the
      #   beginning or end of the string. These anchors are <tt>^</tt> and <tt>$</tt>.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.;Fi[	@yi*I"      # * <tt>:allow_blank</tt> - If set to +true+, skips this validation if the
      #   attribute is blank (default is +false+).
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.;Fi[	@|igI"      #   as in above example). Defaults to <tt>->(value) { value.split(//) }</tt>
      #   which counts individual characters.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.;Fi[	@ijI"      # * <tt>:odd</tt> - Specifies the value must be an odd number.
      # * <tt>:even</tt> - Specifies the value must be an even number.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+ .;Fi[	@}i I"¯      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "can't be blank").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.;Fi[	@EI"var = default_desc;Fi[[	@ÿiI"å      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.startTag) : (nil);Fi[	@ÿiI"ä      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.endTag) : (nil);Fi[	@ÿi&I"é      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.saveEndTag) : (nil);Fi[	@ÿi-I"à      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.depr) : (nil);Fi[	@ÿi4I"à      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.desc) : (nil);Fi[	@ÿi;I"ë      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.defaultsubelt) : (nil);Fi[	@ÿiBI"å      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.attrs_opt) : ([]);Fi[	@ÿiII"ç      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.attrs_depr) : ([]);Fi[	@ÿiPI"å      
      unless method_defined?("LITERAL") then
        def function
          var = default_desc
          var ? (var.attrs_req) : ([]);Fi[	@fI"&# @return [Array<Twitter::Tweet>];Fi[[	@£i1I"
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @overload list_timeline(list, options={});Fi[	@„iI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.;Fi[	@„i,I"
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @overload user_timeline(user, options={});Fi[	@„iDI"8      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@„i\I"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.;Fi[	@„iqI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.;Fi[	@„iÉI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.;Fi[	@„iòI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.;Fi[	@˘iI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param id [Integer] The numerical ID of the desired Tweet.;Fi[	@Œ	I"module HTML;Fi[[	I"5projects//nokogiri_proj/nokogiri/html/builder.rb;Ti I"Mmodule Nokogiri
  module HTML
    class Builder < Nokogiri::XML::Builder;Fi [	@‡i I"Omodule Nokogiri
  module HTML
    class Document < Nokogiri::XML::Document;Fi [	I"?projects//nokogiri_proj/nokogiri/html/document_fragment.rb;Ti I"_module Nokogiri
  module HTML
    class DocumentFragment < Nokogiri::XML::DocumentFragment;Fi [	@Ûi I"?module Nokogiri
  module HTML
    class ElementDescription;Fi [	@ÿi I"?module Nokogiri
  module HTML
    class ElementDescription;Fi [	I";projects//nokogiri_proj/nokogiri/html/entity_lookup.rb;Ti I"lmodule Nokogiri
  module HTML
    class EntityDescription < Struct.new("LITERAL", "LITERAL", "LITERAL");Fi [	I"8projects//nokogiri_proj/nokogiri/html/sax/parser.rb;Ti I"1module Nokogiri
  module HTML
    module SAX;Fi [	I"@projects//nokogiri_proj/nokogiri/html/sax/parser_context.rb;Ti I"1module Nokogiri
  module HTML
    module SAX;Fi [	@∫i I"1module Nokogiri
  module HTML
    module SAX;Fi [	@“I"super(var, var);Fi[[	@UiI"é      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= false;Fi[	@ñi I"ë      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "STRING";Fi[	@≈iI"í      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL";Fi[	@»iI"À      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= File.join(File.expand_path((ENV["STRING"] or "STRING")), "STRING");Fi[	@XiI"ë      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "STRING";Fi[	@[iI"í      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL";Fi[	@`iI"ë      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "STRING";Fi[	@piI"í      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL";Fi[	@siI"í      ##
      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL";Fi[	@£I"module Configuration;Fi[[	@Ni I">module Compass
  module Configuration
    module Adapters;Fi [	@i I">module Compass
  module Configuration
    module Comments;Fi [	I"9projects//compass_proj/compass/configuration/data.rb;Ti I"9module Compass
  module Configuration
    class Data;Fi [	@zi I">module Compass
  module Configuration
    module Defaults;Fi [	I">projects//compass_proj/compass/configuration/file_data.rb;Ti I"Dmodule Compass
  module Configuration
    class FileData < Data;Fi [	@]i I";module Compass
  module Configuration
    @var = false;Fi [	@i I"Amodule Compass
  module Configuration
    module Inheritance;Fi [	@§i I"Cmodule Compass
  module Configuration
    module Serialization;Fi [	I"4projects//compass_proj/compass/configuration.rb;Ti I"Zmodule Compass
  module Configuration
    def self.attributes_for_directory(var, var);Fi [	I"module Jobs;FI"module Mail;Fi[[	I"?projects//diaspora_proj/models/jobs/mail/also_commented.rb;Ti I"=module Jobs
  module Mail
    class AlsoCommented < Base;Fi [	I"@projects//diaspora_proj/models/jobs/mail/comment_on_post.rb;Ti I"=module Jobs
  module Mail
    class CommentOnPost < Base;Fi [	I">projects//diaspora_proj/models/jobs/mail/confirm_email.rb;Ti I"<module Jobs
  module Mail
    class ConfirmEmail < Base;Fi [	I"Eprojects//diaspora_proj/models/jobs/mail/invite_user_by_email.rb;Ti I"Amodule Jobs
  module Mail
    class InviteUserByEmail < Base;Fi [	I"6projects//diaspora_proj/models/jobs/mail/liked.rb;Ti I"5module Jobs
  module Mail
    class Liked < Base;Fi [	I":projects//diaspora_proj/models/jobs/mail/mentioned.rb;Ti I"9module Jobs
  module Mail
    class Mentioned < Base;Fi [	I"@projects//diaspora_proj/models/jobs/mail/private_message.rb;Ti I">module Jobs
  module Mail
    class PrivateMessage < Base;Fi [	I"9projects//diaspora_proj/models/jobs/mail/reshared.rb;Ti I"8module Jobs
  module Mail
    class Reshared < Base;Fi [	I"@projects//diaspora_proj/models/jobs/mail/started_sharing.rb;Ti I">module Jobs
  module Mail
    class StartedSharing < Base;Fi [	@’@i[[	@i+I"y      #     define_attribute_methods :name
      #
      #     private
      #
      #     def clear_attribute(attr);Fi[	@iOI"z      #     define_attribute_methods :name
      #
      #     private
      #
      #     def attribute_short?(attr);Fi[	@isI"Ä      #     define_attribute_methods :name
      #
      #     private
      #
      #     def reset_attribute_to_default!(attr);Fi[	@iãI"|      #     alias_attribute :nickname, :name
      #
      #     private
      #
      #     def attribute_short?(attr);Fi[	@i≥I"Ñ      #     define_attribute_methods :name, :age, :address
      #
      #     private
      #
      #     def clear_attribute(attr);Fi[	@iœI"y      #     define_attribute_method :name
      #
      #     private
      #
      #     def attribute_short?(attr);Fi[	@iÚI"y      #     define_attribute_method :name
      #
      #     private
      #
      #     def attribute_short?(attr);Fi[	@jiI"Ç        #     before_validation :remove_whitespaces
        #
        #     private
        #
        #     def remove_whitespaces;Fi[	@ji?I"v        #     after_validation :set_status
        #
        #     private
        #
        #     def set_status;Fi[	@¿@ i[[	@ÒicI"©    # 
    #   class Vehicle < ActiveRecord::Base
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling;Fi[	@¯iAI"î    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling;Fi[	@¯isI"î    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling;Fi[	@ iI"π        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling;Fi[	@ iXI"π        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling;Fi[	@ i|I"π        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling;Fi[	@iDI"ê    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition all => :idling;Fi[	@içI"°    #     property :id, Serial
    #     
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling;Fi[	@>i˝I"î    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling;Fi[	@⁄@Ei[[	@›i$I"ö    # Transform the contents based on the content type.
    #
    # Returns nothing.
    def function
      self.content = converter.convert(self.content);Fi[	@ıi#I"    # Public: Read, process, and write this Site to output.
    #
    # Returns nothing.
    def function
      self.reset;Fi[	@ıiCI"ö    # Load necessary libraries, plugins, converters, and generators.
    #
    # Returns nothing.
    def function
      require("classifier") if self.lsi;Fi[	@ıiVI"è    # Read Site data from disk and load it into internal data structures.
    #
    # Returns nothing.
    def function
      self.read_layouts;Fi[	@ıi_I"|    # with each one.
    #
    # Returns nothing.
    def function
      var = File.join(self.source, self.config["STRING"]);Fi[	@ıi°I"á    # Run each of the Generators.
    #
    # Returns nothing.
    def function
      self.generators.each { |var| var.generate(self) };Fi[	@ıi®I"h    # Render the site to the destination.
    #
    # Returns nothing.
    def function
      begin;Fi[	@ıi∑I"É    # Remove orphaned files and empty directories in destination.
    #
    # Returns nothing.
    def function
      var = Set.new;Fi[	@ıi⁄I"é    # Write static files, pages, and posts.
    #
    # Returns nothing.
    def function
      self.posts.each { |var| var.write(self.dest) };Fi[	@⁄@±i[[	@‰iI"p    # site - The Site.
    #
    # Returns nothing.
    def function(var)
      var.pages.dup.each do |var|;Fi[	@•i'I"ä    # name - The String filename of the layout file.
    #
    # Returns nothing.
    def function(var)
      self.ext = File.extname(var);Fi[	@Ìi]I"à    # name - The String filename of the page file.
    #
    # Returns nothing.
    def function(var)
      self.ext = File.extname(var);Fi[	@ÌiI"Ñ    # dest - The String path to the destination dir.
    #
    # Returns nothing.
    def function(var)
      var = destination(var);Fi[	@iZI"v    # name - The String filename of the post file.
    #
    # Returns nothing.
    def function(var)
      begin;Fi[	@i–I"Ñ    # dest - The String path to the destination dir.
    #
    # Returns nothing.
    def function(var)
      var = destination(var);Fi[	@ıiqI"¶    # dir - The String relative path of the directory to read. Default: ''.
    #
    # Returns nothing.
    def function(var)
      var = File.join(self.source, var);Fi[	@ıiâI"£    # dir - The String relative path of the directory to read.
    #
    # Returns nothing.
    def function(var)
      var = File.join(self.source, var, "STRING");Fi[	@iI"ù# path - The String relative path from here to the directory.
#
# Returns nothing.
def function(var)
  var = File.join(File.dirname("STRING"), var, "STRING");Fi[	@“I"#var = Node.new("LITERAL", var);Fi[[	@=ijI"j      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@=ipI"z      
      # reduce 13 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@=iuI"j      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@=iêI"z      
      # reduce 22 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@=i(I"à      # reduce 49 omitted
      # reduce 50 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@=i-I"j      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@=i2I"j      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@=i7I"j      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@=i@I"à      # reduce 57 omitted
      # reduce 58 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var;Fi[	@Ü	@Ei[[	@ÂiµI"Ü      case extname
      when "STRING", "STRING", "STRING", "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL";Fi[	@Âi∑I"l        "LITERAL"
      when "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL";Fi[	@πi~I"x        case var.to_s
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@πiÇI"w          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@πiÑI"v          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@πiÜI"v          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@πiåI"w          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@πiêI"w          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@º	iTI"c      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "STRING" then
      "LITERAL";Fi[	I"%require("twitter/api/arguments");FI"!require("twitter/api/utils");Fi[[	@ii I"drequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/direct_message");Fi [	@vi I"mrequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/error/already_favorited");Fi [	@}i I"\require("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/cursor");Fi [	@£i I"irequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/core_ext/enumerable");Fi [	@—i I"brequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/saved_search");Fi [	@‡i I"`require("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/suggestion");Fi [	@˘i I"mrequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/error/already_retweeted");Fi [	@iI"~require("twitter/action_factory")
require("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/cursor");Fi[	@i I"irequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/core_ext/enumerable");Fi [	I"# Example:;F@i[[	@Äi]I"≈      #   <tt>:strict</tt> option can also be set to any other exception.
      #
      # Example:
      #
      #   validates :password, presence: true, confirmation: true, if: :password_required?;Fi[	I"6projects//compass_proj/compass/browser_support.rb;TiI"…    # No browsers implement this yet.
    # Adds support for one or more aspects for the given simple function
    # Example:
    #
    #   Compass::BrowserSupport.add_support("image", "moz", "webkit");Fi[	@7i&I"®    
    # Removes support for one or more aspects for the given simple function
    # Example:
    #
    #   Compass::BrowserSupport.remove_support("image", "o", "ms");Fi[	@æi{I"ß      # the given scope. Useful for giving redirect backs after sign up:
      #
      # Example:
      #
      #   redirect_to stored_location_for(:user) || root_path;Fi[	@√iîI"Â        # Overwrite to add customized conditions, create a join, or maybe use a
        # namedscope to filter records while authenticating.
        # Example:
        #
        #   def self.find_for_authentication(conditions={});Fi[	@ÄiuI"ƒ      # Confirm_within is a model configuration, must always be an integer value.
      #
      # Example:
      #
      #   # allow_unconfirmed_access_for = 1.day and confirmation_sent_at = today;Fi[	@∆iBI"ô      # attributes you would not like to be updated without a password.
      #
      # Example:
      #
      #   def update_without_password(params={});Fi[	@+i&I"∆      # reset_password_within is a model configuration, must always be an integer value.
      #
      # Example:
      #
      #   # reset_password_within = 1.day and reset_password_sent_at = today;Fi[	@FiPI"z  # Returns the number of jobs destroyed.
  #
  # Example:
  #
  #   # Removes all jobs of class `UpdateNetworkGraph`;Fi[	@@ni[[	@’iI"e    #     = list_of([['hello'], ['yall']]) do |i|
    #       = i[0]
    #
    # Produces:
    #;Fi[	@’iäI"R    #       %h3= key.humanize
    #       %p= val
    #
    # Produces:
    #;Fi[	@’iöI"ú    #     = list_of(["Home", "About", "Contact", "FAQ"], {class: "nav", role: "nav"}) do |item|
    #       %a{ href="#" }= item
    #
    # Produces:
    #;Fi[	@’i‹I"K    #     - tab_down
    #     %strong baz
    #
    # Produces:
    #;Fi[	@’i˚I"I    #       %p bar
    #     %strong baz
    #
    # Produces:
    #;Fi[	@’iI"i    #     = surround '(', ')' do
    #       %a{:href => "food"} chicken
    #
    # Produces:
    #;Fi[	@’iI"V    #     = surround '*' do
    #       %strong angry
    #
    # Produces:
    #;Fi[	@’i1I"^    #     = precede '*' do
    #       %span.small Not really
    #
    # Produces:
    #;Fi[	@’iCI"_    #     = succeed '.' do
    #       %a{:href=>"thing"} here
    #
    # Produces:
    #;Fi[	@Û@Ri[[	@=ikI"j      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@=iqI"}      # reduce 13 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@=ivI"j      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@=iëI"}      # reduce 22 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@=i)I"}      # reduce 50 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@=i.I"j      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@=i3I"j      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@=i8I"j      
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@=iAI"}      # reduce 58 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", var)
        var
      end;Fi[	@@2i[[	@Äi\I"¿      #   will raise ActiveModel::StrictValidationFailed instead of adding the error.
      #   <tt>:strict</tt> option can also be set to any other exception.
      #
      # Example:
      #;Fi[	@æizI"ƒ      # Returns and delete (if it's navigational format) the url stored in the session for
      # the given scope. Useful for giving redirect backs after sign up:
      #
      # Example:
      #;Fi[	@ÄitI"¡      # confirmation sent date does not exceed the confirm in time configured.
      # Confirm_within is a model configuration, must always be an integer value.
      #
      # Example:
      #;Fi[	@∆iAI"≤      # method, you should probably override this method to protect other
      # attributes you would not like to be updated without a password.
      #
      # Example:
      #;Fi[	@+i%I"“      # Returns true if the resource is not responding to reset_password_sent_at at all.
      # reset_password_within is a model configuration, must always be an integer value.
      #
      # Example:
      #;Fi[	@)i
I"ì      # Ensures that the given instance or class has an attachment with the
      # given name.
      #
      # Example:
      #   describe User do;Fi[	@0i
I"≠      # Ensures that the given instance or class validates the content type of
      # the given attachment as specified.
      #
      # Example:
      #   describe User do;Fi[	@FiOI"G  #
  # Returns the number of jobs destroyed.
  #
  # Example:
  #;Fi[	I"require("rubygems");FI"require("sequel");Fi[[	@≤i I"?require("rubygems")
require("sequel")
require("fileutils");Fi [	I"3projects//jekyll_proj/jekyll/migrators/enki.rb;TiI"Mrequire("fileutils")
require("rubygems")
require("sequel")
module Jekyll;Fi[	@πi I"?require("rubygems")
require("sequel")
require("fileutils");Fi [	@¿i I"?require("rubygems")
require("sequel")
require("fastercsv");Fi [	@Qi I"?require("rubygems")
require("sequel")
require("fileutils");Fi [	@Õi I"?require("rubygems")
require("sequel")
require("fileutils");Fi [	I"3projects//jekyll_proj/jekyll/migrators/typo.rb;TiI"Orequire("fileutils")
require("rubygems")
require("sequel")
require("yaml");Fi[	@‘i I"?require("rubygems")
require("sequel")
require("fileutils");Fi [	@I"# @param hash [Hash];Fi[[	@£i=I"∆      
      # Take a list and merge it into the hash with the correct key
      #
      # @param hash [Hash]
      # @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.;Fi[	@£iQI"Œ      
      # Take an owner and merge it into the hash with the correct key
      #
      # @param hash [Hash]
      # @param user[Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.;Fi[	@ﬁi|I"Õ      
      # Take a user and merge it into the hash with the correct key
      #
      # @param hash [Hash]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.;Fi[	@ﬁiÖI"Õ      
      # Take a user and merge it into the hash with the correct key
      #
      # @param hash [Hash]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.;Fi[	@ﬁiòI"      
      # Take a multiple users and merge them into the hash with the correct keys
      #
      # @param hash [Hash]
      # @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.;Fi[	@ﬁi°I"      
      # Take a multiple users and merge them into the hash with the correct keys
      #
      # @param hash [Hash]
      # @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.;Fi[	I"1projects//twitter_proj/twitter/exceptable.rb;TiI"~    
    # Return a hash that includes everything but the given keys.
    #
    # @param hash [Hash]
    # @param key [Symbol];Fi[	@ßiI"r    
    # Replaces the hash without the given keys.
    #
    # @param hash [Hash]
    # @param key [Symbol];Fi[	I"@var ||= false;FI"(instance_eval(&var) if block_given?;Fi[[	I"5projects//backup_proj/backup/compressor/bzip2.rb;TiI"â      def function(var)
        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING";Fi[	I"4projects//backup_proj/backup/compressor/gzip.rb;TiI"â      def function(var)
        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING";Fi[	I"4projects//backup_proj/backup/compressor/lzma.rb;TiI"à        load_defaults!
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING";Fi[	I"6projects//backup_proj/backup/compressor/pbzip2.rb;TiI"à        @var ||= false
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING";Fi[	@Ii5I"ò        @var ||= Array.new
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var ||= utility("LITERAL");Fi[	@≈iI"§        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false
        instance_eval(&var) if block_given?
        @var = path.sub("LITERAL", "STRING");Fi[	@[i!I"§        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false
        instance_eval(&var) if block_given?
        @var = path.sub("LITERAL", "STRING");Fi[	@li'I"          super
          @var ||= "LITERAL"
          @var ||= false
          instance_eval(&var) if block_given?
        end;Fi[	@˛I"-# +:if+, +:unless+, +:on+ and +:strict+.;Fi[[	@diI"$      # * <tt>:message</tt> - A custom error message (default is: "must be blank").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[	@gi2I"Ì      #   before validation.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[	@Êi4I"Í      #   confirmation").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[	@oi,I"      #   attribute is blank(default is +false+).
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[	@rimI"'      #   beginning or end of the string. These anchors are <tt>^</tt> and <tt>$</tt>.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[	@yi+I"      #   attribute is blank (default is +false+).
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[	@|ihI"˛      #   which counts individual characters.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[	@}i!I"%      # * <tt>:message</tt> - A custom error message (default is: "can't be blank").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[	I"require("testing_env");FI"require("test/testball");Fi[[	@+i I"Arequire("testing_env")
require("test/testball")
module MacOS;Fi [	I"0projects//homebrew_proj/test/test_bucket.rb;Ti I"Prequire("testing_env")
require("test/testball")
class MockFormula < Formula;Fi [	I"3projects//homebrew_proj/test/test_checksums.rb;Ti I"_require("testing_env")
require("test/testball")
class ChecksumTests < Test::Unit::TestCase;Fi [	@¡	i I"_require("testing_env")
require("test/testball")
class CompilerTests < Test::Unit::TestCase;Fi [	@ƒi I"Srequire("testing_env")
require("test/testball")
class AbstractDownloadStrategy;Fi [	I"-projects//homebrew_proj/test/test_keg.rb;Ti I"Crequire("testing_env")
require("test/testball")
require("keg");Fi [	I"1projects//homebrew_proj/test/test_patches.rb;Ti I"Crequire("testing_env")
require("test/testball")
require("set");Fi [	@Íi I"Vrequire("testing_env")
require("test/testball")
class DefaultPatchBall < TestBall;Fi [	I"{# @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;FI"|# @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[[	@iiI"      # @return [Array<Twitter::DirectMessage>] Direct messages sent to the authenticating user.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@ii*I"      # @return [Array<Twitter::DirectMessage>] Direct messages sent by the authenticating user.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@„iI"‚      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@„iHI"      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@„i_I"‚      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@„itI"‚      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@„iÜI"‚      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@„iúI"u      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@I"# :call-seq:;Fi[[	@?iI"F    ##
    # :method: ==
    #
    # :call-seq:
    #   ==(other);Fi[	@?i"I"H    ##
    # :method: ===
    #
    # :call-seq:
    #   ===(other);Fi[	@?i0I"G    ##
    # :method: <=>
    #
    # :call-seq:
    #   ==(other);Fi[	@?i?I"G    ##
    # :method: =~
    #
    # :call-seq:
    #   =~(regexp);Fi[	@?iOI"G    ##
    # :method: !~
    #
    # :call-seq:
    #   !~(regexp);Fi[	@?i^I"J    ##
    # :method: eql?
    #
    # :call-seq:
    #   eql?(other);Fi[	@?imI"E    ##
    # :method: to_s
    #
    # :call-seq:
    #   to_s();Fi[	@?izI"I    ##
    # :method: to_str
    #
    # :call-seq:
    #   to_str();Fi[	I"%assert(var.mach_o_executable?.!);FI"#assert(var.text_executable?.!);Fi[[	@ßiI"õ    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert((var.arch == "LITERAL"));Fi[	@ßi I"ò    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!);Fi[	@ßi.I"ò    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!);Fi[	@ßiJI"ò    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?);Fi[	@ßiXI"ò    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?);Fi[	@ßifI"ò    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?);Fi[	@ßitI"ö    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!);Fi[	@ßi≥I"ô    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert_equal([], var.archs);Fi[	@I"#   class BlogPost;Fi[[	@?iI"∫    # Equivalent to <tt>String#==</tt>. Returns +true+ if the class name and
    # +other+ are equal, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming;Fi[	@?i'I"n    #
    # Equivalent to <tt>#==</tt>.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming;Fi[	@?i5I"u    #
    # Equivalent to <tt>String#<=></tt>.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming;Fi[	@?iFI"†    # regexp. Returns the position where the match starts or +nil+ if there is
    # no match.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming;Fi[	@?iUI"÷    # Equivalent to <tt>String#!~</tt>. Match the class name against the given
    # regexp. Returns +true+ if there is no match, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming;Fi[	@?idI"”    # Equivalent to <tt>String#eql?</tt>. Returns +true+ if the class name and
    # +other+ have the same length and content, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming;Fi[	@?irI"j    #
    # Returns the class name.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming;Fi[	@?iòI"     # Transform the model name into a more humane format, using I18n. By default,
    # it will underscore then humanize the class name.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming;Fi[	@±I"var = remote_path_for(var);Fi[[	@Ui=I"Á      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        transferred_files_for(var) do |var, var|;Fi[	@ñi_I"«      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        var = [];Fi[	@≈iGI"“      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        connection do |var|;Fi[	@»i(I"«      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        var = [];Fi[	@XiEI"ﬂ      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        if var = directory_for(var) then;Fi[	@`i@I"‘      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        connection.sync_clock;Fi[	@pi=I"«      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        var = [];Fi[	@si;I"“      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        connection do |var|;Fi[	@±@\i[[	@õiI"Î  FONT_TYPES = { "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => "STRING" }
  
  def function(var)
    var = []
    var = var.length;Fi[	@biûI"Ø    
    # Output the original webkit gradient syntax
    def function(var)
      var = []
      (var << grad_point((position_or_angle or Sass::Script::String.new("STRING"))));Fi[	I"(projects//homebrew_proj/cmd/list.rb;TiKI";  end
  
  def function(var)
    var = []
    var = [];Fi[	@ÂiI"b  OLD_BOTTLE_EXTNAME_RX = "LITERAL"
  
  def function(var)
    var = []
    var.each do |var|;Fi[	@Âi;I"n  
  # Creates symlinks to sources in this folder.
  def function(var)
    var = []
    var.each do |var|;Fi[	@LinI"≥    # Scans s and returns a list of json tokens,
    # excluding white space (as defined in RFC 4627).
    def function(var)
      var = []
      while (var.length > "LITERAL") do;Fi[	@∑iBI"É      
      # Find a node by type using +types+
      def function(var)
        var = []
        (var << self) if (to_type == var);Fi[	@Ci"I"º    # Returns an Array of string pids of all the other workers on this
    # machine. Useful when pruning dead workers on startup.
    def function(var)
      var = []
      var = `#{var}`;Fi[	@	@ i[[	@êiBI"|    if email_like_identifer then
      EmailInviter.new(self.identifier, sender).send!
    else
      puts("STRING")
    end;Fi[	@Ri*I"è              if ARGV.dry_run? then
                puts("STRING")
              else
                puts("STRING")
                rm_rf(var);Fi[	@RiGI"}          if ARGV.dry_run? then
            puts("STRING")
          else
            puts("STRING")
            rm(var);Fi[	@∑iI"U          puts("STRING")
        end
      else
        puts("STRING")
      end;Fi[	@∑iaI"t          puts("STRING") unless var.used_options.empty?
        end
      else
        puts("STRING")
      end;Fi[	@ViiI"R    when "LITERAL" then
      puts(var)
    else
      puts("STRING")
    end;Fi[	@wi(I"]    if var.empty? then
      puts("STRING")
    else
      puts("STRING")
      var.dump;Fi[	@Si)I"b      when "LITERAL" then
        var = var.first
      else
        puts("STRING")
      end;Fi[	@§I"assert(var.dylib?.!);Fi[[	@ßi:I"â    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?);Fi[	@ßiHI"ã    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ßiVI"ã    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ßidI"â    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ßirI"ã    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ßiëI"ã    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ßi°I"ã    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ßi±I"ã    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	I"B# and a warning will be logged, containing the error message.;F@±i[[	@Ui<I"      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var);Fi[	@ñi^I"      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var);Fi[	@≈iFI"      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var);Fi[	@»i'I"      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var);Fi[	@XiDI"      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var);Fi[	@`i?I"      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var);Fi[	@pi<I"      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var);Fi[	@si:I"      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var);Fi[	@±@Fi[[	@Ci}I"Ö        ##
        # Returns the url for the specified room (in JSON format)
        def function(var)
          "STRING"
        end;Fi[	I"/projects//compass_proj/compass/compiler.rb;Ti5I">    end
    
    def function(var)
      "STRING"
    end;Fi[	I".projects//diaspora_proj/models/profile.rb;Ti∆I"4  end
  
  def function(var)
    "STRING"
  end;Fi[	I"(projects//haml_proj/haml/filters.rb;Ti∏I"W      
      # @see Base#render
      def function(var)
        "STRING"
      end;Fi[	@€i-I"M  (var.bottle.revision + "LITERAL")
end
def function(var)
  "STRING"
end;Fi[	@∆iZI">    end
    
    def function(var)
      "STRING"
    end;Fi[	@ÚiI">    end
    
    def function(var)
      "STRING"
    end;Fi[	@‹iyI"H      end
      
      def function(var)
        "STRING"
      end;Fi[	I"6# Any error raised will be rescued during Cycling;F@ài[[	@Ui;I"Á      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var);Fi[	@ñi]I"Á      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var);Fi[	@≈iEI"Á      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var);Fi[	@»i&I"Á      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var);Fi[	@XiCI"Á      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var);Fi[	@`i>I"Á      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var);Fi[	@pi;I"Á      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var);Fi[	@si9I"Á      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(var);Fi[	I"I# Removes the transferred archive file(s) from the storage location.;F@∞i[[	@Ui:I"÷      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.;Fi[	@ñi\I"÷      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.;Fi[	@≈iDI"÷      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.;Fi[	@»i%I"÷      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.;Fi[	@XiBI"÷      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.;Fi[	@`i=I"÷      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.;Fi[	@pi:I"÷      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.;Fi[	@si8I"÷      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.;Fi[	@YI"module Syncer;Fi[[	I"0projects//backup_proj/backup/syncer/base.rb;Ti I"1module Backup
  module Syncer
    class Base;Fi [	@uiI"wBackup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup
  module Syncer
    module Cloud;Fi[	@ci I"3module Backup
  module Syncer
    module Cloud;Fi [	@fi I"3module Backup
  module Syncer
    module Cloud;Fi [	@ii I"3module Backup
  module Syncer
    module RSync;Fi [	@ıi I"3module Backup
  module Syncer
    module RSync;Fi [	@ùi I"3module Backup
  module Syncer
    module RSync;Fi [	@li I"3module Backup
  module Syncer
    module RSync;Fi [	I"%#     extend ActiveModel::Naming;F@i[[	@?iI"X    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #;Fi[	@?i)I"X    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #;Fi[	@?i7I"X    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #;Fi[	@?iHI"X    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #;Fi[	@?iWI"X    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #;Fi[	@?ifI"X    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #;Fi[	@?itI"X    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #;Fi[	@?iöI"X    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #;Fi[	@EI"!var = Pathname.new("STRING");Fi[[	@ßi
I"~end
class MachOPathnameTests < Test::Unit::TestCase
  def function
    var = Pathname.new("STRING")
    assert(var.universal?);Fi[	@ßiI"Z  end
  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!);Fi[	@ßi&I"Z  end
  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!);Fi[	@ßi4I"X  end
  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?);Fi[	@ßiBI"X  end
  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?);Fi[	@ßiPI"Z  end
  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!);Fi[	@ßi^I"Z  end
  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!);Fi[	@ßilI"Z  end
  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!);Fi[	@ @	i[[	@Ri)I"ü            if Keg.new(var).linked?.! then
              if ARGV.dry_run? then
                puts("STRING")
              else
                puts("STRING");Fi[	@RiFI"ÿ        if ((var and (var.version > var)) or ((ARGV.switch?("STRING") and (var and var.installed?.!)) or var)) then
          if ARGV.dry_run? then
            puts("STRING")
          else
            puts("STRING");Fi[	I"'projects//homebrew_proj/cmd/diy.rb;TiI"™    var = ((HOMEBREW_CELLAR / var) / var)
    if File.file?("STRING") then
      puts("STRING")
    else
      File.file?("STRING") ? (puts("STRING")) : (raise("STRING"));Fi[	@CiI"a      puts("STRING")
      puts("STRING")
      puts("STRING")
    else
      ohai("STRING");Fi[	I",projects//homebrew_proj/cmd/outdated.rb;TiI"µ      if $stdout.tty? and ARGV.flag?("STRING").! then
        var = var.rack.subdirs.map { |var| Keg.new(var).version }.sort
        puts("STRING")
      else
        puts(var.name);Fi[	@wi'I"    Homebrew.link_tap_formula(var.new_tapped_formula)
    if var.empty? then
      puts("STRING")
    else
      puts("STRING");Fi[	@zi@I"l      ohai("STRING")
      if @tarball_path.exist? then
        puts("STRING")
      else
        begin;Fi[	@‰ibI"g    if ARGV.verbose?.! then
      puts
      puts("STRING")
    else
      require("cmd/--config");Fi[	@ƒI"J# See <tt>ActiveModel::Validation#validates</tt> for more information;Fi[[	@diI"Ë      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var);Fi[	@gi3I"Ë      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var);Fi[	@Êi5I"Ë      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var);Fi[	@oi-I"Ë      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var);Fi[	@rinI"Ë      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var);Fi[	@yi,I"Ë      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var);Fi[	@|iiI"Ë      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var);Fi[	@}i"I"Ë      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var);Fi[	I"@var = var["LITERAL"];F@7i[[	@∆i7I"ú      @var = var["LITERAL"]
      @var = var["LITERAL"].new(self, @options)
      @var = var["LITERAL"]
      @var = var["LITERAL"]
      initialize_storage;Fi[	@ iI"¢    def function
      if var = (@string and @string.match(FORMAT)) then
        @var = var["LITERAL"]
        @var = var["LITERAL"]
        @var = var["LITERAL"];Fi[	@ iI"Ø      if var = (@string and @string.match(FORMAT)) then
        @var = var["LITERAL"]
        @var = var["LITERAL"]
        @var = var["LITERAL"]
        @var = var["LITERAL"];Fi[	@ iI"Å        @var = var["LITERAL"]
        @var = var["LITERAL"]
        @var = var["LITERAL"]
        @var = var["LITERAL"]
      end;Fi[	@˝i$I"‰      @var = (var["LITERAL"] or Geometry).parse(var)
      @var = (var["LITERAL"] or Geometry).from_file(@file)
      @var = var["LITERAL"]
      @var = var["LITERAL"]
      @var = var["LITERAL"].nil? ? (true) : (var["LITERAL"]);Fi[	@ÁiI"f      @var = var
      @var = var
      @var = var["LITERAL"]
      @var = var["LITERAL"]
    end;Fi[	@Íi%I"ﬂ      @var = var.states.fetch(var["LITERAL"]).name
      @var = (var["LITERAL"] and var.states.fetch(var["LITERAL"]).name)
      @var = var["LITERAL"]
      @var = var["LITERAL"]
      initial_paths.each { |var| walk(var) };Fi[	@ÌiBI"Ó      @var = (var["LITERAL"] or @name ? (@name.to_s.tr("STRING", "STRING")) : ("STRING"))
      @var = var.include?("LITERAL") ? (var["LITERAL"]) : (var and var.to_s)
      @var = var["LITERAL"]
      @var = var["LITERAL"]
      @var = {};Fi[	@∫@√i[[	@Ui9I"ú      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling;Fi[	@ñi[I"ú      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling;Fi[	@≈iCI"ú      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling;Fi[	@»i$I"ú      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling;Fi[	@XiAI"ú      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling;Fi[	@`i<I"ú      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling;Fi[	@pi9I"ú      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling;Fi[	@si7I"ú      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling;Fi[	@EI"$var = remote_path_for(@package);Fi[[	@Ui/I"ƒ      ##
      # Transfers the archived file to the specified Cloud Files container
      def function
        var = remote_path_for(@package)
        files_to_transfer_for(@package) do |var, var|;Fi[	@ñiQI"Ω      ##
      # Transfers the archived file to the specified Dropbox folder
      def function
        var = remote_path_for(@package)
        files_to_transfer_for(@package) do |var, var|;Fi[	@≈i8I"¢      ##
      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package)
        connection do |var|;Fi[	@»iI"ú      ##
      # Transfers the archived file to the specified path
      def function
        var = remote_path_for(@package)
        FileUtils.mkdir_p(var);Fi[	@Xi6I"©      ##
      # Transfers the archived file to the specified directory
      def function
        var = remote_path_for(@package)
        var = directory_for(var, true);Fi[	@`i1I"ß      ##
      # Transfers the archived file to the specified Amazon S3 bucket
      def function
        var = remote_path_for(@package)
        connection.sync_clock;Fi[	@pi.I"¢      ##
      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package)
        connection do |var|;Fi[	@si,I"¢      ##
      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package)
        connection do |var|;Fi[	@±@ni[[	@≠irI"|    end
    
    def function(var)
      var = "STRING"
      var = Compass::Frameworks::ALL.inject("LITERAL") do |var, var|;Fi[	@bi\I"x    end
    
    def function(var)
      var = "STRING"
      ((var << position.to_s(var)) << "STRING") if position;Fi[	@biàI"Ö    end
    
    def function(var)
      var = "STRING"
      ((var << position_or_angle.to_s(var)) << "STRING") if position_or_angle;Fi[	@bi‘I"D    end
    
    def function(var)
      var = "STRING"
    end;Fi[	I"Uprojects//compass_proj/compass/sass_extensions/monkey_patches/browser_support.rb;Ti(I"D    end
    
    def function(var)
      var = "STRING"
    end;Fi[	@’i¸I"∑    # @param text [String] The string to sanitize
    # @return [String] The sanitized string
    def function(var)
      var = "STRING"
      var = if (RUBY_VERSION >= "STRING") then;Fi[	@’iI"∑    # @param text [String] The string to sanitize
    # @return [String] The sanitized string
    def function(var)
      var = "STRING"
      var = if (RUBY_VERSION >= "STRING") then;Fi[	@—itI"o    #
    # Returns the formatted String.
    def function(var)
      var = "STRING"
      case var.length;Fi[	@$@±i[[	@diI"!      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var)
        validates_with(AbsenceValidator, _merge_attributes(var));Fi[	@gi4I"$      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var)
        validates_with(AcceptanceValidator, _merge_attributes(var));Fi[	@Êi6I"&      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var)
        validates_with(ConfirmationValidator, _merge_attributes(var));Fi[	@oi.I"#      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var)
        validates_with(ExclusionValidator, _merge_attributes(var));Fi[	@rioI"       # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var)
        validates_with(FormatValidator, _merge_attributes(var));Fi[	@yi-I"#      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var)
        validates_with(InclusionValidator, _merge_attributes(var));Fi[	@|ijI"       # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var)
        validates_with(LengthValidator, _merge_attributes(var));Fi[	@}i#I""      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(var)
        validates_with(PresenceValidator, _merge_attributes(var));Fi[	@*@Íi[[	@?iI"~    # +other+ are equal, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end;Fi[	@?i(I"t    # Equivalent to <tt>#==</tt>.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end;Fi[	@?i6I"{    # Equivalent to <tt>String#<=></tt>.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end;Fi[	@?iGI"b    # no match.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end;Fi[	@?iVI"ì    # regexp. Returns +true+ if there is no match, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end;Fi[	@?ieI"ê    # +other+ have the same length and content, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end;Fi[	@?isI"p    # Returns the class name.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end;Fi[	@?iôI"Ñ    # it will underscore then humanize the class name.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end;Fi[	@Ò@	i[[	@Ùi#I"œ    if var.present? and @conversation.save then
      Postzord::Dispatcher.build(current_user, @conversation).post
      flash["LITERAL"] = I18n.t("STRING")
    else
      flash["LITERAL"] = I18n.t("STRING");Fi[	@©i+I"ú    end
    if current_user.update_profile(@profile_attrs) then
      flash["LITERAL"] = I18n.t("STRING")
    else
      flash["LITERAL"] = I18n.t("STRING");Fi[	@i#I"æ        Resque.enqueue(Jobs::FetchProfilePhoto, current_user.id, var.id, var["STRING"])
      end
      flash["LITERAL"] = I18n.t("STRING")
    else
      flash["LITERAL"] = I18n.t("STRING");Fi[	@i"I"–      if var["LITERAL"] then
        @user.update_user_preferences(var["LITERAL"])
        flash["LITERAL"] = I18n.t("STRING")
      else
        if var["LITERAL"] and (var["LITERAL"] and var["LITERAL"]) then;Fi[	@i'I"∑          if @user.update_with_password(var) then
            var = true
            flash["LITERAL"] = I18n.t("STRING")
          else
            flash["LITERAL"] = I18n.t("STRING");Fi[	@i.I"⁄          if (var["LITERAL"] or var["LITERAL"]) then
            if @user.update_attributes(var) then
              flash["LITERAL"] = I18n.t("STRING")
            else
              flash["LITERAL"] = I18n.t("STRING");Fi[	@i6I"⁄              if @user.update_attributes(var) then
                I18n.locale = @user.language
                flash["LITERAL"] = I18n.t("STRING")
              else
                flash["LITERAL"] = I18n.t("STRING");Fi[	@iFI"‰                if var["LITERAL"] then
                  if @user.update_attributes(var) then
                    flash["LITERAL"] = I18n.t("STRING")
                  else
                    flash["LITERAL"] = I18n.t("STRING");Fi[	I"$(var.nil? or (var == "STRING"));FI"end.to_yaml;Fi[[	@≤i!I"        var = ((var.strftime("STRING") + var) + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|;Fi[	@πiI"Q        var = ("STRING" % [var.year, var.month, var.day, var])
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|;Fi[	@¿i I"/        var = ([var.year, var.month, var.day, var].join("STRING") + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|;Fi[	@QiI"W        var = (([var.year, var.month, var.day, var].join("STRING") + "STRING") + self.suffix(var))
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|;Fi[	I"8projects//jekyll_proj/jekyll/migrators/posterous.rb;Ti-I"          var = ("STRING" % [var.year, var.month, var.day, var])
          var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |var, var|
            (var.nil? or (var == "STRING"))
          end.to_yaml
          File.open("STRING", "STRING") do |var|;Fi[	@ÕiI"9        var = ([var.strftime("STRING"), var].join("STRING") + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"].split("STRING")) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|;Fi[	@‘i[I"∂      end
      var = { "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => ((var["LITERAL"].to_s == "STRING")), "STRING" => (var.to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)) }.delete_if do |var, var|
        (var.nil? or (var == "STRING"))
      end.to_yaml
      File.open("STRING", "STRING") do |var|;Fi[	@πI"+File.open("STRING", "STRING") do |var|;Fi[[	@≤i"I"Ó        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var);Fi[	@πiI"*        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var);Fi[	@¿i!I"˘        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var);Fi[	@QiI"        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var);Fi[	@ƒi.I"¯          var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |var, var|
            (var.nil? or (var == "STRING"))
          end.to_yaml
          File.open("STRING", "STRING") do |var|
            var.puts(var);Fi[	@ÕiI"	        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"].split("STRING")) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var);Fi[	@‘i\I"¬      var = { "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => ((var["LITERAL"].to_s == "STRING")), "STRING" => (var.to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)) }.delete_if do |var, var|
        (var.nil? or (var == "STRING"))
      end.to_yaml
      File.open("STRING", "STRING") do |var|
        var.puts(var);Fi[	I"# @return [Boolean];F@±i[[	@Qi`I"ß    
    # @param other [Twitter::Base]
    # @return [Boolean]
    def function(var)
      (self.class == var.class) and (var.attrs.empty?.! and (attrs == var.attrs));Fi[	@‹iI"ñ    
    # @param other [Twitter::Geo]
    # @return [Boolean]
    def function(var)
      (super or (attr_equal("LITERAL", var) or attrs_equal(var)));Fi[	@i!I"õ    
    # @param other [Twitter::Identity]
    # @return [Boolean]
    def function(var)
      (super or (attr_equal("LITERAL", var) or attrs_equal(var)));Fi[	@ÛiI"å    
    # @param other [Twitter::Size]
    # @return [Boolean]
    def function(var)
      (super or (size_equal(var) or attrs_equal(var)));Fi[	@ÛiI"ø    
    # @param other [Twitter::Size]
    # @return [Boolean]
    def function(var)
      (self.class == var.class) and (var.h.nil?.! and ((h == var.h) and (var.w.nil?.! and (w == var.w))));Fi[	@ˆiI"ù    
    # @param other [Twitter::Suggestion]
    # @return [Boolean]
    def function(var)
      (super or (attr_equal("LITERAL", var) or attrs_equal(var)));Fi[	@˘iI"ò    
    # @param other [Twitter::Trend]
    # @return [Boolean]
    def function(var)
      (super or (attr_equal("LITERAL", var) or attrs_equal(var)));Fi[	@‹@Ei[[	@‰iLI"y    # Overridden in haml/template.rb if this is the case.
    #
    # @return [Boolean]
    def function
      false;Fi[	I"3projects//twitter_proj/twitter/configurable.rb;Ti!I"X    end
    
    # @return [Boolean]
    def function
      credentials.values.all?;Fi[	@Úi>I"l    alias "LITERAL" "LITERAL"
    
    # @return [Boolean]
    def function
      previous_cursor.zero?;Fi[	@ÚiEI"h    alias "LITERAL" "LITERAL"
    
    # @return [Boolean]
    def function
      next_cursor.zero?;Fi[	@îiI"Ä    def_delegators("LITERAL", "LITERAL", "LITERAL")
    
    # @return [Boolean]
    def function
      @attrs["LITERAL"].nil?.!;Fi[	@îieI"p    alias "LITERAL" "LITERAL"
    
    # @return [Boolean]
    def function
      in_reply_to_status_id.!.!;Fi[	@îijI"U    end
    
    # @return [Boolean]
    def function
      retweeted_status.!.!;Fi[	@@±i[[	@i∏I"á      #       ...
      #     end
      #   end
      def function(var)
        var.flatten.each { |var| define_attribute_method(var) };Fi[	@+i,I"ü    #       # obj is the MyModel instance that the callback is being called on
    #     end
    #   end
    def function(var)
      var = var.extract_options!;Fi[	@7iI"y    #       @errors = ActiveModel::Errors.new(self)
    #     end
    #   end
    def function(var)
      @var = var;Fi[	@i}I"      #     validates_numericality_of :width, less_than: ->(person) { person.height }
      #     validates_numericality_of :width, greater_than: :minimum_weight
      #   end
      def function(var)
        validates_with(NumericalityValidator, _merge_attributes(var));Fi[	@Êi4I"¢      #     include OmniAuth::Strategy
      #     configure foo: 'bar'
      #   end
      def function(var)
        yield(default_options) and return unless var;Fi[	@)iI"ü      #   describe User do
      #     it { should have_attached_file(:avatar) }
      #   end
      def function(var)
        HaveAttachedFileMatcher.new(var);Fi[	@0iI"Ÿ      #                   allowing('image/png', 'image/gif').
      #                   rejecting('text/plain', 'text/xml') }
      #   end
      def function(var)
        ValidateAttachmentContentTypeMatcher.new(var);Fi[	I"var.puts(var);FI"var.puts("STRING");Fi[[	@≤i$I"è        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@πiI"è        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@¿i#I"è        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@QiI"è        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@ƒi0I"ô          end.to_yaml
          File.open("STRING", "STRING") do |var|
            var.puts(var)
            var.puts("STRING")
            var.puts(var);Fi[	@ÕiI"è        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@‘i^I"Ö      end.to_yaml
      File.open("STRING", "STRING") do |var|
        var.puts(var)
        var.puts("STRING")
        var.puts(var);Fi[	@	@i[[	I".projects//diaspora_proj/models/contact.rb;TiaI"R      (errors["LITERAL"] << "STRING")
      false
    else
      true
    end;Fi[	I".projects//diaspora_proj/models/message.rb;TiaI"é    if self.parent and self.parent.participants.include?(self.author).! then
      (errors["LITERAL"] << "STRING")
    else
      true
    end;Fi[	@ i?I"ë    if self.status_message_guid and self.status_message.text_and_photos_blank? then
      self.status_message.destroy
    else
      true
    end;Fi[	@ iHI"|    if self.status_message_guid and var then
      (self.diaspora_handle == var.diaspora_handle)
    else
      true
    end;Fi[	@óinI"Z    when "LITERAL" then
      (MacOS.version < "LITERAL")
    else
      true
    end;Fi[	@^i4I"Z            @options["LITERAL"]
          end
        else
          true
        end;Fi[	@>iXI"N        raise(var) if var
        var.!
      else
        true
      end;Fi[	@YI"module Notifier;Fi[[	@Ωi I"3module Backup
  module Notifier
    class Base;Fi [	@CiI"`Backup::Dependency.load("STRING")
module Backup
  module Notifier
    class Campfire < Base;Fi[	@|iI"_Backup::Dependency.load("STRING")
module Backup
  module Notifier
    class Hipchat < Base;Fi[	@iI"\Backup::Dependency.load("STRING")
module Backup
  module Notifier
    class Mail < Base;Fi[	@JiI"]Backup::Dependency.load("STRING")
module Backup
  module Notifier
    class Prowl < Base;Fi[	@QiI"Srequire("net/https")
module Backup
  module Notifier
    class Pushover < Base;Fi[	@XiI"_Backup::Dependency.load("STRING")
module Backup
  module Notifier
    class Twitter < Base;Fi[	@ôI"module Action;Fi[[	I"6projects//twitter_proj/twitter/action/favorite.rb;TiI"orequire("twitter/action/tweet")
module Twitter
  module Action
    class Favorite < Twitter::Action::Tweet;Fi[	@iI"yrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action
    class Follow < Twitter::Base;Fi[	@iI"}require("twitter/base")
require("twitter/creatable")
module Twitter
  module Action
    class ListMemberAdded < Twitter::Base;Fi[	@#iI"zrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action
    class Mention < Twitter::Base;Fi[	I"3projects//twitter_proj/twitter/action/reply.rb;TiI"lrequire("twitter/action/tweet")
module Twitter
  module Action
    class Reply < Twitter::Action::Tweet;Fi[	@(iI"nrequire("twitter/action/tweet")
module Twitter
  module Action
    class Retweet < Twitter::Action::Tweet;Fi[	@+iI"xrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action
    class Tweet < Twitter::Base;Fi[	@@i[[	@≤i%I"á        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@πiI"á        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@¿i$I"á        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@QiI"á        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@ƒi1I"ë          File.open("STRING", "STRING") do |var|
            var.puts(var)
            var.puts("STRING")
            var.puts(var)
          end;Fi[	@ÕiI"á        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@‘i_I"}      File.open("STRING", "STRING") do |var|
        var.puts(var)
        var.puts("STRING")
        var.puts(var)
      end;Fi[	@u@i[[	@ßiII"î    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ßiWI"î    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ßieI"î    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ßisI"î    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ßiíI"í    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?);Fi[	@ßi¢I"í    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?);Fi[	@ßi≤I"î    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@	I"#raise(ArgumentError, "STRING");Fi[[	@si}I"Æ              @set_attributes["LITERAL"] = true
              @var = Proc.new { |var, var| nil }
            else
              raise(ArgumentError, "STRING")
            end;Fi[	@Õi>I"Ü      when Hash then
        var, var = var.keys.first, var.values.flatten
      else
        raise(ArgumentError, "STRING")
      end;Fi[	@^iõI"è          if var.respond_to?("LITERAL") then
            var.call(self)
          else
            raise(ArgumentError, "STRING")
          end;Fi[	@äi˛I"k        when Hash then
          var
        else
          raise(ArgumentError, "STRING")
        end;Fi[	@`iI"x        when Array then
          var, var = *var
        else
          raise(ArgumentError, "STRING")
        end;Fi[	@ÏiPI"â      when String then
        eval(var, var.instance_eval { binding }, &var)
      else
        raise(ArgumentError, "STRING")
      end;Fi[	I".projects//twitter_proj/twitter/factory.rb;TiI"º        var = var.gsub("LITERAL") { "STRING" }.gsub("LITERAL") { $1.upcase }
        var.const_get(var.to_sym).fetch_or_new(var)
      else
        raise(ArgumentError, "STRING")
      end;Fi[	@EI"var.print("STRING");Fi[[	@LiëI"ã      while (var < var.length) do
        case var[var]
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@LiìI"å        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@LiïI"å        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@LióI"å        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@LiôI"å        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@LiõI"å        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@LiùI"~        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        else;Fi[	@	@ni[[	@<i0I"∏          if var["LITERAL"] then
            log_action("LITERAL", basename(var), var)
          else
            var = "STRING"
            raise(Compass::FilesystemConflict.new(var));Fi[	@<i:I"á      if var then
        FileUtils.touch(var) unless var["LITERAL"]
      else
        var = "STRING"
        (var << "STRING") if var;Fi[	@i=I"Ø            if var = @data.raw(var) then
              "STRING"
            else
              var = "STRING"
              if var = @data.instance_variable_get("STRING") then;Fi[	@Íi&I"≤    if (var > "LITERAL") then
      link_to("STRING", post_comments_path(var, "LITERAL" => "STRING"), "LITERAL" => "STRING")
    else
      var = "STRING"
      (var << "STRING");Fi[	@ ihI"Ñ    if self.unprocessed_image.url.match("LITERAL") then
      var = self.unprocessed_image.url
    else
      var = "STRING"
    end;Fi[	@óiúI"`      when "STRING" then
        var = "STRING"
      else
        var = "STRING"
      end;Fi[	@IiI"Ö          var = "STRING"
          var = [dump_exception(var)]
        else
          var = "STRING"
          var = pretty(var, var);Fi[	@ﬂI"module YARD;Fi[[	@†i I":module StateMachine
  module YARD
    module Handlers;Fi [	I"Fprojects//state_machine_proj/state_machine/yard/handlers/event.rb;Ti I":module StateMachine
  module YARD
    module Handlers;Fi [	@—iI"Nrequire("tempfile")
module StateMachine
  module YARD
    module Handlers;Fi[	I"Fprojects//state_machine_proj/state_machine/yard/handlers/state.rb;Ti I":module StateMachine
  module YARD
    module Handlers;Fi [	@◊i I":module StateMachine
  module YARD
    module Handlers;Fi [	I"@projects//state_machine_proj/state_machine/yard/handlers.rb;Ti I":module StateMachine
  module YARD
    module Handlers;Fi [	I"7projects//state_machine_proj/state_machine/yard.rb;Ti I",module StateMachine
  module YARD
  end;Fi [	@EI"if ARGV.named.empty? then;Fi[[	I"+projects//homebrew_proj/cmd/--cache.rb;TiI"^  extend(self)
  
  def function
    if ARGV.named.empty? then
      puts(HOMEBREW_CACHE);Fi[	I",projects//homebrew_proj/cmd/--cellar.rb;TiI"_  extend(self)
  
  def function
    if ARGV.named.empty? then
      puts(HOMEBREW_CELLAR);Fi[	I",projects//homebrew_proj/cmd/--prefix.rb;TiI"_  extend(self)
  
  def function
    if ARGV.named.empty? then
      puts(HOMEBREW_PREFIX);Fi[	@RiI"l  extend(self)
  
  def function
    if ARGV.named.empty? then
      if HOMEBREW_CELLAR.directory? then;Fi[	I"(projects//homebrew_proj/cmd/home.rb;TiI"d  extend(self)
  
  def function
    if ARGV.named.empty? then
      exec_browser(HOMEBREW_WWW);Fi[	@∑iI"`  end
  
  def function
    if ARGV.named.empty? then
      if ARGV.include?("STRING") then;Fi[	I"'projects//homebrew_proj/cmd/log.rb;TiI"a  extend(self)
  
  def function
    if ARGV.named.empty? then
      cd(HOMEBREW_REPOSITORY);Fi[	I";# @param options [Hash] A customizable set of options.;F@Ôi[[	@iiI"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Direct messages sent to the authenticating user.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@ii)I"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Direct messages sent by the authenticating user.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@„iI"“      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@„iGI"…      # @return [Array<Twitter::Tweet>]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@„i^I"“      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@„isI"“      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@„iÖI"“      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@EI"var = TestBall.new;Fi[[	@‡iI"b  end
  
  def function
    var = TestBall.new
    var.stable.instance_eval { md5("STRING") };Fi[	@‡iI"b  end
  
  def function
    var = TestBall.new
    var.stable.instance_eval { md5("STRING") };Fi[	@‡iI"c  end
  
  def function
    var = TestBall.new
    var.stable.instance_eval { sha1("STRING") };Fi[	@‡i"I"c  end
  
  def function
    var = TestBall.new
    var.stable.instance_eval { sha1("STRING") };Fi[	@‡i(I"e  end
  
  def function
    var = TestBall.new
    var.stable.instance_eval { sha256("STRING") };Fi[	@‡i.I"e  end
  
  def function
    var = TestBall.new
    var.stable.instance_eval { sha256("STRING") };Fi[	I"9projects//homebrew_proj/test/test_formula_install.rb;Ti)I"f  end
  
  def function
    var = TestBall.new
    assert_equal(Formula.path(var.name), var.path);Fi[	@@I"SubversionDownloadStrategy;Fi[[	@ziI"à    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then;Fi[	@ziI"â    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then;Fi[	@zi	I"à    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then;Fi[	@ziI"â    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then;Fi[	@ziI"â    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then;Fi[	@ziI"π    when "LITERAL" then
      CurlApacheMirrorDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when bottle_native_regex, bottle_regex, old_bottle_regex then;Fi[	@zi*I"}    when "LITERAL" then
      CurlPostDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    else;Fi[	I"assert(var.i386?.!);F@ói[[	@ßiI"à    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ßi7I"à    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ßiEI"à    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ßioI"ä    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ßiéI"Å    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ßiûI"Å    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ßiÆI"Å    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@À@i[[	@≤i#I"°          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING");Fi[	@πiI"°          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING");Fi[	@¿i"I"°          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING");Fi[	@QiI"°          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING");Fi[	@ƒi/I"´            (var.nil? or (var == "STRING"))
          end.to_yaml
          File.open("STRING", "STRING") do |var|
            var.puts(var)
            var.puts("STRING");Fi[	@ÕiI"°          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |var|
          var.puts(var)
          var.puts("STRING");Fi[	@‘i]I"ó        (var.nil? or (var == "STRING"))
      end.to_yaml
      File.open("STRING", "STRING") do |var|
        var.puts(var)
        var.puts("STRING");Fi[	I"0#     include ActiveModel::AttributeMethods;F@i[[	@i%I"}      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name;Fi[	@iII"}      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name;Fi[	@imI"}      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name;Fi[	@iÉI"}      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name;Fi[	@i©I"à      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name, :age, :address;Fi[	@i≈I"}      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name;Fi[	@iÏI"}      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name;Fi[	@EI"with_temp_folder do;Fi[[	I":projects//homebrew_proj/test/test_pathname_install.rb;TiI"Z  end
  
  def function
    with_temp_folder do
      TARGET_FOLDER.install("STRING");Fi[	@=i"I"f  end
  
  def function
    with_temp_folder do
      TARGET_FOLDER.install(["STRING", "STRING"]);Fi[	@=i*I"_  end
  
  def function
    with_temp_folder do
      TARGET_FOLDER.install(Dir["STRING"]);Fi[	@=i2I"V  end
  
  def function
    with_temp_folder do
      FileUtils.mkdir_p("STRING");Fi[	@=i<I"f  end
  
  def function
    with_temp_folder do
      TARGET_FOLDER.install("STRING" => "STRING");Fi[	@=iEI"|  end
  
  def function
    with_temp_folder do
      TARGET_FOLDER.install("STRING" => "STRING", "STRING" => "STRING");Fi[	@=iOI"V  end
  
  def function
    with_temp_folder do
      FileUtils.mkdir_p("STRING");Fi[	I"u# +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.;F@i[[	@„iI"I      ###
      # Add +node_or_tags+ as a child of this Node.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).;Fi[	@„iI"      ###
      # Add +node_or_tags+ as a child of this Node.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns self, to support chaining of calls (e.g., root << child1 << child2);Fi[	@„iI"T      ###
      # Insert +node_or_tags+ before this Node (as a sibling).
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).;Fi[	@„iI"S      ###
      # Insert +node_or_tags+ after this Node (as a sibling).
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).;Fi[	@„i'I"¸      ####
      # Insert +node_or_tags+ before this node (as a sibling).
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns self, to support chaining of calls.;Fi[	@„i]I"E      ####
      # Replace this Node with +node_or_tags+.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).;Fi[	@„iuI"Á      ####
      # Swap this Node for +node_or_tags+
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns self, to support chaining of calls.;Fi[	@\I"# @param args [Array];Fi[[	@£iI"ç      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>];Fi[	@˘i I"é      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::Tweet>];Fi[	@ﬁiI"ç      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>];Fi[	@ﬁiI"ç      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>];Fi[	@ﬁi(I"î      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array];Fi[	@ﬁiDI"î      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array];Fi[	@ﬁi[I"†      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @param method_name [Symbol];Fi[	@A	@)i[[	@i$I"~      # at least the +attr+ argument.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #;Fi[	@iHI"{      # least the +attr+ argument.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #;Fi[	@ilI"Ö      # accept at least the +attr+ argument.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #;Fi[	@iÇI"ã      # Allows you to make aliases for attributes.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #;Fi[	@i®I"É      # methods, or they will not hook in.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #;Fi[	@iƒI"Ç      # method, or they will not hook in.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #;Fi[	@iÎI"ß      # Removes all the previously dynamically defined methods from the class.
      #
      #   class Person
      #     include ActiveModel::AttributeMethods
      #;Fi[	@	I"[];Fi[[	@≠i#I"W            File.basename(var)
          end
        else
          []
        end;Fi[	I"&projects//compass_proj/compass.rb;TiI"ï      if ENV["STRING"] and File.directory?(ENV["STRING"]) then
        [File.join(ENV["STRING"], "STRING", "STRING")]
      else
        []
      end;Fi[	I"Gprojects//diaspora_proj/helpers/interim_stream_hackiness_helper.rb;Ti#I"}    if defined? @stream and (params["LITERAL"] == "STRING") then
      @stream.post_from_group(var)
    else
      []
    end;Fi[	@LißI"}      if (var["LITERAL", "LITERAL"] == "STRING") then
        ["LITERAL", "STRING", nil]
      else
        []
      end;Fi[	@LiØI"~      if (var["LITERAL", "LITERAL"] == "STRING") then
        ["LITERAL", "STRING", true]
      else
        []
      end;Fi[	@Li∑I"      if (var["LITERAL", "LITERAL"] == "STRING") then
        ["LITERAL", "STRING", false]
      else
        []
      end;Fi[	@Li»I">          end
        end
      else
        []
      end;Fi[	I"# @return [Hash];F@„
i[[	I"4projects//diaspora_proj/models/user/querying.rb;Ti~I"å  protected
  
  # @return [Hash]
  def function(var, var)
    var = { "LITERAL" => "STRING", "LITERAL" => "LITERAL", "LITERAL" => (false) };Fi[	@£i@I"∏      # @param hash [Hash]
      # @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      # @return [Hash]
      def function(var, var)
        case var;Fi[	@£iTI"’      # @param hash [Hash]
      # @param user[Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.
      # @return [Hash]
      def function(var, var)
        merge_user!(var, var, "STRING");Fi[	@ﬁiõI"      # @param hash [Hash]
      # @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.
      # @return [Hash]
      def function(var, var)
        merge_users!(var.dup, var);Fi[	@ﬁi§I"      # @param hash [Hash]
      # @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.
      # @return [Hash]
      def function(var, var)
        var, var = [], [];Fi[	@ßiI"~    # @param hash [Hash]
    # @param key [Symbol]
    # @return [Hash]
    def function(var, var)
      except!(var.dup, var);Fi[	@ßi"I"}    # @param hash [Hash]
    # @param key [Symbol]
    # @return [Hash]
    def function(var, var)
      var.delete(var);Fi[	I"require("formula");FI"module Homebrew;Fi[[	@¢i I"6require("formula")
module Homebrew
  extend(self);Fi [	@;i I"6require("formula")
module Homebrew
  extend(self);Fi [	@si I"6require("formula")
module Homebrew
  extend(self);Fi [	I"&projects//homebrew_proj/cmd/sh.rb;TiI"Jrequire("superenv")
require("formula")
module Homebrew
  extend(self);Fi[	@÷iI"Erequire("keg")
require("formula")
module Homebrew
  extend(self);Fi[	I"(projects//homebrew_proj/cmd/uses.rb;Ti I"6require("formula")
module Homebrew
  extend(self);Fi [	@vi I"6require("formula")
module Homebrew
  extend(self);Fi [	@nI")var.extend(StringInreplaceExtension);Fi[[	@Öi	I"¢class InreplaceTest < Test::Unit::TestCase
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING");Fi[	@ÖiI"  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING");Fi[	@ÖiI"  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING");Fi[	@ÖiI"  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING");Fi[	@Öi%I"  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING");Fi[	@Öi,I"u  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.remove_make_var!("STRING");Fi[	@Öi3I"|  
  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.remove_make_var!(["STRING", "STRING"]);Fi[	@@i[[	@iI"      
      # A collection of users who followed a user
      #
      # @return [Array<Twitter::User>]
      def function;Fi[	@iI"      
      # A collection containing the followed user
      #
      # @return [Array<Twitter::User>]
      def function;Fi[	@iI"Å      
      # A collection of users who added a user to a list
      #
      # @return [Array<Twitter::User>]
      def function;Fi[	@iI"      
      # A collection of users who were added to a list
      #
      # @return [Array<Twitter::User>]
      def function;Fi[	@#iI"{      
      # A collection of users who mentioned a user
      #
      # @return [Array<Twitter::User>]
      def function;Fi[	@#i$I"{      
      # A collection containing the mentioned user
      #
      # @return [Array<Twitter::User>]
      def function;Fi[	@(iI"{      
      # A collection containing the retweeted user
      #
      # @return [Array<Twitter::User>]
      def function;Fi[	I" require("twitter/identity");F@ôi[[	I"1projects//twitter_proj/twitter/basic_user.rb;Ti I"Urequire("twitter/identity")
module Twitter
  class BasicUser < Twitter::Identity;Fi [	I"5projects//twitter_proj/twitter/direct_message.rb;TiI"vrequire("twitter/creatable")
require("twitter/identity")
module Twitter
  class DirectMessage < Twitter::Identity;Fi[	I"+projects//twitter_proj/twitter/list.rb;TiI"mrequire("twitter/creatable")
require("twitter/identity")
module Twitter
  class List < Twitter::Identity;Fi[	I"2projects//twitter_proj/twitter/media/photo.rb;Ti I">require("twitter/identity")
module Twitter
  module Media;Fi [	@Çi I"Qrequire("twitter/identity")
module Twitter
  class Place < Twitter::Identity;Fi [	I"3projects//twitter_proj/twitter/saved_search.rb;TiI"trequire("twitter/creatable")
require("twitter/identity")
module Twitter
  class SavedSearch < Twitter::Identity;Fi[	@îiI"árequire("twitter/creatable")
require("twitter/exceptable")
require("twitter/identity")
module Twitter
  class Tweet < Twitter::Identity;Fi[	I"*require("twitter/error/client_error");F@ôi[[	@¶i I"Grequire("twitter/error/client_error")
module Twitter
  class Error;Fi [	@±i I"Grequire("twitter/error/client_error")
module Twitter
  class Error;Fi [	@Ωi I"Grequire("twitter/error/client_error")
module Twitter
  class Error;Fi [	@¿i I"Grequire("twitter/error/client_error")
module Twitter
  class Error;Fi [	@…i I"Grequire("twitter/error/client_error")
module Twitter
  class Error;Fi [	@Ãi I"Grequire("twitter/error/client_error")
module Twitter
  class Error;Fi [	@œi I"Grequire("twitter/error/client_error")
module Twitter
  class Error;Fi [	@EI""STRING".undent;Fi[[	@ÌibI"6  end
  
  def function
    "STRING".undent
  end;Fi[	@±iI"V  satisfy { quiet_system(*the_test) }
  
  def function
    "STRING".undent
  end;Fi[	@±iYI"6  end
  
  def function
    "STRING".undent
  end;Fi[	@±iØI"l  satisfy("LITERAL" => (false)) { MacOS::Xcode.installed? }
  
  def function
    "STRING".undent
  end;Fi[	@±i∫I"N  satisfy { which("STRING") }
  
  def function
    "STRING".undent
  end;Fi[	@±i≈I"N  satisfy { which("STRING") }
  
  def function
    "STRING".undent
  end;Fi[	@±i–I"c  satisfy { (which("STRING") or which("STRING")) }
  
  def function
    "STRING".undent
  end;Fi[	@I"# @param attrs [Hash];Fi[[	@Qi7I"f    
    # Initializes a new object
    #
    # @param attrs [Hash]
    # @return [Twitter::Base];Fi[	@QiNI"p    
    # Update the attributes of an object
    #
    # @param attrs [Hash]
    # @return [Twitter::Base];Fi[	@ÚiI"°    
    # Initializes a new Cursor
    #
    # @param attrs [Hash]
    # @param collection_name [String, Symbol] The name of the method to return the collection;Fi[	@iI"õ    
    # Initializes a new object
    #
    # @param attrs [Hash]
    # @raise [ArgumentError] Error raised when supplied argument is missing an :id key.;Fi[	@Ti*I"w    
    # Update the attributes of a RateLimit
    #
    # @param attrs [Hash]
    # @return [Twitter::RateLimit];Fi[	@Îi	I"â  class Relationship < Twitter::Base
    # Initializes a new object
    #
    # @param attrs [Hash]
    # @return [Twitter::Relationship];Fi[	@ÎiI"}    
    # Update the attributes of a Relationship
    #
    # @param attrs [Hash]
    # @return [Twitter::Relationship];Fi[	@@Si[[	@viI":      # @overload favorites(options={})
      #   Returns the 20 most recent favorite Tweets for the authenticating user
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.;Fi[	@}iI"       # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@}i0I"ü      # @overload follower_ids(options={})
      #   Returns an array of numeric IDs for every user following the authenticated user
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@}iI"       # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@}i!I"       # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@i7I"ì      # @overload following_followers_of(options={})
      #   Returns users following followers of the specified user
      #
      #   @param options [Hash] A customizable set of options.
      #     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@iI"&      # @overload user(options={})
      #   Returns extended information for the authenticated user
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :skip_status Do not include user's Tweets when set to true, 't' or 1.;Fi[	@≤I"@var = [];Fi[[	@ÍiKI"Z  
  def function(var)
    @var = var
    @var = []
    @var = var.text.without_patch;Fi[	@óiI"O  def function(var, var)
    @var = var
    @var = var
    @var = []
  end;Fi[	@±inI"F  
  def function(var)
    @var = var
    @var = []
    @var = [];Fi[	@
iKI"u      # The XML source
      def function(var, var, var)
        @var = var
        @var = []
        @var = var;Fi[	@0iI"á      class ValidateAttachmentContentTypeMatcher
        def function(var)
          @var = var
          @var = []
          @var = [];Fi[	@LiI"ù      assert_valid_keys(var, "LITERAL")
      var = { "LITERAL" => "LITERAL" }.merge(var)
      @var = var
      @var = []
      @var = Array(var["LITERAL"]);Fi[	@>iSI"x    def function(var, var, var, var, var, var)
      @var = var
      @var = var
      @var = []
      @var = false;Fi[	I"module MultiJson;FI"module Adapters;Fi[[	I"Fprojects//homebrew_proj/vendor/multi_json/adapters/json_common.rb;Ti I"=module MultiJson
  module Adapters
    module JsonCommon;Fi [	I"Cprojects//homebrew_proj/vendor/multi_json/adapters/json_gem.rb;TiI"Ürequire("json") unless defined? ::JSON
require("multi_json/adapters/json_common")
module MultiJson
  module Adapters
    class JsonGem;Fi[	I"Dprojects//homebrew_proj/vendor/multi_json/adapters/json_pure.rb;TiI"årequire("json/pure") unless defined? ::JSON
require("multi_json/adapters/json_common")
module MultiJson
  module Adapters
    class JsonPure;Fi[	@|iI"ôframework("STRING")
require("multi_json/adapters/ok_json")
module MultiJson
  module Adapters
    class Nsjsonserialization < MultiJson::Adapters::OkJson;Fi[	I"=projects//homebrew_proj/vendor/multi_json/adapters/oj.rb;TiI"Wrequire("oj") unless defined? ::Oj
module MultiJson
  module Adapters
    class Oj;Fi[	@fiI"crequire("vendor/multi_json/vendor/okjson")
module MultiJson
  module Adapters
    class OkJson;Fi[	I"?projects//homebrew_proj/vendor/multi_json/adapters/yajl.rb;TiI"]require("yajl") unless defined? ::Yajl
module MultiJson
  module Adapters
    class Yajl;Fi[	@n@	i[[	@“iöI"ì      else
        if var.empty? then
          var = "STRING"
        else
          (var.size == "LITERAL") ? (var = "STRING") : (var = "STRING");Fi[	@’i∫I"û        if (var.count("STRING") > "LITERAL") then
          var = var.gsub("STRING", "STRING")
          var = "STRING"
        else
          var = var.strip;Fi[	@‰i$I"á    def function(var)
      if var.include?("STRING").! then
        var = "STRING"
      else
        if var.include?("STRING").! then;Fi[	@‰i'I"{      else
        if var.include?("STRING").! then
          var = "STRING"
        else
          return var.inspect;Fi[	@ViUI"£        if block_given? and yield(var) then
          puts(var)
          var = "STRING"
        else
          (var << var) unless (var.basename.to_s == "STRING");Fi[	@óiõI"m        var = "STRING"
      when "STRING" then
        var = "STRING"
      else
        var = "STRING";Fi[	@`iI"j        end
        var = Time.now.strftime("STRING")
        var = "STRING"
      else
        super;Fi[	@≤@	i[[	I"-projects//backup_proj/backup/template.rb;TiI"y    def function(var)
      if var.is_a?(Binding) then
        @var = var
      else
        if var.is_a?(Hash) then;Fi[	@si\I"à        if block_given? then
          @set_attributes["LITERAL"] = true
          @var = var
        else
          if @asset_host then;Fi[	@siwI"á        if block_given? then
          @set_attributes["LITERAL"] = true
          @var = var
        else
          if var.nil?.! then;Fi[	@liSI"j        if var then
          @var = var
          @var = var
        else
          @welcome_message;Fi[	@Ωi I"É        if var then
          @var = var.document
          @var = var
        else
          var = self.class.name.split("STRING");Fi[	@ŒiI"â        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var
      else
        if var.is_a?(String) then;Fi[	@Fi/I"¥      @var = Redis::Namespace.new(var, "LITERAL" => (var))
    when Redis::Namespace then
      @var = var
    else
      @var = Redis::Namespace.new("LITERAL", "LITERAL" => (var));Fi[	@@˛i[[	@viI""      # @overload favorites(user, options={})
      #   Returns the 20 most recent favorite Tweets for the specified user
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@}iI"0      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@}i7I"/      # @overload follower_ids(user, options={})
      #   Returns an array of numeric IDs for every user following the specified user
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@}iI"0      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@}i*I"0      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@i@I")      # @overload following_followers_of(user, options={})
      #   Returns users following followers of the authenticated user
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@iI"	      # @overload user(user, options={})
      #   Returns extended information for a given user
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@n@ni[[	I"6projects//compass_proj/compass/sprite_importer.rb;TiI"à    
    def self.find_all_sprite_map_files(var)
      var = "STRING"
      var = "STRING"
      Dir.glob(File.join(var, "STRING", var));Fi[	@œi…I"c      var = "STRING"
      if var then
        var = "STRING"
        var = "STRING"
      end;Fi[	@“iEI"|      var = var.keys if (Hash == var)
      (var.map do |var|
        var = "STRING"
        var = "STRING"
        "STRING";Fi[	@“iUI"ˆ      ((var << block_given?.!) << @options["LITERAL"])
      var = (@options["LITERAL"] and (var["LITERAL"] or (var["LITERAL"] or var["LITERAL"])).!)
      var = "STRING"
      var = "STRING"
      push_merged_text("STRING") unless var["LITERAL"];Fi[	@∑i<I"i    else
      var.parent.cd { var = github_fork }
      var = "STRING"
      var = "STRING"
    end;Fi[	@iáI"Ø    if (@old_compiler == ENV.compiler) then
      var = Compiler.new(ENV.compiler)
      var = "STRING"
      var = "STRING"
      var = (var + "STRING") unless var.cause.nil?;Fi[	@¿iI"k  module Mephisto
    def self.postgres(var)
      var = "STRING"
      var = "STRING"
      puts(var);Fi[	@I"w# @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[[	@iiI"      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Integer] :page Specifies the page of results to retrieve.;Fi[	@ii+I"      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Integer] :page Specifies the page of results to retrieve.;Fi[	@„iI"u      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@„iII"u      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@„i`I"u      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@„iuI"u      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@„iáI"u      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	I"module Resque;FI"module Failure;Fi[[	I"5projects//rescue_proj/resque/failure/airbrake.rb;TiI"fend
require("resque/failure/thoughtbot")
module Resque
  module Failure
    class Airbrake < Base;Fi[	@‘i I"2module Resque
  module Failure
    class Base;Fi [	I"4projects//rescue_proj/resque/failure/hoptoad.rb;TiI"eend
require("resque/failure/thoughtbot")
module Resque
  module Failure
    class Hoptoad < Base;Fi[	@i I"=module Resque
  module Failure
    class Multiple < Base;Fi [	I"2projects//rescue_proj/resque/failure/redis.rb;TiI"Jrequire("time")
module Resque
  module Failure
    class Redis < Base;Fi[	I"7projects//rescue_proj/resque/failure/thoughtbot.rb;Ti I"9module Resque
  module Failure
    module Thoughtbot;Fi [	I",projects//rescue_proj/resque/failure.rb;Ti I"<module Resque
  module Failure
    def self.create(var);Fi [	I"require("fileutils");FI"require("yaml");Fi[[	@≤iI"]require("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll;Fi[	@πiI"]require("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll;Fi[	@QiI"]require("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll;Fi[	I"2projects//jekyll_proj/jekyll/migrators/rss.rb;Ti	I"^require("rss/2.0")
require("open-uri")
require("fileutils")
require("yaml")
module Jekyll;Fi[	@ÕiI"]require("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll;Fi[	@‘iI"]require("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll;Fi[	@{iI"`require("rubygems")
require("hpricot")
require("fileutils")
require("yaml")
require("time");Fi[	@ƒ I"module Jekyll;Fi[[	@≤iI"Yrequire("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module Drupal;Fi[	@πiI"Yrequire("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module Joomla;Fi[	@QiI"Urequire("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module MT;Fi[	@Õ i
I"_require("open-uri")
require("fileutils")
require("yaml")
module Jekyll
  module MigrateRSS;Fi[	@ÕiI"^require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module TextPattern;Fi[	@ìiI"Vrequire("rubygems")
require("sequel")
require("yaml")
module Jekyll
  module Typo;Fi[	@‘iI"\require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module WordPress;Fi[	@§
I"7#     state_machine :state, :initial => :parked do;Fi[[	@ilI"É    # For example,
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       event :ignite do;Fi[	@iùI"É    # For example,
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       event :ignite do;Fi[	@iÿI"{    # For example,
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...;Fi[	@iÊI"¨    # In the following example, a custom +initialize+ method is defined:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...;Fi[	@i˜I"w    # like so:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...;Fi[	@iI"ï    # to initialize the state machine attributes:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...;Fi[	@i I"©    # static states regardless of their current value:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       state nil, :idling;Fi[	I".# to perform the database dumping process;F@Ei[[	@IiÜI"º      ##
      # Builds the MongoDB credentials syntax to authenticate the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|;Fi[	@IiêI"¿      ##
      # Builds the MongoDB connectivity options syntax to connect the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|;Fi[	@kiZI"∫      ##
      # Builds the credentials MySQL syntax to authenticate the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|;Fi[	@kidI"»      ##
      # Builds the MySQL connectivity options syntax to connect the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING", "STRING"].map do |var|;Fi[	@niYI"Ã      ##
      # Builds the credentials PostgreSQL syntax to authenticate the user
      # to perform the database dumping process
      def function
        username.to_s.empty? ? ("STRING") : ("STRING");Fi[	@Li]I"«      ##
      # Builds the Redis credentials syntax to authenticate the user
      # to perform the database dumping process
      def function
        password.to_s.empty? ? ("STRING") : ("STRING");Fi[	@LidI"»      ##
      # Builds the Redis connectivity options syntax to connect the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING", "STRING"].map do |var|;Fi[	@@	i[[	@izI"Ö      else
        if var.! and super(var, true) then
          false
        else
          match_attribute_method?(var.to_s).nil?.!;Fi[	@bióI"⁄    def function(var)
      if ["STRING", "STRING"].include?(var) and (position_or_angle.is_a?(Sass::Script::Number) and position_or_angle.numerator_units.include?("STRING")) then
        false
      else
        super;Fi[	@"i`I"é    if user and user.blocks.where("LITERAL" => (person_id)).exists? then
      (errors["LITERAL"] << "STRING")
      false
    else
      true;Fi[	@êijI"Y      self.identifier
    when "STRING" then
      false
    else
      # do nothing;Fi[	I"4projects//diaspora_proj/models/tag_following.rb;TiI"√  def self.user_is_following?(var, var)
    if var.nil? then
      false
    else
      joins("LITERAL").where("LITERAL" => ({ "LITERAL" => (var.downcase) })).where("LITERAL" => (var.id)).exists?;Fi[	@√iñI"{      self.remove_hidden_shareable(var, var)
      self.save
      false
    else
      self.add_hidden_shareable(var, var);Fi[	@	I"raise(Error, "STRING");Fi[[	@Li%I"g      when "STRING" then
        arrparse(var)
      else
        raise(Error, "STRING")
      end;Fi[	@Li6I"{      when "LITERAL", "LITERAL" then
        [var, var["LITERAL"]]
      else
        raise(Error, "STRING")
      end;Fi[	@LiI"É              var = (var + ucharenc(var, var, var))
            end
          else
            raise(Error, "STRING")
          end;Fi[	@LiKI"ú      when (("STRING" <= var) and (var <= "STRING")) then
        ((var.ord - "STRING".ord) + "LITERAL")
      else
        raise(Error, "STRING")
      end;Fi[	@Li_I"b      when Array then
        arrenc(var)
      else
        raise(Error, "STRING")
      end;Fi[	@LiÖI"c      when String then
        strenc(var)
      else
        raise(Error, "STRING")
      end;Fi[	I"!@var = var.delete("LITERAL");F@'!i[[	@ŒiI"ù      @var = var
      if var.is_a?(Hash) then
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL");Fi[	@ŒiI"±      if var.is_a?(Hash) then
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL");Fi[	@ŒiI"∏        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL");Fi[	@ŒiI"¶        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var;Fi[	@~i#I"¨    # Creates a new branch
    def function(var)
      @var = var.delete("LITERAL")
      @var = var.delete("LITERAL")
      @var = build_matcher(var, "LITERAL", "LITERAL");Fi[	@YiI"ù    def function(var)
      @var = var
      @var = var.delete("LITERAL")
      @var = var.delete("LITERAL")
      @var = (var.delete("LITERAL") or "STRING");Fi[	@Û@	i[[	@=iÏI"         if (var["LITERAL"] == "STRING") then
          var = ["STRING", "STRING", "STRING", "STRING"]
          var = Node.new("LITERAL", var)
        else
          if (var["LITERAL"] == "STRING") then;Fi[	@=iI"π          if (var["LITERAL"] == "STRING") then
            var = ["STRING", "STRING", "STRING", "STRING"]
            var = Node.new("LITERAL", var)
          else
            var = var;Fi[	@=i˙I"∞      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          var = Node.new("LITERAL", var)
        else
          raise(Racc::ParseError, "STRING");Fi[	@=iI"±        if (var["LITERAL"] == "STRING") then
          var.unshift("STRING")
          var = Node.new("LITERAL", var)
        else
          if (var["LITERAL"] == "STRING") then;Fi[	@=i	I"Ø            var["LITERAL"] = "STRING"
            var.unshift("STRING")
            var = Node.new("LITERAL", var)
          else
            raise(Racc::ParseError, "STRING");Fi[	@=iI"ô          (var << "STRING")
          (var << "STRING")
          var = Node.new("LITERAL", var)
        else
          raise(Racc::ParseError, "STRING");Fi[	@	I"$raise(Compass::Error, "STRING");Fi[[	I"8projects//compass_proj/compass/commands/registry.rb;TiI"ù          if (var.size > "LITERAL") then
            raise(Compass::Error, "STRING")
          else
            raise(Compass::Error, "STRING")
          end;Fi[	@üi,I"∂      if (var.index(from) == "LITERAL") then
        var[((from.length + "LITERAL").."LITERAL")].sub("LITERAL", "STRING")
      else
        raise(Compass::Error, "STRING")
      end;Fi[	@Åi{I"ã          if respond_to?(var) then
            targetize("STRING")
          else
            raise(Compass::Error, "STRING")
          end;Fi[	@_i;I"b    when "LITERAL" then
      "STRING"
    else
      raise(Compass::Error, "STRING")
    end;Fi[	@_iCI"à    if File.readable?(var) then
      File.open(var, "STRING") { |var| var.read }
    else
      raise(Compass::Error, "STRING")
    end;Fi[	@å i?I"~      if var.=~(SPRITE_IMPORTER_REGEX) then
        [$1, $3]
      else
        raise(Compass::Error, "STRING")
      end;Fi[	@±I"+var = Devise::Mapping.find_scope!(var);Fi[[	@æiI"ﬂ      #   redirect_to stored_location_for(:user) || root_path
      #
      def function(var)
        var = Devise::Mapping.find_scope!(var)
        is_navigational_format? ? (session.delete("STRING")) : (session["STRING"]);Fi[	@æiÅI"˙      # The scope root url to be used when he's signed in. By default, it first
      # tries to find a resource_root_path, otherwise it uses the root_path.
      def function(var)
        var = Devise::Mapping.find_scope!(var)
        var = "STRING";Fi[	@æi≈I"ÿ      # Sign out a user and tries to redirect to the url specified by
      # after_sign_out_path_for.
      def function(var)
        var = Devise::Mapping.find_scope!(var)
        var = after_sign_out_path_for(var);Fi[	@¿iI"æ      
      # Remembers the given resource by setting up a cookie
      def function(var)
        var = Devise::Mapping.find_scope!(var)
        var.remember_me!(var.extend_remember_period);Fi[	@¿iI"ú      
      # Forgets the given resource by deleting a cookie
      def function(var)
        var = Devise::Mapping.find_scope!(var)
        var.forget_me!;Fi[	@Ei4I"π    #   sign_out @user     # sign_out(resource)
    #
    def function(var)
      var = Devise::Mapping.find_scope!(var)
      @controller.instance_variable_set(:"@current_#{var}", nil);Fi[	@ª@≠i[[	@OiI"∏      # Creates a new instance of the Riak adapter object
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?
        @var ||= utility("STRING");Fi[	@CiI"à      # Campfire account's room id
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?
      end;Fi[	@imI"à      # Example: '/tmp/test-mails'
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?
      end;Fi[	@JiI"¨      # Create a Prowl account and request an API key on prowlapp.com.
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?
      end;Fi[	@QiI"é      # The priority of the notification
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?
      end;Fi[	@XiI"      # OAuth credentials
      def function(var, var)
        super(var)
        instance_eval(&var) if block_given?
      end;Fi[	I"@var ||= "STRING";F@≠i[[	@|i.I"É        @var ||= "STRING"
        @var ||= "STRING"
        @var ||= "STRING"
        instance_eval(&var) if block_given?
      end;Fi[	@UiI"~        super(var, var)
        @var ||= false
        @var ||= "STRING"
        instance_eval(&var) if block_given?
      end;Fi[	@XiI"â      def function(var, var, var)
        super(var, var)
        @var ||= "STRING"
        instance_eval(&var) if block_given?
      end;Fi[	@`iI"â      def function(var, var, var)
        super(var, var)
        @var ||= "STRING"
        instance_eval(&var) if block_given?
      end;Fi[	@piI"•        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        instance_eval(&var) if block_given?
        @var = path.sub("LITERAL", "STRING");Fi[	@siI"•        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        instance_eval(&var) if block_given?
        @var = path.sub("LITERAL", "STRING");Fi[	I"rescue LoadError;FI"STDERR.puts("STRING");Fi[[	@∆i!I"ú            @redcarpet_extensions[var.to_sym] = true
          end)
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING");Fi[	@∆i)I"Ñ        begin
          require("kramdown")
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING");Fi[	@∆i2I"ø          (require("rdiscount")
          @var = @config["STRING"]["STRING"].map { |var| var.to_sym })
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING");Fi[	@∆iHI"¨            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"]
          end)
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING");Fi[	@ÚiI"É        require("redcloth")
        @var = true)
      rescue LoadError
        STDERR.puts("STRING")
        STDERR.puts("STRING");Fi[	@‘itI"}        (require("unidecode")
        var = var.to_ascii)
      rescue LoadError
        STDERR.puts("STRING")
      end;Fi[	I"# @param klass [Class];F@[i[[	@ﬁi&I"v      end
      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String];Fi[	@ﬁi1I"v      end
      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String];Fi[	@ﬁiBI"v      end
      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String];Fi[	@ﬁiNI"v      end
      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String];Fi[	@ﬁiYI"è      
      # @param collection_name [Symbol]
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String];Fi[	@ﬁihI"è      
      # @param collection_name [Symbol]
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String];Fi[	I"5# dest - The String path to the destination dir.;F@i[[	@ÌiwI"è    # Obtain destination path.
    #
    # dest - The String path to the destination dir.
    #
    # Returns the destination file path String.;Fi[	@Ìi}I"ô    # Write the generated page file to the destination directory.
    #
    # dest - The String path to the destination dir.
    #
    # Returns nothing.;Fi[	@i√I"ã    # Obtain destination path.
    #
    # dest - The String path to the destination dir.
    #
    # Returns destination file path String.;Fi[	@iŒI"ô    # Write the generated post file to the destination directory.
    #
    # dest - The String path to the destination dir.
    #
    # Returns nothing.;Fi[	@∞iI"Ñ    # Obtain destination path.
    #
    # dest - The String path to the destination dir.
    #
    # Returns destination file path.;Fi[	@∞i3I"“    # Write the static file to the destination directory (if modified).
    #
    # dest - The String path to the destination dir.
    #
    # Returns false if the file was not modified since last time (no-op).;Fi[	@EI"E["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[[	@LiÉI"™    def function(var)
      case var["LITERAL"]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@LiÖI"‹      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@LiáI"‹      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@LiâI"‹      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@LiãI"‹      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@LiçI"‹      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	I""var.gsub!("STRING", "STRING");F@Ω!i[[	@‘igI"‡      var.force_encoding("STRING") if var.respond_to?("LITERAL")
      var = HTMLEntities.new.encode(var, "LITERAL")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING");Fi[	@‘ihI"√      var = HTMLEntities.new.encode(var, "LITERAL")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING");Fi[	@‘iiI"≥      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING");Fi[	@‘ijI"≥      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING");Fi[	@‘ikI"ô      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var;Fi[	I"Tprojects//state_machine_proj/state_machine/integrations/active_record/locale.rb;TiI"œif (defined? I18n::VERSION.! or (I18n::VERSION < "STRING")) then
  var["LITERAL"]["LITERAL"]["LITERAL"]["LITERAL"].each do |var, var|
    var.gsub!("STRING", "STRING")
    var.gsub!("STRING", "STRING")
  end;Fi[	I"7# Notify the user of the backup operation results.;FI"/# `status` indicates one of the following:;Fi[[	@CiI"Å      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #;Fi[	@|i5I"Å      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #;Fi[	@itI"Å      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #;Fi[	@JiI"Å      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #;Fi[	@Qi%I"Å      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #;Fi[	@XiI"Å      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #;Fi[	@Œ!@i[[	@CiI"ç      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`;Fi[	@|i6I"ç      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`;Fi[	@iuI"ç      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`;Fi[	@JiI"ç      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`;Fi[	@Qi&I"ç      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`;Fi[	@XiI"ç      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`;Fi[	I"@var = "STRING";F@Î!i[[	@iBI"Î          @var, @var = var.fetch("LITERAL", "STRING"), var.fetch("LITERAL", "STRING")
          @var = /^(?:#{Regexp.escape(@prefix)}STRING#{Regexp.escape(@suffix)}STRING/
          @var = "STRING"
          @var = "STRING"
        end;Fi[	@∞iI"|        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end;Fi[	@≥iI"|        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end;Fi[	@∂iI"|        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end;Fi[	@πiI"|        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end;Fi[	@ÙiI"H  
  def function
    @var = "STRING"
    @var = "STRING"
    super;Fi[	I"# `:success`;FI"+# : The backup completed successfully.;Fi[[	@Ci I"æ      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`;Fi[	@|i8I"æ      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`;Fi[	@iwI"æ      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`;Fi[	@JiI"æ      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`;Fi[	@Qi(I"æ      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`;Fi[	@XiI"æ      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`;Fi[	@˚!I"D# : Notification will be sent if `on_success` was set to `true`;Fi[[	@Ci!I"ï      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #;Fi[	@|i9I"ï      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #;Fi[	@ixI"ï      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #;Fi[	@JiI"ï      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #;Fi[	@Qi)I"ï      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #;Fi[	@XiI"ï      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #;Fi[	I"MockFormula.new("STRING");F@"i[[	@›iI"ã  def function
    assert_nothing_raised do
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING");Fi[	@›iI"ú    assert_nothing_raised do
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING");Fi[	@›iI"ü      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING");Fi[	@›iI"ü      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING");Fi[	@›iI"ü      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING");Fi[	@›i I"á      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
    end;Fi[	@±I"return unless var;Fi[[	@G!iI"W    end
    
    def function(var)
      return unless var
      @var ||= Hash.new;Fi[	@ªicI"n  end
  
  def function(var)
    return unless var
    reshares.where("LITERAL" => (var.person.id)).first;Fi[	@ªihI"k  end
  
  def function(var)
    return unless var
    likes.where("LITERAL" => (var.person.id)).first;Fi[	I"(projects//haml_proj/haml/options.rb;Ti—I"î      attr_writer("LITERAL")
    else
      def function(var)
        return unless var
        @var = var.is_a?(Encoding) ? (var.name) : (var.to_s);Fi[	@‰iWI"ô    # @param text [String, nil]
    # @return [String, nil] `text`, marked as HTML-safe
    def function(var)
      return unless var
      var.html_safe;Fi[	@œiI"K    end
    
    def function(var)
      return unless var
      begin;Fi[	@EI"'if (action_hook == "LITERAL") then;Fi[[	@îigI"          (::ActiveRecord::VERSION::MAJOR == "LITERAL") and (::ActiveRecord::VERSION::MINOR == "LITERAL")
        end
        def function
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true));Fi[	@Ôi;I"‚      
      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true));Fi[	@IiOI"˘          defined? ::MongoMapper::Version and ::MongoMapper::Version =~ "LITERAL"
        end
        def function
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true));Fi[	@¸i4I"‚      
      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true));Fi[	@8iI"˜          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end
        def function
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true));Fi[	@i8I"‚      
      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true));Fi[	@@˙!i[[	@CiI"±      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@|i7I"±      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@ivI"±      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@JiI"±      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@Qi'I"±      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@XiI"±      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@I"# `:warning`;Fi[[	@Ci#I"”      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@|i;I"”      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@izI"”      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@Ji!I"”      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@Qi+I"”      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@XiI"”      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@I"# `:failure`;Fi[[	@Ci(I"æ      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@|i@I"æ      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@iI"æ      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@Ji&I"æ      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@Qi0I"æ      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@Xi$I"æ      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@©I"module Handlers;Fi[[	@†iI"jmodule StateMachine
  module YARD
    module Handlers
      class Base < ::YARD::Handlers::Ruby::Base;Fi[	@ÆiI"Smodule StateMachine
  module YARD
    module Handlers
      class Event < Base;Fi[	@—iI"irequire("tempfile")
module StateMachine
  module YARD
    module Handlers
      class Machine < Base;Fi[	@≥iI"Smodule StateMachine
  module YARD
    module Handlers
      class State < Base;Fi[	@◊iI"Xmodule StateMachine
  module YARD
    module Handlers
      class Transition < Base;Fi[	@∏iI"Bmodule StateMachine
  module YARD
    module Handlers
    end;Fi[	@æ@Ei[[	@iCI"à    def function(var)
      var = var.value.split("LITERAL").map do |var|
        case var
        when "STRING" then
          "STRING";Fi[	@œiHI"±      var = false if @options["LITERAL"]
      var = ((var == "STRING") or (var.!=("STRING") and @options["LITERAL"]))
      case var
      when "STRING" then
        var = true;Fi[	@œi”I"µ      var = {}
      var.scan("LITERAL") do |var, var|
        case var
        when "STRING" then
          var["STRING"] ? (var["STRING"] += "STRING") : (var["STRING"] = "STRING");Fi[	@πiI"Ω  
  PRUNEABLE_DIRECTORIES = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"].map do |var|
    case var
    when "STRING" then
      (HOMEBREW_LIBRARY / var);Fi[	@Li I"õ      raise(Error, "STRING") if (var.length < "LITERAL")
      var, var, var = var["LITERAL"]
      case var
      when "STRING" then
        objparse(var);Fi[	@Li/I"õ      raise(Error, "STRING") if (var.length < "LITERAL")
      var, var, var = var["LITERAL"]
      case var
      when "STRING" then
        objparse(var);Fi[	@
"@i[[	@Ci"I"†      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`;Fi[	@|i:I"†      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`;Fi[	@iyI"†      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`;Fi[	@Ji I"†      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`;Fi[	@Qi*I"†      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`;Fi[	@XiI"†      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`;Fi[	@Æ!@Ei[[	@LiÑI"›      case var["LITERAL"]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@LiÜI"        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@LiàI"        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@LiäI"        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@LiåI"        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@LiéI"ÿ        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        nulltok(var);Fi[	@	I"var = var;Fi[[	I"Jprojects//compass_proj/compass/sass_extensions/functions/selectors.rb;Ti9I"≤        var = Sass::Script::Number.new("LITERAL")
        var = Sass::Script::Number.new("LITERAL")
      else
        var = var
        var = Sass::Script::Number.new("LITERAL");Fi[	@“iéI"É            var.include?(var) ? (var = var.gsub(var, var)) : (var = var)
          end
        else
          var = var
        end;Fi[	@<inI"¶        var = eval("STRING", var)
        var = var.instance_eval { binding } if block_given?
      else
        var = var
        var = var.instance_eval { binding };Fi[	@<iôI"†      if (var.is_a?(Binding) or var.is_a?(Proc)) then
        var = eval("STRING", var)
      else
        var = var
        var = var.instance_eval { binding };Fi[	@=iÒI"ò            var = ["STRING", "STRING", "STRING", "STRING"]
            var = Node.new("LITERAL", var)
          else
            var = var
          end;Fi[	@#iI"“        if var and var.is_a?(String) then
          var = var and var.=~(REGEX) ? ([var]) : (var.split("STRING"))
        else
          var = var
          var = [var] unless var and var.respond_to?("LITERAL");Fi[	I"&merge_list!(var.options, var.pop);FI"Cunless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[[	@£iJI"ı      def function(var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name));Fi[	@£iI"ˇ      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name));Fi[	@£iI"      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name));Fi[	@£iI"          (var = Twitter::API::Arguments.new(var)
          merge_user!(var.options, var.pop)
          merge_list!(var.options, var.pop)
          unless (var.options["LITERAL"] or var.options["LITERAL"]) then
            merge_owner!(var.options, (var.pop or screen_name));Fi[	@£i)I"        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name));Fi[	@£i3I"Û        var = Twitter::API::Arguments.new(var)
        var = var.pop
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name));Fi[	@U"I"D# : The backup completed successfully, but warnings were logged;Fi[[	@Ci$I"Î      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current;Fi[	@|i<I"Î      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current;Fi[	@i{I"Î      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current;Fi[	@Ji"I"Î      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current;Fi[	@Qi,I"Î      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current;Fi[	@Xi I"Î      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current;Fi[	@	I"var.pos -= "LITERAL";Fi[[	I"Bprojects//rescue_proj/resque/vendor/utf8_util/utf8_util_18.rb;Ti I"v      if check_next_sequence(var) then
        return "LITERAL"
      else
        var.pos -= "LITERAL"
      end;Fi[	@ﬁ"i(I"Ö          if check_next_sequence(var) then
            return "LITERAL"
          else
            var.pos -= "LITERAL"
          end;Fi[	@ﬁ"i+I"k            var.pos -= "LITERAL"
          end
        else
          var.pos -= "LITERAL"
        end;Fi[	@ﬁ"i4I"ô              if check_next_sequence(var) then
                return "LITERAL"
              else
                var.pos -= "LITERAL"
              end;Fi[	@ﬁ"i7I"                var.pos -= "LITERAL"
              end
            else
              var.pos -= "LITERAL"
            end;Fi[	@ﬁ"i:I"u              var.pos -= "LITERAL"
            end
          else
            var.pos -= "LITERAL"
          end;Fi[	I"	end);F@5i[[	@[iGI"ê              run((("STRING" + "STRING") + "STRING"))
            end
          end)
        ensure
          remove_password_file! unless local;Fi[	@ùiI"†              Logger.message("STRING")
              run((("STRING" + "STRING") + "STRING"))
            end)
          ensure
            remove_password_file!;Fi[	@“iI"ç        else
          send(:"compile_#{var.type}") { var.children.each { |var| compile(var) } }
        end)
      ensure
        @var = var;Fi[	@<i{I"ó      rescue ::SyntaxError => var
        raise(SyntaxError, var.message)
      end)
      ensure
        var.instance_eval { @var = var.upper if var };Fi[	@’inI"â          end
          var.map { |var| var[(var.."LITERAL")] }.join
        end)
      ensure
        haml_buffer.capture_position = nil;Fi[	@€i¢I"û        unless @failure_hooks_ran then
          failure_hooks.each { |var| payload_class.send(var, var, *var) }
        end)
      ensure
        @var = true;Fi[	@∫@Õ!i[[	@CiI"á      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:;Fi[	@|i4I"á      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:;Fi[	@isI"á      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:;Fi[	@JiI"á      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:;Fi[	@Qi$I"á      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:;Fi[	@XiI"á      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:;Fi[	@⁄@„
i[[	@›iI"v    # name - The String filename of the file.
    #
    # Returns nothing.
    def function(var, var)
      begin;Fi[	@›i>I"≈    # layouts - A Hash of {"name" => "layout"}.
    #
    # Returns nothing.
    def function(var, var)
      var = { "LITERAL" => ([Jekyll::Filters]), "LITERAL" => ({ "LITERAL" => (self.site) }) };Fi[	@Ìi%I"{    # name - The String filename of the file.
    #
    # Returns nothing.
    def function(var, var)
      super(var, var);Fi[	@ÌihI"ø    # site_payload - The site payload Hash.
    #
    # Returns nothing.
    def function(var, var)
      var = { "STRING" => (self.to_liquid), "STRING" => (pager.to_liquid) }.deep_merge(var);Fi[	@iCI"{    # name - The String filename of the file.
    #
    # Returns nothing.
    def function(var, var)
      super(var, var);Fi[	@iªI"Ë    # site_payload - The site payload hash.
    #
    # Returns nothing.
    def function(var, var)
      var = { "STRING" => ({ "STRING" => (related_posts(var["STRING"]["STRING"])) }), "STRING" => (self.to_liquid) }.deep_merge(var);Fi[	@Ã"I"C# : Notification will be sent, including a copy of the current;Fi[[	@Ci%I"›      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`;Fi[	@|i=I"›      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`;Fi[	@i|I"›      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`;Fi[	@Ji#I"›      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`;Fi[	@Qi-I"›      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`;Fi[	@Xi!I"›      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`;Fi[	@#I"6# : backup log, if `on_warning` was set to `true`;Fi[[	@Ci&I"›      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #;Fi[	@|i>I"›      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #;Fi[	@i}I"›      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #;Fi[	@Ji$I"›      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #;Fi[	@Qi.I"›      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #;Fi[	@Xi"I"›      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #;Fi[	@%#@i[[	@Ci'I"›      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@|i?I"›      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@i~I"›      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@Ji%I"›      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@Qi/I"›      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@Xi#I"›      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@d"I"%# : The backup operation failed.;Fi[[	@Ci)I"√      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused;Fi[	@|iAI"√      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused;Fi[	@i{I"√      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused;Fi[	@Ji'I"√      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused;Fi[	@Qi1I"√      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused;Fi[	@Xi%I"√      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused;Fi[	I"respond_to do |var|;FI"var.json do;Fi[[	@ÔiI"⁄    @var = current_user.comment!(var, params["LITERAL"]) if var
    if @comment then
      respond_to do |var|
        var.json do
          render("LITERAL" => (CommentPresenter.new(@comment)), "LITERAL" => "LITERAL");Fi[	I"Dprojects//diaspora_proj/controllers/notifications_controller.rb;TiI"Ã    if var then
      var.set_read_state(params["LITERAL"].!=("STRING"))
      respond_to do |var|
        var.json do
          render("LITERAL" => ({ "LITERAL" => (var.id), "LITERAL" => (var.unread) }));Fi[	@˙i#I"≈    var = params["LITERAL"] ? (params["LITERAL"].to_i) : ("LITERAL")
    @var = Person.search(search_query, current_user)
    respond_to do |var|
      var.json do
        @var = @people.limit(var);Fi[	@∏i-I"        @var = current_user.build_post("LITERAL", params["LITERAL"])
        if @photo.save then
          respond_to do |var|
            var.json do
              render("LITERAL" => ({ "STRING" => (true), "STRING" => (@photo.as_api_response("LITERAL")) }));Fi[	@∏i®I"Ã        current_user.update_profile(var)
      end
      respond_to do |var|
        var.json do
          render("LITERAL" => (false), "LITERAL" => ({ "STRING" => (true), "STRING" => (@photo) }.to_json));Fi[	@©iI"µ  def function
    @var = Person.find_by_guid!(params["LITERAL"])
    respond_to do |var|
      var.json do
        render("LITERAL" => (PersonPresenter.new(@person, current_user)));Fi[	I"var = var["STRING"];F@b#i[[	@iI"˙    var = var["STRING"]["STRING"]
    var = var["STRING"]["STRING"]
    var = var["STRING"]
    var = var["STRING"]
    var = "STRING".constantize.new("LITERAL" => (var["STRING"]), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var["STRING"]));Fi[	@xi	I"µ    def self.process(var)
      var = Jekyll::Site.new(var)
      var = var["STRING"]
      var = var["STRING"]
      var["STRING"] ? (self.watch(var, var)) : (self.build(var, var));Fi[	@xiI"o    
    def self.build(var, var)
      var = var["STRING"]
      var = var["STRING"]
      puts("STRING");Fi[	@xi I"à    def self.watch(var, var)
      require("directory_watcher")
      var = var["STRING"]
      var = var["STRING"]
      puts("STRING");Fi[	@Ãi6I"Ç      case var["STRING"]
      when "STRING" then
        var = var["STRING"]
        var = var["STRING"]
      when "STRING" then;Fi[	@ÃiWI"∞        (var << "STRING")
      when "STRING" then
        var = var["STRING"]
        var = var["STRING"]
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?;Fi[	@B#I"H# : Notification will be sent, including the Exception which caused;Fi[[	@Ci*I"”      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current;Fi[	@|iBI"”      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current;Fi[	@i|I"”      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current;Fi[	@Ji(I"”      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current;Fi[	@Qi2I"”      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current;Fi[	@Xi&I"”      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current;Fi[	@(@Ei[[	@FiI"Õ      # A collection containing the favorited tweet
      #
      # @return [Array<Twitter::Tweet>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::Tweet.fetch_or_new(var) };Fi[	@#iI"Ã      # A collection of tweets that mention a user
      #
      # @return [Array<Twitter::Tweet>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::Tweet.fetch_or_new(var) };Fi[	@OiI"Õ      # A collection of tweets that reply to a user
      #
      # @return [Array<Twitter::Tweet>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::Tweet.fetch_or_new(var) };Fi[	@OiI"“      # A collection that contains the replied-to tweets
      #
      # @return [Array<Twitter::Tweet>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::Tweet.fetch_or_new(var) };Fi[	@(iI"∫      # A collection of retweets
      #
      # @return [Array<Twitter::Tweet>]
      def function
        @var = Array(@attrs["LITERAL"]).map { |var| Twitter::Tweet.fetch_or_new(var) };Fi[	@ãiI"¬module Twitter
  class SearchResults < Twitter::Base
    # @return [Array<Twitter::Tweet>]
    def function
      @var ||= Array(@attrs["LITERAL"]).map { |var| Twitter::Tweet.fetch_or_new(var) };Fi[	@q#I"F# : the failure, the Exception's backtrace, a copy of the current;Fi[[	@Ci+I"      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`;Fi[	@|iCI"      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`;Fi[	@i}I"      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`;Fi[	@Ji)I"      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`;Fi[	@Qi3I"      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`;Fi[	@Xi'I"      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`;Fi[	@é#I"K# : backup log and other information if `on_failure` was set to `true`;Fi[[	@Ci,I"      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@|iDI"      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@i~I"      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@Ji*I"      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@Qi4I"      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@Xi(I"      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@„
I"var = var.extract_options!;Fi[[	@jiMI"´        #   person.valid? # => true
        #   person.status # => true
        def function(var, var)
          var = var.extract_options!
          var["LITERAL"] = true;Fi[	@âiXI"|      #     end
      #   end
      def function(var, var)
        var = var.extract_options!
        var.each do |var|;Fi[	@âiÜI"œ    # to the class and available as +options+, please refer to the
    # class version of this method for more information.
    def function(var, var)
      var = var.extract_options!
      var.each do |var|;Fi[	@ñilI"∆      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(var, var)
        var = var.extract_options!
        if var.key?("LITERAL") then;Fi[	@æiEI"«      #   sign_in @user, :bypass => true            # sign_in(resource, options)
      #
      def function(var, var)
        var = var.extract_options!
        var = Devise::Mapping.find_scope!(var);Fi[	@æi∑I"È      # then to the url specified by after_sign_in_path_for. It accepts the same
      # parameters as the sign_in method.
      def function(var, var)
        var = var.extract_options!
        var = Devise::Mapping.find_scope!(var);Fi[	@EI"var = {};Fi[[	@ai I"Å          end
          
          def function
            var = {}
            var["LITERAL"] = "STRING" if (type == "LITERAL");Fi[	@i¬I"d        end
        
        def function
          var = {}
          ATTRIBUTES.each do |var|;Fi[	I"0projects//devise_proj/devise/failure_app.rb;TiUI"S    end
    
    def function
      var = {}
      var = :"new_#{scope}STRING";Fi[	@¯i"I"J    end
    
    def function
      var = {}
      var["STRING"] = [];Fi[	@ŒiWI"Ô    # Arguments other than the standard geometry, format etc are just passed through from
    # initialization and any procs are called here, just before post-processing.
    def function
      var = {}
      @other_args.each do |var, var|;Fi[	@—ibI"‰        # Gets a list of all attributes for the current class, including those
        # that are inherited
        def function
          var = {}
          loaded_superclasses.each { |var| var.merge!(var.instance_attributes) };Fi[	@ù#@i[[	@Ci-I"˛      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var);Fi[	@|iEI"˛      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var);Fi[	@iI"˛      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var);Fi[	@Ji+I"˛      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var);Fi[	@Qi5I"˛      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var);Fi[	@Xi)I"˛      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var);Fi[	I"module Paperclip;FI"module Shoulda;Fi[[	@)i I":module Paperclip
  module Shoulda
    module Matchers;Fi [	@0i I":module Paperclip
  module Shoulda
    module Matchers;Fi [	@5i I":module Paperclip
  module Shoulda
    module Matchers;Fi [	@<i I":module Paperclip
  module Shoulda
    module Matchers;Fi [	I"3projects//paperclip_proj/paperclip/matchers.rb;Ti	I"ªrequire("paperclip/matchers/validate_attachment_content_type_matcher")
require("paperclip/matchers/validate_attachment_size_matcher")
module Paperclip
  module Shoulda
    module Matchers;Fi[	I"*projects//paperclip_proj/paperclip.rb;TiI"Zrequire("paperclip/matchers")
module Paperclip
  module Shoulda
    include(Matchers);Fi[	I"assert(var.universal?.!);F@i[[	@ßi(I"|  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?);Fi[	@ßi`I"|  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?);Fi[	@ßinI"~  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	@ßiçI"ç    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	@ßiùI"ç    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	@ßi≠I"ç    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	@f@‘i[[	@∆i!I"ﬁ      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.;Fi[	@∆i4I"ﬁ      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.;Fi[	@∆iNI"ﬁ      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.;Fi[	@∆icI"2      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :name The name a place is known as.;Fi[	@Úi(I"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @return [Array<Twitter::Place>];Fi[	@Úi8I"Í      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat If provided with a :long option the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for latitude are -90.0 to +90.0 (North is positive) inclusive.;Fi[	I"var = case var;F@@i[[	@Ci0I"j      #
      def function(var)
        var = case var
        when "LITERAL" then
          "STRING";Fi[	@Ji.I"j      #
      def function(var)
        var = case var
        when "LITERAL" then
          "STRING";Fi[	@Qi8I"j      #
      def function(var)
        var = case var
        when "LITERAL" then
          "STRING";Fi[	@Xi,I"j      #
      def function(var)
        var = case var
        when "LITERAL" then
          "STRING";Fi[	@EiUI"õ      var = var["STRING"]
      var = (var["LITERAL"] or var.result)
      var = case var
      when "LITERAL" then
        var = (var.message or "STRING");Fi[	@πiJI"^  
  def function(var)
    var = case var
    when "LITERAL" then
      (self / "STRING");Fi[	I"%def function(var, var, var, var);F@≤i[[	@‰iOI"b  attr("LITERAL")
  
  def function(var, var, var, var)
    @var = var
    @var = ENV.to_hash;Fi[	@‰iMI"     # num_pages - The Integer number of pages or nil if you'd like the number
    #             of pages calculated.
    def function(var, var, var, var)
      @var = var
      @var = var["STRING"].to_i;Fi[	@ÌiI"≤    # dir  - The String path between the source and the file.
    # name - The String filename of the file.
    def function(var, var, var, var)
      @var = var
      @var = var;Fi[	@i%I"Ç    #
    # Returns the new Post.
    def function(var, var, var, var)
      @var = var
      @var = File.join(var, var, "STRING");Fi[	@∞iI"∞    # dir  - The String path between <source> and the file.
    # name - The String filename of the file.
    def function(var, var, var, var)
      @var = var
      @var = var;Fi[	@‘iI"–      # The string name of the queue from which the failed job was pulled
      # The payload object associated with the failed job
      def function(var, var, var, var)
        @var = var
        @var = var;Fi[	@I"# @example;Fi[[	@‰iI"ó    # Computes the powerset of the given array.
    # This is the set of all subsets of the array.
    #
    # @example
    #   powerset([1, 2, 3]) #=>;Fi[	@Êi@I"Õ      # @param name [Symbol] The key of the default option in your configuration hash.
      # @param value [Object] The value your object defaults to. Nil if not provided.
      #
      # @example
      #;Fi[	@Êi}I"†    # Direct access to the OmniAuth logger, automatically prefixed
    # with this strategy's name.
    #
    # @example
    #   log :warn, "This is a warning.";Fi[	@Êi=I"ú    # to true or by setting `:skip_info` to a Proc that takes a uid and
    # evaluates to true when you would like to skip info.
    #
    # @example
    #;Fi[	@Ë#i6I"â    
    # Stubs the HTTP PUT for an attachment using S3 storage.
    #
    # @example
    #   stub_paperclip_s3('user', 'avatar', 'png');Fi[	@Ë#iLI"•    #
    #     When I attach a "demo_tape" "mp3" file to a "band" on S3
    #
    # @example
    #   Factory.define :band_with_demo_tape, :parent => :band do |band|;Fi[	@fI"6# @return [Twitter::User] The authenticated user.;Fi[[	@i/I"%      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.;Fi[	@i@I"%      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param device [String] Must be one of: 'sms', 'none'.;Fi[	@iPI"$      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.;Fi[	@ibI"	      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param image [File] The background image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forcibly scaled down. The image must be provided as raw multipart data, not a URL.;Fi[	@irI"$      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.;Fi[	@iÇI"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param image [File] The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation.;Fi[	I"$var = "LITERAL".match(var.to_s);F@çi[[	@¸ioI"Õ      "LITERAL".match(var.to_s) ? (Pathname.new(var.dirname).stem) : (var.stem)
    end
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s);Fi[	@¸iqI"«    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s);Fi[	@¸isI"«    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s);Fi[	@¸iuI"«    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s);Fi[	@¸iwI"¬    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@¸iäI"§    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
  end;Fi[	@I"# Examples;Fi[[	@—i3I"F    #
    # date - The Time to format.
    #
    # Examples
    #;Fi[	@—iBI"I    #
    # input - The String to escape.
    #
    # Examples
    #;Fi[	@—iQI"I    #
    # input - The String to escape.
    #
    # Examples
    #;Fi[	@—imI"Q    #
    # array - The Array of Strings to join.
    #
    # Examples
    #;Fi[	@ıiÕI"®    
    # Private: creates a regular expression from the keep_files array
    # 
    # Examples
    #   ['.git','.svn'] creates the following regex: /\/(\.git|\/.svn)/;Fi[	@ıi‰I"^    #
    # post_attr - The String name of the Post attribute.
    #
    # Examples
    #;Fi[	@YI"module Database;Fi[[	@∫i I"3module Backup
  module Database
    class Base;Fi [	@Ii I"=module Backup
  module Database
    class MongoDB < Base;Fi [	@ki I";module Backup
  module Database
    class MySQL < Base;Fi [	@ni I"@module Backup
  module Database
    class PostgreSQL < Base;Fi [	@Li I";module Backup
  module Database
    class Redis < Base;Fi [	@Oi I":module Backup
  module Database
    class Riak < Base;Fi [	@EI"@var = "LITERAL";Fi[[	@ÑiI"©        # collects image sizes and input parameters for each sprite
        # Calculates the height
        def function
          @var = "LITERAL"
          init_images;Fi[	@˙iI"}  
  # 410 GONE
  def function
    @var = "LITERAL"
    var = params["LITERAL"] ? (params["LITERAL"].to_i) : ("LITERAL");Fi[	@˙i6I"o  end
  
  def function
    @var = "LITERAL"
    @var = Person.where("LITERAL" => (search_query.downcase));Fi[	@∏i
I"{  respond_to("LITERAL", "LITERAL")
  
  def function
    @var = "LITERAL"
    @var = Person.find_by_guid(params["LITERAL"]);Fi[	@iI"[  respond_to("LITERAL")
  
  def function
    @var = "LITERAL"
    @var = current_user;Fi[	@iwI"I  end
  
  def function
    @var = "LITERAL"
    @var = current_user;Fi[	I"var.putc(var);F@Ä$i[[	@LiÕI"z            raise(Utf8Error)
          end
          var.putc(var)
          var.putc(var)
          return "LITERAL";Fi[	@Li◊I"÷          var = (var.&(Umask3) << "LITERAL").|((var.&(Umaskx) << "LITERAL")).|(var.&(Umaskx))
          raise(Utf8Error) if (var <= Uchar2max)
          var.putc(var)
          var.putc(var)
          var.putc(var);Fi[	@LiÿI"ì          raise(Utf8Error) if (var <= Uchar2max)
          var.putc(var)
          var.putc(var)
          var.putc(var)
          return "LITERAL";Fi[	@Li‚I"ˆ          var = (var.&(Umask4) << "LITERAL").|((var.&(Umaskx) << "LITERAL")).|((var.&(Umaskx) << "LITERAL")).|(var.&(Umaskx))
          raise(Utf8Error) if (var <= Uchar3max)
          var.putc(var)
          var.putc(var)
          var.putc(var);Fi[	@Li„I"ê          raise(Utf8Error) if (var <= Uchar3max)
          var.putc(var)
          var.putc(var)
          var.putc(var)
          var.putc(var);Fi[	@Li‰I"          var.putc(var)
          var.putc(var)
          var.putc(var)
          var.putc(var)
          return "LITERAL";Fi[	I"!var.in_repo_expect("STRING");FI"+var.in_repo_expect("STRING", "STRING");Fi[[	@fi3I"¨    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING");Fi[	@fi6I"¬      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING");Fi[	@fiEI"¨    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING");Fi[	@fiHI"«      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var);Fi[	@fiYI"¨    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING");Fi[	@fi\I"«      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var);Fi[	@£I"module Installers;Fi[[	@¢i I"6module Compass
  module Installers
    class Base;Fi [	@∞i I"Fmodule Compass
  module Installers
    class BareInstaller < Base;Fi [	@Åi I"6module Compass
  module Installers
    class Base;Fi [	@li I":module Compass
  module Installers
    class Manifest;Fi [	@si I"Jmodule Compass
  module Installers
    class ManifestInstaller < Base;Fi [	@oi I"Amodule Compass
  module Installers
    class TemplateContext;Fi [	@à@Ei[[	@LiíI"á        case var[var]
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@LiîI"è          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@LiñI"è          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@LiòI"è          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@LiöI"è          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@LiúI"è          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	I" sha1("STRING" => "LITERAL");F@º$i[[	@itI"s  
  bottle do
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL");Fi[	@iuI"v  bottle do
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
  end;Fi[	@i˛I"s  
  bottle do
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL");Fi[	@iˇI"v  bottle do
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
  end;Fi[	@iI"Ç  bottle do
    version("LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL");Fi[	@iI"|    version("LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
  end;Fi[	@YI"module Compressor;Fi[[	I"4projects//backup_proj/backup/compressor/base.rb;Ti I"5module Backup
  module Compressor
    class Base;Fi [	@∞i I"=module Backup
  module Compressor
    class Bzip2 < Base;Fi [	I"6projects//backup_proj/backup/compressor/custom.rb;Ti I">module Backup
  module Compressor
    class Custom < Base;Fi [	@≥i I"<module Backup
  module Compressor
    class Gzip < Base;Fi [	@∂i I"<module Backup
  module Compressor
    class Lzma < Base;Fi [	@πi I">module Backup
  module Compressor
    class Pbzip2 < Base;Fi [	@@ü!i[[	@ÌivI"i    
    # Obtain destination path.
    #
    # dest - The String path to the destination dir.
    #;Fi[	@Ìi|I"á    
    # Write the generated page file to the destination directory.
    #
    # dest - The String path to the destination dir.
    #;Fi[	@i¬I"i    
    # Obtain destination path.
    #
    # dest - The String path to the destination dir.
    #;Fi[	@iÕI"á    
    # Write the generated post file to the destination directory.
    #
    # dest - The String path to the destination dir.
    #;Fi[	@∞iI"i    
    # Obtain destination path.
    #
    # dest - The String path to the destination dir.
    #;Fi[	@∞i2I"ç    
    # Write the static file to the destination directory (if modified).
    #
    # dest - The String path to the destination dir.
    #;Fi[	@“@Ei[[	@£iI"Ω      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop);Fi[	@£i&I"ã      end
      
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop);Fi[	@£i0I"|      end
      
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        var = var.pop;Fi[	@˘iI"æ      # @param args [Array]
      # @return [Array<Twitter::Tweet>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	@ﬁiI"Ω      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	@ﬁiI"⁄      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[	I"-transferred_files_for(var) do |var, var|;FI"*Logger.message(("STRING" + "STRING"));Fi
[
[	@Ui?I"ﬁ      def function(var)
        var = remote_path_for(var)
        transferred_files_for(var) do |var, var|
          Logger.message(("STRING" + "STRING"))
          connection.delete_object(container, File.join(var, var));Fi[	@≈iJI"œ        var = remote_path_for(var)
        connection do |var|
          transferred_files_for(var) do |var, var|
            Logger.message(("STRING" + "STRING"))
            var.delete(File.join(var, var));Fi[	@XiII"Õ        if var = directory_for(var) then
          var = []
          transferred_files_for(var) do |var, var|
            Logger.message(("STRING" + "STRING"))
            if var = var.files.get(var) then;Fi[	@`iCI"·        var = remote_path_for(var)
        connection.sync_clock
        transferred_files_for(var) do |var, var|
          Logger.message(("STRING" + "STRING"))
          connection.delete_object(bucket, File.join(var, var));Fi[	@si>I"–        var = remote_path_for(var)
        connection do |var|
          transferred_files_for(var) do |var, var|
            Logger.message(("STRING" + "STRING"))
            var.remove!(File.join(var, var));Fi[	@EI"@var = true;Fi
[
[	I"4projects//compass_proj/compass/commands/base.rb;Ti!I"F      end
      
      def function
        @var = true
      end;Fi[	@Äi^I"ß      # If you don't want reconfirmation to be sent, neither a code
      # to be generated, call skip_reconfirmation!
      def function
        @var = true
      end;Fi[	@Äi¨I"h      end
      
      def function
        @var = true
        self.unconfirmed_email = self.email;Fi[	I"?projects//diaspora_proj/controllers/contacts_controller.rb;TiI"R  end
  
  def function
    @var = true
    @var = Person.community_spotlight;Fi[	@iœI"n    
    # Tracks that before callbacks have now completed
    def function
      @var = true
      super;Fi[	@I"Ü# Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).;Fi
[
[	@„iÒI"G      # Add +node_or_tags+ as a child of this Node.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #;Fi[	@„iI"R      # Insert +node_or_tags+ before this Node (as a sibling).
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #;Fi[	@„iI"Q      # Insert +node_or_tags+ after this Node (as a sibling).
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #;Fi[	@„iLI"K      # Set the inner html for this Node +node_or_tags+
      # +node_or_tags+ can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #;Fi[	@„i^I"B      # Replace this Node with +node_or_tags+.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #;Fi[	@\@\i
[
[	@ViLI"H  
  def function(var)
    var = []
    var = []
    var = "STRING";Fi[	@πi&I"ù        if var then
          $found = var.length
          var = []
          var = []
          (var << Thread.new { search_tap("STRING", "STRING", var) });Fi[	@îiCI"ñ    end
    unless ignore_deps then
      var = []
      var = []
      if f.recursive_deps.any? { |var| (var.name == "STRING") } and ARGV.debug? then;Fi[	@‘i7I"i        end
      end
      var = []
      var = []
      if (var["LITERAL"] or var["LITERAL"]) then;Fi[	@˝ivI"i    def function
      return if @jobs.empty?
      var = []
      var = []
      var = roles.empty?;Fi[	I"# Server credentials;F@∫i
[
[	@≈iI"_      
      ##
      # Server credentials
      ##
      # Server IP Address and FTP port;Fi[	@[iI"_      
      ##
      # Server credentials
      ##
      # Server IP Address and SSH port;Fi[	@piI"_      
      ##
      # Server credentials
      ##
      # Server IP Address and SCP port;Fi[	@siI"`      
      ##
      # Server credentials
      ##
      # Server IP Address and SFTP port;Fi[	@liI"i        
        ##
        # Server credentials
        ##
        # Server IP Address and SSH port;Fi[	@E@:i
[
[	@üi[I"R    end
    
    def function
      var = "LITERAL"
      if new_config? then;Fi[	@ÍiI"M  extend(self)
  
  def function
    var = "LITERAL"
    var = "LITERAL";Fi[	@JiCI"P  end
  
  def function
    var = "LITERAL"
    Dir["STRING"].each do |var|;Fi[	@ziI"L  end
  
  def function
    var = "LITERAL"
    if var.match(@url) then;Fi[	@Ci∆I"º    # Reconnect to Redis to avoid sharing a connection with the parent,
    # retry up to 3 times with increasing delay before giving up.
    def function
      var = "LITERAL"
      begin;Fi[	@I",# Call with a block to register a hook.;Fi
[
[	@Fi]I"≥  # changes you make will be permanent for the lifespan of the
  # worker.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.;Fi[	@FilI"ÿ  # before every job, so be careful- any changes you make will be
  # permanent for the lifespan of the worker.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.;Fi[	@Fi{I"ﬂ  # the current job. Any changes you make, therefore, will only live as
  # long as the job currently being processed.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.;Fi[	@FiõI"¬  # the job code is performed. This hook will run before any
  # Job.before_perform hook.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.;Fi[	@Fi™I"¡  # the job code has performed. This hook will run after any
  # Job.after_perform hook.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.;Fi[	I"=# Call with no arguments to return all registered hooks.;F@±i
[
[	@Fi_I"ª  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"));Fi[	@FinI"ª  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"));Fi[	@Fi}I"ª  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"));Fi[	@FiùI"ª  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"));Fi[	@Fi¨I"ª  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"));Fi[	@G%@T%i
[
[	@Fi^I"à  # worker.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var);Fi[	@FimI"™  # permanent for the lifespan of the worker.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var);Fi[	@Fi|I"´  # long as the job currently being processed.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var);Fi[	@FiúI"ô  # Job.before_perform hook.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var);Fi[	@Fi´I"ò  # Job.after_perform hook.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(var);Fi[	@õ I"¥# @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi
[
[	@„iI"®      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @example Return the 20 most recent mentions (statuses containing @username) for the authenticating user;Fi[	@„iJI"í      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi[	@„iaI"í      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi[	@„ivI"í      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi[	@„iàI"í      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi[	I"8assert((TARGET_FOLDER + "STRING").exist?, "STRING");F@z%i
[
[	@=i%I"≈    with_temp_folder do
      TARGET_FOLDER.install(["STRING", "STRING"])
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
    end;Fi[	@=i-I"æ    with_temp_folder do
      TARGET_FOLDER.install(Dir["STRING"])
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
    end;Fi[	@=i7I"∏      system("STRING")
      TARGET_FOLDER.install("STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
    end;Fi[	@=iHI"    with_temp_folder do
      TARGET_FOLDER.install("STRING" => "STRING", "STRING" => "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING");Fi[	@=iUI"È      TARGET_FOLDER.install("STRING" => "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
    end;Fi[	I"!var = var.patches["LITERAL"];FI")assert_equal("LITERAL", var.patch_p);Fi
[
[	@ÍiI"ü    var = Patches.new("STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
  end;Fi[	@ÍiI"∆    var = Patches.new(["STRING", "STRING"])
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
    var = var.patches["LITERAL"];Fi[	@ÍiI"ô    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
  end;Fi[	@Íi$I"¨    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
  end;Fi[	@Íi+I"¨    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
  end;Fi[	@ä@	i
[
[	@i8I"\        case var
        when "LITERAL" then
          nil
        else
          begin;Fi[	@G!iI"t      else
        if var =~ "LITERAL" then
          nil
        else
          if (var.size > "LITERAL") then;Fi[	@]iI"è      def function(var, var, var)
        if var.nil? then
          nil
        else
          if var.is_a?(Compass::Configuration::Data) then;Fi[	@iìI"î          else
            if inherited_data.nil? then
              nil
            else
              if inherited_data.respond_to?("STRING") then;Fi[	@›iI"Å        case var
        when "LITERAL", nil then
          nil
        else
          MultiJson.decode(var, "LITERAL" => (true));Fi[	@„
@Fi
[
[	@¨i!I"9  end
  
  def function(var, var)
    "STRING"
  end;Fi[	@’i8I"ò    # @param str [String] The string to add before the Haml
    # @yield A block of Haml to prepend to
    def function(var, var)
      "STRING"
    end;Fi[	@’iKI"ñ    # @param str [String] The string to add after the Haml
    # @yield A block of Haml to append to
    def function(var, var)
      "STRING"
    end;Fi[	@‰iÎI"≠    # @param vars [Array<Boolean>] The static variable assignment
    # @return [String] The real name of the static method
    def function(var, var)
      "STRING"
    end;Fi[	I"3projects//jekyll_proj/jekyll/tags/highlight.rb;Ti2I"C    end
    
    def function(var, var)
      "STRING"
    end;Fi[	I"var["LITERAL"];F@	i
[
[	@ziVI"§        if var["LITERAL"] then
          if absolute_path?(var["LITERAL"]) then
            var["LITERAL"]
          else
            File.join(var, var["LITERAL"]);Fi[	@∏i}I"Ç  def function(var)
    if request.params["LITERAL"].is_a?(String).! then
      var["LITERAL"]
    else
      var = var["LITERAL"];Fi[	@“i§I"æ        else
          ("STRING" + (if (if var["LITERAL"] and @options.html? then
            var["LITERAL"]
          else
            (block_given?.! or (var["LITERAL"] or var["LITERAL"]));Fi[	@niI"        else
          if var["LITERAL"] then
            var["LITERAL"]
          else
            if var["LITERAL"] then;Fi[	@˝iI"ì      var = File.read(var)
      var = if var["LITERAL"] then
        var["LITERAL"]
      else
        File.read(var["LITERAL"]) if var["LITERAL"];Fi[	@EI"8raise(FormulaUnspecifiedError) if ARGV.named.empty?;Fi
[
[	I"'projects//homebrew_proj/cmd/cat.rb;TiI"y  extend(self)
  
  def function
    raise(FormulaUnspecifiedError) if ARGV.named.empty?
    cd(HOMEBREW_REPOSITORY);Fi[	@;i	I"|  extend(self)
  
  def function
    raise(FormulaUnspecifiedError) if ARGV.named.empty?
    if ARGV.include?("STRING") then;Fi[	@@iI"á  extend(self)
  
  def function
    raise(FormulaUnspecifiedError) if ARGV.named.empty?
    raise("STRING") if ARGV.include?("STRING");Fi[	I"(projects//homebrew_proj/cmd/test.rb;TiI"}  extend(self)
  
  def function
    raise(FormulaUnspecifiedError) if ARGV.named.empty?
    ENV.extend(HomebrewEnvExtension);Fi[	@≤i	I"  extend(self)
  
  def function
    raise(FormulaUnspecifiedError) if ARGV.named.empty?
    var = Formula.select do |var|;Fi[	@E@Ñi
[
[	@viXI"Ì      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)));Fi[	@vizI"Ì      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)));Fi[	@}iúI"        var = Twitter::API::Arguments.new(var)
        var.options["LITERAL"] = true if var.options.delete("LITERAL").!.!
        var.flatten.threaded_map do |var|
          begin
            object_from_response(Twitter::User, "LITERAL", "STRING", merge_user(var.options, var));Fi[	@˘iêI"´      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin
            post_retweet(var, var.options);Fi[	@˘i´I"´      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin
            post_retweet(var, var.options);Fi[	@ç@D$i
[
[	@¸ipI"´    end
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[	@¸irI"—    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[	@¸itI"—    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[	@¸ivI"—    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[	@¸iâI"Ã    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[	I"# Examples:;F@i
[
[	@æi>I"∂      # signed in, but we want to refresh the credentials in session.
      #
      # Examples:
      #
      #   sign_in :user, @user                      # sign_in(scope, resource);Fi[	@æiYI"É      # is no user logged in on the referred scope
      #
      # Examples:
      #
      #   sign_out :user     # sign_out(scope);Fi[	@ÄiÉI"ª      
      # Checks if the user confirmation happens before the token becomes invalid
      # Examples:
      #
      #   # confirm_within = 3.days and confirmation_sent_at = 2.days.ago;Fi[	@Ei I"í    # This method bypass any warden authentication callback.
    #
    # Examples:
    #
    #   sign_in :user, @user   # sign_in(scope, resource);Fi[	@Ei/I"}    # This method bypass any warden logout callback.
    #
    # Examples:
    #
    #   sign_out :user     # sign_out(scope);Fi[	@Å!@Å!i
[
[	@∆i"I"ï          end)
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"));Fi[	@∆i*I"§          require("kramdown")
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"));Fi[	@∆i3I"Õ          @var = @config["STRING"]["STRING"].map { |var| var.to_sym })
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"));Fi[	@∆iII"ï          end)
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"));Fi[	@ÚiI"ì        @var = true)
      rescue LoadError
        STDERR.puts("STRING")
        STDERR.puts("STRING")
        raise(FatalException.new("STRING"));Fi[	@EI"$if ARGV.include?("STRING") then;Fi
[
[	@ÌiI"  
  # Create a formula from a tarball URL
  def function
    if ARGV.include?("STRING") then
      exec_browser("STRING");Fi[	@piI"u  extend(self)
  
  def function
    if ARGV.include?("STRING") then
      Formula.each { |var| puts("STRING") };Fi[	@CiI"^  extend(self)
  
  def function
    if ARGV.include?("STRING") then
      puts("STRING");Fi[	I"+projects//homebrew_proj/cmd/options.rb;TiI"jrequire("formula")
require("cmd/outdated")
def function
  if ARGV.include?("STRING") then
    Formula;Fi[	@πi
I"f  extend(self)
  
  def function
    if ARGV.include?("STRING") then
      exec_browser("STRING");Fi[	@⁄#I"module Matchers;Fi
[
[	@)iI"Åmodule Paperclip
  module Shoulda
    module Matchers
      # Ensures that the given instance or class has an attachment with the;Fi[	@0iI"Ñmodule Paperclip
  module Shoulda
    module Matchers
      # Ensures that the given instance or class validates the content type of;Fi[	@5iI"Ñmodule Paperclip
  module Shoulda
    module Matchers
      # Ensures that the given instance or class validates the presence of the;Fi[	@<iI"Ämodule Paperclip
  module Shoulda
    module Matchers
      # Ensures that the given instance or class validates the size of the;Fi[	@Â#i
I"|require("paperclip/matchers/validate_attachment_size_matcher")
module Paperclip
  module Shoulda
    module Matchers
    end;Fi[	@E@ i
[
[	@i—I"{      # [Version]
      # Returns the current version of the Backup gem
      def function
        puts("STRING")
      end;Fi[	@ri3I"w        end
        
        def function
          puts("STRING")
          @images.each { |var| puts(var.file) };Fi[	@giII"Pend
module NoiseyPathname
  def function
    puts("STRING")
    orig_unlink;Fi[	@ﬁifI"^  
  # we try to keep output minimal
  def function
    puts("STRING")
    puts("STRING");Fi[	@ﬁiI"B  end
  
  def function
    puts("STRING")
    puts("STRING");Fi[	@E@˙i
[
[	@]i:I"X      
      # Support for testing.
      def function
        @var = nil
      end;Fi[	@i
I"¿    class Rememberable < Authenticatable
      # A valid strategy for rememberable needs a remember token in the cookies.
      def function
        @var = nil
        remember_cookie.present?;Fi[	@iI"crequire("testing_env")
module ExtendArgvPlusYeast
  def function
    @var = nil
    @var = nil;Fi[	@‡ixI"r          attr_reader("LITERAL")
          
          def function
            @var = nil
            super();Fi[	I"2projects//paperclip_proj/paperclip/helpers.rb;Ti?I";    end
    
    def function
      @var = nil
    end;Fi[	@EI"3assert(model.respond_to?("LITERAL"), "STRING");Fi
[
[	I"4projects//activemodel_proj/active_model/lint.rb;TiI"Ì      # or nil if <tt>model.persisted?</tt> is false. This is used by
      # <tt>dom_id</tt> to generate unique ids for the object.
      def function
        assert(model.respond_to?("LITERAL"), "STRING")
        def (model).persisted?;Fi[	@2&i I"”      # However, if the resource is not persisted?, then <tt>to_param</tt>
      # should always return +nil+.
      def function
        assert(model.respond_to?("LITERAL"), "STRING")
        def (model).to_key;Fi[	@2&i/I"       # Returns a string giving a relative path. This is used for looking up
      # partials. For example, a BlogPost model might return "blog_posts/blog_post"
      def function
        assert(model.respond_to?("LITERAL"), "STRING")
        assert_kind_of(String, model.to_partial_path);Fi[	@2&i;I"Î      # the create action. If it is persisted, a form for the object will routes
      # to the update action.
      def function
        assert(model.respond_to?("LITERAL"), "STRING")
        assert_boolean(model.persisted?, "STRING");Fi[	@2&iTI"+      # If localization is used, the Strings should be localized for the current
      # locale. If no error is present, this method should return an empty Array.
      def function
        assert(model.respond_to?("LITERAL"), "STRING")
        assert(model.errors["LITERAL"].is_a?(Array), "STRING");Fi[	@@(i
[
[	@FiI"}      
      # A collection containing the favorited tweet
      #
      # @return [Array<Twitter::Tweet>]
      def function;Fi[	@#iI"|      
      # A collection of tweets that mention a user
      #
      # @return [Array<Twitter::Tweet>]
      def function;Fi[	@Oi
I"ü    class Reply < Twitter::Action::Tweet
      # A collection of tweets that reply to a user
      #
      # @return [Array<Twitter::Tweet>]
      def function;Fi[	@OiI"Ç      
      # A collection that contains the replied-to tweets
      #
      # @return [Array<Twitter::Tweet>]
      def function;Fi[	@(i
I"é    class Retweet < Twitter::Action::Tweet
      # A collection of retweets
      #
      # @return [Array<Twitter::Tweet>]
      def function;Fi[	I"# @return [Twitter::User];F@Ei
[
[	@#iI"}      # The user who mentioned a user
      #
      # @return [Twitter::User]
      def function
        @var = sources.first;Fi[	@ﬁiI"é    alias "LITERAL" "LITERAL"
    
    # @return [Twitter::User]
    def function
      @var ||= Twitter::User.fetch_or_new(@attrs["LITERAL"]);Fi[	@ﬁiI"}    end
    
    # @return [Twitter::User]
    def function
      @var ||= Twitter::User.fetch_or_new(@attrs["LITERAL"]);Fi[	@·iI"„    attr_reader("LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL")
    
    # @return [Twitter::User]
    def function
      @var ||= Twitter::User.fetch_or_new(@attrs["LITERAL"]);Fi[	@îiÉI"ë    end
    
    # @return [Twitter::User]
    def function
      @var ||= fetch_or_new_without_self(Twitter::User, @attrs, "LITERAL", "LITERAL");Fi[	@rI"module Strategies;Fi
[
[	@äiI"irequire("devise/strategies/base")
module Devise
  module Strategies
    class Authenticatable < Base;Fi[	I"4projects//devise_proj/devise/strategies/base.rb;Ti I"Rmodule Devise
  module Strategies
    class Base < ::Warden::Strategies::Base;Fi [	I"Hprojects//devise_proj/devise/strategies/database_authenticatable.rb;TiI"Çrequire("devise/strategies/authenticatable")
module Devise
  module Strategies
    class DatabaseAuthenticatable < Authenticatable;Fi[	@iI"|require("devise/strategies/authenticatable")
module Devise
  module Strategies
    class Rememberable < Authenticatable;Fi[	@iI"yrequire("devise/strategies/base")
module Devise
  module Strategies
    class TokenAuthenticatable < Authenticatable;Fi[	I""def self.required_fields(var);F@~i
[
[	@√iI"N      end
      
      def self.required_fields(var)
        []
      end;Fi[	@~iI"i      extend(ActiveSupport::Concern)
      
      def self.required_fields(var)
        []
      end;Fi[	@Éi
I"i      extend(ActiveSupport::Concern)
      
      def self.required_fields(var)
        []
      end;Fi[	@àiI"i      extend(ActiveSupport::Concern)
      
      def self.required_fields(var)
        []
      end;Fi[	@i
I"í      VALIDATIONS = ["LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL"].freeze
      
      def self.required_fields(var)
        []
      end;Fi[	@(@‘i
[
[	@„iI"}      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@„i]I"}      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@„irI"}      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@„iÑI"}      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@„iôI"t      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	I"warn("STRING");FI"exit("LITERAL");Fi
[
[	@[iI"ù      @options["LITERAL"] ||= default_identifier
      unless File.exists?(@options["LITERAL"]) then
        warn("STRING")
        exit("LITERAL")
      end;Fi[	@[iI"≠      end
      if ([@options["LITERAL"], @options["LITERAL"], @options["LITERAL"]].compact.length > "LITERAL") then
        warn("STRING")
        exit("LITERAL")
      end;Fi[	@[iI"      end
      unless @options["LITERAL"].to_s =~ "LITERAL" then
        warn("STRING")
        exit("LITERAL")
      end;Fi[	@[iYI"≠    def function
      if read_crontab.=~(Regexp.new("STRING")) and read_crontab.=~(Regexp.new("STRING")).nil? then
        warn("STRING")
        exit("LITERAL")
      else;Fi[	@[i]I"Æ      else
        if read_crontab.=~(Regexp.new("STRING")).nil? and read_crontab.=~(Regexp.new("STRING")) then
          warn("STRING")
          exit("LITERAL")
        end;Fi[	I" Rails.logger.info("STRING");FI"return;Fi
[
[	@#i/I"r  def function(var, var)
    if self.target.nil? then
      Rails.logger.info("STRING")
      return
    else;Fi[	@#i:I"p          self.perform(var)
        else
          Rails.logger.info("STRING")
          return
        end;Fi[	I"1projects//diaspora_proj/models/retraction.rb;Ti8I"°    if (self.type == "STRING") then
      unless (self.person.guid.to_s == self.post_guid.to_s) then
        Rails.logger.info("STRING")
        return
      end;Fi[	@–iUI"r  def function(var, var)
    if self.target.nil? then
      Rails.logger.info("STRING")
      return
    else;Fi[	@–i[I"f        self.perform(var)
      else
        Rails.logger.info("STRING")
        return
      end;Fi[	@pI"#   person.name = 'Bob';Fi
[
[	@i2I"{      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob'
      #   person.name          # => "Bob";Fi[	@iVI"{      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob'
      #   person.name          # => "Bob";Fi[	@iíI"}      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob'
      #   person.name            # => "Bob";Fi[	@i÷I"~      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob'
      #   person.name        # => "Bob";Fi[	@i˘I"}      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob'
      #   person.name_short? # => true;Fi[	I"#       event :park do;FI",#         transition :idling => :parked;Fi
[
[	@ÒiI"õ    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :park do
    #         transition :idling => :parked
    #       end;Fi[	@Òi@I"õ    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :park do
    #         transition :idling => :parked
    #       end;Fi[	@¯iFI"x    #       end
    #       
    #       event :park do
    #         transition :idling => :parked
    #       end;Fi[	@¯ixI"x    #       end
    #       
    #       event :park do
    #         transition :idling => :parked
    #       end;Fi[	@i£I"x    #       end
    #       
    #       event :park do
    #         transition :idling => :parked
    #       end;Fi[	@©&@e
i
[
[	@ÒiI"í    #     state_machine :initial => :parked do
    #       event :park do
    #         transition :idling => :parked
    #       end
    #       ;Fi[	@ÒiAI"í    #     state_machine :initial => :parked do
    #       event :park do
    #         transition :idling => :parked
    #       end
    #       ;Fi[	@¯iGI"v    #       
    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end;Fi[	@¯iyI"v    #       
    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end;Fi[	@i§I"v    #       
    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end;Fi[	@∫@.%i
[
[	@≈iI"W      attr_accessor("LITERAL")
      
      ##
      # Server credentials
      ##;Fi[	@[iI"W      attr_accessor("LITERAL")
      
      ##
      # Server credentials
      ##;Fi[	@piI"W      attr_accessor("LITERAL")
      
      ##
      # Server credentials
      ##;Fi[	@siI"W      attr_accessor("LITERAL")
      
      ##
      # Server credentials
      ##;Fi[	@liI"a        attr_accessor("LITERAL")
        
        ##
        # Server credentials
        ##;Fi[	@±@Ri
[
[	@•ièI"R      
      # @see Base#render
      def function(var)
        var
      end;Fi[	I"8projects//jekyll_proj/jekyll/converters/identity.rb;TiI"9    end
    
    def function(var)
      var
    end;Fi[	@“&iI"9    end
    
    def function(var)
      var
    end;Fi[	I"Gprojects//paperclip_proj/paperclip/io_adapters/identity_adapter.rb;TiI"gmodule Paperclip
  class IdentityAdapter < AbstractAdapter
    def function(var)
      var
    end;Fi[	@Ri+I"^    
    # Always returns the given set of values
    def function(var)
      var
    end;Fi[	I"def self.included(var);FI"var.extend(ClassMethods);Fi
[
[	@UiI"v  module Configuration
    module Helpers
      def self.included(var)
        var.extend(ClassMethods)
      end;Fi[	@bi0I"[  
  module Gradient
    def self.included(var)
      var.extend(ClassMethods)
    end;Fi[	@iI"x      end
      
      def self.included(var)
        var.extend(ClassMethods)
        assert_validations_api!(var);Fi[	I"/projects//paperclip_proj/paperclip/glue.rb;Ti
I"}module Paperclip
  module Glue
    def self.included(var)
      var.extend(ClassMethods)
      var.send("LITERAL", Callbacks);Fi[	@Ω iI"s  module Failure
    module Thoughtbot
      def self.included(var)
        var.extend(ClassMethods)
      end;Fi[	@æI"when Array then;Fi
[
[	@EiCI"ö      var = @controller.request.env
      var ||= {}
      case var
      when Array then
        if (var.first == "LITERAL") and intercept_401?(var) then;Fi[	@cimI"π      def function(var, var)
        var = with_output_buffer_without_haml_xss(*var, &var)
        case var
        when Array then
          var.map { |var| Haml::Util.html_safe(var) };Fi[	@ÂiI"g    var = []
    var.each do |var|
      case var
      when Array then
        if var.empty? then;Fi[	@Âi>I"Ç    var = []
    var.each do |var|
      case var
      when Array then
        var.each { |var| (var << install_symlink_p(var)) };Fi[	@fiI"á      
      def self.modify_keys(var, var)
        case var
        when Array then
          var.map { |var| modify_keys(var, &var) };Fi[	I"%#         transition all => :off;F@e
i
[
[	@¯iQI"r    #       
    #       event :disable do
    #         transition all => :off
    #       end
    #     end;Fi[	@¯i~I"r    #       
    #       event :disable do
    #         transition all => :off
    #       end
    #     end;Fi[	@iïI"ù    #     state_machine :alarm_state, :initial => :active do
    #       event :disable do
    #         transition all => :off
    #       end
    #     end;Fi[	@i∆I"s    #       
    #       event :turn_off do
    #         transition all => :off
    #       end
    #     end;Fi[	@i–I"s    #       
    #       event :turn_off do
    #         transition all => :off
    #       end
    #     end;Fi[	@˝@Î#i
[
[	@ßiI"j  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?);Fi[	@ßi'I"l  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!);Fi[	@ßiQI"j  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?);Fi[	@ßi_I"l  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!);Fi[	@ßimI"l  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!);Fi[	I"-var.change_make_var!("STRING", "STRING");FI" assert_equal("STRING", var);Fi
[
[	@ÖiI"é    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@ÖiI"é    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@ÖiI"é    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@Öi I"é    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@Öi'I"é    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@∑@'i
[
[	@Öi
I"ó  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var);Fi[	@ÖiI"ó  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var);Fi[	@ÖiI"ó  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var);Fi[	@ÖiI"ó  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var);Fi[	@Öi&I"ó  def function
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var);Fi[	@@‚%i
[
[	@æi=I"¿      # the user straight in session. This option is useful in cases the user is already
      # signed in, but we want to refresh the credentials in session.
      #
      # Examples:
      #;Fi[	@æiXI"´      # after deleting accounts. Returns true if there was a logout and false if there
      # is no user logged in on the referred scope
      #
      # Examples:
      #;Fi[	@EiI"õ    # sign_in a given resource by storing its keys in the session.
    # This method bypass any warden authentication callback.
    #
    # Examples:
    #;Fi[	@Ei.I"ñ    # Sign out a given resource or scope by calling logout on Warden.
    # This method bypass any warden logout callback.
    #
    # Examples:
    #;Fi[	@<i
I"ƒ      # Ensures that the given instance or class validates the size of the
      # given attachment as specified.
      #
      # Examples:
      #   it { should validate_attachment_size(:avatar).;Fi[	@±I"load_defaults!;Fi
[
[	@∞iI"ä      ##
      # Creates a new instance of Backup::Compressor::Bzip2
      def function(var)
        load_defaults!
        @var ||= false;Fi[	@”$iI"ê      ##
      # Initializes a new custom compressor.
      def function(var)
        load_defaults!
        instance_eval(&var) if block_given?;Fi[	@≥iI"â      ##
      # Creates a new instance of Backup::Compressor::Gzip
      def function(var)
        load_defaults!
        @var ||= false;Fi[	@∂iI"â      ##
      # Creates a new instance of Backup::Compressor::Lzma
      def function(var)
        load_defaults!
        @var ||= false;Fi[	@πiI"ã      ##
      # Creates a new instance of Backup::Compressor::Pbzip2
      def function(var)
        load_defaults!
        @var ||= false;Fi[	@±@$i
[
[	@Ci/I"ü      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var = case var
        when "LITERAL" then;Fi[	@Ji-I"ü      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var = case var
        when "LITERAL" then;Fi[	@Qi7I"ü      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var = case var
        when "LITERAL" then;Fi[	@Xi+I"ü      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var = case var
        when "LITERAL" then;Fi[	@πiII"L  end
  
  def function(var)
    var = case var
    when "LITERAL" then;Fi[	@≤I"@var = false;Fi
[
[	@œiTI"ô    def function(var, var)
      @var = (var.rstrip.split("LITERAL") + ["LITERAL", "LITERAL"])
      @var = var
      @var = false
      @var = "LITERAL";Fi[	@îiI"{  def function(var, var)
    @var = var
    @var = var
    @var = false
    @var = (ARGV.ignore_deps? or ARGV.interactive?);Fi[	@¿i0I"o          check_encoding(var)
          @var = var
          @var = var
          @var = false
        end;Fi[	@€iI"\    def function(var, var)
      @var = var
      @var = var
      @var = false
    end;Fi[	@ﬁiI"s      @var = "STRING"
      @var = var
      @var = var
      @var = false
      @redis.sadd("LITERAL", @name);Fi[	@Á @äi
[
[	@iŸI"v    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end;Fi[	@iÁI"v    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end;Fi[	@i¯I"v    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end;Fi[	@iI"v    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end;Fi[	@i\I"ó    #     attr_accessor :state
    #     
    #     state_machine :state, :initial => :parked do
    #       ...
    #       state :parked, :value => 0;Fi[	@	@i
[
[	@…iI"T    when String, Array then
      var.length.zero?
    else
      false
    end;Fi[	@aivI"õ        if unlock_strategy_enabled?("LITERAL") then
          locked_at and (locked_at < self.class.unlock_in.ago)
        else
          false
        end;Fi[	@√iãI"Ö    if self.hidden_shareables.has_key?(var) then
      self.hidden_shareables[var].include?(var.id.to_s)
    else
      false
    end;Fi[	@√iLI"a      Postzord::Dispatcher.build(self, profile).post
      true
    else
      false
    end;Fi[	@i@I"ç      if (var.length == var.length) then
        TransitionCollection.new(var, "LITERAL" => (var)).perform
      else
        false
      end;Fi[	@	@Ñi
[
[	@i9I"i        when "LITERAL" then
          nil
        else
          begin
            Kernel.Float(var);Fi[	@ziAI"h      if @tarball_path.exist? then
        puts("STRING")
      else
        begin
          _fetch;Fi[	I"#projects//homebrew_proj/tab.rb;TiI"Ç    if var.exist? then
      self.from_file(var)
    else
      begin
        self.dummy_tab(Formula.factory(var.parent.basename));Fi[	@Pi(I"R  if ARGV.verbose? then
    yield
  else
    begin
      (var = $stderr.clone;Fi[	I",projects//omni_proj/omniauth/builder.rb;Ti&I"Ç      if var.is_a?(Class) then
        var = var
      else
        begin
          var = OmniAuth::Strategies.const_get("STRING");Fi[	@É@√ i
[
[	@≤iI"Orequire("rubygems")
require("sequel")
require("fileutils")
require("yaml");Fi[	@πiI"Orequire("rubygems")
require("sequel")
require("fileutils")
require("yaml");Fi[	@QiI"Orequire("rubygems")
require("sequel")
require("fileutils")
require("yaml");Fi[	@ÕiI"Orequire("rubygems")
require("sequel")
require("fileutils")
require("yaml");Fi[	@‘iI"Orequire("rubygems")
require("sequel")
require("fileutils")
require("yaml");Fi[	I"L# Skips defining reader/writer methods since this is done automatically;F@Ei
[
[	@èiäI"â      end
      
      # Skips defining reader/writer methods since this is done automatically
      def function
        var = self.name;Fi[	@kiYI"ª      end
      
      # Skips defining reader/writer methods since this is done automatically
      def function
        owner_class.property(attribute, String) unless attribute_property;Fi[	@¸i-I"±      end
      
      # Skips defining reader/writer methods since this is done automatically
      def function
        owner_class.key(attribute, String) unless attribute_key;Fi[	@i1I"ƒ      end
      
      # Skips defining reader/writer methods since this is done automatically
      def function
        owner_class.field(attribute, "LITERAL" => (String)) unless attribute_field;Fi[	@õiMI"â      end
      
      # Skips defining reader/writer methods since this is done automatically
      def function
        var = self.name;Fi[	@@i
[
[	@≠isI"j      #
      # The given path will be expanded before use.
      #
      # @return [String]
      ##;Fi[	@≠iI"~      #
      # Use of this option will override the use of {#passphrase_file}.
      #
      # @return [String]
      ##;Fi[	@≠iI"L      #     end
      #   end
      #
      # @return [String]
      ##;Fi[	@œiI"Œ    # The string that holds the compiled HTML. This is aliased as
    # `_erbout` for compatibility with ERB-specific code.
    #
    # @return [String]
    # The options hash passed in from {Haml::Engine}.;Fi[	@<i$I"«    # or `nil` if the indentation is ambiguous
    # (for example, for a single-level document).
    #
    # @return [String]
    # Tilt currently depends on these moved methods, provide a stable API;Fi[	@“@ei
[
[	@si
I"å      attr_accessor("LITERAL")
      
      def function(var, var, var)
        super
        @var = Manifest.new(manifest_file, var) if var;Fi[	@´%iI"u    # 1. name
    # 2. name=value
    def function(var, var, var)
      super
      if var.strip.=~(SYNTAX) then;Fi[	@ƒiI"vmodule Jekyll
  class IncludeTag < Liquid::Tag
    def function(var, var, var)
      super
      @var = var.strip;Fi[	I"2projects//jekyll_proj/jekyll/tags/post_url.rb;TiI"h  
  class PostUrl < Liquid::Tag
    def function(var, var, var)
      super
      @var = var.strip;Fi[	@˝iI"Ã    #   +format+ - the desired filename extension
    #   +animated+ - whether to merge all the layers in the image. Defaults to true
    def function(var, var, var)
      super
      var = var["LITERAL"];Fi[	@±I"@var ||= {};Fi
[
[	@siXI"›      # The block will be passed the root-relative url of the asset.
      # When called without a block, returns the block that was previously set.
      def function(var)
        @var ||= {}
        if block_given? then;Fi[	@i}I"g        end
        
        def function(var)
          @var ||= {}
          send("STRING", nil);Fi[	@iI"h        end
        
        def function(var)
          @var ||= {}
          @set_attributes[var];Fi[	I";projects//paperclip_proj/paperclip/instance_methods.rb;TiI"Ømodule Paperclip
  module InstanceMethods
    def function(var)
      @var ||= {}
      @_paperclip_attachments[var] ||= Attachment.new(var, self, attachment_definitions[var]);Fi[	@…i%I"s  
  module ProcessorHelpers
    def function(var)
      @var ||= {}
      if @known_processors[var.to_s] then;Fi[	I"@(var << Thread.new { search_tap("STRING", "STRING", var) });F@√'i
[
[	@πi(I"˜          var = []
          var = []
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) });Fi[	@πi)I"*          var = []
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) });Fi[	@πi*I"]          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) });Fi[	@πi+I"]          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) });Fi[	@πi,I"G          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          (var << Thread.new { search_tap("STRING", "STRING", var) })
          var.each { |var| (var << var.value) };Fi[	@E@b#i
[
[	@Ãi5I"ç    def self.post_to_hash(var, var)
      case var["STRING"]
      when "STRING" then
        var = var["STRING"]
        var = var["STRING"];Fi[	@Ãi<I"‹        var = "STRING"
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?
      when "STRING" then
        var = var["STRING"]
        var = var.keys.map { |var| var.gsub("STRING", "STRING").to_i }.max;Fi[	@ÃiMI"}          var = var.at["STRING"]
        end
      when "STRING" then
        var = var["STRING"]
        var = "STRING";Fi[	@ÃiQI"®        var = "STRING"
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?
      when "STRING" then
        var = var["STRING"]
        var = "STRING";Fi[	@ÃiVI"´        var["STRING"]["STRING"].each { |var| (var << "STRING") }
        (var << "STRING")
      when "STRING" then
        var = var["STRING"]
        var = var["STRING"];Fi[	@E@ˇi
[
[	@tiI"  when "STRING", "STRING" then
    "STRING".undent
  when "STRING" then
    "STRING".undent
  when "STRING", "STRING" then;Fi[	@tiI"Ñ  when "STRING", "STRING" then
    "STRING".undent
  when "STRING" then
    "STRING".undent
  when "STRING", "STRING", "STRING" then;Fi[	@tiI"  when "STRING", "STRING", "STRING" then
    "STRING".undent
  when "STRING" then
    "STRING".undent
  when "STRING" then;Fi[	@tiI"l  when "STRING" then
    "STRING".undent
  when "STRING" then
    "STRING".undent
  when "LITERAL" then;Fi[	@tiI"W  when "LITERAL" then
    "STRING"
  when "STRING" then
    "STRING".undent
  else;Fi[	I"J# Creates a scope for finding records *without* a particular state or;F@"i
[
[	@ÔiNI"ï      end
      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var);Fi[	@ki|I"ï      end
      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var);Fi[	@¸iGI"ï      end
      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var);Fi[	@iKI"ï      end
      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var);Fi[	@õixI"ï      end
      
      # Creates a scope for finding records *without* a particular state or
      # states for the attribute
      def function(var);Fi[	I"# @note Undocumented;F@˛i
[
[	@iI"å      # Returns activity about me
      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@i"I"é      # Returns activity by friends
      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@i0I"x      end
      
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@iNI"ó      # Returns activity summary for a Tweet
      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@iaI"ñ      # Returns activity summary for Tweets
      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	I"G# Creates a scope for finding records *with* a particular state or;F@"i
[
[	@ÔiHI"í      end
      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var);Fi[	@kivI"í      end
      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var);Fi[	@¸iAI"í      end
      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var);Fi[	@iEI"í      end
      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var);Fi[	@õirI"í      end
      
      # Creates a scope for finding records *with* a particular state or
      # states for the attribute
      def function(var);Fi[	@ @i
[
[	@i™I"m          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING");Fi[	@i≠I"m          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING");Fi[	@πiI"p          unless var.empty? then
            puts
            puts("STRING")
            puts
          end;Fi[	@Ji&I"c      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts
      puts("STRING");Fi[	@Ji)I"J      puts
      puts("STRING")
      puts("STRING")
      puts
  end;Fi[	@	@Q#i
[
[	I">projects//diaspora_proj/controllers/aspects_controller.rb;TiI"ã        end
      end
    else
      respond_to do |var|
        var.js { render("LITERAL" => (I18n.t("STRING")), "LITERAL" => "LITERAL") };Fi[	@Ôi+I"å        var.mobile { redirect_to(@comment.post) }
      end
    else
      respond_to do |var|
        var.mobile { redirect_to("LITERAL") };Fi[	I"Fprojects//diaspora_proj/controllers/status_messages_controller.rb;Ti<I"i        end
      end
    else
      respond_to do |var|
        var.html { redirect_to("LITERAL") };Fi[	@i%I"f        end
      end
    else
      respond_to do |var|
        var.any("LITERAL", "LITERAL") do;Fi[	I";projects//diaspora_proj/controllers/tags_controller.rb;TiI"«        var.json { render("LITERAL" => (@tags.to_json), "LITERAL" => "LITERAL") }
      end
    else
      respond_to do |var|
        var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") };Fi[	@ÑI"(log("STRING");Fi
[
[	@ıi&I"ô      def function
        @queued_for_delete.each do |var|
          begin
            (log("STRING")
            FileUtils.rm(var) if File.exist?(var));Fi[	@^isI"}      
      def function(var, var)
        begin
          (log("STRING")
          ::File.open(var, "STRING") do |var|;Fi[	@äiøI"±      def function
        @queued_for_write.each do |var, var|
          begin
            (log("STRING")
            var = (@s3_permissions[var] or @s3_permissions["LITERAL"]);Fi[	@äi›I"™      def function
        @queued_for_delete.each do |var|
          begin
            (log("STRING")
            s3_bucket.objects[var.sub("LITERAL", "STRING")].delete);Fi[	@äiËI"z      
      def function(var, var)
        begin
          (log("STRING")
          var = ::File.open(var, "STRING");Fi[	@1 @1 i
[
[	@ìiI"P    
    def function
      @var = []
      @var = []
      @var = "STRING";Fi[	@±ioI"I  def function(var)
    @var = var
    @var = []
    @var = []
  end;Fi[	@0iI"g        def function(var)
          @var = var
          @var = []
          @var = []
        end;Fi[	@·iÆI"`    # or are subclassing machines.
    def function
      @var = []
      @var = []
    end;Fi[	@Li,I"|      var = @nodes
      var = @contexts
      @var = []
      @var = []
      @var = @indices.inject({}) do |var, var|;Fi[	@Œ	I"module CSS;Fi
[
[	@∑i I"0module Nokogiri
  module CSS
    class Node;Fi [	@=iI"|require("racc/parser.rb")
require("nokogiri/css/parser_extras")
module Nokogiri
  module CSS
    class Parser < Racc::Parser;Fi[	I"9projects//nokogiri_proj/nokogiri/css/syntax_error.rb;TiI"rrequire("nokogiri/syntax_error")
module Nokogiri
  module CSS
    class SyntaxError < ::Nokogiri::SyntaxError;Fi[	@i I"5module Nokogiri
  module CSS
    class Tokenizer;Fi [	@‹i I"8module Nokogiri
  module CSS
    class XPathVisitor;Fi [	I"6# Gets the db default for the machine's attribute;F@Ei
[
[	@Ôi!I"’      end
      
      # Gets the db default for the machine's attribute
      def function
        if owner_class.connected? and (owner_class.table_exists? and var = owner_class.columns_hash[attribute.to_s]) then;Fi[	@kiCI"ï      end
      
      # Gets the db default for the machine's attribute
      def function
        attribute_property and attribute_property.default;Fi[	@¸iI"ë      end
      
      # Gets the db default for the machine's attribute
      def function
        attribute_key and attribute_key.default_value;Fi[	@i I"è      end
      
      # Gets the db default for the machine's attribute
      def function
        attribute_field and attribute_field.default;Fi[	@õifI"“      end
      
      # Gets the db default for the machine's attribute
      def function
        if owner_class.db.table_exists?(owner_class.table_name) and var = owner_class.db_schema[attribute.to_sym] then;Fi[	@I"3#   person.errors.add(:name, "can't be blank");Fi
[
[	@7ieI"    # Yields the attribute and the error for that attribute. If the attribute
    # has more than one error message, yields once for each error message.
    #
    #   person.errors.add(:name, "can't be blank")
    #   person.errors.each do |attribute, error|;Fi[	@7iuI"ã    
    # Returns the number of error messages.
    #
    #   person.errors.add(:name, "can't be blank")
    #   person.errors.size # => 1;Fi[	@7iäI"ø    
    # Returns an array of error messages, with the attribute name included.
    #
    #   person.errors.add(:name, "can't be blank")
    #   person.errors.add(:name, "must be specified");Fi[	@7iìI"å    
    # Returns the number of error messages.
    #
    #   person.errors.add(:name, "can't be blank")
    #   person.errors.count # => 1;Fi[	@7i©I"≈    # aliases empty?
    # Returns an xml formatted representation of the Errors hash.
    #
    #   person.errors.add(:name, "can't be blank")
    #   person.errors.add(:name, "must be specified");Fi[	@˜@@i
[
[	@ziI"ë      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy;Fi[	@ziI"é      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      FossilDownloadStrategy;Fi[	@zi
I"ë      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy;Fi[	@ziI"í      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy;Fi[	@ziI"ò      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      CurlApacheMirrorDownloadStrategy;Fi[	I"J# Defines an initialization hook into the owner class for setting the;FI"J# initial state of the machine *before* any attributes are set on the;Fi
[
[	@Ôi(I"∑      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object;Fi[	@kiRI"∑      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object;Fi[	@¸i&I"∑      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object;Fi[	@i*I"∑      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object;Fi[	@õiFI"∑      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object;Fi[	I"require("twitter/error");F@ôi
[
[	@ni I":require("twitter/error")
module Twitter
  class Error;Fi [	@´i I":require("twitter/error")
module Twitter
  class Error;Fi [	@Æi I":require("twitter/error")
module Twitter
  class Error;Fi [	@∑i I":require("twitter/error")
module Twitter
  class Error;Fi [	@√i I":require("twitter/error")
module Twitter
  class Error;Fi [	I"@var ||= Array.new;F@í(i
[
[	@Ii2I"|      def function(var, var)
        super(var)
        @var ||= Array.new
        @var ||= Array.new
        @var ||= false;Fi[	@ki+I"Ä      def function(var, var)
        super(var)
        @var ||= Array.new
        @var ||= Array.new
        @var ||= Array.new;Fi[	@ki,I"è        super(var)
        @var ||= Array.new
        @var ||= Array.new
        @var ||= Array.new
        instance_eval(&var) if block_given?;Fi[	@ni,I"Ä      def function(var, var)
        super(var)
        @var ||= Array.new
        @var ||= Array.new
        @var ||= Array.new;Fi[	@ni-I"è        super(var)
        @var ||= Array.new
        @var ||= Array.new
        @var ||= Array.new
        instance_eval(&var) if block_given?;Fi[	@x(I"# object;Fi
[
[	@Ôi)I"¿      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function;Fi[	@kiSI"¿      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function;Fi[	@¸i'I"¿      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function;Fi[	@i+I"¿      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function;Fi[	@õiGI"¿      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function;Fi[	I"module ClassMethods;F@±i
[
[	I"Sprojects//activemodel_proj/active_model/deprecated_mass_assignment_security.rb;Ti	I"t    extend(ActiveSupport::Concern)
    
    module ClassMethods
      def function(var)
        raise("STRING");Fi[	@iI"e      end
      
      module ClassMethods
        def function(var)
          var.each do |var|;Fi[	@bi4I"^    end
    
    module ClassMethods
      def function(var)
        class_eval("STRING");Fi[	@æiI"π      included { helper_method("LITERAL", "LITERAL", "LITERAL") }
      
      module ClassMethods
        def function(var)
          var["LITERAL"] ||= "LITERAL" unless var["LITERAL"];Fi[	@.i-I"î      end
      
      module ClassMethods
        def function(var)
          find_for_authentication("LITERAL" => (var[token_authentication_key]));Fi[	@e@	i
[
[	@iaI"†    def function(var, var, var)
      if respond_to_without_attributes?(var, true) then
        super
      else
        var = match_attribute_method?(var.to_s);Fi[	@aiYI"ö      def function
        if Devise.paranoid then
          super
        else
          if lock_strategy_enabled?("LITERAL") and attempts_exceeded? then;Fi[	@RiI"©        def self.new(var, var)
          if ["LITERAL", "LITERAL"].all? { |var| var.respond_to?(var) } then
            super
          else
            memory(var, var);Fi[	@Ä'i
I"a    def function(var, var)
      if rack14? then
        super
      else
        @var = var;Fi[	@îi'I"µ        def function(var, var, var, var)
          if defined? I18n then
            super
          else
            var.errors.add(self.attribute(var), generate_message(var, var));Fi[	@ü(@Ei
[
[	@Ôi*I"·      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_static_state_initializer;Fi[	@kiTI"      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"));Fi[	@¸i(I"      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"));Fi[	@i,I"      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"));Fi[	@õiHI"      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"));Fi[	@S$@i
[
[	@—i4I"d    # date - The Time to format.
    #
    # Examples
    #
    #   date_to_xmlschema(Time.now);Fi[	@—iCI"i    # input - The String to escape.
    #
    # Examples
    #
    #   xml_escape('foo "bar" <baz>');Fi[	@—iRI"f    # input - The String to escape.
    #
    # Examples
    #
    #   cgi_escape('foo,bar;baz?');Fi[	@—inI"à    # array - The Array of Strings to join.
    #
    # Examples
    #
    #   array_to_sentence_string(["apples", "oranges", "grapes"]);Fi[	@ıiÂI"}    # post_attr - The String name of the Post attribute.
    #
    # Examples
    #
    #   post_attr_hash('categories');Fi[	@%@i
[
[	@„iÚI"9      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #
      # Also see related method +<<+.;Fi[	@„iI"=      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #
      # Also see related method +before+.;Fi[	@„iI"<      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #
      # Also see related method +after+.;Fi[	@„iMI"A      # +node_or_tags+ can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #
      # Also see related method +inner_html=+;Fi[	@„i_I";      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).
      #
      # Also see related method +swap+.;Fi[	I"0var = Node.new("LITERAL", [var["LITERAL"]]);F@Ri	[	[	@=iãI"Ö      # reduce 20 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var
      end;Fi[	@=iI"w      
      def function(var, var, var)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var
      end;Fi[	@=i"I"w      
      def function(var, var, var)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var
      end;Fi[	@=itI"w      
      def function(var, var, var)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var
      end;Fi[	@ª@í(i	[	[	@Ii1I"£      # Creates a new instance of the MongoDB database object
      def function(var, var)
        super(var)
        @var ||= Array.new
        @var ||= Array.new;Fi[	@ki*I"†      # Creates a new instance of the MySQL adapter object
      def function(var, var)
        super(var)
        @var ||= Array.new
        @var ||= Array.new;Fi[	@ni+I"ö      # so it doesn't prompt and hang in the process
      def function(var, var)
        super(var)
        @var ||= Array.new
        @var ||= Array.new;Fi[	@Li'I"≤      # Creates a new instance of the Redis database object
      def function(var, var)
        super(var)
        @var ||= Array.new
        instance_eval(&var) if block_given?;Fi[	I"*require("twitter/error/server_error");F@ôi	[	[	@£i I"Grequire("twitter/error/server_error")
module Twitter
  class Error;Fi [	@¥i I"Grequire("twitter/error/server_error")
module Twitter
  class Error;Fi [	@∫i I"Grequire("twitter/error/server_error")
module Twitter
  class Error;Fi [	@∆i I"Grequire("twitter/error/server_error")
module Twitter
  class Error;Fi [	I"# Connectivity options;F@∫i	[	[	@Ii!I"à      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # IPv6 support (disabled by default);Fi[	@kiI"è      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Tables to skip while dumping the database;Fi[	@niI"è      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Tables to skip while dumping the database;Fi[	@LiI"¶      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Determines whether Backup should invoke the SAVE command through;Fi[	I"Ivar = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten);F@Ri	[	[	@=i≈I"ã      
      def function(var, var, var)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var
      end;Fi[	@=i I"ã      
      def function(var, var, var)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var
      end;Fi[	@=iœI"ã      
      def function(var, var, var)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var
      end;Fi[	@=i‘I"ã      
      def function(var, var, var)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var
      end;Fi[	I"-# Credentials for the specified database;F@∫i	[	[	@IiI"ì      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options;Fi[	@kiI"ü      # To dump all databases, set this to `:all` or leave blank.
      ##
      # Credentials for the specified database
      ##
      # Connectivity options;Fi[	@niI"ì      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options;Fi[	@LiI"ü      # Name of and path to the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options;Fi[	I""next if send(var).to_s.empty?;F@Fi	[	[	@IiâI"ö      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING");Fi[	@IiìI"ö      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING");Fi[	@kigI"§      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING");Fi[	@LigI"§      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING");Fi[	I"Bvar = Nokogiri::XML::ParseOptions.new(var) if Fixnum.===(var);FI"yield(var) if block_given?;Fi	[	[	@‡iTI"È        # Nokogiri::XML::ParseOptions.
        def function(var, var, var, var)
          var = Nokogiri::XML::ParseOptions.new(var) if Fixnum.===(var)
          yield(var) if block_given?
          if var.respond_to?("LITERAL") then;Fi[	@˛iI"Œ      
      def self.parse(var, var, var, var, var)
        var = Nokogiri::XML::ParseOptions.new(var) if Fixnum.===(var)
        yield(var) if block_given?
        var = if var.respond_to?("LITERAL") then;Fi[	@„i‹I"      def function(var, var)
        var ||= document.html? ? (ParseOptions::DEFAULT_HTML) : (ParseOptions::DEFAULT_XML)
        var = Nokogiri::XML::ParseOptions.new(var) if Fixnum.===(var)
        yield(var) if block_given?
        var = var.respond_to?("LITERAL") ? (var.read) : (var);Fi[	@„i!I"¸      # passed to it, allowing more convenient modification of the parser options.
      def function(var, var)
        var = Nokogiri::XML::ParseOptions.new(var) if Fixnum.===(var)
        yield(var) if block_given?
        process_xincludes(var.to_i);Fi[	I"if Nokogiri.jruby? then;FI"5var = var.first.is_a?(Hash) ? (var.shift) : ({});Fi	[	[	@ΩiYI"Í      # Convert this Builder object to XML
      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          var["LITERAL"] = Node::SaveOptions::AS_BUILDER if var["LITERAL"].!;Fi[	@i(I"¿      # See Nokogiri::XML::NodeSet#to_html
      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then;Fi[	@i6I"¡      # See Nokogiri::XML::NodeSet#to_xhtml
      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then;Fi[	@iıI"∫      # Convert this NodeSet to HTML
      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then;Fi[	I"((var << "STRING") if var["LITERAL"];F@Ái	[	[	@•iúI"‘        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING")
        var = "STRING"
        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        (var << "STRING") if var["LITERAL"];Fi[	@•iûI"ó        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        var;Fi[	@•i¨I"‘        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING")
        var = "STRING"
        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        (var << "STRING") if var["LITERAL"];Fi[	@•iÆI"ó        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        var;Fi[	@œ	I"module SAX;Fi	[	[	@
iI"Emodule Nokogiri
  module XML
    module SAX
      class Document;Fi[	@¿iI"Cmodule Nokogiri
  module XML
    module SAX
      class Parser;Fi[	@
iI"Jmodule Nokogiri
  module XML
    module SAX
      class ParserContext;Fi[	@√iI"Gmodule Nokogiri
  module XML
    module SAX
      class PushParser;Fi[	@I"%#     def attribute_short?(attr);Fi	[	[	@iPI"s      #
      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5;Fi[	@iåI"s      #
      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5;Fi[	@i–I"s      #
      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5;Fi[	@iÛI"s      #
      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5;Fi[	I"@var ||= "LITERAL";F@q!i	[	[	@≈iI"Ö      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false;Fi[	@[iI"Ö      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false;Fi[	@piI"ö      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[	@siI"ö      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[	I")# during the dumping of the database;F@Ei	[	[	@ki}I"æ      ##
      # Builds the MySQL syntax for specifying which tables to dump
      # during the dumping of the database
      def function
        only_tables.join("STRING") unless dump_all?;Fi[	@kiI"´      ##
      # Builds the MySQL syntax for specifying which tables to skip
      # during the dumping of the database
      def function
        skip_tables.map do |var|;Fi[	@nisI"…      ##
      # Builds the PostgreSQL syntax for specifying which tables to dump
      # during the dumping of the database
      def function
        only_tables.map { |var| "STRING" }.join("STRING");Fi[	@nizI"…      ##
      # Builds the PostgreSQL syntax for specifying which tables to skip
      # during the dumping of the database
      def function
        skip_tables.map { |var| "STRING" }.join("STRING");Fi[	@≠@Î!i	[	[	@∞iI"â        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING";Fi[	@≥iI"â        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING";Fi[	@∂iI"â        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING";Fi[	@πiI"â        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING";Fi[	@¨@¨i	[	[	@∂iI"à      def function(var)
        load_defaults!
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@πiI"x      def function(var)
        load_defaults!
        @var ||= false
        @var ||= false
        @var ||= false;Fi[	@πiI"á        load_defaults!
        @var ||= false
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@Ii4I"è        @var ||= Array.new
        @var ||= Array.new
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@7'@¨i	[	[	@∞iI"≠      # Creates a new instance of Backup::Compressor::Bzip2
      def function(var)
        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@≥iI"¨      # Creates a new instance of Backup::Compressor::Gzip
      def function(var)
        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@∂iI"ó      # Creates a new instance of Backup::Compressor::Lzma
      def function(var)
        load_defaults!
        @var ||= false
        @var ||= false;Fi[	@πiI"ô      # Creates a new instance of Backup::Compressor::Pbzip2
      def function(var)
        load_defaults!
        @var ||= false
        @var ||= false;Fi[	@@±i	[	[	I"+projects//twitter_proj/twitter/user.rb;Ti1I"Á    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mobile', 'mobile_retina', 'web', 'web_retina', 'ipad', or 'ipad_retina'
    # @return [String]
    def function(var)
      if profile_banner_url? then;Fi[	@•)i;I"
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mobile', 'mobile_retina', 'web', 'web_retina', 'ipad', or 'ipad_retina'
    # @return [String]
    def function(var)
      [@attrs["LITERAL"], var].join("STRING") if profile_banner_url?;Fi[	@•)iII"Ï    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mini', 'normal', 'bigger' or 'original'
    # @return [String]
    def function(var)
      insecure_url(profile_image_url_https(var)) if profile_image_url?;Fi[	@•)iQI"Ú    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mini', 'normal', 'bigger' or 'original'
    # @return [String]
    def function(var)
      resize_profile_image_url(@attrs["LITERAL"], var) if profile_image_url?;Fi[	I"puts(var);F@%i	[	[	@îi3I"X      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end;Fi[	@îiCI"X      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end;Fi[	@îiOI"X      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end;Fi[	@îi[I"X      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end;Fi[	@@∫i	[	[	@≠iaI"y      #
      # @see #gpg_homedir
      # @return [String]
      ##
      # Set the GnuPG home directory to be used.;Fi[	@≠itI"ß      # The given path will be expanded before use.
      #
      # @return [String]
      ##
      # Specifies a Hash of public key identifiers and their public keys.;Fi[	@≠iÒI"¥      # Use of this option will override the use of {#passphrase_file}.
      #
      # @return [String]
      ##
      # Specifies the passphrase file to use symmetric encryption.;Fi[	@≠iI"{      #   end
      #
      # @return [String]
      ##
      # Configures default accessor values for new class instances.;Fi[	@ @Æ)i	[	[	@îi2I"e      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true;Fi[	@îiBI"e      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true;Fi[	@îiNI"e      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true;Fi[	@îiZI"e      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true;Fi[	I"var = coerce(var);FI"$if var.is_a?(XML::NodeSet) then;Fi	[	[	@˛i≈I"≠      def function(var)
        raise("STRING") if root
        var = coerce(var)
        if var.is_a?(XML::NodeSet) then
          raise("STRING") if (var.size > "LITERAL");Fi[	@„iˆI"∞      # Also see related method +<<+.
      def function(var)
        var = coerce(var)
        if var.is_a?(XML::NodeSet) then
          var.each { |var| add_child_node(var) };Fi[	@„iiI"¶          return var.replace(var)
        end
        var = coerce(var)
        if var.is_a?(XML::NodeSet) then
          var.each { |var| add_previous_sibling(var) };Fi[	@„i3I"”        var = (var == "LITERAL") ? ("LITERAL") : ("LITERAL")
        var = (var == "LITERAL") ? ("LITERAL") : ("LITERAL")
        var = coerce(var)
        if var.is_a?(XML::NodeSet) then
          if text? then;Fi[	@	I"if var then;Fi	[	[	@uiéI"q                end
              end
            else
              if var then
                if var then;Fi[	I"5projects//diaspora_proj/models/status_message.rb;TiTI"≤      if var["LITERAL"] then
        var ? (ERB::Util.h(var.name)) : (ERB::Util.h($~["LITERAL"]))
      else
        if var then
          person_link(var, "LITERAL" => "STRING");Fi[	@ÃiàI"~          var = "STRING"
          var = var
        else
          if var then
            var = "STRING" if var =~ "LITERAL";Fi[	@#iXI"†          @var = var
          parse_time
        else
          if var then
            if (@at.is_a?(Time) or (@at.is_a?(Numeric) and (@at > "LITERAL"))) then;Fi[	@I"#   user = User.find(1);Fi	[	[	@^iI"¨      # after the object's type. The default value for <tt>include_root_in_json</tt>
      # option is +false+.
      #
      #   user = User.find(1)
      #   user.as_json;Fi[	@^i(I"±      # This behavior can also be achieved by setting the <tt>:root</tt> option
      # to +true+ as in:
      #
      #   user = User.find(1)
      #   user.as_json(root: true);Fi[	@^i0I"û      # Without any +options+, the returned Hash will include all the model's
      # attributes.
      #
      #   user = User.find(1)
      #   user.as_json;Fi[	@ai®I"£      # Without any +options+, the returned XML string will include all the
      # model's attributes.
      #
      #   user = User.find(1)
      #   user.to_xml;Fi[	@	@‡i	[	[	@Ri.I"o                rm_rf(var)
              end
            else
              opoo("STRING")
            end;Fi[	@Ri1I"i              opoo("STRING")
            end
          else
            opoo("STRING")
          end;Fi[	@·i{I"_        opoo("STRING")
        ENV.gcc
      else
        opoo("STRING")
        ENV.clang;Ti[	@yiI"æ                if var and var.exist? then
                  system(MacOS.locate("STRING"), "STRING", var, var, var)
                else
                  opoo("STRING")
                end;Fi[	I"var[QUERY].each do |var|;F@•i	[	[	@≤iI"ª      FileUtils.mkdir_p("STRING")
      File.open("STRING", "STRING") { |var| var.puts("STRING") }
      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@¿iI"Î      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@QiI"      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"].gsub("LITERAL", "STRING");Fi[	@ÕiI"Î      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	I"ovar = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING");FI" FileUtils.mkdir_p("STRING");Fi	[	[	@πiI"Í  module Joomla
    def self.process(var, var, var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var = "STRING";Fi[	@¿iI"ﬂ    
    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|;Fi[	@QiI"ﬂ    
    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|;Fi[	@ÕiI"ﬂ    
    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|;Fi[	I"∂#   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;F@±i	[	[	@˘iSI"û      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var)
        threaded_tweets_from_response("LITERAL", "STRING", var);Fi[	@˘igI"û      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var)
        threaded_tweets_from_response("LITERAL", "STRING", var);Fi[	@˘içI"ç      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@˘i®I"ç      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@m%I"S# @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi	[	[	@„iKI"¬      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[	@„ibI"¬      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[	@„iwI"1      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :include_rts Specifies that the timeline should include native retweets in addition to regular tweets. Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will no longer contain a full user object.;Fi[	@„iâI"¬      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[	I"var = true;F@	i	[	[	@<i,I"ì        if (var == var) then
          log_action("LITERAL", basename(var), var)
          var = true
        else
          if var["LITERAL"] then;Fi[	@õiI"ó      end
      if FONT_TYPES.key?(var) then
        var = true
      else
        var = var.to_s.split("STRING").last.gsub("LITERAL", "STRING").to_sym;Fi[	@€iNI"†        if around_hooks.empty? then
          var.perform(*var)
          var = true
        else
          var = around_hooks.reverse.inject(nil) do |var, var|;Fi[	@~iÇI"£        var = var["LITERAL"].filter(var)
        if var["LITERAL"].values.empty? then
          var = true
        else
          var = var["LITERAL"].values.first;Fi[	@E@Ñi	[	[	@∆iI"      return if @setup
      case @config["STRING"]
      when "STRING" then
        begin
          (require("redcarpet");Fi[	@∆i&I"~          raise(FatalException.new("STRING"))
        end
      when "STRING" then
        begin
          require("kramdown");Fi[	@∆i.I"Ä          raise(FatalException.new("STRING"))
        end
      when "STRING" then
        begin
          (require("rdiscount");Fi[	@∆i7I"}          raise(FatalException.new("STRING"))
        end
      when "STRING" then
        begin
          (require("maruku");Fi[	I"Í# @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.;FI""# @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi	[	[	@∆i#I";      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :accuracy ('0m') A hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).;Fi[	@∆i6I"\      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :query Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name.;Fi[	@∆iPI"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :name The name a place is known as.;Fi[	@∆ihI"T      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.
      # @option options [String] :token The token found in the response from {Twitter::API::PlacesAndGeo#places_similar}.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :"attribute:street_address" This option searches for places which have this given street address. There are other well-known and application-specific attributes available. Custom attributes are also permitted.;Fi[	I"rescue => var;F@ i	[	[	@›iI"{          self.data = YAML.load($1)
        end)
      rescue => var
        puts("STRING")
      rescue SyntaxError => var;Fi[	@›iEI"≥      begin
        self.content = Liquid::Template.parse(self.content).render!(var, var)
      rescue => var
        puts("STRING")
        var.backtrace.each { |var| puts(var) };Fi[	@›iRI"ª        begin
          self.output = Liquid::Template.parse(var.content).render!(var, var)
        rescue => var
          puts("STRING")
          var.backtrace.each { |var| puts(var) };Fi[	@{i)I"à            var.puts(var.at("STRING").inner_text)
          end)
        rescue => var
          puts("STRING")
          puts("STRING");Fi[	@I"+# Pre-configured defaults specified in;Fi	[	[	@ci I"≠        ##
        # Instantiates a new Cloud::CloudFiles Syncer.
        #
        # Pre-configured defaults specified in
        # Configuration::Syncer::Cloud::CloudFiles;Fi[	@fiI"ù        ##
        # Instantiates a new Cloud::S3 Syncer.
        #
        # Pre-configured defaults specified in
        # Configuration::Syncer::Cloud::S3;Fi[	@ıiI"£        ##
        # Instantiates a new RSync::Local Syncer.
        #
        # Pre-configured defaults specified in
        # Configuration::Syncer::RSync::Local;Fi[	@liI"≥        ##
        # Instantiates a new RSync::Push or RSync::Pull Syncer.
        #
        # Pre-configured defaults specified in
        # Configuration::Syncer::RSync::Push or;Fi[	@R@Ti	[	[	@£iˆI"õ      # @return [Twitter::List] The list.
      # @overload list_add_members(list, users, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.;Fi[	@£i I"Ÿ      # @overload list_add_members(user, list, users, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iÁI"û      # @return [Twitter::List] The list.
      # @overload list_remove_members(list, users, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iÒI"‹      # @overload list_remove_members(user, list, users, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.;Fi[	I"{#   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.;FI"É#   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.;Fi	[	[	@}iI"æ      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs;Fi[	@}iI"i      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      # @example Return the cursored collection of users following @sferik;Fi[	@}i$I"æ      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs;Fi[	@}i.I"l      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      # @example Return the cursored collection of users @sferik is following;Fi[	I"var.run;FI"if var.success? then;Fi	[	[	@∑iPI"p      end
      (var << "STRING")
      var.run
      if var.success? then
        Logger.message("STRING");Fi[	@IizI"Ç        end
        (var << "STRING")
        var.run
        if var.success? then
          Logger.message(("STRING" + "STRING"));Fi[	@kiBI"z        end
        (var << "STRING")
        var.run
        if var.success? then
          Logger.message("STRING");Fi[	@niBI"z        end
        (var << "STRING")
        var.run
        if var.success? then
          Logger.message("STRING");Fi[	@Á@t*i	[	[	@∑iOI"[        end
      end
      (var << "STRING")
      var.run
      if var.success? then;Fi[	@IiyI"n          (var << var)
        end
        (var << "STRING")
        var.run
        if var.success? then;Fi[	@kiAI"e          end
        end
        (var << "STRING")
        var.run
        if var.success? then;Fi[	@niAI"e          end
        end
        (var << "STRING")
        var.run
        if var.success? then;Fi[	@Á@	i	[	[	@õiI"|      end
      if FONT_TYPES.key?(var) then
        (var << "STRING")
      else
        raise(Sass::SyntaxError, "STRING");Fi[	@‰i:I"	        (var << var.matched[("LITERAL"...("LITERAL" - var))])
        if ((var % "LITERAL") == "LITERAL") then
          (var << "STRING")
        else
          var = eval((("STRING" + balance(var, "STRING", "STRING", "LITERAL")["LITERAL"]["LITERAL"]) + "STRING"));Fi[	@Ái7I"í          (var << "STRING")
          (var << "STRING") unless var.directory?
          (var << "STRING")
        else
          (var << "STRING");Fi[	@ÁiII"Ü            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
          else
            (var << "STRING");Fi[	I"2@model.compressor.compress_with do |var, var|;FI"(var << var);Fi	[	[	@∑iJI"®      (var << ("STRING" + "STRING"))
      if @model.compressor then
        @model.compressor.compress_with do |var, var|
          (var << var)
          (var << var);Fi[	@IiuI"´        Logger.message(("STRING" + "STRING"))
        (var << "STRING")
        @model.compressor.compress_with do |var, var|
          (var << var)
          (var << var);Fi[	@ki<I"¶        (var << mysqldump)
        if @model.compressor then
          @model.compressor.compress_with do |var, var|
            (var << var)
            (var << var);Fi[	@ni<I"£        (var << pgdump)
        if @model.compressor then
          @model.compressor.compress_with do |var, var|
            (var << var)
            (var << var);Fi[	I"if @model.compressor then;F@î*i	[	[	@∑iII"™      var = Pipeline.new
      (var << ("STRING" + "STRING"))
      if @model.compressor then
        @model.compressor.compress_with do |var, var|
          (var << var);Fi[	@ki;I"§        var = "STRING"
        (var << mysqldump)
        if @model.compressor then
          @model.compressor.compress_with do |var, var|
            (var << var);Fi[	@ni;I"°        var = "STRING"
        (var << pgdump)
        if @model.compressor then
          @model.compressor.compress_with do |var, var|
            (var << var);Fi[	@Oi*I"≥        var = File.join(@dump_path, name)
        run("STRING")
        if @model.compressor then
          @model.compressor.compress_with do |var, var|
            run("STRING");Fi[	I"require("twitter/tweet");F@•i	[	[	@vi	I"çrequire("twitter/error/already_favorited")
require("twitter/error/forbidden")
require("twitter/tweet")
require("twitter/user")
module Twitter;Fi[	@£iI"require("twitter/error/not_found")
require("twitter/list")
require("twitter/tweet")
require("twitter/user")
module Twitter;Fi[	@„iI"arequire("twitter/api/utils")
require("twitter/tweet")
require("twitter/user")
module Twitter;Fi[	@i	I"{require("twitter/api/utils")
require("twitter/cursor")
require("twitter/tweet")
require("twitter/user")
module Twitter;Fi[	@I"# site - The Site.;Fi	[	[	@‰iI"ã    # This generator is safe from arbitrary code execution.
    # Generate paginated pages if necessary.
    #
    # site - The Site.
    #;Fi[	@‰iI"º    # directories, e.g.: page2/index.html, page3/index.html, etc and adds more
    # site-wide data.
    #
    # site - The Site.
    # page - The index.html Page that requires pagination.;Fi[	@•iI"ì    # Gets/Sets the content of this layout.
    # Initialize a new Layout.
    #
    # site - The Site.
    # base - The String path to the source.;Fi[	@∞iI"©    # The cache of last modification times [path] -> mtime.
    # Initialize a new StaticFile.
    #
    # site - The Site.
    # base - The String path to the <source>.;Fi[	I"(@html << "STRING");FI"	self;Fi	[	[	@iI"Q    
    def function(var, var)
      (@html << "STRING")
      self
    end;Fi[	@i!I"Q    
    def function(var, var)
      (@html << "STRING")
      self
    end;Fi[	@i=I"j      (@html << "STRING")
      self.instance_eval(&var)
      (@html << "STRING")
      self
    end;Fi[	@iBI"Q    
    def function(var, var)
      (@html << "STRING")
      self
    end;Fi[	@W@o)i	[	[	@≈iI"£      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING";Fi[	@[iI"£      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING";Fi[	@piI"£      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING";Fi[	@siI"£      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING";Fi[	I"2files_to_transfer_for(@package) do |var, var|;FI"Logger.message("STRING");Fi	[	[	@Ui1I"÷      def function
        var = remote_path_for(@package)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING")
          File.open(File.join(local_path, var), "STRING") do |var|;Fi[	@ñiSI"÷      def function
        var = remote_path_for(@package)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING")
          File.open(File.join(local_path, var), "STRING") do |var|;Fi[	@»iI"         var = remote_path_for(@package)
        FileUtils.mkdir_p(var)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING")
          var = File.join(local_path, var);Fi[	@Xi9I"Í        var = remote_path_for(@package)
        var = directory_for(var, true)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING")
          File.open(File.join(local_path, var), "STRING") do |var|;Fi[	@Ÿ#I"module Validators;Fi	[	[	I"Wprojects//paperclip_proj/paperclip/validators/attachment_content_type_validator.rb;Ti I"omodule Paperclip
  module Validators
    class AttachmentContentTypeValidator < ActiveModel::EachValidator;Fi [	I"Sprojects//paperclip_proj/paperclip/validators/attachment_presence_validator.rb;TiI"•require("active_model/validations/presence")
module Paperclip
  module Validators
    class AttachmentPresenceValidator < ActiveModel::Validations::PresenceValidator;Fi[	@miI"©require("active_model/validations/numericality")
module Paperclip
  module Validators
    class AttachmentSizeValidator < ActiveModel::Validations::NumericalityValidator;Fi[	@Xi
I"ørequire("paperclip/validators/attachment_presence_validator")
require("paperclip/validators/attachment_size_validator")
module Paperclip
  module Validators
    extend(ActiveSupport::Concern);Fi[	@◊*@˘$i	[	[	@≈i<I"Ò        connection do |var|
          create_remote_path(var, var)
          files_to_transfer_for(@package) do |var, var|
            Logger.message(("STRING" + "STRING"))
            var.put(File.join(local_path, var), File.join(var, var));Fi[	@`i4I"Ó        var = remote_path_for(@package)
        connection.sync_clock
        files_to_transfer_for(@package) do |var, var|
          Logger.message(("STRING" + "STRING"))
          File.open(File.join(local_path, var), "STRING") do |var|;Fi[	@pi2I"        connection do |var|
          var.exec!("STRING")
          files_to_transfer_for(@package) do |var, var|
            Logger.message(("STRING" + "STRING"))
            var.scp.upload!(File.join(local_path, var), File.join(var, var));Fi[	@si0I"ı        connection do |var|
          create_remote_path(var, var)
          files_to_transfer_for(@package) do |var, var|
            Logger.message(("STRING" + "STRING"))
            var.upload!(File.join(local_path, var), File.join(var, var));Fi[	@E@ÿ*i	[	[	@∫i.I"±      # Logs a message to the console and log file to inform
      # the client that Backup is dumping the database
      def function
        Logger.message("STRING")
      end;Fi[	I"3projects//backup_proj/backup/encryptor/base.rb;TiI"≥      # Logs a message to the console and log file to inform
      # the client that Backup is encrypting the archive
      def function
        Logger.message("STRING")
      end;Fi[	@ΩiMI"∏      # Logs a message to the console and log file to inform
      # the client that Backup is notifying about the process
      def function
        Logger.message("STRING")
      end;Fi[	@uinI"±          ##
          # Returns a String of file paths and their md5 hashes.
          def function
            Logger.message("STRING")
            `find '#{@directory}STRING`;Fi[	I"}#   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;FI"~#   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi	[	[	@iiOI"
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@£i6I"      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      #   @option options [Integer] :count The number of results to retrieve.;Fi[	@£i@I"      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      #   @option options [Integer] :count The number of results to retrieve.;Fi[	@„i1I"$      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@ï*@ï*i	[	[	@∑iKI"è      if @model.compressor then
        @model.compressor.compress_with do |var, var|
          (var << var)
          (var << var)
        end;Fi[	@IivI"â        (var << "STRING")
        @model.compressor.compress_with do |var, var|
          (var << var)
          (var << var)
        end;Fi[	@ki=I"ô        if @model.compressor then
          @model.compressor.compress_with do |var, var|
            (var << var)
            (var << var)
          end;Fi[	@ni=I"ô        if @model.compressor then
          @model.compressor.compress_with do |var, var|
            (var << var)
            (var << var)
          end;Fi[	@I"0# See Node#write_to for a list of +options+;Fi	[	[	@„i∆I"í      #
      #   doc.to_xml(:indent => 5, :encoding => 'UTF-8')
      #
      # See Node#write_to for a list of +options+
      def function(var);Fi[	@„i—I"î      #
      #   doc.to_xhtml(:indent => 5, :encoding => 'UTF-8')
      #
      # See Node#write_to for a list of +options+
      def function(var);Fi[	@„i˙I"í      ###
      # Write Node as HTML to +io+ with +options+
      #
      # See Node#write_to for a list of +options+
      def function(var, var);Fi[	@„iI"ì      ###
      # Write Node as XHTML to +io+ with +options+
      #
      # See Node#write_to for a list of +options+
      def function(var, var);Fi[	I"# Path to store backups to;F@∫i	[	[	@≈iI"x      # Server IP Address and FTP port
      ##
      # Path to store backups to
      ##
      # use passive mode?;Fi[	@[iI"{      # Server IP Address and SSH port
      ##
      # Path to store backups to
      ##
      # Flag to use local backups;Fi[	@piI"é      # Server IP Address and SCP port
      ##
      # Path to store backups to
      ##
      # Creates a new instance of the storage object;Fi[	@siI"è      # Server IP Address and SFTP port
      ##
      # Path to store backups to
      ##
      # Creates a new instance of the storage object;Fi[	I"A# Transfers the archived file to the specified remote server;F@Ei	[	[	@≈i7I"ç      
      ##
      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package);Fi[	@[i9I"x      
      ##
      # Transfers the archived file to the specified remote server
      def function
        begin;Fi[	@pi-I"ç      
      ##
      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package);Fi[	@si+I"ç      
      ##
      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package);Fi[	I"unless var.empty? then;F@‡i	[	[	@îi,I"ß    return unless f.lib.directory?
    var = f.lib.children.select { |var| var.to_s =~ "LITERAL" }
    unless var.empty? then
      opoo("STRING")
      puts("STRING");Fi[	@îi?I"s      var.include?(var.extname).!
    end
    unless var.empty? then
      opoo("STRING")
      puts("STRING");Fi[	@îiKI"∑    return unless f.bin.directory?
    var = f.bin.children.select { |var| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING");Fi[	@îiWI"π    return unless f.sbin.directory?
    var = f.sbin.children.select { |var| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING");Fi[	@÷I"module RSync;Fi	[	[	@iiI"Smodule Backup
  module Syncer
    module RSync
      class Base < Syncer::Base;Fi[	@ıiI"Lmodule Backup
  module Syncer
    module RSync
      class Local < Base;Fi[	@ùiI"Kmodule Backup
  module Syncer
    module RSync
      class Pull < Push;Fi[	@liI"Kmodule Backup
  module Syncer
    module RSync
      class Push < Base;Fi[	I".# which in turn will invoke Syncer::Base.;F@i	[	[	@ci$I"Ô        # Configuration::Syncer::Cloud::CloudFiles
        # are set via a super() call to Cloud::Base,
        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and Cloud specific defaults are set,;Fi[	@fiI"Á        # Configuration::Syncer::Cloud::S3
        # are set via a super() call to Cloud::Base,
        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and Cloud specific defaults are set,;Fi[	@ıiI"Í        # Configuration::Syncer::RSync::Local
        # are set via a super() call to RSync::Base,
        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and RSync specific defaults are set,;Fi[	@li I"È        # Configuration::Syncer::RSync::Pull
        # are set via a super() call to RSync::Base,
        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and RSync specific defaults are set,;Fi[	I"A# the block from the user's configuration file is evaluated.;F@±i	[	[	@ci'I"ƒ        #
        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var)
          super;Fi[	@fiI"ƒ        #
        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var)
          super;Fi[	@ıiI"ƒ        #
        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var)
          super;Fi[	@li#I"ƒ        #
        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var)
          super;Fi[	@E@1 i	[	[	@ìiI"`    attr_reader("LITERAL", "LITERAL")
    
    def function
      @var = []
      @var = [];Fi[	@SiI"E  attr_accessor("LITERAL")
  
  def function
    @var = []
  end;Fi[	I"?projects//paperclip_proj/paperclip/io_adapters/registry.rb;TiI"M    attr_reader("LITERAL")
    
    def function
      @var = []
    end;Fi[	@·i≠I"†    # where you either are re-using an existing state machine implementation
    # or are subclassing machines.
    def function
      @var = []
      @var = [];Fi[	I"desc("STRING");FI"task("LITERAL") do;Fi	[	[	I"*projects//rescue_proj/resque/tasks.rb;TiI"h    var.work((ENV["STRING"] or "LITERAL"))
  end
  desc("STRING")
  task("LITERAL") do
    var = [];Fi[	I"8projects//state_machine_proj/tasks/state_machine.rb;TiI"Onamespace("LITERAL") do
  desc("STRING")
  task("LITERAL") do
    var = {};Fi[	I";projects//whenever_proj/whenever/capistrano/recipes.rb;TiI"’  _cset("LITERAL") { "STRING" }
  namespace("LITERAL") do
    desc("STRING")
    task("LITERAL") do
      var = { "LITERAL" => (fetch("LITERAL")), "LITERAL" => (fetch("LITERAL")), "LITERAL" => (fetch("LITERAL")) };Fi[	@}+i!I"d      end
    end
    desc("STRING")
    task("LITERAL") do
      if whenever_servers.any? then;Fi[	@S@*i	[	[	@˘iRI"à      # @overload statuses(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var);Fi[	@˘ifI"é      # @overload status_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var);Fi[	@˘iåI"á      # @overload retweet(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var);Fi[	@˘ißI"à      # @overload retweet!(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(var);Fi[	@S@h*i	[	[	@iUI"R      # @return [Array<Twitter::User>]
      # @overload contributees(options={})
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @example Return the authenticated user's contributees;Fi[	@i[I"ç      # @overload contributees(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @example Return users @sferik can contribute to;Fi[	@ilI"R      # @return [Array<Twitter::User>]
      # @overload contributors(options={})
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @example Return the authenticated user's contributors;Fi[	@irI"õ      # @overload contributors(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @example Return users who can contribute to @sferik's account;Fi[	@SI"-#   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi	[	[	@}iI"      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the authenticated user's friends' IDs;Fi[	@}i9I"      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return @sferik's followers' IDs;Fi[	@}iI"Y      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.;Fi[	@}i"I"Y      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.;Fi[	@S@+i	[	[	@iiNI"ó      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@£i5I"‘      # @overload list_timeline(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@£i?I"      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@„i0I"€      # @overload user_timeline(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@£I"module AppIntegration;Fi	[	[	I"<projects//compass_proj/compass/app_integration/rails.rb;Ti I"<module Compass
  module AppIntegration
    module Rails;Fi [	@oi I"Amodule Compass
  module AppIntegration
    module StandAlone;Fi [	I"Bprojects//compass_proj/compass/app_integration/stand_alone.rb;TiI"}  require("compass/app_integration/stand_alone/#{lib}")
end
module Compass
  module AppIntegration
    module StandAlone;Fi[	I"6projects//compass_proj/compass/app_integration.rb;TiI"mrequire("compass/app_integration/stand_alone")
module Compass
  module AppIntegration
    module Helpers;Fi[	I"O# * <tt>:if</tt> - Specifies a method, proc or string to call to determine;FI"M#   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,;Fi	[	[	@ÄiPI"e      #   validation contexts by default (+nil+), other options are <tt>:create</tt>
      #   and <tt>:update</tt>.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,;Fi[	@âi=I"W      # * <tt>:on</tt> - Specifies when this validation is active
      #   (<tt>:create</tt> or <tt>:update</tt>.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>).;Fi[	@ñi)I"Ä      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,;Fi[	@ñicI"Ä      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,;Fi[	@I":# This method is considered part of the `stable` API.;Fi	[	[	@Fi&I"∂  # Returns true if the job was queued, nil if the job was rejected by a
  # before_enqueue hook.
  #
  # This method is considered part of the `stable` API.
  def function(var, var);Fi[	@Fi3I"ª  # Returns true if the job was queued, nil if the job was rejected by a
  # before_enqueue hook.
  #
  # This method is considered part of the `stable` API.
  def function(var, var, var);Fi[	@FiWI"Â  #   # Removes all jobs of class `UpdateNetworkGraph` with matching args.
  #   Resque.dequeue(GitHub::Jobs::UpdateNetworkGraph, 'repo:135325')
  #
  # This method is considered part of the `stable` API.
  def function(var, var);Fi[	@FijI"¡  # depending on whether a job can be obtained. You should pass it the
  # precise name of a queue: case matters.
  #
  # This method is considered part of the `stable` API.
  def function(var);Fi[	@‘I"w# @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.;Fi	[	[	@˘iI"€      # @return [Array<Twitter::Tweet>]
      # @param id [Integer] The numerical ID of the desired Tweet.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@˘i)I"À      # @return [Array]
      # @param id [Integer] The numerical ID of the desired Tweet.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@iI"Ã      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array] An array of actions
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@i'I"Õ      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid./
      # @return [Array] An array of actions
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@Ä$I"return "LITERAL";Fi	[	[	@Li¬I"|        var = var[var].ord
        if (var < Utagx) then
          var.putc(var)
          return "LITERAL"
        end;Fi[	@LiŒI"i          end
          var.putc(var)
          var.putc(var)
          return "LITERAL"
        end;Fi[	@LiŸI"s          var.putc(var)
          var.putc(var)
          var.putc(var)
          return "LITERAL"
        end;Fi[	@LiÂI"s          var.putc(var)
          var.putc(var)
          var.putc(var)
          return "LITERAL"
        end;Fi[	@@¿i	[	[	@ iI"¨        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do;Fi[	@ iWI"¨        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do;Fi[	@ i{I"¨        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do;Fi[	@iåI"ú    #     include DataMapper::Resource
    #     property :id, Serial
    #     
    #     state_machine :initial => :parked do
    #       event :ignite do;Fi[	@@I"-["STRING", "STRING", "STRING", "STRING"];Fi	[	[	@±iI"Ø    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then;Fi[	@±iI"•    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then;Fi[	@±i I"√    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then;Fi[	@±i"I"•    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then;Fi[	@@I"7["STRING", "STRING", "STRING", "STRING", "STRING"];Fi	[	[	@±iI"ä  def function
    case @language
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then;Fi[	@±iI"π    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then;Fi[	@±i$I"Ø    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then;Fi[	@±i&I"™    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    else;Fi[	I"Ivar.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) };F@,i	[	[	@˝iI"y    var.on("STRING", "STRING", "STRING") { |var| self.options["LITERAL"] = var }
    var.on("STRING", "STRING") { |var| self.options["LITERAL"] = var.to_sym }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) };Fi[	@˝iI"q    var.on("STRING", "STRING") { |var| self.options["LITERAL"] = var.to_sym }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) };Fi[	@˝iI"l    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) };Fi[	@˝iI"w    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING") { |var| set_dir_or_path("LITERAL", var) }
    var.on("STRING", "STRING", ["LITERAL", "LITERAL"], "STRING", "STRING") do |var|;Fi[	@„
I"!var["LITERAL"] ||= "LITERAL";Fi	[	[	@EiQI"i    end
    
    def function(var, var)
      var["LITERAL"] ||= "LITERAL"
      var = var["STRING"];Fi[	@ki	I"  # @param opts [Hash] Optional hash.  Accepts :length and :process_newlines parameters.
  # @return [String] The truncated and formatted post.
  def function(var, var)
    var["LITERAL"] ||= "LITERAL"
    if var.respond_to?("LITERAL") then;Fi[	@kiI"  # @param opts [Hash] Optional hash.  Accepts :length and :process_newlines parameters.
  # @return [String] The truncated and formatted comment.
  def function(var, var)
    var["LITERAL"] ||= "LITERAL"
    var = truncate(var.text, "LITERAL" => (var["LITERAL"]));Fi[	I"4projects//diaspora_proj/helpers/posts_helper.rb;TiI"h  end
  
  def function(var, var)
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "LITERAL";Fi[	I"var.separator("STRING");F@,i	[	[	@™i:I"∞    def function(var)
      var.banner = "STRING"
      var.separator("STRING")
      var.separator("STRING")
      var.on("STRING", "STRING", "LITERAL", "STRING", "STRING") do;Fi[	@™iUI"ƒ        self.options["LITERAL"] = "LITERAL"
      end
      var.separator("STRING")
      var.separator("STRING")
      var.on("STRING", "STRING", "STRING") { |var| self.options["LITERAL"] = var };Fi[	@™i`I"Û      var.on("STRING", "STRING") { self.options["LITERAL"] = "LITERAL" }
      var.on("STRING", "STRING") { |var| self.options["LITERAL"] = var.to_sym }
      var.separator("STRING")
      var.separator("STRING")
      set_project_options(var);Fi[	@™icI"ñ      var.separator("STRING")
      set_project_options(var)
      var.separator("STRING")
      var.separator("STRING")
      set_global_options(var);Fi[	@I"K#   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">;Fi	[	[	@i›I"õ    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked";Fi[	@iI"õ    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked";Fi[	@iI"õ    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked";Fi[	@i-I"õ    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked";Fi[	@¨"@	i	[	[	@\i¢I"ä    missing_image!(var, var) unless var
    if (var.unit_str == "STRING") then
      var = var
    else
      var = (var.value - var.left);Fi[	@·imI"q    if (var.nil? or var.kind_of?(Hash)) then
      @var = "STRING"
      var = var
    else
      @var = var;Ti[	@ÃiáI"i          var = true
          var = "STRING"
          var = var
        else
          if var then;Fi[	@Ä'i%I"n    def function(var, var, var)
      if var.is_a?(Class) then
        var = var
      else
        begin;Fi[	I"(var.declare("LITERAL", ["LITERAL"]);FI"3var.declare("LITERAL", ["LITERAL", "LITERAL"]);Fi	[	[	I"Eprojects//compass_proj/compass/sass_extensions/functions/urls.rb;TiI"∞    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end;Fi[	@A,i/I"∞    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end;Fi[	@A,iHI"Ë    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL", "LITERAL"]);Fi[	@A,i{I"∞    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end;Fi[	@fI"(# @return [Twitter::List] The list.;Fi	[	[	@£iVI"       # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.
      # @overload list_remove_member(list, user_to_remove, options={});Fi[	@£iÛI"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.
      # @overload list_add_members(list, users, options={});Fi[	@£iKI"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.
      # @overload list_add_member(list, user_to_add, options={});Fi[	@£i‰I"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.
      # @overload list_remove_members(list, users, options={});Fi[	@rI"module Controllers;Fi	[	[	@æi I":module Devise
  module Controllers
    module Helpers;Fi [	@¿i I"?module Devise
  module Controllers
    module Rememberable;Fi [	@√i I">module Devise
  module Controllers
    module ScopedViews;Fi [	I"<projects//devise_proj/devise/controllers/url_helpers.rb;Ti I"=module Devise
  module Controllers
    module UrlHelpers;Fi [	I"†# @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.;F@˛i	[	[	@iiI"<      #
      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@ii$I"A      #
      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/sent
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@ii7I"A      #
      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@iiEI"ˇ      end
      
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@rI"module Generators;Fi	[	[	@vi I"_module Devise
  module Generators
    class DeviseGenerator < Rails::Generators::NamedBase;Fi [	I"Aprojects//devise_proj/generators/devise/install_generator.rb;TiI"srequire("securerandom")
module Devise
  module Generators
    class InstallGenerator < Rails::Generators::Base;Fi[	@çi I"<module Devise
  module Generators
    module OrmHelpers;Fi [	@êi I"Cmodule Devise
  module Generators
    module ViewPathTemplates;Fi [	I"!require("twitter/creatable");F@ôi	[	[	@iI"Xrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action;Fi[	@iI"Xrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action;Fi[	@#iI"Xrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action;Fi[	@+iI"Xrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action;Fi[	@”@x,i	[	[	@i I"Hrequire("twitter/base")
require("twitter/creatable")
module Twitter;Fi [	@i I"Hrequire("twitter/base")
require("twitter/creatable")
module Twitter;Fi [	@#i I"Hrequire("twitter/base")
require("twitter/creatable")
module Twitter;Fi [	@+i I"Hrequire("twitter/base")
require("twitter/creatable")
module Twitter;Fi [	@@ı'i	[	[	@iI"j      
      # Returns activity about me
      #
      # @note Undocumented
      # @rate_limited Yes;Fi[	@i!I"l      
      # Returns activity by friends
      #
      # @note Undocumented
      # @rate_limited Yes;Fi[	@iMI"u      
      # Returns activity summary for a Tweet
      #
      # @note Undocumented
      # @rate_limited Yes;Fi[	@i`I"t      
      # Returns activity summary for Tweets
      #
      # @note Undocumented
      # @rate_limited Yes;Fi[	I"view_directory("LITERAL");F@ó,i	[	[	@êiI"      
      def function
        view_directory("LITERAL")
        view_directory("LITERAL")
        view_directory("LITERAL");Fi[	@êiI"ö      def function
        view_directory("LITERAL")
        view_directory("LITERAL")
        view_directory("LITERAL")
        view_directory("LITERAL");Fi[	@êiI"©        view_directory("LITERAL")
        view_directory("LITERAL")
        view_directory("LITERAL")
        view_directory("LITERAL")
        view_directory("LITERAL");Fi[	@êiI"ë        view_directory("LITERAL")
        view_directory("LITERAL")
        view_directory("LITERAL")
        view_directory("LITERAL")
      end;Fi[	@∂I",#     attribute_method_suffix '_short?';Fi	[	[	@iKI"≤      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #     define_attribute_methods :name;Fi[	@iÖI"≤      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #     define_attribute_methods :name;Fi[	@i«I"è      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #;Fi[	@iÓI"±      #     include ActiveModel::AttributeMethods
      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #     define_attribute_method :name;Fi[	I")#     define_attribute_methods :name;F@i	[	[	@i)I"ì      #     attr_accessor :name
      #     attribute_method_prefix 'clear_'
      #     define_attribute_methods :name
      #
      #     private;Fi[	@iMI"î      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #     define_attribute_methods :name
      #
      #     private;Fi[	@iqI"≤      #     attr_accessor :name
      #     attribute_method_affix prefix: 'reset_', suffix: '_to_default!'
      #     define_attribute_methods :name
      #
      #     private;Fi[	@iáI"≠      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #     define_attribute_methods :name
      #
      #     alias_attribute :nickname, :name;Fi[	@ç&@	i	[	[	@#i0I"≠    if self.target.nil? then
      Rails.logger.info("STRING")
      return
    else
      if (self.parent.author == var.person) and self.target_author_signature_valid? then;Fi[	@–iVI"Ü    if self.target.nil? then
      Rails.logger.info("STRING")
      return
    else
      if self.target_author_signature_valid? then;Fi[	@πi√I"Å      if var.dry_run and var.overwrite then
        puts(var) if var.exist?
        return
      else
        if var.dry_run then;Fi[	@πi«I"Ç        if var.dry_run then
          puts(var)
          return
        else
          var.delete if var.overwrite and var.exist?;Fi[	I"!when "STRING", "STRING" then;F@Fi	[	[	@¸iI"Ä    var = var.to_s.downcase
    @var = case var
    when "STRING", "STRING" then
      "STRING"
    when "STRING", "STRING" then;Fi[	@¸iI"|    when "STRING", "STRING" then
      "STRING"
    when "STRING", "STRING" then
      "STRING"
    when "LITERAL" then;Fi[	@‹icI"ø          return self.send(var, var) if self.respond_to?(var)
          case var.value.first
          when "STRING", "STRING" then
            "STRING"
          when "STRING", "STRING" then;Fi[	@‹ieI"î          when "STRING", "STRING" then
            "STRING"
          when "STRING", "STRING" then
            "STRING"
          when "STRING" then;Fi[	@ê$@è$i	[	[	@fi4I"±      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING");Fi[	@fi7I"•      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.pull!;Fi[	@fiFI"±      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING");Fi[	@fiZI"±      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING");Fi[	I"class << self;FI"attr_accessor("LITERAL");Fi	[	[	@Ti	I"e    extend(ActiveSupport::Concern)
    
    class << self
      attr_accessor("LITERAL")
    end;Fi[	@iI"[    include(Convertible)
    
    class << self
      attr_accessor("LITERAL")
    end;Fi[	@)iI"J    end
    
    class << self
      attr_accessor("LITERAL")
    end;Fi[	@iI"n  module Failure
    class Multiple < Base
      class << self
        attr_accessor("LITERAL")
      end;Fi[	I"'if var.respond_to?("LITERAL") then;F@=,i	[	[	@A,iI"Ω  module StylesheetUrl
    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"]);Fi[	@A,i.I"∑  module FontUrl
    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"]);Fi[	@A,iGI"∏  module ImageUrl
    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"]);Fi[	@A,izI"¡  module GeneratedImageUrl
    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"]);Fi[	I"4var["LITERAL"] = ENV["STRING"] if ENV["STRING"];F@Ó,i	[	[	@z+i	I"Ω  task("LITERAL") do
    var = {}
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"];Fi[	@z+i
I"‹    var = {}
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"];Fi[	@z+iI"    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"];Fi[	@z+iI"    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = ENV["STRING"] if ENV["STRING"]
    var["LITERAL"] = (ENV["STRING"] == "STRING") if ENV["STRING"];Fi[	@pI"#   person.name = '';Fi	[	[	@jiFI"{        #   end
        #
        #   person = Person.new
        #   person.name = ''
        #   person.valid? # => false;Fi[	@ÄiÇI"k      #   end
      #
      #   person = Person.new
      #   person.name = ''
      #   person.valid?;Fi[	@ñi“I"l    #   end
    #
    #   person = Person.new
    #   person.name = ''
    #   person.valid? # => false;Fi[	@ñi˘I"m    #   end
    #
    #   person = Person.new
    #   person.name = ''
    #   person.invalid? # => true;Fi[	I"'api_accessible("LITERAL") do |var|;F@æi	[	[	@¡iI"h  acts_as_api
  
  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@»iI"h  acts_as_api
  
  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@∏iI"h  acts_as_api
  
  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@ iI"h  acts_as_api
  
  api_accessible("LITERAL") do |var|
    var.add("LITERAL")
    var.add("LITERAL");Fi[	@∫@1+i	[	[	@≈i6I"t      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function;Fi[	@[i8I"t      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function;Fi[	@pi,I"t      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function;Fi[	@si*I"t      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function;Fi[	@∫I"4# Establishes a connection to the remote server;Fi	[	[	@≈i&I"`      private
      
      ##
      # Establishes a connection to the remote server
      #;Fi[	@[i0I"g      end
      
      ##
      # Establishes a connection to the remote server
      def function;Fi[	@pi"I"      private
      
      ##
      # Establishes a connection to the remote server
      # and yields the Net::SSH connection.;Fi[	@si"I"k      private
      
      ##
      # Establishes a connection to the remote server
      def function;Fi[	I"var = read_file("STRING");FI"/assert(var.include?("STRING").!, "STRING");Fi	[	[	@Íi#I"¿    shutup do
      DefaultPatchBall.new("STRING").brew do
        var = read_file("STRING")
        assert(var.include?("STRING").!, "STRING")
        assert(var.include?("STRING"), "STRING");Fi[	@Íi-I"Ω    shutup do
      ListPatchBall.new("STRING").brew do
        var = read_file("STRING")
        assert(var.include?("STRING").!, "STRING")
        assert(var.include?("STRING"), "STRING");Fi[	@Íi7I"ª    shutup do
      P0PatchBall.new("STRING").brew do
        var = read_file("STRING")
        assert(var.include?("STRING").!, "STRING")
        assert(var.include?("STRING"), "STRING");Fi[	@ÍiAI"ª    shutup do
      P1PatchBall.new("STRING").brew do
        var = read_file("STRING")
        assert(var.include?("STRING").!, "STRING")
        assert(var.include?("STRING"), "STRING");Fi[	@„
@Wi	[	[	@ziI"≠      attr_accessor("LITERAL", "LITERAL", "LITERAL")
      
      def function(var, var)
        super(var, var)
        self.project_name = determine_project_name(var, var);Fi[	I"3projects//homebrew_proj/formula_specialties.rb;TiI"®end
class GithubGistFormula < ScriptFileFormula
  def function(var, var)
    super(var, var)
    @stable.version(File.basename(File.dirname(url))["LITERAL", "LITERAL"]);Fi[	@Ìi&I"ñ    #
    # Returns nothing.
    def function(var, var)
      super(var, var)
      self.data["STRING"] = "STRING" unless self.data.has_key?("STRING");Fi[	@iDI"ñ    #
    # Returns nothing.
    def function(var, var)
      super(var, var)
      self.data["STRING"] = "STRING" unless self.data.has_key?("STRING");Fi[	I"0assert_equal("LITERAL", var.patches.length);F@á%i	[	[	@ÍiI"®  def function
    var = Patches.new("STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p);Fi[	@ÍiI"¥  def function
    var = Patches.new(["STRING", "STRING"])
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p);Fi[	@Íi#I"µ  def function
    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p);Fi[	@Íi*I"µ  def function
    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p);Fi[	@∫@&+i	[	[	@≈iI"g      ##
      # Server IP Address and FTP port
      ##
      # Path to store backups to
      ##;Fi[	@[iI"g      ##
      # Server IP Address and SSH port
      ##
      # Path to store backups to
      ##;Fi[	@piI"g      ##
      # Server IP Address and SCP port
      ##
      # Path to store backups to
      ##;Fi[	@siI"h      ##
      # Server IP Address and SFTP port
      ##
      # Path to store backups to
      ##;Fi[	I"# @see Base#render;F@±i	[	[	@•iéI"\      include(Base)
      
      # @see Base#render
      def function(var)
        var;Fi[	@•i∑I"a      include(Base)
      
      # @see Base#render
      def function(var)
        "STRING";Fi[	@•i¿I"w      include(Base)
      
      # @see Base#render
      def function(var)
        Haml::Helpers.html_escape(var);Fi[	@•i◊I"t      include(Base)
      
      # @see Base#render
      def function(var)
        Haml::Helpers.preserve(var);Fi[	I"!# Output is always HTML safe;F@„
i	[	[	@ciI"ù      end
      
      # Output is always HTML safe
      def function(var, var)
        Haml::Util.html_safe(find_and_preserve_without_haml_xss(*var, &var));Fi[	@ciI"î      end
      
      # Output is always HTML safe
      def function(var, var)
        Haml::Util.html_safe(preserve_without_haml_xss(*var, &var));Fi[	@ci!I"ì      end
      
      # Output is always HTML safe
      def function(var, var)
        Haml::Util.html_safe(list_of_without_haml_xss(*var, &var));Fi[	@ci5I"ò      end
      
      # Output is always HTML safe
      def function(var, var)
        Haml::Util.html_safe(capture_haml_without_haml_xss(*var, &var));Fi[	I"J# * <tt>:guard</tt> - Whether to guard transitions with the if/unless;FI"=#   conditionals defined for each one.  Default is true.;Fi	[	[	@·iÄI"%    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    def function(var, var);Fi[	@ÒiI"    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # ;Fi[	@Òi9I"    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # ;Fi[	@iòI"	    # * <tt>:on</tt> - One or more events to transition on.  If none are
    #   specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # ;Fi[	@∫@
)i	[	[	@Ii I"k      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##;Fi[	@kiI"k      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##;Fi[	@niI"k      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##;Fi[	@LiI"k      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##;Fi[	@∫@ )i	[	[	@IiI"      ##
      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##;Fi[	@kiI"∏      # Name of the database that needs to get dumped
      # To dump all databases, set this to `:all` or leave blank.
      ##
      # Credentials for the specified database
      ##;Fi[	@niI"      ##
      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##;Fi[	@LiI"ã      ##
      # Name of and path to the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##;Fi[	@§
I"'#     include DataMapper::Resource;Fi	[	[	@ iI"y        # == Examples
        # 
        #   class Vehicle
        #     include DataMapper::Resource
        #     ;Fi[	@ iRI"y        # == Examples
        # 
        #   class Vehicle
        #     include DataMapper::Resource
        #     ;Fi[	@ ivI"x        # == Example
        # 
        #   class Vehicle
        #     include DataMapper::Resource
        #     ;Fi[	@iâI"z    # For example,
    # 
    #   class Vehicle
    #     include DataMapper::Resource
    #     property :id, Serial;Fi[	@§
I"#     state_machine do;Fi	[	[	@i:I"é    # With the default name/attribute and no configuration:
    # 
    #   class Vehicle
    #     state_machine do
    #       event :park do;Fi[	@/iI"ã    # == Examples
    # 
    #   class Vehicle
    #     state_machine do
    #       before_transition any => :parked, :do => lambda {...};Fi[	@/i*I"h    # == Examples
    # 
    #   class Vehicle
    #     state_machine do
    #       event :ignite;Fi[	@>i„I"j    # == Example
    # 
    #   class Vehicle
    #     state_machine do
    #       event :ignite do;Fi[	@∫I"1# Tells Backup::Compressor::Lzma to compress;Fi	[	[	@∂iI"ô      attr_accessor("LITERAL")
      
      ##
      # Tells Backup::Compressor::Lzma to compress
      # better (-9) rather than faster when set to true;Fi[	@∂iI"ﬁ      # Tells Backup::Compressor::Lzma to compress
      # better (-9) rather than faster when set to true
      ##
      # Tells Backup::Compressor::Lzma to compress
      # faster (-1) rather than better when set to true;Fi[	@πiI"ô      attr_accessor("LITERAL")
      
      ##
      # Tells Backup::Compressor::Lzma to compress
      # better (-9) rather than faster when set to true;Fi[	@πiI"ﬁ      # Tells Backup::Compressor::Lzma to compress
      # better (-9) rather than faster when set to true
      ##
      # Tells Backup::Compressor::Lzma to compress
      # faster (-1) rather than better when set to true;Fi[	I":namespace.attributes["LITERAL"][var]["LITERAL"] = var;FI")var.docstring = ["STRING", "STRING"];Fi	[	[	@—iÑI"U            namespace.attributes["LITERAL"][var] = {}
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")));Fi[	@—iáI"$            var.docstring = ["STRING", "STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            var.parameters = ["STRING"];Fi[	@—ièI"U            namespace.attributes["LITERAL"][var] = {}
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")));Fi[	@—iíI"$            var.docstring = ["STRING", "STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            var.parameters = ["STRING"];Fi[	@I"!assert(var.mach_o_bundle?.!);Fi	[	[	@ßi!I"¶    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert_match("LITERAL", file(var));Fi[	@ßi/I"¶    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert_match("LITERAL", file(var));Fi[	@ßi=I"¶    assert(var.dylib?.!)
    assert(var.mach_o_executable?)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert_match("LITERAL", file(var));Fi[	@ßiuI"•    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert((var.arch == "LITERAL"));Fi[	@„
@ni	[	[	@≥iI"¨    
    # Record an action that has occurred
    def function(var, var)
      var = "STRING"
      (var << color(ACTION_COLORS[var])) if Compass.configuration.color_output;Fi[	@√i%I"n  end
  
  def function(var, var)
    var = "STRING"
    var.photos.each { |var| var = (var + "STRING") };Fi[	@‰i4I"{    end
    
    def function(var, var)
      var = "STRING"
      var = Haml::Util.handle_interpolation(var.dump) do |var|;Fi[	@;i3I"ﬂ  # Looks for Makefile style variable defintions and replaces the
  # value with "new_value", or removes the definition entirely.
  def function(var, var)
    var = "STRING"
    var = gsub!(Regexp.new("STRING"), var, false);Fi[	@∫I";# Logs a message to the console and log file to inform;Fi	[	[	@Œ$iI"ç      end
      
      ##
      # Logs a message to the console and log file to inform
      # the client that Backup is using the compressor;Fi[	@∫i+I"ç      end
      
      ##
      # Logs a message to the console and log file to inform
      # the client that Backup is dumping the database;Fi[	@˛*iI"è      end
      
      ##
      # Logs a message to the console and log file to inform
      # the client that Backup is encrypting the archive;Fi[	@ΩiJI"î      end
      
      ##
      # Logs a message to the console and log file to inform
      # the client that Backup is notifying about the process;Fi[	@‹&@„,i	[	[	@A,iI"â  
  module StylesheetUrl
    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"]);Fi[	@A,i-I"É  
  module FontUrl
    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"]);Fi[	@A,iFI"Ñ  
  module ImageUrl
    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"]);Fi[	@A,iyI"ç  
  module GeneratedImageUrl
    def self.included(var)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"]);Fi[	I""#       send(attr).length < 5;F@&i	[	[	@iRI"u      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end;Fi[	@iéI"u      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end;Fi[	@i“I"u      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end;Fi[	@iıI"u      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end;Fi[	@ˇ@Ei	[	[	@ti
I"t    "STRING".undent
  when "STRING", "STRING" then
    "STRING".undent
  when "STRING" then
    "STRING".undent;Fi[	@tiI"t    "STRING".undent
  when "STRING", "STRING" then
    "STRING".undent
  when "STRING" then
    "STRING".undent;Fi[	@tiI"~    "STRING".undent
  when "STRING", "STRING", "STRING" then
    "STRING".undent
  when "STRING" then
    "STRING".undent;Fi[	@tiI"j    "STRING".undent
  when "STRING" then
    "STRING".undent
  when "STRING" then
    "STRING".undent;Fi[	@EI"&@var ||= if locate("STRING") then;Fi	[	[	@º	i`I"q  end
  
  def function
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL";Fi[	@º	inI"q  end
  
  def function
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL";Fi[	@º	iuI"q  end
  
  def function
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL";Fi[	@º	i|I"q  end
  
  def function
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL";Fi[	@d)@›-i	[	[	@iQI"{      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end;Fi[	@içI"{      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end;Fi[	@i—I"{      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end;Fi[	@iÙI"{      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end;Fi[	@±I"var = var.to_s;Fi	[	[	@A,i§I"ô  
  # Emits a path, taking off any leading "./"
  def function(var)
    var = var.to_s
    var = (var["LITERAL"] == "STRING") ? (var["LITERAL"]) : (var);Fi[	@ciI"•      # Don't escape text that's already safe,
      # output is always HTML safe
      def function(var)
        var = var.to_s
        return var if var.html_safe?;Fi[	@;iI"ù    #               mollit anim id est laborum.
    #               EOS
    def function(var)
      var = var.to_s
      (self["LITERAL", var.length] == var);Fi[	I")projects//homebrew_proj/metafiles.rb;TiI"O  private
  
  def function(var)
    var = var.to_s
    var = var.downcase;Fi[	I"$var = CompilerSelector.new(var);FI"'assert(var.fails_with?("LITERAL"));Fi	[	[	@¡	i!I"¶  def function
    var = TestAllCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"));Fi[	@¡	i:I"™  def function
    var = TestMixedCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!);Fi[	@¡	iNI"∞  def function
    var = TestEvenMoreMixedCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"));Fi[	@¡	ibI"µ  def function
    var = TestBlockWithoutBuildCompilerFailure.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!);Fi[	I"ohai("STRING");FI"if @clone.exist? then;Fi	[	[	@ziI"Å  def function
    raise("STRING") unless which("STRING")
    ohai("STRING")
    if @clone.exist? then
      Dir.chdir(@clone) do;Fi[	@ziíI"w  def function
    raise("STRING") unless hgpath
    ohai("STRING")
    if @clone.exist? then
      puts("STRING");Fi[	@zi∫I"x  def function
    raise("STRING") unless bzrpath
    ohai("STRING")
    if @clone.exist? then
      puts("STRING");Fi[	@ziÿI"{  def function
    raise("STRING") unless fossilpath
    ohai("STRING")
    if @clone.exist? then
      puts("STRING");Fi[	@R@Ei	[	[	@i¶I"œ          var.merge!("LITERAL" => (File.expand_path(@sendmail))) if @sendmail
          var.merge!("LITERAL" => (@sendmail_args)) if @sendmail_args
          var
        when "STRING" then
          var = {};Fi[	@i´I"Â          var.merge!("LITERAL" => (File.expand_path(@exim))) if @exim
          var.merge!("LITERAL" => (@exim_args)) if @exim_args
          var
        when "STRING" then
          @var ||= File.join(Config.root_path, "STRING");Fi[	@∆itI"í          var.gsub!(@config["STRING"]["STRING"], var.toc_content)
        end
        var
      when "STRING" then
        Maruku.new(var).to_html;Fi[	@îiqI"©      case var.modifier
      when "STRING", "STRING" then
        var
      when "STRING" then
        if (var.width >= self.width) and (var.height >= self.height) then;Fi[	@£I"require("keg");Fi	[	[	@Ri I"9require("formula")
require("keg")
require("bottles");Fi [	@Ci I"5require("formula")
require("keg")
require("irb");Fi [	@i I"6require("formula")
require("keg")
module Homebrew;Fi [	@îiI"Krequire("exceptions")
require("formula")
require("keg")
require("tab");Fi[	I"class Formula;F@Ei	[	[	@Íi#I"F  end
end
class Formula
  def function
    @head and @stable.nil?;Fi[	@RiTI"T  end
end
class Formula
  def function
    if (keg_only?.! or ARGV.force?) then;Fi[	@viI"8  end
end
class Formula
  def function
    var = [];Fi[	@îieI">  end
end
class Formula
  def function
    var = "STRING";Fi[	I".#   vehicle.state           # => "parked";F@i	[	[	@iﬂI"’    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked"
    # 
    # In the above example, no +initialize+ method is defined.  As a result,;Fi[	@iI"—    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked"
    # 
    # Because of the way the inclusion of modules works in Ruby, calling;Fi[	@iI"ÿ    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked"
    # 
    # You may also need to call the +initialize_state_machines+ helper manually;Fi[	@i/I"ÿ    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked"
    # 
    # The above example is also noteworthy because it demonstrates how to avoid;Fi[	@(,@K.i	[	[	@iﬁI"î    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked"
    # ;Fi[	@iI"î    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked"
    # ;Fi[	@iI"î    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked"
    # ;Fi[	@i.I"î    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked"
    # ;Fi[	I"safe_system("STRING");F@`.i	[	[	@wi3I"Ü    begin
      if Dir["STRING"].empty? then
        safe_system("STRING")
        safe_system("STRING")
        safe_system("STRING");Fi[	@wi4I"ö      if Dir["STRING"].empty? then
        safe_system("STRING")
        safe_system("STRING")
        safe_system("STRING")
        safe_system("STRING");Fi[	@wi5I"ï        safe_system("STRING")
        safe_system("STRING")
        safe_system("STRING")
        safe_system("STRING")
        safe_system("STRING");Fi[	@wi6I"Å        safe_system("STRING")
        safe_system("STRING")
        safe_system("STRING")
        safe_system("STRING")
      end;Fi[	@‡@;i	[	[	@„iI"[module StateMachine
  module Integrations
    module ActiveModel
      module Observer;Fi[	@ÊiI"`module StateMachine
  module Integrations
    module ActiveModel
      class ObserverUpdate;Fi[	@iI"`module StateMachine
  module Integrations
    module ActiveModel
      version("STRING") do;Fi[	@èiI"bmodule StateMachine
  module Integrations
    module ActiveModel
      def self.included(var);Fi[	I"onoe("STRING");F@ i	[	[	@ziÌI"«    var = var.split("STRING").collect { |var| Integer(var) }
    if (var["LITERAL"] == "LITERAL") and (var["LITERAL"] <= "LITERAL") then
      onoe("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îiãI"|        Keg.new(f.prefix).optlink
      rescue Exception => var
        onoe("STRING")
        puts("STRING")
      end;Fi[	@îi—I"n      var.link
    rescue Exception => var
      onoe("STRING")
      puts("STRING")
      puts("STRING");Fi[	@îiÊI"Ñ      Keg.new(f.prefix).fix_install_names
    rescue Exception => var
      onoe("STRING")
      puts("STRING")
      puts("STRING");Fi[	@Ñ@Ñi	[	[	@SiQI"\def function
  if can_use_readline? then
    begin
    begin
      (require("rubygems");Fi[	@^i
I"}      def self.extended(var)
        unless defined? Fog then
          begin
          begin
            require("fog");Fi[	@äi
I"Ç      def self.extended(var)
        unless defined? AWS::Core then
          begin
          begin
            require("aws-sdk");Fi[	@ !i	I"var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL")
unless (::ActiveRecord::VERSION::MAJOR == "LITERAL") and ((::ActiveRecord::VERSION::MINOR < "LITERAL") or (::ActiveRecord::VERSION::TINY < "LITERAL")) then
  begin
  begin
    require("i18n/version");Fi[	@ .@ i	[	[	@ziI"`      end
    end
    if @clone.exist? then
      puts("STRING")
      Dir.chdir(@clone) do;Fi[	@ziìI"~    raise("STRING") unless hgpath
    ohai("STRING")
    if @clone.exist? then
      puts("STRING")
      Dir.chdir(@clone) do;Fi[	@ziªI"ü    raise("STRING") unless bzrpath
    ohai("STRING")
    if @clone.exist? then
      puts("STRING")
      Dir.chdir(@clone) { safe_system(bzrpath, "STRING") };Fi[	@ziŸI"°    raise("STRING") unless fossilpath
    ohai("STRING")
    if @clone.exist? then
      puts("STRING")
      safe_system(fossilpath, "STRING", "STRING", @clone);Fi[	@eI"B@var = "STRING" unless (var.to_s.empty? or (var == "STRING"));Fi	[	[	@ziZI"≈class CVSDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @unique_token);Fi[	@ziÖI"Àclass MercurialDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @unique_token);Fi[	@zi≠I"»class BazaarDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @unique_token);Fi[	@ziÀI"»class FossilDownloadStrategy < AbstractDownloadStrategy
  def function(var, var)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @unique_token);Fi[	@EI"shutup do;Fi	[	[	@Íi I"W  end
  
  def function
    shutup do
      DefaultPatchBall.new("STRING").brew do;Fi[	@Íi*I"T  end
  
  def function
    shutup do
      ListPatchBall.new("STRING").brew do;Fi[	@Íi4I"R  end
  
  def function
    shutup do
      P0PatchBall.new("STRING").brew do;Fi[	@Íi>I"R  end
  
  def function
    shutup do
      P1PatchBall.new("STRING").brew do;Fi[	@eI"$puts("STRING") if ARGV.verbose?;Fi	[	[	@Âi]I"|module ObserverPathnameExtension
  def function
    super
    puts("STRING") if ARGV.verbose?
    $n = ($n + "LITERAL");Fi[	@ÂicI"^  
  def function
    super
    puts("STRING") if ARGV.verbose?
    $d = ($d + "LITERAL");Fi[	@ÂinI"J  
  def function
    super
    puts("STRING") if ARGV.verbose?
  end;Fi[	@ÂisI"J  
  def function
    super
    puts("STRING") if ARGV.verbose?
  end;Fi[	@e@≠i	[	[	@≠iKI"Å      # @api private
      def function(var)
        super
        instance_eval(&var) if block_given?
        @var ||= "LITERAL";Fi[	@ci)I"À        # the block from the user's configuration file is evaluated.
        def function(var)
          super
          instance_eval(&var) if block_given?
          @var = path.sub("LITERAL", "STRING");Fi[	@fi I"À        # the block from the user's configuration file is evaluated.
        def function(var)
          super
          instance_eval(&var) if block_given?
          @var = path.sub("LITERAL", "STRING");Fi[	@ıiI"®        # the block from the user's configuration file is evaluated.
        def function(var)
          super
          instance_eval(&var) if block_given?
        end;Fi[	I"*link_dir("STRING", var) { "LITERAL" };F@ø.i	[	[	@πikI"È      var.concat("LITERAL".map { |var| "STRING" })
      var.concat("LITERAL".map { |var| "STRING" })
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" };Fi[	@πilI"‚      var.concat("LITERAL".map { |var| "STRING" })
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" };Fi[	@πimI"€      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" };Fi[	@πinI"÷      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) do |var|;Fi[	@±@B)i	[	[	@ΩiXI"ß      ###
      # Convert this Builder object to XML
      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({});Fi[	@i'I"À      # Convert this DocumentFragment to html
      # See Nokogiri::XML::NodeSet#to_html
      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({});Fi[	@i5I"Õ      # Convert this DocumentFragment to xhtml
      # See Nokogiri::XML::NodeSet#to_xhtml
      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({});Fi[	@iÙI"°      ###
      # Convert this NodeSet to HTML
      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({});Fi[	I"%when ["LITERAL", "LITERAL"] then;F@Ü	i	[	[	@π	i'I"¨    var.each do |var|
      var = case read("LITERAL", var).unpack("STRING")
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then;Fi[	@π	i)I"ò      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then;Fi[	@π	i+I"ò      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then;Fi[	@π	i-I"|      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      else;Fi[	I"Pathname.new("STRING");F@	i	[	[	@Üi-I"ì    else
      if File.executable?("STRING") then
        Pathname.new("STRING")
      else
        if (V4_BUNDLE_PATH / "STRING").executable? then;Fi[	@Ái6I"•  def function
    @var ||= if Pathname.new("STRING").exist? then
      Pathname.new("STRING")
    else
      Pathname.new("STRING") if Pathname.new("STRING").exist?;Fi[	@º	i"I"¬    (@var ||= {}).fetch(var.to_s) do
      @locate[var.to_s] = if File.executable?("STRING") then
        Pathname.new("STRING")
      else
        var = unless Xcode.bad_xcode_select_path? then;Fi[	@º	i/I"€  def function
    @var ||= if File.exist?("STRING") and File.exist?("STRING") then
      Pathname.new("STRING")
    else
      if Xcode.bad_xcode_select_path?.! and `/usr/bin/xcrun -find make 2>/dev/null`.empty?.! then;Fi[	I"=assert_equal(GitDownloadStrategy, var.download_strategy);FI"<assert_instance_of(GitDownloadStrategy, var.downloader);Fi	[	[	@ƒiÖI"Ê    assert_version_equal("STRING", var.version)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    ARGV.delete("STRING");Fi[	@ƒiπI"Ò    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head);Fi[	@ƒi»I"Ò    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head);Fi[	@ƒi◊I"Ò    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head);Fi[	@“@)i	[	[	@=iƒI"ã      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var;Fi[	@=i…I"ã      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var;Fi[	@=iŒI"ã      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var;Fi[	@=i”I"ã      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var;Fi[	I",assert_equal(var.head, var.active_spec);FI"0assert_version_equal("STRING", var.version);Fi	[	[	@ƒiÇI"≤    ARGV.push("STRING")
    var = SpecTestBall.new
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_equal("STRING", var.url);Fi[	@ƒiµI"≤    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum);Fi[	@ƒiƒI"≤    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum);Fi[	@ƒi”I"≤    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum);Fi[	@Ú-I"-`#{locate("STRING")}STRING` =~ "LITERAL";Fi	[	[	@º	iaI"y  
  def function
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i;Fi[	@º	ioI"y  
  def function
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i;Fi[	@º	ivI"t  
  def function
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1;Fi[	@º	i}I"y  
  def function
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i;Fi[	I"$assert_equal("STRING", var.url);F@Í.i	[	[	@ƒiÑI"¯    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader);Fi[	@ƒi∏I"Ó    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader);Fi[	@ƒi«I"Ó    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader);Fi[	@ƒi÷I"Ó    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader);Fi[	@EI"setup_phase;Fi	[	[	@Êi§I"ë    
    # Performs the steps necessary to run the request phase of a strategy.
    def function
      setup_phase
      log("LITERAL", "STRING");Fi[	@ÊiΩI"í    
    # Performs the steps necessary to run the callback phase of a strategy.
    def function
      setup_phase
      log("LITERAL", "STRING");Fi[	@ÊiÌI"]    end
    
    def function
      setup_phase
      session["STRING"] = request.params;Fi[	@Êi˙I"b    end
    
    def function
      setup_phase
      var = OmniAuth.mock_auth_for(name.to_s);Fi[	@“@Í(i	[	[	@=iäI"Ç      
      # reduce 20 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var;Fi[	@=iI"w      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var;Fi[	@=i!I"w      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var;Fi[	@=isI"w      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var;Fi[	@+@@i	[	[	@±iI"∆      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"];Fi[	@±iI"⁄      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	@±i!I"⁄      ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"];Fi[	@±i#I"∆      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	I"6assert_equal("STRING", Formula.class_s("STRING"));F@A/i	[	[	@ƒiI"≥  
  def function
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"));Fi[	@ƒiI"Ê  def function
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"));Fi[	@ƒiI"    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"));Fi[	@ƒiI"›    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
    assert_equal("STRING", Formula.class_s("STRING"))
  end;Fi[	@.@.i	[	[	@¡	i"I"æ    var = TestAllCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"));Fi[	@¡	i#I"∞    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    var.select_compiler;Fi[	@¡	iFI"≤    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    var.select_compiler;Fi[	@¡	iOI"Ã    var = TestEvenMoreMixedCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    assert(case MacOS.gcc_42_build_version;Fi[	@“I")if (var["LITERAL"] == "STRING") then;Fi	[	[	@=iÈI"ª      # reduce 41 omitted
      # reduce 42 omitted
      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          var = ["STRING", "STRING", "STRING", "STRING"];Fi[	@=i¯I"à      end
      
      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          var = Node.new("LITERAL", var);Fi[	@=iI"      end
      
      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          var.unshift("STRING");Fi[	@=iI"{      end
      
      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          (var << "STRING");Fi[	@“I"%@var, @var, @var = var, var, var;Fi	[	[	@ui?I"          # Creates a new SyncContext object which handles a single directory
          # from the Syncer::Base @directories array.
          def function(var, var, var)
            @var, @var, @var = var, var, var
            @var = File.join(var, File.basename(var));Fi[	@riI"Æ        attr_accessor("LITERAL", "LITERAL", "LITERAL", "LITERAL")
        
        def function(var, var, var)
          @var, @var, @var = var, var, var
          @var = nil;Fi[	@ûiI"•        attr_accessor("LITERAL", "LITERAL")
        
        def function(var, var, var)
          @var, @var, @var = var, var, var
          @var = @var = "LITERAL";Fi[	@ÊiI"•        # The object being transitioned
        # The transition being run
        def function(var, var, var)
          @var, @var, @var = var, var, var
        end;Fi[	@◊I"require("dependencies");Fi	[	[	I"6projects//homebrew_proj/test/test_dependencies.rb;Ti I"brequire("testing_env")
require("dependencies")
class DependenciesTests < Test::Unit::TestCase;Fi [	I"4projects//homebrew_proj/test/test_dependency.rb;Ti I"`require("testing_env")
require("dependencies")
class DependableTests < Test::Unit::TestCase;Fi [	I">projects//homebrew_proj/test/test_dependency_collector.rb;Ti I"Irequire("testing_env")
require("dependencies")
require("extend/set");Fi [	I"5projects//homebrew_proj/test/test_requirement.rb;Ti I"arequire("testing_env")
require("dependencies")
class RequirementTests < Test::Unit::TestCase;Fi [	@“@Ñi	[	[	@…ihI"ù    DEVISE_SCOPE_KEYS = ["LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL"]
    
    def function(var, var, var)
      begin
        (var = {};Fi[	@<icI"Á    # @param block [#to_proc] A block that can be yielded to within the template
    # @return [String] The rendered template
    def function(var, var, var)
      begin
      (var = if var.instance_variable_defined?("STRING") then;Fi[	@LiºI"Æ    # If no valid UTF-8 char exists at position i,
    # ucharcopy writes Ustrerr and returns 1.
    def function(var, var, var)
      begin
        (var = (var.length - var);Fi[	@£iI"w      end
      
      def function(var, var, var)
        begin
          (var = Twitter::API::Arguments.new(var);Fi[	I"%assert(ARGV.switch?("STRING").!);F@Ö/i	[	[	@i(I"¥    assert(ARGV.switch?("STRING"))
    assert(ARGV.switch?("STRING"))
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!);Fi[	@i)I"∂    assert(ARGV.switch?("STRING"))
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!);Fi[	@i*I"∏    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!);Fi[	@i+I"ô    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
    assert(ARGV.switch?("STRING").!)
  end;Fi[	I" assert_equal(case MacOS.cat;F@@i	[	[	@+iI"ü    MacOS.bottles_are_supported do
      var = SnowLeopardBottleSpecTestBall.new
      assert_equal(case MacOS.cat
      when "LITERAL" then
        var.bottle;Fi[	@+i I"ë      end, var.active_spec)
      var = LionBottleSpecTestBall.new
      assert_equal(case MacOS.cat
      when "LITERAL" then
        var.bottle;Fi[	@ƒiYI"ª    assert_equal("LITERAL", var.bottle.checksum.hash_type)
    assert_equal("LITERAL", var.devel.checksum.hash_type)
    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING";Fi[	@ƒiI"ü    var = RevisedBottleSpecTestBall.new
    assert_equal("LITERAL", var.bottle.revision)
    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING";Fi[	@I"-#     $icons: sprite-map("icons/*.png");;Fi[[	@\i-I"&  # Creates a Compass::SassExtensions::Sprites::SpriteMap object. A sprite map, when used in a property is the same
  # as calling sprite-url. So the following background properties are equivalent:
  #
  #     $icons: sprite-map("icons/*.png");
  #     background: sprite-url($icons) no-repeat;;Fi[	@\iÜI"Ë  # Returns the position for the original image in the sprite.
  # This is suitable for use as a value to background-position:
  #
  #     $icons: sprite-map("icons/*.png");
  #     background-position: sprite-position($icons, new);;Fi[	@\iêI"Á  # You can adjust the background relative to this position by passing values for
  # `$offset-x` and `$offset-y`:
  #
  #     $icons: sprite-map("icons/*.png");
  #     background-position: sprite-position($icons, new, 3px, -2px);;Fi[	I"L# Describes the current validation errors on the given object.  If none;FI"F# are specific, then the default error is interpeted as a "halt".;Fi[[	@èi%I"æ      end
      
      # Describes the current validation errors on the given object.  If none
      # are specific, then the default error is interpeted as a "halt".
      def function(var);Fi[	@kiI"æ      end
      
      # Describes the current validation errors on the given object.  If none
      # are specific, then the default error is interpeted as a "halt".
      def function(var);Fi[	@õi"I"æ      end
      
      # Describes the current validation errors on the given object.  If none
      # are specific, then the default error is interpeted as a "halt".
      def function(var);Fi[	I"7var.instance_eval { @var = Version.new("STRING") };FI"Cvar.active_spec.instance_eval { @var = Version.new("STRING") };Fi[[	@›iNI"¬    require("cmd/cleanup")
    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") }
    var = TestBall.new;Fi[	@›iQI"Í    var.active_spec.instance_eval { @var = Version.new("STRING") }
    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") }
    var = TestBall.new;Fi[	@›iTI"„    var.active_spec.instance_eval { @var = Version.new("STRING") }
    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") }
    nostdout do;Fi[	@EI"?@var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|;Fi[[	@÷iI"Ø    #
    # @return [Array<Twitter::Size>]
    def function
      @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
        var[var] = Twitter::Size.fetch_or_new(var);Fi[	@‰iI"π      #
      # @return [Array<Twitter::Size>]
      def function
        @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
          var[var] = Twitter::Size.fetch_or_new(var);Fi[	@ËiI"Ø    #
    # @return [Array<Twitter::Size>]
    def function
      @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
        var[var] = Twitter::Size.fetch_or_new(var);Fi[	@EI"var = @attrs["STRING"];Fi[[	@TiI"e    
    # @return [Integer]
    def function
      var = @attrs["STRING"]
      var.to_i if var;Fi[	@TiI"e    
    # @return [Integer]
    def function
      var = @attrs["STRING"]
      var.to_i if var;Fi[	@TiI"k    
    # @return [Time]
    def function
      var = @attrs["STRING"]
      Time.at(var.to_i) if var;Fi[	@Â@Æ/i[[	@›iMI"∫  def function
    require("cmd/cleanup")
    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") };Fi[	@›iPI"
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") }
    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") };Fi[	@›iSI"
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") }
    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") };Fi[	@•/@±i[[	@èi&I"      
      # Describes the current validation errors on the given object.  If none
      # are specific, then the default error is interpeted as a "halt".
      def function(var)
        var.errors.empty? ? ("STRING") : ((var.errors.full_messages * "STRING"));Fi[	@kiI"÷      
      # Describes the current validation errors on the given object.  If none
      # are specific, then the default error is interpeted as a "halt".
      def function(var)
        if var.errors.empty? then;Fi[	@õi#I"      
      # Describes the current validation errors on the given object.  If none
      # are specific, then the default error is interpeted as a "halt".
      def function(var)
        var.errors.empty? ? ("STRING") : ((var.errors.full_messages * "STRING"));Fi[	I"L# Resets any errors previously added when invalidating the given object;F@±i[[	@èi+I"®      end
      
      # Resets any errors previously added when invalidating the given object
      def function(var)
        var.errors.clear if supports_validations?;Fi[	@ki*I"®      end
      
      # Resets any errors previously added when invalidating the given object
      def function(var)
        var.errors.clear if supports_validations?;Fi[	@õi(I"è      end
      
      # Resets any errors previously added when invalidating the given object
      def function(var)
        var.errors.clear;Fi[	I"var = nil;F@	i[[	@biÛI"~      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then;Fi[	@bi˝I"~      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then;Fi[	@biI"~      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then;Fi[	I"var.write("STRING");F@Î#i[[	@ßiåI"Ç  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!);Fi[	@ßiúI"Ç  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!);Fi[	@ßi¨I"Ç  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!);Fi[	@/I""assert_nil(var.head.checksum);Fi[[	@ƒi∂I"ª    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url);Fi[	@ƒi≈I"ª    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url);Fi[	@ƒi‘I"ª    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url);Fi[	I"A# Adds hooks into validation for automatically firing events;F@Ei[[	@èiïI"y      end
      
      # Adds hooks into validation for automatically firing events
      def function
        super;Fi[	@kiiI"y      end
      
      # Adds hooks into validation for automatically firing events
      def function
        super;Fi[	@õi\I"¥      end
      
      # Adds hooks into validation for automatically firing events
      def function
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"));Fi[	@±I"4if (var["LITERAL", "LITERAL"] == "STRING") then;Fi[[	@Li§I"{    end
    
    def function(var)
      if (var["LITERAL", "LITERAL"] == "STRING") then
        ["LITERAL", "STRING", nil];Fi[	@Li¨I"|    end
    
    def function(var)
      if (var["LITERAL", "LITERAL"] == "STRING") then
        ["LITERAL", "STRING", true];Fi[	@Li¥I"}    end
    
    def function(var)
      if (var["LITERAL", "LITERAL"] == "STRING") then
        ["LITERAL", "STRING", false];Fi[	I")assert(var.fails_with?("LITERAL").!);F@.i[[	@¡	iI"∫    var = TestLLVMFailure.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!);Fi[	@¡	i<I"≤    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"))
    var.select_compiler;Fi[	@¡	iEI"∆    var = TestMoreMixedCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"));Fi[	I"+var = eval(IO.read(var), binding, var);FI"Avar["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL");Fi[[	@ !iI"var = "STRING"
var = eval(IO.read(var), binding, var)
var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL")
unless (::ActiveRecord::VERSION::MAJOR == "LITERAL") and ((::ActiveRecord::VERSION::MINOR < "LITERAL") or (::ActiveRecord::VERSION::TINY < "LITERAL")) then;Fi[	I"Sprojects//state_machine_proj/state_machine/integrations/mongo_mapper/locale.rb;TiI"{var = "STRING"
var = eval(IO.read(var), binding, var)
var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL")
var;Fi[	I"Nprojects//state_machine_proj/state_machine/integrations/mongoid/locale.rb;TiI"{var = "STRING"
var = eval(IO.read(var), binding, var)
var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL")
var;Fi[	@E@~i[[	@ªiBI")  end
  
  def function
    []
  end;Fi[	@ªiFI")  end
  
  def function
    []
  end;Fi[	@˝iI"É        
        # The list of ancestor names that cause this integration to matched.
        def function
          []
        end;Fi[	@8"I"Rowner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true));Fi[[	@îihI"µ        end
        def function
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true))
          end;Fi[	@IiPI"µ        end
        def function
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true))
          end;Fi[	@8iI"µ        end
        def function
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true))
          end;Fi[	@“@wi[[	@å i"I"L    end
    
    def function(var, var, var)
      # do nothing
    end;Fi[	@ˇ	iI"y  module XML
    class ProcessingInstruction < Node
      def function(var, var, var)
        # do nothing
      end;Fi[	@
iI"Ö        ###
        # Called when an XML declaration is parsed
        def function(var, var, var)
          # do nothing
        end;Fi[	@8"I"Nowner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true));Fi[[	@Ôi<I"Ë      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else;Fi[	@¸i5I"Ë      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else;Fi[	@i9I"Ë      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else;Fi[	@.I"var.select_compiler;Fi[[	@¡	i$I"√    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    var.select_compiler
    assert_equal(MacOS.default_compiler, ENV.compiler);Fi[	@¡	i=I"∏    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"))
    var.select_compiler
    assert_equal("LITERAL", ENV.compiler);Fi[	@¡	iGI"∏    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    var.select_compiler
    assert_equal("LITERAL", ENV.compiler);Fi[	I"B# Only runs validations on the action if using <tt>:save</tt>;F@Ei[[	@ÔiI"ã      protected
      
      # Only runs validations on the action if using <tt>:save</tt>
      def function
        (action == "LITERAL");Fi[	@¸iI"ã      protected
      
      # Only runs validations on the action if using <tt>:save</tt>
      def function
        (action == "LITERAL");Fi[	@iI"ã      protected
      
      # Only runs validations on the action if using <tt>:save</tt>
      def function
        (action == "LITERAL");Fi[	@◊@£i[[	@Ùi I"Grequire("testing_env")
require("formula")
require("test/testball");Fi [	@fiI"eabort if ARGV.include?("STRING")
require("testing_env")
require("formula")
require("cmd/update");Fi[	@Ëi I"Grequire("testing_env")
require("formula")
require("test/testball");Fi [	@.@0i[[	@¡	iI"¥    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    var.select_compiler;Fi[	@¡	i;I"¬    var = TestMixedCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"));Fi[	@¡	icI"œ    var = TestBlockWithoutBuildCompilerFailure.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL").!);Fi[	@EI"Paperclip.log("STRING");Fi[[	@æ'iI"y    end
    
    def function
      Paperclip.log("STRING")
      each_attachment { |var, var| var.send("LITERAL") };Fi[	@æ'iI"y    end
    
    def function
      Paperclip.log("STRING")
      each_attachment { |var, var| var.send("LITERAL") };Fi[	@æ'iI"y    end
    
    def function
      Paperclip.log("STRING")
      each_attachment { |var, var| var.send("LITERAL") };Fi[	@±I"if is_haml? then;Fi[[	@uiI"¨    alias_method("LITERAL", "LITERAL")
    
    def function(var)
      if is_haml? then
        if Haml::Util.rails_xss_safe? and var.is_a?(ActiveSupport::SafeBuffer) then;Fi[	@ciêI"ä    
    module TextHelper
      def function(var)
        if is_haml? then
          haml_buffer.buffer.concat(haml_xss_html_escape(var));Fi[	@ciúI"â      alias_method("LITERAL", "LITERAL")
      
      def function(var)
        if is_haml? then
          haml_buffer.buffer.concat(var);Fi[	@EI")@queued_for_write.each do |var, var|;Fi[[	@∆i©I"√    
    # called by storage after the writes are flushed and before @queued_for_writes is cleared
    def function
      @queued_for_write.each do |var, var|
        var.close unless var.closed?;Fi[	@ıiI"ä      
      #:nodoc:
      def function
        @queued_for_write.each do |var, var|
          FileUtils.mkdir_p(File.dirname(path(var)));Fi[	@äiΩI"j      
      #:nodoc:
      def function
        @queued_for_write.each do |var, var|
          begin;Fi[	@˚+@@i[[	@±iI"¥    case @language
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	@±iI"–      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING"];Fi[	@±i%I"–      ["STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"]
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	@ı/@/i[[	@ƒi∑I"ﬁ    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy);Fi[	@ƒi∆I"ﬁ    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy);Fi[	@ƒi’I"ﬁ    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy);Fi[	@±I"var = destination(var);Fi[[	@ÌiÄI"    #
    # Returns nothing.
    def function(var)
      var = destination(var)
      FileUtils.mkdir_p(File.dirname(var));Fi[	@i—I"    #
    # Returns nothing.
    def function(var)
      var = destination(var)
      FileUtils.mkdir_p(File.dirname(var));Fi[	@∞i6I"π    #
    # Returns false if the file was not modified since last time (no-op).
    def function(var)
      var = destination(var)
      return false if File.exist?(var) and modified?.!;Fi[	@“I" var = [var.first, var.last];Fi[[	@=iÿI"g      end
      
      def function(var, var, var)
        var = [var.first, var.last]
        var;Fi[	@=i›I"g      end
      
      def function(var, var, var)
        var = [var.first, var.last]
        var;Fi[	@=i‚I"g      end
      
      def function(var, var, var)
        var = [var.first, var.last]
        var;Fi[	I"#if (version == "LITERAL") then;F@Ü	i[[	@º	iI"R  
  def function
    if (version == "LITERAL") then
      "LITERAL"
    else;Fi[	@º	iI"_      "LITERAL"
    else
      if (version == "LITERAL") then
        "LITERAL"
      else;Fi[	@º	iI"i        "LITERAL"
      else
        if (version == "LITERAL") then
          "LITERAL"
        else;Fi[	@Î.I"3assert_instance_of(HeadSoftwareSpec, var.head);Fi[[	@ƒi∫I"’    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end;Fi[	@ƒi…I"’    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end;Fi[	@ƒiÿI"’    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end;Fi[	@±I"*return image_url if (var == "STRING");Fi[[	@¢ilI"z  end
  
  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then;Fi[	@¢iuI"z  end
  
  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then;Fi[	@¢i~I"z  end
  
  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then;Fi[	@±I"!Rails.logger.debug("STRING");Fi[[	@#i%I"ç  end
  
  def function(var)
    Rails.logger.debug("STRING")
    if (self.parent_author_signature.nil?.! or self.parent.author.remote?) then;Fi[	@î&i/I"i  end
  
  def function(var)
    Rails.logger.debug("STRING")
    self.target.destroy if self.target;Fi[	@–iHI"ù  end
  
  def function(var)
    Rails.logger.debug("STRING")
    if var = Reshare.where("LITERAL" => (var.person.id), "LITERAL" => (target_guid)).first then;Fi[	I"assert_not_nil(var.head);FI"assert_nil(var.stable);Fi[[	@ƒi±I"Ñ  def function
    var = HeadOnlySpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle);Fi[	@ƒi¿I"å  def function
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle);Fi[	@ƒiœI"å  def function
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle);Fi[	@À0I"assert_nil(var.bottle);Fi[[	@ƒi≤I"è    var = HeadOnlySpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel);Fi[	@ƒi¡I"ó    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel);Fi[	@ƒi–I"ó    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel);Fi[	@±@Ri[[	@Ø(i
I"[    
    module ClassMethods
      def function(var)
        raise("STRING")
      end;Fi[	@Ø(iI"O      end
      
      def function(var)
        raise("STRING")
      end;Fi[	@…i}I"E    end
    
    def function(var)
      raise("STRING")
    end;Fi[	@‘0I"assert_nil(var.devel);Fi[[	@ƒi≥I"ò    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec);Fi[	@ƒi¬I"ò    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec);Fi[	@ƒi—I"ò    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec);Fi[	@‡I"module DataMapper;Fi[[	@ iI"Zmodule StateMachine
  module Integrations
    module DataMapper
      module Observer;Fi[	@%iI"_module StateMachine
  module Integrations
    module DataMapper
      version("STRING") do;Fi[	@kiI"Xmodule StateMachine
  module Integrations
    module DataMapper
      include(Base);Fi[	@Â0@ /i[[	@ƒi¥I"´    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version);Fi[	@ƒi√I"´    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version);Fi[	@ƒi“I"´    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version);Fi[	I",ohai(var, var.backtrace) if ARGV.debug?;F@%i[[	@îi‘I"ê      puts("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?
      @var = true
      ignore_interrupts { var.unlink };Fi[	@îiÈI"v      puts("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?
      @var = true
    end;Fi[	@îi˛I"v      opoo("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?
      @var = true
    end;Fi[	I"rescue NotImplementedError;F@wi[[	@‚i*I"î            begin
              File.lchown(var.uid, var.gid, var)
            rescue NotImplementedError
              # do nothing
            end;Fi[	@‚i4I"ô            begin
              File.lchmod(var.mode.&("LITERAL"), var)
            rescue NotImplementedError
              # do nothing
            end;Fi[	@‚i>I"å            begin
              File.lchmod(var.mode, var)
            rescue NotImplementedError
              # do nothing
            end;Fi[	I"H# Uses around callbacks to run state events if using the :save hook;F@Ei[[	@Ôi:I"ò      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then;Fi[	@¸i3I"ò      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then;Fi[	@i7I"ò      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function
        if (action_hook == "LITERAL") then;Fi[	@>0@	i[[	@Ôi=I"Æ      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super;Fi[	@¸i6I"Æ      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super;Fi[	@i:I"Æ      def function
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super;Fi[	I":# Runs state events around the machine's :save action;F@±i[[	@ÔiCI"∞      end
      
      # Runs state events around the machine's :save action
      def function(var)
        var.class.state_machines.transitions(var, action).perform { yield };Fi[	@¸i<I"∞      end
      
      # Runs state events around the machine's :save action
      def function(var)
        var.class.state_machines.transitions(var, action).perform { yield };Fi[	@i@I"∞      end
      
      # Runs state events around the machine's :save action
      def function(var)
        var.class.state_machines.transitions(var, action).perform { yield };Fi[	I"MercurialDownloadStrategy;F@@i[[	@zi I"ä      GitDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy;Fi[	@ziI"ç      FossilDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy;Fi[	@zi%I"ã      GitDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      NoUnzipCurlDownloadStrategy;Fi[	I"GitDownloadStrategy;F@@i[[	@zi¸I"Ä      BazaarDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy;Fi[	@zi˛I"É      GitDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy;Fi[	@zi#I"É      CVSDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy;Fi[	I"var.each do |var|;F@æi[[	@ÂiI"`  def function(var)
    var = []
    var.each do |var|
      case var
      when Array then;Fi[	@Âi=I"`  def function(var)
    var = []
    var.each do |var|
      case var
      when Array then;Fi[	@˛i/I"°      def function(var, var, var)
        var = Nokogiri::XML::Element.new(var, self, &var)
        var.each do |var|
          case var
          when Hash then;Fi[	I"if @spec and @ref then;F@.i[[	@zi=I"x    var = Dir.getwd
    Dir.chdir(@clone) do
      if @spec and @ref then
        ohai("STRING")
        case @spec;Fi[	@zi¢I"√    var = Dir.getwd
    Dir.chdir(@clone) do
      if @spec and @ref then
        ohai("STRING")
        safe_system(hgpath, "STRING", "STRING", "STRING", "STRING", @ref, "STRING", "STRING", var);Fi[	@zi‰I"ö  def function
    safe_system(fossilpath, "STRING", @clone)
    if @spec and @ref then
      ohai("STRING")
      safe_system(fossilpath, "STRING", @ref);Fi[	@EI"'var = (HOMEBREW_PREFIX / "STRING");Fi[[	@ßiäI"[  end
  
  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING");Fi[	@ßiöI"[  end
  
  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING");Fi[	@ßi™I"[  end
  
  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING");Fi[	@=1I""var = ("LITERAL" + "LITERAL");Fi[[	@iI"©      module ClassMethods
        def function(var)
          var.each do |var|
            var = ("LITERAL" + "LITERAL")
            class_eval("STRING", "STRING", var);Fi[	@iI"Õ        # reader but prefixes the attribute name with "raw_".
        def function(var)
          var.each do |var|
            var = ("LITERAL" + "LITERAL")
            class_eval("STRING", "STRING", var);Fi[	@iRI"∑          inherited_reader(*var)
          inherited_writer(*var)
          var.each do |var|
            var = ("LITERAL" + "LITERAL")
            class_eval("STRING", "STRING", var);Fi[	I"
chdir;F@@i[[	@zi^I"æ    when "LITERAL", "LITERAL", "LITERAL", "LITERAL" then
      safe_system("STRING", "STRING", @tarball_path)
      chdir
    when "LITERAL" then
      raise("STRING") unless which("STRING");Fi[	@zibI"∂      raise("STRING") unless which("STRING")
      safe_system("STRING")
      chdir
    when "LITERAL" then
      safe_system("STRING", "STRING", @tarball_path, File.basename(@url));Fi[	@zieI"≤    when "LITERAL" then
      safe_system("STRING", "STRING", @tarball_path, File.basename(@url))
      chdir
    when "LITERAL" then
      raise("STRING") unless which("STRING");Fi[	I"var.choice("LITERAL") do;F@ i[[	@SijI"Ç      end
      if has_debugger? then
        var.choice("LITERAL") do
          puts("STRING")
          var.restart { debugger };Fi[	@SipI"|      end
      if can_use_readline? then
        var.choice("LITERAL") do
          puts("STRING")
          var.restart do;Fi[	@Si|I"o        end
      end
      var.choice("LITERAL") do
        puts("STRING")
        interactive_shell(var);Fi[	@±I"Pvar = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil);Fi[[	@iFI"      # For more information see Nokogiri::XML::Node#css and
      # Nokogiri::XML::Node#xpath
      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil);Fi[	@iWI"„      #
      # For more information see Nokogiri::XML::Node#css
      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil);Fi[	@ikI"Â      #
      # For more information see Nokogiri::XML::Node#xpath
      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil);Fi[	I"+if @compilers.include?("LITERAL") then;F@Ü	i[[	@iiI"Ä    ENV.send(case ENV.compiler
    when "LITERAL" then
      if @compilers.include?("LITERAL") then
        "LITERAL"
      else;Fi[	@irI"q        "LITERAL"
      else
        if @compilers.include?("LITERAL") then
          "LITERAL"
        else;Fi[	@i|I"q        "LITERAL"
      else
        if @compilers.include?("LITERAL") then
          "LITERAL"
        else;Fi[	I"HOMEBREW_REPOSITORY.cd do;FI"var = UpdaterMock.new;Fi[[	@fi1I"s  
  def function
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING");Fi[	@fiCI"á  def function
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING");Fi[	@fiWI"á  def function
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING");Fi[	@EI"2FileUtils.touch((HOMEBREW_PREFIX / "STRING"));Fi[[	@Ái-I"{  end
  
  def function
    FileUtils.touch((HOMEBREW_PREFIX / "STRING"))
    assert_raise(RuntimeError) { @keg.link };Fi[	@Ái2I"g  end
  
  def function
    FileUtils.touch((HOMEBREW_PREFIX / "STRING"))
    var = OpenStruct.new;Fi[	@Ái9I"g  end
  
  def function
    FileUtils.touch((HOMEBREW_PREFIX / "STRING"))
    var = OpenStruct.new;Fi[	@ÑI"
yield;Fi[[	@∏i∂I"A  
  def function
    begin
      yield
    rescue TypeError;Fi[	I"0projects//diaspora_proj/models/jobs/base.rb;TiI"b    
    def self.suppress_annoying_errors(var)
      begin
        yield
      rescue => var;Fi[	@iõI"s    # that were made to the object involved.
    def function
      begin
        yield
      rescue Exception;Fi[	I"-dump_formula_report("LITERAL", "STRING");F@¢1i[[	@wivI"©class Report < Hash
  def function
    dump_formula_report("LITERAL", "STRING")
    dump_formula_report("LITERAL", "STRING")
    dump_formula_report("LITERAL", "STRING");Fi[	@wiwI"¬  def function
    dump_formula_report("LITERAL", "STRING")
    dump_formula_report("LITERAL", "STRING")
    dump_formula_report("LITERAL", "STRING")
    dump_formula_report("LITERAL", "STRING");Fi[	@wixI"π    dump_formula_report("LITERAL", "STRING")
    dump_formula_report("LITERAL", "STRING")
    dump_formula_report("LITERAL", "STRING")
    dump_formula_report("LITERAL", "STRING")
  end;Fi[	I"D#   vehicle.state                                 # => "idling";FI"A#   vehicle.alarm_state                           # => "off";Fi[[	@¯i[I"÷    #   
    #   vehicle.fire_events(:ignite, :disable_alarm)  # => true
    #   vehicle.state                                 # => "idling"
    #   vehicle.alarm_state                           # => "off"
    #   ;Fi[	@¯i`I"	    #   # If any event fails, the entire event chain fails
    #   vehicle.fire_events(:ignite, :enable_alarm)   # => false
    #   vehicle.state                                 # => "idling"
    #   vehicle.alarm_state                           # => "off"
    #   ;Fi[	@¯ieI":    #   # Exception raised on invalid event
    #   vehicle.fire_events(:park, :invalid)          # => StateMachine::InvalidEvent: :invalid is an unknown event
    #   vehicle.state                                 # => "idling"
    #   vehicle.alarm_state                           # => "off"
    def function(var);Fi[	@ÑI"(require("rubygems");Fi[[	I"0projects//compass_proj/compass/validator.rb;Ti I"Abegin
  (require("rubygems")
  require("compass-validator"));Fi [	@SiRI"k  if can_use_readline? then
    begin
    begin
      (require("rubygems")
      require("ruby-debug");Fi[	@Pi>I"ARGV.extend(HomebrewArgvExtension)
ENV.extend(HomebrewEnvExtension)
begin
  (require("rubygems")
  require("mocha/setup"));Fi[	I"var.merge!(var.report);FI""assert(var.expectations_met?);Fi[[	@fi;I"Ä      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?)
      assert(var.empty?);Fi[	@fiMI"ö      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?)
      assert(var.select_formula("LITERAL").empty?);Fi[	@fiaI"Ø      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?)
      assert_equal(["STRING", "STRING"], var.select_formula("LITERAL"));Fi[	I"var.pull!;FI"var = Report.new;Fi[[	@fi9I"ì      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.pull!
      var = Report.new
      var.merge!(var.report);Fi[	@fiKI"ò      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!
      var = Report.new
      var.merge!(var.report);Fi[	@fi_I"ò      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!
      var = Report.new
      var.merge!(var.report);Fi[	@±I"verify_map(var, "STRING");Fi[[	@\i#I"á  #       background-image: inline-sprite($icon-sprites);
  #      }
  def function(var)
    verify_map(var, "STRING")
    var.generate;Fi[	@\iTI"¿  # Returns the name of a sprite map
  # The name is derived from the folder than contains the sprites.
  def function(var)
    verify_map(var, "STRING")
    Sass::Script::String.new(var.name);Fi[	@\i|I"q  
  # Returns a url to the sprite image.
  def function(var)
    verify_map(var, "STRING")
    var.generate;Fi[	@ 1@ø1i[[	@fi:I"ä      var.in_repo_expect("STRING")
      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?);Fi[	@fiLI"è      var.in_repo_expect("STRING", var)
      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?);Fi[	@fi`I"è      var.in_repo_expect("STRING", var)
      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?);Fi[	@Ü-@i[[	@ iI"Å        # 
        #   class Vehicle
        #     include DataMapper::Resource
        #     
        #     property :id, Serial;Fi[	@ iSI"Å        # 
        #   class Vehicle
        #     include DataMapper::Resource
        #     
        #     property :id, Serial;Fi[	@ iwI"Å        # 
        #   class Vehicle
        #     include DataMapper::Resource
        #     
        #     property :id, Serial;Fi[	I"#     property :id, Serial;FI"##     property :state, :String;Fi[[	@ iI"í        #     include DataMapper::Resource
        #     
        #     property :id, Serial
        #     property :state, :String
        #     ;Fi[	@ iUI"í        #     include DataMapper::Resource
        #     
        #     property :id, Serial
        #     property :state, :String
        #     ;Fi[	@ iyI"í        #     include DataMapper::Resource
        #     
        #     property :id, Serial
        #     property :state, :String
        #     ;Fi[	@Ì1@i[[	@ iI"ö        #     
        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do;Fi[	@ iVI"ö        #     
        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do;Fi[	@ izI"ö        #     
        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do;Fi[	@≤@˙i[[	@úiCI"^  def function(var, var, var)
    @var = var
    @var = var
    @var = nil
    @var = nil;Fi[	@‡i≤I"f        
        def function(var)
          @var = var
          @var = nil
          @var = nil;Fi[	@ŒiI"o      else
        if var.is_a?(String) then
          @var = var
          @var = nil
          @var = {};Fi[	I"if var.symlink? then;F@Ñi[[	@‚i'I"Ø        File.utime(var.atime, var.mtime, var) if var.symlink?.!
        begin
          if var.symlink? then
            begin
              File.lchown(var.uid, var.gid, var);Fi[	@‚i1I"ê          end
        rescue Errno::EPERM
          if var.symlink? then
            begin
              File.lchmod(var.mode.&("LITERAL"), var);Fi[	@‚i;I"y          end
        else
          if var.symlink? then
            begin
              File.lchmod(var.mode, var);Fi[	I"$n = "LITERAL";FI"$d = "LITERAL";Fi[[	I")projects//homebrew_proj/cmd/prune.rb;TiI"f  # certain filesystem actions.
  def function
    $n = "LITERAL"
    $d = "LITERAL"
    var = [];Fi[	@ÂiwI",  end
end
$n = "LITERAL"
$d = "LITERAL";Fi[	@πifI"©    begin
      (raise("STRING") if linked_keg_record.directory?
      $n = "LITERAL"
      $d = "LITERAL"
      var = ["STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	I"case var.length;F@@i[[	@VidI"d  
  def function(var, var, var)
    case var.length
    when "LITERAL" then
      # do nothing;Fi[	@ziuI"m  def function
    var = Dir["STRING"]
    case var.length
    when "LITERAL" then
      raise("STRING");Fi[	@—ivI"p    def function(var)
      var = "STRING"
      case var.length
      when "LITERAL" then
        "STRING";Fi[	@±@:i[[	@YiI"∞  
  # Returns a new list after removing any non-true values
  def function(var)
    var = "LITERAL"
    if (var.size == "LITERAL") and var.first.is_a?(Sass::Script::List) then;Fi[	@√iåI"K  end
  
  def function(var)
    var = "LITERAL"
    var.each do |var|;Fi[	I")projects//homebrew_proj/cmd/untap.rb;TiI"r  end
  
  def function(var)
    var = "LITERAL"
    var = (HOMEBREW_LIBRARY / "STRING").read.split rescue [];Fi[	I"var.caveats;FI"var.finish);Fi[[	@@iWI"ê      (var = FormulaInstaller.new(var)
      var.install
      var.caveats
      var.finish)
    rescue FormulaInstallationAlreadyAttemptedError;Fi[	@ºi>I"Å      var.unlink if var
      var.install
      var.caveats
      var.finish)
    rescue FormulaInstallationAlreadyAttemptedError;Fi[	@îitI"]      var.unlink if var
      var.install
      var.caveats
      var.finish)
    ensure;Fi[	@˝I"assert(var.universal?);Fi[[	@ßiI"íclass MachOPathnameTests < Test::Unit::TestCase
  def function
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!);Fi[	@ßi5I"j  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!);Fi[	@ßiCI"j  
  def function
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!);Fi[	@±I"it("STRING") do;Fi[[	I"9projects//omni_proj/omniauth/test/strategy_macros.rb;TiI"ã      end
      
      def function(var)
        it("STRING") do
          expect((last_request.env["STRING"] or {})["STRING"]).to(eq(var));Fi[	@B2iI"ã      end
      
      def function(var)
        it("STRING") do
          expect((last_request.env["STRING"] or {})["STRING"]).to(eq(var));Fi[	@B2iI"ã      end
      
      def function(var)
        it("STRING") do
          expect((last_request.env["STRING"] or {})["STRING"]).to(eq(var));Fi[	I"exec_browser("STRING");F@	i[[	@ÌiI"ê  def function
    if ARGV.include?("STRING") then
      exec_browser("STRING")
    else
      exec_browser("STRING") if ARGV.include?("STRING");Fi[	@πiI"~  def function
    if ARGV.include?("STRING") then
      exec_browser("STRING")
    else
      if ARGV.include?("STRING") then;Fi[	@πiI"v    else
      if ARGV.include?("STRING") then
        exec_browser("STRING")
      else
        var = ARGV.first;Fi[	@≤@i[[	@ i	I"x    class StrategyNotFound < NameError
      def function(var)
        @var = var
        super("STRING")
      end;Fi[	@‰iI"D  
  def function(var)
    @var = var
    super("STRING")
  end;Fi[	@‰iI"D  
  def function(var)
    @var = var
    super("STRING")
  end;Fi[	@˚%@I2i[[	@ÌiI"Ä  # Create a formula from a tarball URL
  def function
    if ARGV.include?("STRING") then
      exec_browser("STRING")
    else;Fi[	@πiI"`  
  def function
    if ARGV.include?("STRING") then
      exec_browser("STRING")
    else;Fi[	@πiI"z      exec_browser("STRING")
    else
      if ARGV.include?("STRING") then
        exec_browser("STRING")
      else;Fi[	@≤I"cache_current_values;Fi[[	@#iI"t  class FileAdapter < AbstractAdapter
    def function(var)
      @var = var
      cache_current_values
    end;Fi[	@&iI"í  class StringioAdapter < AbstractAdapter
    def function(var)
      @var = var
      cache_current_values
      @var = copy_to_tempfile(@target);Fi[	@)iI"ú  class UploadedFileAdapter < AbstractAdapter
    def function(var)
      @var = var
      cache_current_values
      if @target.respond_to?("LITERAL") then;Fi[	I"require("blacklist");F@§i[[	@ÌiI"Krequire("formula")
require("blacklist")
module Homebrew
  extend(self);Fi[	@@iI"irequire("formula_installer")
require("hardware")
require("blacklist")
module Homebrew
  extend(self);Fi[	@πiI"Krequire("formula")
require("blacklist")
module Homebrew
  extend(self);Fi[	@±@P'i[[	@…i¥I"b    #     end
    #
    def function(var)
      @var = false
      var = var.extract_options!;Fi[	@œi¥I"K    end
    
    def function(var)
      @var = false
      @var = nil;Fi[	@œi∫I"B    end
    
    def function(var)
      @var = false
    end;Fi[	I"*problem("STRING") if var =~ "LITERAL";F@|2i[[	@Íi}I"≈      next if var =~ "LITERAL"
      next unless var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL";Fi[	@Íi~I"“      next unless var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL";Fi[	@ÍiI"∑      problem("STRING") if var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL"
      problem("STRING") if var =~ "LITERAL"
    end;Fi[	I"problem("STRING");F@	i[[	@ÍiÜI"°      next if var.nil?
      if var.version.to_s.empty? then
        problem("STRING")
      else
        var = var.version unless var.version.detected_from_url?;Fi[	@ÍiöI"¥      problem("STRING") if (var.hash_type == "LITERAL")
      if var.empty? then
        problem("STRING")
      else
        problem("STRING") unless (var.hexdigest.length == var);Fi[	@Íi™I"â        problem("STRING") unless var.url =~ "LITERAL"
      when "LITERAL" then
        problem("STRING")
      else
        # do nothing;Fi[	@62@i[[	@ßiI"|  def function
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	@ßi6I"|  def function
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	@ßiDI"|  def function
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	I"!#       other_states :idling;F@&i[[	@4iI"    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end;Fi[	@4i+I"    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end;Fi[	@4iFI"    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end;Fi[	I"#       event :disable do;F@¯&i[[	@¯iPI"t    #       end
    #       
    #       event :disable do
    #         transition all => :off
    #       end;Fi[	@¯i}I"t    #       end
    #       
    #       event :disable do
    #         transition all => :off
    #       end;Fi[	@iîI"ö    #     
    #     state_machine :alarm_state, :initial => :active do
    #       event :disable do
    #         transition all => :off
    #       end;Fi[	@±@1 i[[	@ziI"ô        def_delegators("LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL")
        
        def function(var)
          @var = []
          @var = var;Fi[	@úi
I"|  
  # The patches defined in a formula and the DATA from that file
  def function(var)
    @var = []
    return if var.nil?;Fi[	@˛iI"é      
      # A list of Nokogiri::XML::SyntaxError found when parsing a document
      def function(var)
        @var = []
        @var = nil;Fi[	@EI" (@set << X11Dependency.new);Fi[[	I"7projects//homebrew_proj/test/test_comparableset.rb;TiI"\  end
  
  def function
    (@set << X11Dependency.new)
    (@set << X11Dependency.new);Fi[	@≥2iI"f  end
  
  def function
    (@set << X11Dependency.new)
    (@set << X11Dependency.new("STRING"));Fi[	@≥2i#I"Z  end
  
  def function
    (@set << X11Dependency.new)
    (@set << Requirement.new);Fi[	I"var.install;F@,2i[[	@@iVI"k    begin
      (var = FormulaInstaller.new(var)
      var.install
      var.caveats
      var.finish);Fi[	@ºi=I"f      oh1("STRING")
      var.unlink if var
      var.install
      var.caveats
      var.finish);Fi[	@îisI"f      oh1("STRING")
      var.unlink if var
      var.install
      var.caveats
      var.finish);Fi[	I"(#         transition all => :active;F@e
i[[	@¯iMI"±    #     state_machine :alarm_state, :namespace => 'alarm', :initial => :on do
    #       event :enable do
    #         transition all => :active
    #       end
    #       ;Fi[	@¯iI"µ    #     state_machine :alarm_state, :namespace => 'alarm', :initial => :active do
    #       event :enable do
    #         transition all => :active
    #       end
    #       ;Fi[	@iÃI"∂    #     state_machine :alarm_state, :initial => :active, :namespace => 'alarm' do
    #       event :turn_on do
    #         transition all => :active
    #       end
    #       ;Fi[	@EI"(@env << "LITERAL");Fi[[	I";projects//homebrew_proj/test/test_build_environment.rb;TiI"J  end
  
  def function
    (@env << "LITERAL")
    assert(@env.std?);Fi[	@œ2iI"P  end
  
  def function
    (@env << "LITERAL")
    assert(@env.userpaths?);Fi[	@œ2iI"Y  end
  
  def function
    (@env << "LITERAL")
    (@env << Proc.new { "LITERAL" });Fi[	@±I"#var = var.extract_options!.dup;Fi[[	@ÄigI"Ï      #
      #   validates :password, presence: { if: :password_required?, message: 'is forgotten.' }, confirmation: true
      def function(var)
        var = var.extract_options!.dup
        var = var.slice!(*_validates_default_keys);Fi[	@ái3I"®    # for a complete description on those values.
    #
    def function(var)
      var = var.extract_options!.dup
      var = var.map(&"LITERAL").uniq.sort_by do |var|;Fi[	@Xi I"≠      #      :size => { :in => 0..10.kilobytes }
      #
      def function(var)
        var = var.extract_options!.dup
        Paperclip::Validators.constants.each do |var|;Fi[	@.@0i[[	@¡	iI"†  def function
    var = TestLLVMFailure.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"));Fi[	@¡	i+I"©  def function
    var = TestNoCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL").!);Fi[	@¡	iDI"Æ  def function
    var = TestMoreMixedCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"));Fi[	@æI"when Hash then;Fi[[	@LiZI"    # Strings contained in x must be valid UTF-8.
    def function(var)
      case var
      when Hash then
        objenc(var);Fi[	@LieI"W    
    def function(var)
      case var
      when Hash then
        objenc(var);Fi[	@˛i0I"¢        var = Nokogiri::XML::Element.new(var, self, &var)
        var.each do |var|
          case var
          when Hash then
            var.each do |var, var|;Fi[	@¿@ñ2i[[	@4iI"    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end;Fi[	@4i*I"    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end;Fi[	@4iEI"    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end;Fi[	I")ENV.prepend_path("STRING", "STRING");F@¯2i[[	@iII"±    var.each do |var|
      var = var.opt_prefix
      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", "STRING");Fi[	@iJI"∆      var = var.opt_prefix
      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", "STRING");Fi[	@iKI"—      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", "STRING")
      ENV.prepend_path("STRING", var);Fi[	I"3var.docstring = ["STRING", "STRING", "STRING"];FI" var.parameters = ["STRING"];Fi[[	@—i{I"H          return if inherited_machine
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING", "LITERAL")))
          var.docstring = ["STRING", "STRING", "STRING"]
          var.parameters = ["STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING", "LITERAL")));Fi[	@—i~I"D          var.parameters = ["STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING", "LITERAL")))
          var.docstring = ["STRING", "STRING", "STRING"]
          var.parameters = ["STRING"]
          unless (integration or instance_attributes.include?(machine.attribute.to_sym)) then;Fi[	@—i∂I"R            var.parameters = [["STRING", "STRING"]]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var.qualified_name)))
            var.docstring = ["STRING", "STRING", "STRING"]
            var.parameters = ["STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")));Fi[	@æI"when String then;Fi[[	@LiÇI"Y    
    def function(var)
      case var
      when String then
        strenc(var);Fi[	@`iI"ê    def function(var, var)
      if RUBY_PLATFORM =~ "LITERAL" then
        case var
        when String then
          var, var = var, "STRING";Fi[	@Fi#I"v  #      or `Redis::Namespace`.
  def function(var)
    case var
    when String then
      if var["STRING"] then;Fi[	@æI"when Integer then;Fi[[	@£iBI"}      # @return [Hash]
      def function(var, var)
        case var
        when Integer then
          var["LITERAL"] = var;Fi[	@ﬁiäI"¶      # @return [Hash]
      def function(var, var, var)
        case var
        when Integer then
          var[[var, "STRING"].compact.join("STRING").to_sym] = var;Fi[	@ﬁi®I"É        var, var = [], []
        var.flatten.each do |var|
          case var
          when Integer then
            (var << var);Fi[	@5.@§i[[	@iI"Erequire("formula")
require("keg")
module Homebrew
  extend(self);Fi[	@2i I"2require("keg")
module Homebrew
  extend(self);Fi [	@≈%iI"\require("extend/ENV")
require("hardware")
require("keg")
module Homebrew
  extend(self);Fi[	@§I"assert(var.dylib?);Fi[[	@ßiI"â    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!);Fi[	@ßiI"â    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!);Fi[	@ßi,I"á    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!);Fi[	@%3@i[[	@ßiI"í    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ßiI"í    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ßi-I"í    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@±I"var ||= {};Fi[[	@[i!I"¬    #   person.serializable_hash(methods: :capitalized_name)
    #   # => {"name"=>"bob", "age"=>22, "capitalized_name"=>"Bob"}
    def function(var)
      var ||= {}
      var = attributes.keys;Fi[	@∏iI""  end
  
  def function(var)
    var ||= {}
    var = { "LITERAL" => (self.id), "LITERAL" => (self.guid), "LITERAL" => (self.name), "LITERAL" => (self.profile.image_url("LITERAL")), "LITERAL" => (self.diaspora_handle), "LITERAL" => (Rails.application.routes.url_helpers.person_path(self)) };Fi[	@~i•I"Ú    # given query.  If a match is found, then a hash containing the
    # event/state requirements that passed will be returned; otherwise, nil.
    def function(var)
      var ||= {}
      if match_event(var) and var = match_states(var) then;Fi[	I"#  end;F@i[[	@<i#I"Ö    #    include ActiveModel::Model
    #    attr_accessor :id, :name
    #  end
    #
    #  person = Person.new(id: 1, name: 'bob');Fi[	@ñi°I"q      #
      #    attr_accessor :name
      #  end
      #
      #  User.attribute_method?(:name) # => true;Fi[	@·icI"Á    #      transition all => :parked, :unless => :seatbelt_on?                  # Transitions to :parked if seatbelt is off
    #    end
    #  end
    # 
    # See StateMachine::Machine#transition for a description of the possible;Fi[	@∫I"I# Yields to the block the compressor command and filename extension.;Fi[[	@Œ$iI"õ      include(Backup::Configuration::Helpers)
      
      ##
      # Yields to the block the compressor command and filename extension.
      def function;Fi[	@∂iI"|      end
      
      ##
      # Yields to the block the compressor command and filename extension.
      def function;Fi[	@πi#I"|      end
      
      ##
      # Yields to the block the compressor command and filename extension.
      def function;Fi[	@EI"require("version");Fi[[	@ÂiòI"K  end
  
  def function
    require("version")
    Version.parse(self);Fi[	@πiZI"R  end
  
  def function
    require("version")
    Version.new(basename.to_s);Fi[	@º	i
I"∏  # This can be compared to numerics, strings, or symbols
  # using the standard Ruby Comparable methods.
  def function
    require("version")
    MacOSVersion.new(MACOS_VERSION.to_s);Fi[	@I"assert(var.mach_o_bundle?);Fi[[	@ßiKI"¶    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var));Fi[	@ßiYI"¶    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var));Fi[	@ßigI"¶    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var));Fi[	@„
@Ÿ)i[[	@liPI"n      attr_reader("LITERAL")
      
      def function(var, var)
        if var then
          @var = var;Fi[	@Âi%I"U  end
  
  def function(var, var)
    if var then
      var = File.basename(var);Fi[	@îi]I"	    # overhanging image would be cropped. Useful for square thumbnail images. The cropping
    # is weighted at the center of the Geometry.
    def function(var, var)
      if var then
        var = Geometry.new((var.width / self.width), (var.height / self.height));Fi[	I"#     </li>;FI"&#     <li class='nav' role='nav'>;Fi[[	@’iüI"û    #     <li class='nav' role='nav'>
    #       <a href='#'>Home</a>
    #     </li>
    #     <li class='nav' role='nav'>
    #       <a href='#'>About</a>;Fi[	@’i¢I"°    #     <li class='nav' role='nav'>
    #       <a href='#'>About</a>
    #     </li>
    #     <li class='nav' role='nav'>
    #       <a href='#'>Contact</a>;Fi[	@’i•I"ü    #     <li class='nav' role='nav'>
    #       <a href='#'>Contact</a>
    #     </li>
    #     <li class='nav' role='nav'>
    #       <a href='#'>FAQ</a>;Fi[	@±@ª#i[[	I"<projects//diaspora_proj/helpers/aspect_global_helper.rb;TiI"\  end
  
  def function(var)
    var = {}
    var.each { |var| var[var.to_s] = var.id };Fi[	@œi‡I"Y    end
    
    def function(var)
      var = {}
      var = StringScanner.new(var);Fi[	@siI"D  end
  
  def function(var)
    var = {}
    var.each do |var|;Fi[	@∫I"4# Name of the database that needs to get dumped;Fi[[	@IiI"r      attr_accessor("LITERAL")
      
      ##
      # Name of the database that needs to get dumped
      ##;Fi[	@kiI"      attr_deprecate("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => (lambda { |var, var| var.mysqldump_utility = var }))
      
      ##
      # Name of the database that needs to get dumped
      # To dump all databases, set this to `:all` or leave blank.;Fi[	@niI"‹      attr_deprecate("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => (lambda { |var, var| var.pg_dump_utility = var }))
      
      ##
      # Name of the database that needs to get dumped
      ##;Fi[	@g-@i[[	@ÒiI"÷    #   are specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # 
    # == Examples;Fi[	@Òi:I"÷    #   are specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # 
    # == Examples;Fi[	@iôI"”    #   specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    # 
    # For example,;Fi[	I"(assert_equal("LITERAL", var.length);FI"$assert(var.include?("LITERAL"));Fi[[	I"/projects//homebrew_proj/test/test_utils.rb;TiI"Ã    var = archs_for_command("STRING")
    if `sw_vers -productVersion` =~ "LITERAL" and ($1.to_i >= "LITERAL") then
      assert_equal("LITERAL", var.length)
      assert(var.include?("LITERAL"))
    else;Fi[	@ì3iI"‘    else
      if `sw_vers -productVersion` =~ "LITERAL" and ($1.to_i == "LITERAL") then
        assert_equal("LITERAL", var.length)
        assert(var.include?("LITERAL"))
        assert(var.include?("LITERAL"));Fi[	@ì3iI"ê        assert(var.include?("LITERAL"))
      else
        assert_equal("LITERAL", var.length)
        assert(var.include?("LITERAL"))
      end;Fi[	@O1@Ï/i[[	@ßiãI"r  
  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!);Fi[	@ßiõI"r  
  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!);Fi[	@ßi´I"r  
  def function
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!);Fi[	I" assert_equal([], var.archs);FI"$assert((var.arch == "LITERAL"));Fi[[	@ßiïI"∞    assert(var.mach_o_executable?.!)
    assert(var.text_executable?)
    assert_equal([], var.archs)
    assert((var.arch == "LITERAL"))
    assert_match("LITERAL", file(var));Fi[	@ßi•I"∞    assert(var.mach_o_executable?.!)
    assert(var.text_executable?)
    assert_equal([], var.archs)
    assert((var.arch == "LITERAL"))
    assert_match("LITERAL", file(var));Fi[	@ßiµI"µ    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert_equal([], var.archs)
    assert((var.arch == "LITERAL"))
    assert_no_match("LITERAL", file(var));Fi[	I"module Haml;FI"module Helpers;Fi[[	@»i I"Bmodule Haml
  module Helpers
    @@action_view_defined = true;Fi [	@ci I"4module Haml
  module Helpers
    module XssMods;Fi [	@’i I"7module Haml
  module Helpers
    class ErrorReturn;Fi [	@∫I";# When set to true, the user will be notified by email;Fi[[	@ΩiI"Æ      alias "LITERAL" "LITERAL"
      
      ##
      # When set to true, the user will be notified by email
      # when a backup process ends without raising any exceptions;Fi[	@ΩiI"      # When set to true, the user will be notified by email
      # when a backup process ends without raising any exceptions
      ##
      # When set to true, the user will be notified by email
      # when a backup process is successful, but has warnings;Fi[	@ΩiI"      # When set to true, the user will be notified by email
      # when a backup process is successful, but has warnings
      ##
      # When set to true, the user will be notified by email
      # when a backup process raises an exception before finishing;Fi[	I"version("LITERAL") do;FI"3process("LITERAL" => (["LITERAL", "LITERAL"]));Fi[[	@…iI"o  end
  
  version("LITERAL") do
    process("LITERAL" => (["LITERAL", "LITERAL"]))
    process("LITERAL");Fi[	@…iI"o  end
  
  version("LITERAL") do
    process("LITERAL" => (["LITERAL", "LITERAL"]))
    process("LITERAL");Fi[	@…iI"o  end
  
  version("LITERAL") do
    process("LITERAL" => (["LITERAL", "LITERAL"]))
    process("LITERAL");Fi[	I"self.perform(var);F@	i[[	@#i5I"Ÿ        self.parent_author_signature = self.sign_with_key(var.encryption_key)
        Postzord::Dispatcher.build(var, self).post
        self.perform(var)
      else
        if self.parent_author_signature_valid? then;Fi[	@#i8I"ç      else
        if self.parent_author_signature_valid? then
          self.perform(var)
        else
          Rails.logger.info("STRING");Fi[	@–iYI"É    else
      if self.target_author_signature_valid? then
        self.perform(var)
      else
        Rails.logger.info("STRING");Fi[	@±@Ÿ)i[[	@7i∆I"π    #   person.to_hash       # => {:name=>["can not be nil"]}
    #   person.to_hash(true) # => {:name=>["name can not be nil"]}
    def function(var)
      if var then
        var = {};Fi[	I"0projects//rescue_proj/resque/multi_queue.rb;Ti I"≤    # Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking
    # pop, a ThreadError is raised.
    def function(var)
      if var then
        synchronize do;Fi[	@ﬁiCI"≤    # Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking
    # pop, a ThreadError is raised.
    def function(var)
      if var then
        synchronize do;Fi[	@±@=1i[[	@iI"Ä      
      module ClassMethods
        def function(var)
          var.each do |var|
            var = ("LITERAL" + "LITERAL");Fi[	@iI"        # value when not set. The inherited reader calls to a raw reader that acts like a normal attribute
        # reader but prefixes the attribute name with "raw_".
        def function(var)
          var.each do |var|
            var = ("LITERAL" + "LITERAL");Fi[	I":projects//compass_proj/compass/configuration/paths.rb;TiI"õ  TRAILING_SEPARATOR = /.(\/|#{Regexp.escape(File::SEPARATOR)}STRING/
  
  def function(var)
    var.each do |var|
      alias_method("STRING".to_sym, var);Fi[	@±@¨#i[[	@+i-I"    #     end
    #   end
    def function(var)
      var = var.extract_options!
      var = { "LITERAL" => "STRING", "LITERAL" => (true), "LITERAL" => (["LITERAL", "LITERAL"]), "LITERAL" => (["LITERAL", "LITERAL", "LITERAL"]) }.merge!(var);Fi[	@ÄiÜI"∏      #   person.valid?
      #   # => ActiveModel::StrictValidationFailed: Name can't be blank
      def function(var)
        var = var.extract_options!
        var["LITERAL"] = true;Fi[	I"=projects//diaspora_proj/helpers/error_messages_helper.rb;TiI"‹module ErrorMessagesHelper
  # Render error messages for the given objects. The :message and :header_message options are allowed.
  def function(var)
    var = var.extract_options!
    var["LITERAL"] ||= I18n.t("STRING");Fi[	@®-I"Qregister((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")));Fi[[	@—iÖI"a            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var;Fi[	@—iêI"a            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var;Fi[	@—iöI"E          var.parameters = ["STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
          var.docstring = ["STRING", "STRING"];Fi[	@„
@wi[[	@„iMI"z      # XInclude end type
      # DOCB document node type
      def function(var, var)
        # do nothing
      end;Fi[	@
i I"”        # * +attrs+ are an assoc list of namespaces and attributes, e.g.:
        #     [ ["xmlns:foo", "http://sample.net"], ["size", "large"] ]
        def function(var, var)
          # do nothing
        end;Fi[	@
ilI"ß        # +name+ is the target of the instruction
        # +content+ is the value of the instruction
        def function(var, var)
          # do nothing
        end;Fi[	I"E#   are specified, then this will be the object's current state.;FI"N# * <tt>:to</tt> - One or more states being transitioned to.  If none are;Fi[[	@·i}I"7    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.;Fi[	@ÒiI"7    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.;Fi[	@Òi4I"7    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.;Fi[	@z%I":assert((TARGET_FOLDER + "STRING").exist?.!, "STRING");Fi[[	@=iI"ª    with_temp_folder do
      TARGET_FOLDER.install("STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING")
    end;Fi[	@=i?I"˚    with_temp_folder do
      TARGET_FOLDER.install("STRING" => "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING");Fi[	@=iII"3      TARGET_FOLDER.install("STRING" => "STRING", "STRING" => "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING");Fi[	@∫I"J# Creates (if they don't exist yet) all the directories on the remote;Fi[[	@≈iRI"≤      end
      
      ##
      # Creates (if they don't exist yet) all the directories on the remote
      # server in order to upload the backup file. Net::FTP does not support;Fi[	@[iSI"ò      end
      
      ##
      # Creates (if they don't exist yet) all the directories on the remote
      # server in order to upload the backup file.;Fi[	@siFI"≥      end
      
      ##
      # Creates (if they don't exist yet) all the directories on the remote
      # server in order to upload the backup file. Net::SFTP does not support;Fi[	I"/if (var.nil? or var.match("LITERAL")) then;F@ªi[[	@¢inI"Ü  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else;Fi[	@¢iwI"Ü  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else;Fi[	@¢i{I"Ü  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else;Fi[	@∏0@4i[[	@¢imI"Ä  
  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var);Fi[	@¢ivI"Ä  
  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var);Fi[	@¢iI"Ä  
  def function(var)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var);Fi[	@Ì3I"=var.docstring = ["STRING", "STRING", "STRING", "STRING"];Fi[[	@—iñI"ı            var.parameters = ["STRING"]
          end
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
          var.docstring = ["STRING", "STRING", "STRING", "STRING"]
          var.parameters = ["STRING"];Fi[	@—i¶I"\          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
          var.docstring = ["STRING", "STRING", "STRING", "STRING"]
          var.parameters = ["STRING", "STRING"];Fi[	@—i∏I"(            var.docstring = ["STRING", "STRING", "STRING"]
            var.parameters = ["STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING", "STRING", "STRING"]
            var.parameters = ["STRING"];Fi[	@EI"'if params["LITERAL"].present? then;Fi[[	@Éi/I"à  end
  
  def function
    if params["LITERAL"].present? then
      @var ||= InvitationCode.find_by_token(params["LITERAL"]["LITERAL"]);Fi[	@ÜiI"¨  
  ##### These methods need to go away once we pass publisher object into the partial ######
  def function
    if params["LITERAL"].present? then
      params["LITERAL"];Fi[	@ÜiI"[  end
  
  def function
    if params["LITERAL"].present? then
      params["LITERAL"];Fi[	I"eregister((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))));FI"[var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"];Fi[[	@—iùI"É          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
          var.docstring = ["STRING", "STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]];Fi[	@—i†I"ê          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]];Fi[	@—i£I"ê          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]];Fi[	I"# @note Validation;F@Ei[[	@êiuI"  end
  
  # @note Validation
  def function
    (errors["LITERAL"] << "STRING") if (self.identifier == self.sender.email);Fi[	@êizI"  end
  
  # @note Validation
  def function
    (errors["LITERAL"] << "STRING") if self.sender_id.!=(self.aspect.user_id);Fi[	@êiI"Y  end
  
  # @note Validation
  def function
    return false unless self.identifier;Fi[	I" # @return [Invitation] self;F@Ei[[	@êi>I"f  # invitation.
  #
  # @return [Invitation] self
  def function
    if email_like_identifer then;Fi[	@êiJI"ï  # converts a personal invitation to an admin invite
  # used in account deletion
  # @return [Invitation] self
  def function
    self.admin = true;Fi[	@êiSI"I  end
  
  # @return [Invitation] self
  def function
    self.send!;Fi[	@*@˙)i[[	@¿iI"˜    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|
        var = var["LITERAL"];Fi[	@QiI"˜    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|
        var = var["LITERAL"];Fi[	@ÕiI"˜    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |var|
        var = var["LITERAL"];Fi[	@>4I",var.parameters = [["STRING", "STRING"]];Fi[[	@—iûI"ó          var.docstring = ["STRING", "STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))));Fi[	@—i°I"ö          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))));Fi[	@—i§I"Ü          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")));Fi[	@Ü1@è$i[[	@fi2I"ò  def function
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[	@fiDI"•    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[	@fiXI"•    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[	I"$require("twitter/action/tweet");F@ôi[[	@Fi I"Crequire("twitter/action/tweet")
module Twitter
  module Action;Fi [	@Oi I"Crequire("twitter/action/tweet")
module Twitter
  module Action;Fi [	@(i I"Crequire("twitter/action/tweet")
module Twitter
  module Action;Fi [	@è$@è$i[[	@fi5I"¬      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[	@fiGI"¬      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[	@fi[I"¬      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[	I"+class Generator < Federated::Generator;FI"def self.federated_class;Fi[[	@›i[I"a  end
  
  class Generator < Federated::Generator
    def self.federated_class
      Comment;Fi[	@¡iI"wclass Like < Federated::Relayable
  class Generator < Federated::Generator
    def self.federated_class
      Like;Fi[	@»iI"Ñclass Participation < Federated::Relayable
  class Generator < Federated::Generator
    def self.federated_class
      Participation;Fi[	I"!# Valid requirement options:;FI"N# * <tt>:from</tt> - One or more states being transitioned from.  If none;Fi[[	@·i{I"    # object.  If no transitions can be made, then this will return nil.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.;Fi[	@ÒiI"ˇ    # Gets the list of events that can be fired on the given object.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.;Fi[	@Òi2I"    # Gets the list of transitions that can be run on the given object.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.;Fi[	@◊,I"###;Fi[[	@‡iJI"      end
      
      class << self
        ###
        # Parse HTML.  +string_or_io+ may be a String, or any object that;Fi[	@
iI"Çmodule Nokogiri
  module XML
    class << self
      ###
      # Create a new Nokogiri::XML::RelaxNG document from +string_or_io+.;Fi[	@
iI"Åmodule Nokogiri
  module XML
    class << self
      ###
      # Create a new Nokogiri::XML::Schema object using a +string_or_io+;Fi[	@EI"N@var = current_user.aspects.where("LITERAL" => (params["LITERAL"])).first;Fi[[	@(i*I"t  end
  
  def function
    @var = current_user.aspects.where("LITERAL" => (params["LITERAL"])).first
    begin;Fi[	@(iZI"ü  end
  
  def function
    @var = current_user.aspects.where("LITERAL" => (params["LITERAL"])).first
    if @aspect.update_attributes!(params["LITERAL"]) then;Fi[	@(idI"ã  end
  
  def function
    @var = current_user.aspects.where("LITERAL" => (params["LITERAL"])).first
    if @aspect.contacts_visible? then;Fi[	@„
@µ'i[[	@sisI"      #
      #     asset_cache_buster :none
      def function(var, var)
        @var ||= {}
        if block_given? then;Fi[	I"2projects//compass_proj/compass/quick_cache.rb;Ti	I"˝  # This can speed up reads of values that change relatively infrequently
  # but might be read many times in a short burst of reads.
  def function(var, var)
    @var ||= {}
    if @quick_cache[var] and (@quick_cache[var].first > (Time.now - var)) then;Fi[	@…iCI"ß    #     c.register_processor :watermarker, WatermarkingProcessor.new
    #   end
    def function(var, var)
      @var ||= {}
      @known_processors[var.to_s] = var;Fi[	@Ï@ç&i[[	@˛i1I"å    end
    if (@person.nil? or @person.closed_account?) then
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
      return
    end;Fi[	@˛iFI"ù    if (var.nil? or var.owner_id.nil?) then
      Rails.logger.error("STRING")
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
      return
    end;Fi[	@˛iSI"Ä  def function
    if params["LITERAL"].nil? then
      render("LITERAL" => (true), "LITERAL" => "LITERAL")
      return
    end;Fi[	I"var = I18n.t("STRING");FI"Irespond_with(@photo, "LITERAL" => (photos_path), "LITERAL" => (var));Fi[[	@∏iπI"Ø      yield
    rescue TypeError
      var = I18n.t("STRING")
      respond_with(@photo, "LITERAL" => (photos_path), "LITERAL" => (var))
    rescue CarrierWave::IntegrityError;Fi[	@∏iºI"¯      respond_with(@photo, "LITERAL" => (photos_path), "LITERAL" => (var))
    rescue CarrierWave::IntegrityError
      var = I18n.t("STRING")
      respond_with(@photo, "LITERAL" => (photos_path), "LITERAL" => (var))
    rescue RuntimeError => var;Fi[	@∏iøI"‚      respond_with(@photo, "LITERAL" => (photos_path), "LITERAL" => (var))
    rescue RuntimeError => var
      var = I18n.t("STRING")
      respond_with(@photo, "LITERAL" => (photos_path), "LITERAL" => (var))
      raise(var);Fi[	I"ILastThreeCommentsDecorator.new(PostPresenter.new(var, current_user));FI"
end));Fi[[	@˙igI"∑      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end;Fi[	I">projects//diaspora_proj/controllers/streams_controller.rb;TiAI"∑      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end;Fi[	@'(i)I"∑      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end;Fi[	@@„
i[[	@âiWI"ö      #       options[:my_custom_key] # => "my custom value"
      #     end
      #   end
      def function(var, var)
        var = var.extract_options!;Fi[	@ÊiHI"Ä      #     option :foo, 'bar'
      #     option 
      #   end
      def function(var, var)
        default_options[var] = var;Fi[	@…iBI"¢    #   Paperclip.configure do |c|
    #     c.register_processor :watermarker, WatermarkingProcessor.new
    #   end
    def function(var, var)
      @var ||= {};Fi[	I";render("LITERAL" => (@stream.stream_posts.map do |var|;F@ƒ4i[[	@˙ifI"       var.all { respond_with(@person, "LITERAL" => ({ "LITERAL" => "LITERAL" })) }
      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end));Fi[	@ 4i@I"”      var.mobile { render("STRING") }
      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end));Fi[	@'(i(I"«    respond_with do |var|
      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end));Fi[	@EI"if params["LITERAL"] then;Fi[[	I"Bprojects//diaspora_proj/controllers/application_controller.rb;TiI"`  end
  
  def function
    if params["LITERAL"] then
      Time.at(params["LITERAL"].to_i);Fi[	@˙i{I"{  end
  
  def function
    if params["LITERAL"] then
      Webfinger.in_background(params["LITERAL"], "LITERAL" => (true));Fi[	@˛i,I"}  end
  
  def function
    if params["LITERAL"] then
      @var = Person.local_by_account_identifier(params["LITERAL"]);Fi[	I"%var.any("LITERAL", "LITERAL") do;F@Ïi[[	@Ôi.I"∫      respond_to do |var|
        var.mobile { redirect_to("LITERAL") }
        var.any("LITERAL", "LITERAL") do
          render("LITERAL" => (true), "LITERAL" => "LITERAL")
        end;Fi[	@i!I"¨    if var and var.destroy then
      respond_to do |var|
        var.any("LITERAL", "LITERAL") do
          render("LITERAL" => (true), "LITERAL" => "LITERAL")
        end;Fi[	@i'I"ï    else
      respond_to do |var|
        var.any("LITERAL", "LITERAL") do
          render("LITERAL" => (true), "LITERAL" => "LITERAL")
        end;Fi[	@∂I"&#     validates_presence_of :name;Fi[[	@ñiΩI"Ä    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end;Fi[	@ñiŒI"Ä    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end;Fi[	@ñiıI"Ä    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end;Fi[	@Q#I"Evar.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") };Fi[[	@ÚiI"€    @var = Like.find_by_id_and_author_id!(params["LITERAL"], current_user.person.id)
    current_user.retract(@like)
    respond_to do |var|
      var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
    end;Fi[	@∏iRI"¶    if var then
      current_user.retract(var)
      respond_to do |var|
        var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
        var.html do;Fi[	@'(iI"™      end
    else
      respond_to do |var|
        var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
        var.html { redirect_to(tag_path("STRING")) };Fi[	@Q#I"Cvar.js { render("LITERAL" => (true), "LITERAL" => "LITERAL") };Fi[[	@Ôi&I"     if (current_user.owns?(@comment) or current_user.owns?(@comment.parent)) then
      current_user.retract(@comment)
      respond_to do |var|
        var.js { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
        var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") };Fi[	@©i/I"ü      flash["LITERAL"] = I18n.t("STRING")
    end
    respond_to do |var|
      var.js { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
      var.any do;Fi[	@iUI"¿      end
    end
    respond_to do |var|
      var.js { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
      var.all { redirect_to((var ? (new_user_session_path) : (edit_user_path))) };Fi[	@EI"if user_signed_in? then;Fi[[	@„4iII"b  end
  
  def function
    if user_signed_in? then
      I18n.locale = current_user.language;Fi[	@ÔiGI"á  private
  
  def function
    if user_signed_in? then
      @var = current_user.find_visible_shareable_by_id(Post, params["LITERAL"]);Fi[	I";projects//diaspora_proj/controllers/home_controller.rb;TiI"{class HomeController < ApplicationController
  def function
    if user_signed_in? then
      redirect_to(stream_path);Fi[	I"A#   # => { "id" => 1, "name" => "Konata Izumi", "age" => 16,;FI"@#   #      "created_at" => "2006/08/01", "awesome" => true,;Fi[[	@^iBI"Î      #
      #   user.as_json(methods: :permalink)
      #   # => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #      "created_at" => "2006/08/01", "awesome" => true,
      #   #      "permalink" => "1-konata-izumi" };Fi[	@^iII"      #
      #   user.as_json(include: :posts)
      #   # => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #      "created_at" => "2006/08/01", "awesome" => true,
      #   #      "posts" => [ { "id" => 1, "author_id" => 1, "title" => "Welcome to the weblog" },;Fi[	@^iTI"f      #                                             only: :body } },
      #                              only: :title } })
      #   # => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #      "created_at" => "2006/08/01", "awesome" => true,
      #   #      "posts" => [ { "comments" => [ { "body" => "1st post!" }, { "body" => "Second!" } ],;Fi[	@R#@◊4i[[	@˙ieI"
    respond_to do |var|
      var.all { respond_with(@person, "LITERAL" => ({ "LITERAL" => "LITERAL" })) }
      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user));Fi[	@ 4i?I"È      var.html { render("STRING") }
      var.mobile { render("STRING") }
      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user));Fi[	@'(i'I"0    @var = Stream::Tag.new(current_user, params["LITERAL"], "LITERAL" => (max_time), "LITERAL" => (params["LITERAL"]))
    respond_with do |var|
      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user));Fi[	I"respond_with do |var|;F@R#i[[	@èiI"Í      @var = var.aspect
      flash.now["LITERAL"] = I18n.t("STRING")
      respond_with do |var|
        var.json do
          render("LITERAL" => ({ "LITERAL" => (@person_id), "LITERAL" => (@contact.aspects.map { |var| var.id }) }));Fi[	@Ôi=I"Ï    raise(ActiveRecord::RecordNotFound.new) unless @post
    @var = @post.comments.for_a_stream
    respond_with do |var|
      var.json do
        render("LITERAL" => (CommentPresenter.as_collection(@comments)), "LITERAL" => "LITERAL");Fi[	@'(i&I"    gon.tagFollowings = tags if user_signed_in?
    @var = Stream::Tag.new(current_user, params["LITERAL"], "LITERAL" => (max_time), "LITERAL" => (params["LITERAL"]))
    respond_with do |var|
      var.json do
        render("LITERAL" => (@stream.stream_posts.map do |var|;Fi[	I"#require("state_machine/error");F@ﬂi[[	@·i	I"úrequire("state_machine/assertions")
require("state_machine/matcher_helpers")
require("state_machine/error")
module StateMachine
  class InvalidEvent < Error;Fi[	I"?projects//state_machine_proj/state_machine/integrations.rb;Ti	I"ô  require("state_machine/integrations/#{File.basename(path)}")
end
require("state_machine/error")
module StateMachine
  class IntegrationNotFound < Error;Fi[	@>iI"Érequire("state_machine/transition_collection")
require("state_machine/error")
module StateMachine
  class InvalidTransition < Error;Fi[	@ôI"class Entity;Fi[[	I"5projects//twitter_proj/twitter/entity/hashtag.rb;TiI"`require("twitter/entity")
module Twitter
  class Entity
    class Hashtag < Twitter::Entity;Fi[	I"1projects//twitter_proj/twitter/entity/url.rb;TiI"\require("twitter/entity")
module Twitter
  class Entity
    class Url < Twitter::Entity;Fi[	I":projects//twitter_proj/twitter/entity/user_mention.rb;TiI"drequire("twitter/entity")
module Twitter
  class Entity
    class UserMention < Twitter::Entity;Fi[	I"	# to;F@i[[	@iI"~      #   #{prefix}#{attr}(*args, &block)
      #
      # to
      #
      #   #{prefix}attribute(#{attr}, *args, &block);Fi[	@iAI"~      #   #{attr}#{suffix}(*args, &block)
      #
      # to
      #
      #   attribute#{suffix}(#{attr}, *args, &block);Fi[	@ieI"ã      #   #{prefix}#{attr}#{suffix}(*args, &block)
      #
      # to
      #
      #   #{prefix}attribute#{suffix}(#{attr}, *args, &block);Fi[	@~&@i[[	@∆i
I"o        instance.save)
      rescue Errno::EACCES => var
        warn("STRING")
        false
      ensure;Fi[	@^izI"s          end)
        rescue ::Fog::Errors::Error => var
          warn("STRING")
          false
        end;Fi[	@äiÔI"v          var.close)
        rescue AWS::Errors::Base => var
          warn("STRING")
          false
        end;Fi[	I"module OmniAuth;FI"module Test;Fi[[	@B2i I"<module OmniAuth
  module Test
    module StrategyMacros;Fi [	@BiI"grequire("rack")
require("omniauth/test")
module OmniAuth
  module Test
    module StrategyTestCase;Fi[	I")projects//omni_proj/omniauth/test.rb;Ti I"Dmodule OmniAuth
  module Test
    autoload("LITERAL", "STRING");Fi [	@I"%# @return [Array<Twitter::Size>];Fi[[	@÷iI"k    
    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>]
    def function;Fi[	@‰iI"u      
      # Returns an array of photo sizes
      #
      # @return [Array<Twitter::Size>]
      def function;Fi[	@Ëi	I"á  class ProfileBanner < Twitter::Base
    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>]
    def function;Fi[	@E@ó,i[[	@êiI"l      end
      
      def function
        view_directory("LITERAL")
        view_directory("LITERAL");Fi[	@êi4I"Å      
      # Override copy_views to just copy mailer and shared.
      def function
        view_directory("LITERAL")
      end;Fi[	@êiVI"V      hide!
      
      def function
        view_directory("LITERAL")
      end;Fi[	@Ü	@‘.i[[	@π	i(I"®      var = case read("LITERAL", var).unpack("STRING")
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL";Fi[	@π	i*I"É        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL";Fi[	@π	i,I"É        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL";Fi[	I"url("STRING");FI"sha1("STRING");Fi[[	@iÇI"M  
  devel do
    url("STRING")
    sha1("STRING")
    version("STRING");Fi[	@iâI"Q  bottle do
    version("STRING")
    url("STRING")
    sha1("STRING")
  end;Fi[	@iôI">  
  bottle do
    url("STRING")
    sha1("STRING")
  end;Fi[	@ˇ3I"6#   specified, then this will match any to state.;Fi[[	@·i~I"`    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless;Fi[	@ÒiI"c    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none;Fi[	@Òi5I"c    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none;Fi[	@x,@ÿi[[	@ﬁi I"Lrequire("twitter/creatable")
require("twitter/identity")
module Twitter;Fi [	@·i I"Lrequire("twitter/creatable")
require("twitter/identity")
module Twitter;Fi [	@Èi I"Lrequire("twitter/creatable")
require("twitter/identity")
module Twitter;Fi [	I"O# Generate a token checking if one does not already exist in the database.;F@Ei[[	@Äi‘I"†        end
        
        # Generate a token checking if one does not already exist in the database.
        def function
          generate_token("LITERAL");Fi[	@+i`I"†        end
        
        # Generate a token checking if one does not already exist in the database.
        def function
          generate_token("LITERAL");Fi[	@.i2I"†        end
        
        # Generate a token checking if one does not already exist in the database.
        def function
          generate_token("LITERAL");Fi[	I"#         end;F@e
i[[	@√iXI"ï      #         pending_notifications.each do |n|
      #           devise_mailer.send(n, self).deliver
      #         end
      #       end
      #;Fi[	@’i£I"z    #         haml_tag :td do
    #           haml_concat "more_data"
    #         end
    #       end
    #     end;Fi[	@˝iAI"|        #             # Override here...
        #           end
        #         end
        #       end
        #     end;Fi[	@I"K# @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline;Fi[[	@„i'I"‡      
      # Returns the 20 most recent Tweets posted by the specified user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.;Fi[	@„i?I"‚      
      # Returns the 20 most recent retweets posted by the specified user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.;Fi[	@„iWI"Á      
      # Returns the 20 most recent retweets posted by the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.;Fi[	@é4@˛3i[[	@·i|I"    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are;Fi[	@ÒiI"    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are;Fi[	@Òi3I"    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are;Fi[	@@“i[[	@£iI"∞      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var);Fi[	@ﬁiI"∞      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var);Fi[	@ﬁiI"∞      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var);Fi[	@r@Z5i[[	@ i I"Kmodule Devise
  module OmniAuth
    class StrategyNotFound < NameError;Fi [	I"9projects//devise_proj/devise/omniauth/url_helpers.rb;Ti I":module Devise
  module OmniAuth
    module UrlHelpers;Fi [	I"-projects//devise_proj/devise/omniauth.rb;TiI"l  var.action("LITERAL").call(var)
end
module Devise
  module OmniAuth
    autoload("LITERAL", "STRING");Fi[	@I"E# @see https://dev.twitter.com/docs/api/1.1/get/friendships/show;Fi[[	@}iŒI"Ω      
      # Returns detailed information about the relationship between two users
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes;Fi[	@}iËI"Æ      
      # Test for the existence of friendship between two users
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes;Fi[	@}iI"˙      
      # Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes;Fi[	I"(require("state_machine/assertions");F@ﬂi[[	@~iI"çrequire("state_machine/matcher")
require("state_machine/eval_helpers")
require("state_machine/assertions")
module StateMachine
  class Branch;Fi[	@i I"]require("state_machine/assertions")
module StateMachine
  class MachineCollection < Hash;Fi [	@Li I"Srequire("state_machine/assertions")
module StateMachine
  class NodeCollection;Fi [	@I",#   machine = StateMachine.new(Vehicle);Fi[[	@>iïI"¥    # 
    # == Example
    # 
    #   machine = StateMachine.new(Vehicle)
    #   StateMachine::Transition.new(Vehicle.new, machine, :park, :parked, :parked).loopback?   # => true;Fi[	@>i£I"≠    # 
    # == Example
    # 
    #   machine = StateMachine.new(Vehicle)
    #   transition = StateMachine::Transition.new(Vehicle.new, machine, :ignite, :parked, :idling);Fi[	@>iòI"≠    # 
    # == Example
    # 
    #   machine = StateMachine.new(Vehicle)
    #   transition = StateMachine::Transition.new(Vehicle.new, machine, :ignite, :parked, :idling);Fi[	@I".#   states = Vehicle.state_machine.states;Fi[[	@4iI"ß    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states
    #   vehicle = Vehicle.new               # => #<Vehicle:0xb7c464b0 @state="parked">;Fi[	@4i.I"^    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states
    #   ;Fi[	@4iII"^    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states
    #   ;Fi[	I"8# Returns the parsed value and any trailing tokens.;F@±i[[	@Li+I"º    
    # Parses a "value" in the sense of RFC 4627.
    # Returns the parsed value and any trailing tokens.
    def function(var)
      raise(Error, "STRING") if (var.length < "LITERAL");Fi[	@Li<I"§    
    # Parses an "object" in the sense of RFC 4627.
    # Returns the parsed value and any trailing tokens.
    def function(var)
      var = eat("STRING", var);Fi[	@LiWI"£    
    # Parses an "array" in the sense of RFC 4627.
    # Returns the parsed value and any trailing tokens.
    def function(var)
      var = eat("STRING", var);Fi[	@Û4@i[[	@ñiæI"`    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #;Fi[	@ñiœI"`    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #;Fi[	@ñiˆI"`    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #;Fi[	I"=(@version["LITERAL"] << "STRING") if @version["LITERAL"];F@6i[[	I".projects//compass_proj/compass/version.rb;TiI"      @version["LITERAL"] = @version["LITERAL"]
      @version["LITERAL"] = "STRING"
      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if @version["LITERAL"];Fi[	@6iI"       @version["LITERAL"] = "STRING"
      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if @version["LITERAL"];Fi[	@6iI"I      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if @version["LITERAL"]
      (@version["LITERAL"] << "STRING") if ENV["STRING"].! and var = revision;Fi[	@f@i[[	@iAI"$      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>]
      # @param query [String] The search query to run against people search.;Fi[	@iRI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>]
      # @overload contributees(options={});Fi[	@iiI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>]
      # @overload contributors(options={});Fi[	@„
I"var = var.value;Fi[[	@_iI"ümodule Compass::SassExtensions::Functions::InlineImage
  def function(var, var)
    var = var.value
    var = File.join(Compass.configuration.images_path, var);Fi[	@A,i4I"Ñ    end
    
    def function(var, var)
      var = var.value
      return Sass::Script::String.new("STRING") if absolute_path?(var);Fi[	@A,i{I"û    end
    
    def function(var, var)
      var = var.value
      if var =~ /^#{Regexp.escape(Compass.configuration.http_generated_images_path)}STRING/ then;Fi[	I".Sass::Script::String.new(clean_path(var));F@	i[[	@A,i%I"Ç      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var);Fi[	@A,i>I"Ç      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var);Fi[	@A,iqI"â      var = "STRING" if var
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var);Fi[	I"if var.to_bool then;F@6i[[	@A,i$I"z      end
      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else;Fi[	@A,i=I"z      end
      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else;Fi[	@A,ipI"|      end
      var = "STRING" if var
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else;Fi[	I"# raised.;F@i[[	@yiI"¡    # Validates that the given hash only includes at *most* one of a set of
    # exclusive keys.  If more than one key is found, an ArgumentError will be
    # raised.
    # 
    # == Examples;Fi[	@¯i.I"»    # *Note* that multiple events on the same state machine / attribute cannot
    # be run in parallel.  If this is attempted, an ArgumentError will be
    # raised.
    # 
    # == Halting callbacks;Fi[	@4i@I"Ω    # Determines the current state of the given object as configured by this
    # state machine.  If no state is found, then an ArgumentError will be
    # raised.
    # 
    # == Examples;Fi[	I"#var = convert_sprite_name(var);FI"verify_map(var);Fi[[	@\iDI"  #     background: url('/images/icons.png?12345678') 0 -24px no-repeat;
  def function(var, var, var, var)
    var = convert_sprite_name(var)
    verify_map(var)
    raise(Sass::SyntaxError, "STRING") unless var.is_a?(Sass::Script::String);Fi[	@\ikI"ë  # Returns boolean if sprite has a parent
  def function(var, var)
    var = convert_sprite_name(var)
    verify_map(var)
    verify_sprite(var);Fi[	@\iuI"ö  # Returns boolean if sprite has the selector
  def function(var, var, var)
    var = convert_sprite_name(var)
    verify_map(var)
    verify_sprite(var);Fi[	I"var = (var.value + var);F@„/i[[	@biˆI"{      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end;Fi[	@bi I"{      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end;Fi[	@biI"{      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end;Fi[	I"&if list_of_color_stops?(var) then;F@C6i[[	@biıI"|        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil;Fi[	@biˇI"|        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil;Fi[	@biI"|        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil;Fi[	I"var.unshift(var);F@„/i[[	@biÚI"y    def function(var, var, var)
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else;Fi[	@bi¸I"}      var = nil if var and var.to_bool.!
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else;Fi[	@biI"t    def function(var, var)
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else;Fi[	@I"*#     def initialize(attributes = {});Fi[[	@i˚I"g    #       ...
    #     end
    #     
    #     def initialize(attributes = {})
    #       ...;Fi[	@iI"g    #       ...
    #     end
    #     
    #     def initialize(attributes = {})
    #       ...;Fi[	@i%I"u    #       ...
    #     end
    #     
    #     def initialize(attributes = {})
    #       @state = 'idling';Fi[	I"if color_stop?(var) then;F@U6i[[	@biÒI"s    
    def function(var, var, var)
      if color_stop?(var) then
        var.unshift(var)
        var = nil;Fi[	@bi˚I"|      end
      var = nil if var and var.to_bool.!
      if color_stop?(var) then
        var.unshift(var)
        var = nil;Fi[	@biI"n    
    def function(var, var)
      if color_stop?(var) then
        var.unshift(var)
        var = nil;Fi[	@E@ò1i[[	@≥iZI"6    end
    
    def function
      yield
    end;Fi[	@áiSI"å    # The hook which is called inside devise.
    # So your ORM can include devise compatibility stuff.
    def function
      yield
    end;Fi[	@iI"@      end
      
      def function
        yield
      end;Fi[	I"9Sass::Script::List.new(var.value.dup, var.separator);F@	i[[	@iI"¿    def function(var)
      var = if var.is_a?(Sass::Script::List) then
        Sass::Script::List.new(var.value.dup, var.separator)
      else
        Sass::Script::List.new([var], "LITERAL");Fi[	@bi∫I"∫      var = var
      var = if var.is_a?(Sass::Script::List) then
        Sass::Script::List.new(var.value.dup, var.separator)
      else
        Sass::Script::List.new([var], "LITERAL");Fi[	@Yi2I"∞  def function(var)
    if var.is_a?(Sass::Script::List) then
      Sass::Script::List.new(var.value.dup, var.separator)
    else
      Sass::Script::List.new([var], "LITERAL");Fi[	I"F["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];F@Ei[[	@LiòI"‘        strtok(var)
      when Spc then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@LiöI"        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@LiúI"        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@I"#   vehicle = Vehicle.new;Fi[[	@i®I"Ä    #     end
    #   end
    #   
    #   vehicle = Vehicle.new
    #   vehicle.state                             # => "parked";Fi[	@>i∂I"ü    #     end
    #   end
    #   
    #   vehicle = Vehicle.new
    #   transition = StateMachine::Transition.new(vehicle, machine, :ignite, :parked, :idling);Fi[	@>iÍI"≠    #     end
    #   end
    #   
    #   vehicle = Vehicle.new
    #   transition = StateMachine::Transition.new(vehicle, Vehicle.state_machine, :ignite, :parked, :idling);Fi[	@$@Ei[[	@£iI"ê      end
      
      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop);Fi[	@ﬁi+I"≥      # @param args [Array]
      # @return [Array]
      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop);Fi[	@ﬁiGI"≥      # @param args [Array]
      # @return [Array]
      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|;Fi[	I""if var.delete("LITERAL") then;FI"Fvar = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var));Fi[[	@ÅiPI"◊          else
            var = File.new(var).read
            if var.delete("LITERAL") then
              var = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var))
              var = process_erb(var, var);Fi[	@Åi_I"˚        var = targetize(install_location_for_stylesheet(var, var))
        var = File.new(var).read
        if var.delete("LITERAL") then
          var = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var))
          var = process_erb(var, var);Fi[	@ÅiáI"          var = install_location_for_html(var, var) if respond_to?("LITERAL")
          var = File.read(templatize(var))
          if var.delete("LITERAL") then
            var = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var))
            var = process_erb(var, var);Fi[	@I"O# See +before_transition+ for a description of the possible configurations;Fi[[	@ iFI"ﬁ        # performed so long as the given configuration options match the
        # transition.
        # 
        # See +before_transition+ for a description of the possible configurations
        # for defining callbacks.;Fi[	@ ijI"°        #     end
        #   end
        # 
        # See +before_transition+ for a description of the possible configurations
        # for defining callbacks.;Fi[	@ iáI"“        #     end
        #   end
        # 
        # See +before_transition+ for a description of the possible configurations
        # for defining callbacks.  *Note* however that you cannot define the state;Fi[	I"1raise(ArgumentError, "STRING") if var.empty?;F@=1i[[	@|iI"®      def function
        var = CHECKS.keys.&(options.keys)
        raise(ArgumentError, "STRING") if var.empty?
        var.each do |var|
          var = options[var];Fi[	I"1projects//paperclip_proj/paperclip/schema.rb;TiI"À    module Statements
      def function(var, var)
        raise(ArgumentError, "STRING") if var.empty?
        var.each do |var|
          COLUMNS.each_pair { |var, var| add_column(var, "STRING", var) };Fi[	@≥6iI"∫      
      def function(var, var)
        raise(ArgumentError, "STRING") if var.empty?
        var.each do |var|
          COLUMNS.each_pair { |var, var| remove_column(var, "STRING") };Fi[	I"R# If no queue can be inferred this method will raise a `Resque::NoQueueError`;F@i[[	@Fi"I"Ë  # from performing one of the above operations to determine the queue.
  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`
  #
  # Returns true if the job was queued, nil if the job was rejected by a;Fi[	@FiHI"Ê  # from performing one of the above operations to determine the queue.
  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`
  #
  # If no args are given, this method will dequeue *all* jobs matching;Fi[	@FirI"ﬁ  # Validates if the given klass could be a valid Resque job
  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`
  #
  # If given klass is nil this method will raise a `Resque::NoClassError`;Fi[	I"#when "LITERAL", "LITERAL" then;F@Ü	i[[	@π	i3I"µ      end
      var = case read("LITERAL", (var + "LITERAL")).unpack("STRING")["LITERAL"]
      when "LITERAL", "LITERAL" then
        "LITERAL"
      when "LITERAL", "LITERAL" then;Fi[	@π	i5I"í      when "LITERAL", "LITERAL" then
        "LITERAL"
      when "LITERAL", "LITERAL" then
        "LITERAL"
      when "LITERAL", "LITERAL" then;Fi[	@π	i7I"}      when "LITERAL", "LITERAL" then
        "LITERAL"
      when "LITERAL", "LITERAL" then
        "LITERAL"
      else;Fi[	@fI"2# @return [Twitter::List] The specified list.;Fi[[	@£i¢I"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The specified list.
      # @overload list_subscribe(list, options={});Fi[	@£iŸI"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The specified list.
      # @overload list_unsubscribe(list, options={});Fi[	@£i≥I"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The specified list.
      # @overload list(list, options={});Fi[	I"G# Returns an Array of string pids of all the other workers on this;FI"<# machine. Useful when pruning dead workers on startup.;Fi[[	@Ci¸I"†    end
    
    # Returns an Array of string pids of all the other workers on this
    # machine. Useful when pruning dead workers on startup.
    def function;Fi[	@CiI"√    # Find Resque worker pids on Windows.
    #
    # Returns an Array of string pids of all the other workers on this
    # machine. Useful when pruning dead workers on startup.
    def function;Fi[	@Ci I"Ã    # Find worker pids - platform independent
    #
    # Returns an Array of string pids of all the other workers on this
    # machine. Useful when pruning dead workers on startup.
    def function(var);Fi[	I"2var.on("STRING", "STRING", "STRING") do |var|;FI"require("pathname");Fi[[	@˙iI"¡      ::Compass.configuration.require(library)
    end
    var.on("STRING", "STRING", "STRING") do |var|
      require("pathname")
      ::Compass.configuration.load(Pathname.new(var).realpath);Fi[	@˙iI"’      ::Compass.configuration.load(Pathname.new(var).realpath)
    end
    var.on("STRING", "STRING", "STRING") do |var|
      require("pathname")
      ::Compass.configuration.discover(Pathname.new(var).realpath);Fi[	@˙iI"‡      ::Compass.configuration.discover(Pathname.new(var).realpath)
    end
    var.on("STRING", "STRING", "STRING") do |var|
      require("pathname")
      ::Compass.configuration.add_import_path(Pathname.new(var).realpath);Fi[	@@I"4Sass::Script::Number.new("LITERAL", ["STRING"]);Fi[[	@biÕI"¶      var.value.map! do |var|
        case var.value
        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"])
        when "LITERAL" then;Fi[	@biœI"«        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"])
        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"])
        when "LITERAL" then;Fi[	@bi—I"∏        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"])
        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"])
        else;Fi[	@I"#   class VehicleObserver;Fi[[	@ i!I"{        #     end
        #   end
        #   
        #   class VehicleObserver
        #     include DataMapper::Observer;Fi[	@ i^I"{        #     end
        #   end
        #   
        #   class VehicleObserver
        #     include DataMapper::Observer;Fi[	@ i}I"á        #     end
        #   end
        #   
        #   class VehicleObserver
        #     after_transition_failure do |transition|;Fi[	@ò1@	i[[	@ÄiïI"ô      def function
        if (confirmed?.! or pending_reconfirmation?) then
          yield
        else
          self.errors.add("LITERAL", "LITERAL");Fi[	@aiI"~      def function
        if access_locked? then
          yield
        else
          self.errors.add("LITERAL", "LITERAL");Fi[	@Pi'I"Ddef function
  if ARGV.verbose? then
    yield
  else
    begin;Fi[	@@I"+raise("STRING") unless which("STRING");Fi[[	@zi_I"°      safe_system("STRING", "STRING", @tarball_path)
      chdir
    when "LITERAL" then
      raise("STRING") unless which("STRING")
      safe_system("STRING");Fi[	@zifI"      safe_system("STRING", "STRING", @tarball_path, File.basename(@url))
      chdir
    when "LITERAL" then
      raise("STRING") unless which("STRING")
      quiet_safe_system("STRING", "STRING", { "LITERAL" => "STRING" }, @tarball_path);Fi[	@ziiI"¸      raise("STRING") unless which("STRING")
      quiet_safe_system("STRING", "STRING", { "LITERAL" => "STRING" }, @tarball_path)
    when "LITERAL" then
      raise("STRING") unless which("STRING")
      safe_system("STRING", "STRING", @tarball_path);Fi[	@@Ï1i[[	@ iI"ù        #   class Vehicle
        #     include DataMapper::Resource
        #     
        #     property :id, Serial
        #     property :state, :String;Fi[	@ iTI"ù        #   class Vehicle
        #     include DataMapper::Resource
        #     
        #     property :id, Serial
        #     property :state, :String;Fi[	@ ixI"ù        #   class Vehicle
        #     include DataMapper::Resource
        #     
        #     property :id, Serial
        #     property :state, :String;Fi[	I"return false unless var;F@Ri[[	@º	i≤I"ê  def function(var)
    if Hardware.is_32_bit? and (MacOS.version == "LITERAL") then
      return false unless var
      raise("STRING")
    end;Fi[	@º	i∂I"{    end
    unless (HOMEBREW_PREFIX.to_s == "STRING") then
      return false unless var
      raise("STRING")
    end;Fi[	@º	i∫I"{    end
    unless (HOMEBREW_CELLAR.to_s == "STRING") then
      return false unless var
      raise("STRING")
    end;Fi[	I"var.first;F@	i[[	@G!iI"†      var = @commands.keys.select { |var| var.to_s.=~(var) }
      if (var.size == "LITERAL") then
        var.first
      else
        if var =~ "LITERAL" then;Fi[	@izI"í      else
        if ((var = var.rack.children).size == "LITERAL") and var.first.directory? then
          var.first
        else
          raise;Fi[	@=i^I"ß      def function(var, var, var)
        var = if var["LITERAL"].nil? then
          var.first
        else
          Node.new("LITERAL", [var.first, var["LITERAL"]]);Fi[	@@@41i[[	@zi˚I"~    when "LITERAL" then
      BazaarDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then;Fi[	@zi˝I"{    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then;Fi[	@zi"I"{    when "LITERAL" then
      CVSDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then;Fi[	@@@+1i[[	@ziˇI"Å    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then;Fi[	@ziI"Ñ    when "LITERAL" then
      FossilDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then;Fi[	@zi$I"Å    when "LITERAL" then
      GitDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then;Fi[	@I"!#   vehicle.state = 'idling';Fi[[	@Òi)I"n    #   vehicle = Vehicle.new               # => #<Vehicle:0xb7c464b0 @state="parked">
    #   events.valid_for(vehicle)           # => [#<StateMachine::Event name=:ignite transitions=[:parked => :idling]>]
    #   
    #   vehicle.state = 'idling'
    #   events.valid_for(vehicle)           # => [#<StateMachine::Event name=:park transitions=[:idling => :parked]>];Fi[	@ÒiNI"¸    #   vehicle = Vehicle.new                             # => #<Vehicle:0xb7c464b0 @state="parked">
    #   events.transitions_for(vehicle)                   # => [#<StateMachine::Transition attribute=:state event=:ignite from="parked" from_name=:parked to="idling" to_name=:idling>]
    #   
    #   vehicle.state = 'idling'
    #   events.transitions_for(vehicle)                   # => [#<StateMachine::Transition attribute=:state event=:park from="idling" from_name=:idling to="parked" to_name=:parked>];Fi[	@4i3I"P    #   vehicle = Vehicle.new         # => #<Vehicle:0xb7c464b0 @state="parked">
    #   states.match(vehicle)         # => #<StateMachine::State name=:parked value="parked" initial=true>
    #   
    #   vehicle.state = 'idling'
    #   states.match(vehicle)         # => #<StateMachine::State name=:idling value="idling" initial=true>;Fi[	@‘@<*i[[	@∆i"I"Ì      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi[	@∆i5I"Ì      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi[	@∆iOI"Ì      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi[	@´+I"module StandAlone;Fi[[	@oiI"dmodule Compass
  module AppIntegration
    module StandAlone
      module ConfigurationDefaults;Fi[	@¢iI"z  end
  
  module AppIntegration
    module StandAlone
      class Installer < Compass::Installers::ManifestInstaller;Fi[	@≥+i	I"Xend
module Compass
  module AppIntegration
    module StandAlone
      extend(self);Fi[	@EI")Compass::Util.compass_warn("STRING");Fi[[	@Æ+i
I"h      extend(self)
      
      def function
        Compass::Util.compass_warn("STRING")
      end;Fi[	@Æ+iI"j      end
      
      def function
        Compass::Util.compass_warn("STRING")
        ::Rails.root;Fi[	@Æ+iI"i      end
      
      def function
        Compass::Util.compass_warn("STRING")
        ::Rails.env;Fi[	@€+@	i[[	@ﬁ"iI"ï    if ((var >> "LITERAL") == "LITERAL") then
      if check_next_sequence(var) then
        return "LITERAL"
      else
        var.pos -= "LITERAL";Fi[	@ﬁ"i'I"†        if check_next_sequence(var) then
          if check_next_sequence(var) then
            return "LITERAL"
          else
            var.pos -= "LITERAL";Fi[	@ﬁ"i3I"¥            if check_next_sequence(var) then
              if check_next_sequence(var) then
                return "LITERAL"
              else
                var.pos -= "LITERAL";Fi[	@@®&i[[	@¯iEI"è    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked;Fi[	@¯iwI"è    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked;Fi[	@i¢I"è    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked;Fi[	@EI"@var ||= (var = {};Fi[[	@uidI"$          # The keys are the filesystem paths, relative to @directory.
          # The values are the LocalFile objects for that given file.
          def function
            @var ||= (var = {}
            local_hashes.lines.map { |var| LocalFile.new(@directory, var) }.compact.each do |var|;Fi[	@uiwI"          # The keys are the remote paths, relative to @remote_base
          # The values are the Fog file objects for that given file
          def function
            @var ||= (var = {}
            @bucket.files.all("LITERAL" => (@remote_base)).each do |var|;Fi[	@—i8I"Ÿ        # Extracts the machine options.  Note that this will only extract a
        # subset of the options supported.
        def function
          @var ||= (var = {}
          var = statement.parameters(false).last;Fi[	@£I"module Commands;Fi[[	@	%i I"4module Compass
  module Commands
    class Base;Fi [	I"Aprojects//compass_proj/compass/commands/installer_command.rb;TiI"_require("compass/installers")
module Compass
  module Commands
    module InstallerCommand;Fi[	@zi	I"årequire("compass/commands/base")
require("compass/commands/installer_command")
module Compass
  module Commands
    class ProjectBase < Base;Fi[	@@ç4i[[	@·iI"    # Finds and builds the next transition that can be performed on the given
    # object.  If no transitions can be made, then this will return nil.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none;Fi[	@ÒiI"ø    
    # Gets the list of events that can be fired on the given object.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none;Fi[	@Òi1I"¬    
    # Gets the list of transitions that can be run on the given object.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none;Fi[	I"*raise(Utf8Error) if (var < "LITERAL");FI"%var = var[(var + "LITERAL")].ord;Fi[[	@Li∆I"         end
        raise(Utf8Error) if (var < Utag2)
        raise(Utf8Error) if (var < "LITERAL")
        var = var[(var + "LITERAL")].ord
        raise(Utf8Error) if ((var < Utagx) or (Utag2 <= var));Fi[	@Li—I"ª          return "LITERAL"
        end
        raise(Utf8Error) if (var < "LITERAL")
        var = var[(var + "LITERAL")].ord
        raise(Utf8Error) if ((var < Utagx) or (Utag2 <= var));Fi[	@Li‹I"ª          return "LITERAL"
        end
        raise(Utf8Error) if (var < "LITERAL")
        var = var[(var + "LITERAL")].ord
        raise(Utf8Error) if ((var < Utagx) or (Utag2 <= var));Fi[	@„
I"var = self;Fi[[	@•ixI"¬      # @raise [Haml::Error] if none of \{#compile}, \{#render}, and
      #   \{#render_with_options} are overridden
      def function(var, var)
        var = self
        var.instance_eval do;Fi[	@…iI"c  #
  # Returns an array
  def function(var, var)
    var = self
    if var.has_key?(var) then;Fi[	@õiI"°      
      # Creates a new named scope with the given name
      def function(var, var)
        var = self
        owner_class.def_dataset_method(var) do |var|;Fi[	@„
I"var = prep_opts(var, var);Fi[[	@îiI"n  end
  
  def function(var, var)
    var = prep_opts(var, var)
    var = visible_shareable_ids(var, var);Fi[	@îiI"g  end
  
  def function(var, var)
    var = prep_opts(var, var)
    visible_ids_from_sql(var, var);Fi[	@îiI"t  
  # @return [Array<Integer>]
  def function(var, var)
    var = prep_opts(var, var)
    var["LITERAL"] = var;Fi[	@∫+I"O#   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,;Fi[[	@ÄiQI"a      #   and <tt>:update</tt>.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.;Fi[	@ñi*I"ä      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.;Fi[	@ñidI"ä      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.;Fi[	@û7I"O#   proc or string should return or evaluate to a +true+ or +false+ value.;Fi[[	@ÄiRI"ñ      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to determine;Fi[	@ñi+I"å      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to;Fi[	@ñieI"å      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to;Fi[	@É7I":raise(Utf8Error) if ((var < Utagx) or (Utag2 <= var));Fi[[	@Li«I"‹        raise(Utf8Error) if (var < Utag2)
        raise(Utf8Error) if (var < "LITERAL")
        var = var[(var + "LITERAL")].ord
        raise(Utf8Error) if ((var < Utagx) or (Utag2 <= var))
        if (var < Utag3) then;Fi[	@Li“I"æ        end
        raise(Utf8Error) if (var < "LITERAL")
        var = var[(var + "LITERAL")].ord
        raise(Utf8Error) if ((var < Utagx) or (Utag2 <= var))
        if (var < Utag4) then;Fi[	@Li›I"æ        end
        raise(Utf8Error) if (var < "LITERAL")
        var = var[(var + "LITERAL")].ord
        raise(Utf8Error) if ((var < Utagx) or (Utag2 <= var))
        if (var < Utag5) then;Fi[	@@∏6i[[	@Fi!I"È  # If either of those conditions are met, it will use the value obtained
  # from performing one of the above operations to determine the queue.
  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`
  #;Fi[	@FiGI"È  # If either of those conditions are met, it will use the value obtained
  # from performing one of the above operations to determine the queue.
  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`
  #;Fi[	@FiqI"ó  
  # Validates if the given klass could be a valid Resque job
  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`
  #;Fi[	I"%if check_next_sequence(var) then;F@€+i[[	@ﬁ"iI"ö    var = var.get_byte["LITERAL"]
    if ((var >> "LITERAL") == "LITERAL") then
      if check_next_sequence(var) then
        return "LITERAL"
      else;Fi[	@ﬁ"i&I"Ø      if ((var >> "LITERAL") == "LITERAL") then
        if check_next_sequence(var) then
          if check_next_sequence(var) then
            return "LITERAL"
          else;Fi[	@ﬁ"i2I"∫          if check_next_sequence(var) then
            if check_next_sequence(var) then
              if check_next_sequence(var) then
                return "LITERAL"
              else;Fi[	@EI"@var = {};Fi[[	@QiRI"¶      
      # List available parameters
      def function
        @var = {}
        ["LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL"].each do |var|;Fi[	I"Fprojects//paperclip_proj/paperclip/interpolations/plural_cache.rb;TiI"a  module Interpolations
    class PluralCache
      def function
        @var = {}
      end;Fi[	@ifI"è    # Resets any information tracked from previous attempts to perform the
    # collection
    def function
      @var = {}
      @var = false;Fi[	I"# :nodoc:;F@Ei[[	@ÄiêI"      # When creating custom validators, it might be useful to be able to specify
      # additional default keys. This can be done by overwriting this method.
      # :nodoc:
      def function
        ["LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL"];Fi[	@iI"S        end
        
        # :nodoc:
        def function
          "STRING";Fi[	@¸	i	I"~    module PP
      module Node
        # :nodoc:
        def function
          var = inspect_attributes.reject do |var|;Fi[	@Á2@Ri[[	@ÄiôI"q        when TrueClass then
          {}
        when Hash then
          var
        when Range, Array then;Fi[	@^iñI"à        when String, Pathname then
          YAML.load(ERB.new(File.read(var)).result)
        when Hash then
          var
        else;Fi[	@äi¸I"à        when String, Pathname then
          YAML.load(ERB.new(File.read(var)).result)
        when Hash then
          var
        else;Fi[	@¡7@¡7i[[	@ﬁ"i%I"©    else
      if ((var >> "LITERAL") == "LITERAL") then
        if check_next_sequence(var) then
          if check_next_sequence(var) then
            return "LITERAL";Fi[	@ﬁ"i0I"√      else
        if ((var >> "LITERAL") == "LITERAL") then
          if check_next_sequence(var) then
            if check_next_sequence(var) then
              if check_next_sequence(var) then;Fi[	@ﬁ"i1I"Ÿ        if ((var >> "LITERAL") == "LITERAL") then
          if check_next_sequence(var) then
            if check_next_sequence(var) then
              if check_next_sequence(var) then
                return "LITERAL";Fi[	I".if ((var >> "LITERAL") == "LITERAL") then;F@¡7i[[	@ﬁ"iI"Ø  def self.sequence_length(var)
    var = var.get_byte["LITERAL"]
    if ((var >> "LITERAL") == "LITERAL") then
      if check_next_sequence(var) then
        return "LITERAL";Fi[	@ﬁ"i$I"ñ      end
    else
      if ((var >> "LITERAL") == "LITERAL") then
        if check_next_sequence(var) then
          if check_next_sequence(var) then;Fi[	@ﬁ"i/I"†        end
      else
        if ((var >> "LITERAL") == "LITERAL") then
          if check_next_sequence(var) then
            if check_next_sequence(var) then;Fi[	I"# debug options: -vhP;F@Ei[[	@ıiI"Æ        ##
        # Performs the RSync::Local operation
        # debug options: -vhP
        def function
          Logger.message(("STRING" + @directories.join("STRING")));Fi[	@ùiI"        ##
        # Performs the RSync::Pull operation
        # debug options: -vhP
        def function
          begin;Fi[	@li-I"~        ##
        # Performs the RSync:Push operation
        # debug options: -vhP
        def function
          begin;Fi[	I"¢Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }));F@ˇ7i[[	I"7projects//rescue_proj/resque/server/test_helper.rb;TiI"      
      def function
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }));Fi[	@8iI"æ      def function
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }));Fi[	@8iI"µ        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
        Resque::Failure.create("LITERAL" => (Exception.new), "LITERAL" => (Resque::Worker.new("LITERAL")), "LITERAL" => "STRING", "LITERAL" => ({ "STRING" => "STRING" }))
      end;Fi[	@EI"0["STRING", "STRING", "STRING"].map do |var|;Fi[[	@kieI"Á      # Builds the MySQL connectivity options syntax to connect the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?;Fi[	@nicI"!      # that's the option PostgreSQL takes for socket connections as well. In case
      # both the host and the socket are specified, the socket will take priority over the host
      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?;Fi[	@LieI"Á      # Builds the Redis connectivity options syntax to connect the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?;Fi[	@P'@˙i[[	@œi_I"|      begin
        (@var = @var = ParseNode.new("LITERAL")
        @var = false
        @var = nil
        @var = next_line;Fi[	@œiµI"T    
    def function(var)
      @var = false
      @var = nil
      @var = nil;Fi[	@>iUI"l      @var = var
      @var = []
      @var = false
      @var = nil
      @var = var.events.fetch(var);Fi[	@„
@¡*i[[	@iI"Q    end
    
    def function(var, var)
      (@html << "STRING")
      self;Fi[	@i I"Q    end
    
    def function(var, var)
      (@html << "STRING")
      self;Fi[	@iAI"Q    end
    
    def function(var, var)
      (@html << "STRING")
      self;Fi[	@÷I"module Cloud;Fi[[	@uiI"uBackup::Dependency.load("STRING")
module Backup
  module Syncer
    module Cloud
      class Base < Syncer::Base;Fi[	@ciI"Qmodule Backup
  module Syncer
    module Cloud
      class CloudFiles < Base;Fi[	@fiI"Imodule Backup
  module Syncer
    module Cloud
      class S3 < Base;Fi[	I"after_flush_writes;F@ 7i[[	@ıiI"\          var.rewind
        end
        after_flush_writes
        @var = {}
      end;Fi[	@^iHI"V          end)
        end
        after_flush_writes
        @var = {}
      end;Fi[	@äi÷I"U          end
        end
        after_flush_writes
        @var = {}
      end;Fi[	I"var.destroy;F@	i[[	@XiLI"§            Logger.message(("STRING" + "STRING"))
            if var = var.files.get(var) then
              var.destroy
            else
              (var << var);Fi[	@uiíI"–                if var then
                  MUTEX.synchronize { Logger.message("STRING") }
                  var.destroy
                else
                  MUTEX.synchronize { Logger.message("STRING") };Fi[	I"6projects//diaspora_proj/models/user/connecting.rb;Ti)I"í    var = var.posts.all
    if (var.mutual?.! or var["LITERAL"]) then
      var.destroy
    else
      var.update_attributes("LITERAL" => (false));Fi[	@q$@q$i[[	@˙iMI"—    authenticate_user! if remote_profile_with_no_user_session?
    raise(Diaspora::AccountClosed) if @person.closed_account?
    @var = "LITERAL"
    @var = "LITERAL"
    @var = (params["LITERAL"] == "STRING");Fi[	@œiYI"ö      @var = var
      @var = new_encoded_string
      @var = "LITERAL"
      @var = "LITERAL"
      @var = /<[\s]*#{@options["LITERAL"].join("STRING")}/i;Fi[	@œiXI"a      @var = "LITERAL"
      @var = []
      @var = "LITERAL"
      @var = "LITERAL"
    end;Fi[	@q$@1 i[[	@˙i^I"k        else
          @var ||= Contact.new
          @var = "LITERAL"
          @var = []
        end;Fi[	@“iI"h    def function(var)
      @var = var
      @var = "LITERAL"
      @var = []
      @var = "STRING";Fi[	@œiVI"f      @var = var
      @var = false
      @var = "LITERAL"
      @var = []
      @var = "LITERAL";Fi[	@EI"&["STRING", "STRING"].map do |var|;Fi[[	@IiáI"€      # Builds the MongoDB credentials syntax to authenticate the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?;Fi[	@IiëI"ﬂ      # Builds the MongoDB connectivity options syntax to connect the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?;Fi[	@ki[I"Ÿ      # Builds the credentials MySQL syntax to authenticate the user
      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?;Fi[	I"!# Read the YAML frontmatter.;F@i[[	@›iI"u    end
    
    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.;Fi[	@Ìi I"u    end
    
    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.;Fi[	@i>I"u    end
    
    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.;Fi[	@I"#   class MyStrategy;Fi[[	@Êi&I"í      #
      # @example Using a yield to configure the default options.
      #
      #   class MyStrategy
      #     include OmniAuth::Strategy;Fi[	@Êi0I"ë      #
      # @example Using a hash to configure the default options.
      #
      #   class MyStrategy
      #     include OmniAuth::Strategy;Fi[	@ÊiBI"g      #
      # @example
      #
      #   class MyStrategy
      #     include OmniAuth::Strategy;Fi[	I"#   class Comment;F@ i[[	@ñi<I"ë      # This can be done with a symbol pointing to a method:
      #
      #   class Comment
      #     include ActiveModel::Validations
      #;Fi[	@ñiHI"¢      # With a block which is passed with the current record to be validated:
      #
      #   class Comment
      #     include ActiveModel::Validations
      #;Fi[	@ñiVI"•      # Or with a block where self points to the current record to be validated:
      #
      #   class Comment
      #     include ActiveModel::Validations
      #;Fi[	I"=# base - The String path to the dir containing the file.;FI".# name - The String filename of the file.;Fi[[	@›iI"ó    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #;Fi[	@Ìi"I"ó    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #;Fi[	@i@I"ó    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #;Fi[	I"k#       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee);F@&i[[	@ñiBI"≤      #
      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end;Fi[	@ñiPI"≤      #
      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end;Fi[	@ñiZI"™      #
      #     validate do
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end;Fi[	@=@\i[[	@ñi`I"‡      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |var, var| (var << ("STRING" + "STRING")) };Fi[	@»i)I"”      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |var, var| (var << "STRING") };Fi[	@pi>I"‡      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |var, var| (var << ("STRING" + "STRING")) };Fi[	@I"2# Returns self, to support chaining of calls.;Fi[[	@„i(I"˘      # Insert +node_or_tags+ before this node (as a sibling).
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns self, to support chaining of calls.
      #;Fi[	@„i4I"¯      # Insert +node_or_tags+ after this node (as a sibling).
      # +node_or_tags+ can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment, or a string containing markup.
      #
      # Returns self, to support chaining of calls.
      #;Fi[	@„ivI"‰      # Swap this Node for +node_or_tags+
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns self, to support chaining of calls.
      #;Fi[	@s8@i[[	@›iI"ç    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #
    # Returns nothing.;Fi[	@Ìi#I"ç    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #
    # Returns nothing.;Fi[	@iAI"ç    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.
    #
    # Returns nothing.;Fi[	I"#instance_write("LITERAL", nil);F@û8i[[	@∆iôI"      return if (@options["LITERAL"] or file?.!)
      @var = (@queued_for_delete + ["LITERAL", *styles.keys].uniq.map { |var| path(var) if exists?(var) }.compact)
      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil);Fi[	@∆iöI"      @var = (@queued_for_delete + ["LITERAL", *styles.keys].uniq.map { |var| path(var) if exists?(var) }.compact)
      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil);Fi[	@∆iõI"›      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil)
      instance_write("LITERAL", nil) if has_enabled_but_unset_created_at?;Fi[	@EI"if var = var.pop then;Fi[[	@vi'I"¥      #     Twitter.favorites('sferik')
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var = var.pop then
          merge_user!(var.options, var);Fi[	@‡i"I"Ë      #     Twitter.suggestions("art-design")
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var = var.pop then
          object_from_response(Twitter::Suggestion, "LITERAL", "STRING", var.options);Fi[	@iI"ø      #     Twitter.user(7505382)  # Same as above
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var = var.pop then
          merge_user!(var.options, var);Fi[	@E@º"i[[	@£iII"Î      #     Twitter.list_timeline(7505382, 8863586)
      def function(var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[	@£iI"Ë      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[	@£iI"Õ      
      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[	I"#@options["LITERAL"].call(self);F@	i[[	@∆i5I"ó    def function
      if @options["LITERAL"].respond_to?("LITERAL") then
        @options["LITERAL"].call(self)
      else
        @options["LITERAL"];Fi[	@^i~I"ª      def function(var)
        if @options["LITERAL"].respond_to?("LITERAL") then
          @options["LITERAL"].call(self)
        else
          if @options["LITERAL"] =~ "LITERAL" then;Fi[	@^ißI"ß      def function
        var = if @options["LITERAL"].respond_to?("LITERAL") then
          @options["LITERAL"].call(self)
        else
          @options["LITERAL"];Fi[	@Ÿ#@ºi[[	@ıi I"<module Paperclip
  module Storage
    module Filesystem;Fi [	@^i I"5module Paperclip
  module Storage
    module Fog;Fi [	@äi I"4module Paperclip
  module Storage
    module S3;Fi [	@\I"connection do |var|;Fi[[	@≈i9I"¿      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package)
        connection do |var|
          create_remote_path(var, var);Fi[	@pi/I"∑      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package)
        connection do |var|
          var.exec!("STRING");Fi[	@si-I"¿      # Transfers the archived file to the specified remote server
      def function
        var = remote_path_for(@package)
        connection do |var|
          create_remote_path(var, var);Fi[	@W@q!i[[	@ñi!I"£      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "STRING"
        @var ||= "LITERAL";Fi[	@XiI"¥      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[	@`iI"¥      # Creates a new instance of the storage object
      def function(var, var, var)
        super(var, var)
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[	@`8I"%#     include OmniAuth::Strategy;Fi[[	@Êi'I"í      # @example Using a yield to configure the default options.
      #
      #   class MyStrategy
      #     include OmniAuth::Strategy
      #;Fi[	@Êi1I"™      # @example Using a hash to configure the default options.
      #
      #   class MyStrategy
      #     include OmniAuth::Strategy
      #     configure foo: 'bar';Fi[	@ÊiCI"g      # @example
      #
      #   class MyStrategy
      #     include OmniAuth::Strategy
      #;Fi[	@E@Ω"i[[	@i±I"      #     Twitter.profile_banner(7505382)  # Same as above
      def function(var)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name));Fi[	@ﬁiI"˚      # @return [Array<Twitter::User>]
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name));Fi[	@ﬁi`I"      # @return [Twitter::Cursor]
      def function(var, var, var, var, var, var)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name));Fi[	@EI"&merge_user!(var.options, var.pop);Fi[[	@£i'I"´      
      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop)
        merge_list!(var.options, var.pop);Fi[	@ißI"	      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop)
        cursor_from_response("LITERAL", nil, "LITERAL", "STRING", var.options, "LITERAL");Fi[	@ﬁi,I"—      # @return [Array]
      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop)
        objects_from_response(var, var, var, var.options);Fi[	@\@=1i[[	@{iI"v  
  def self.admin(var, var, var)
    var = []
    var.each do |var|
      var = single_admin(var, var, var.dup);Fi[	@ÂiI"M  
  def function(var)
    var = []
    var.each do |var|
      case var;Fi[	@Âi<I"z  # Creates symlinks to sources in this folder.
  def function(var)
    var = []
    var.each do |var|
      case var;Fi[	I"require("omniauth");F@Z5i[[	@Ä'i I"Jrequire("omniauth")
module OmniAuth
  class Builder < ::Rack::Builder;Fi [	@i I"5require("omniauth")
module OmniAuth
  class Form;Fi [	I"9projects//omni_proj/omniauth/strategies/developer.rb;Ti I"<require("omniauth")
module OmniAuth
  module Strategies;Fi [	@Y@li[[	@Ui I"<module Backup
  module Configuration
    module Helpers;Fi [	I"8projects//backup_proj/backup/configuration/store.rb;TiI"Yrequire("ostruct")
module Backup
  module Configuration
    class Store < OpenStruct;Fi[	I"2projects//backup_proj/backup/configuration.rb;TiI"}  require(File.expand_path("../configuration/#{file}", "(string)"))
end
module Backup
  module Configuration
    extend(self);Fi[	I"^# @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;F@‘i[[	@}i¬I"ë      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Relationship]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.
      # @option options [Boolean] :device Enable/disable device notifications from the target user.;Fi[	@„iFI"Ø      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@i≥I"∏      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Boolean] true if the authenticating user is blocking the target user, otherwise false.
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.
      # @example Check whether the authenticating user is blocking @sferik;Fi[	@YI"module Encryptor;Fi[[	@˛*i I"4module Backup
  module Encryptor
    class Base;Fi [	@≠i I":module Backup
  module Encryptor
    class GPG < Base;Fi [	@Ói I">module Backup
  module Encryptor
    class OpenSSL < Base;Fi [	@I"$# Returns the formatted String.;Fi[[	@—i*I"k    #
    # date - The Time to format.
    #
    # Returns the formatted String.
    def function(var);Fi[	@—i8I"å    #   date_to_xmlschema(Time.now)
    #   # => "2011-04-24T20:34:46+08:00"
    #
    # Returns the formatted String.
    def function(var);Fi[	@—irI"¨    #   array_to_sentence_string(["apples", "oranges", "grapes"])
    #   # => "apples, oranges, and grapes"
    #
    # Returns the formatted String.
    def function(var);Fi[	I"document.decorate(var);F@Ri[[	@iMI"™          var = (var + send((var =~ "LITERAL" ? ("LITERAL") : ("LITERAL")), *(var + [var, var]).compact))
        end
        document.decorate(var)
        var
      end;Fi[	@icI"          var = (var + var.xpath(*(var + [var, var].compact)))
        end
        document.decorate(var)
        var
      end;Fi[	@ipI"§        var = NodeSet.new(document)
        each { |var| var = (var + var.xpath(*(var + [var, var].compact))) }
        document.decorate(var)
        var
      end;Fi[	@@r8i[[	@›iI"ñ    
    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.;Fi[	@Ìi!I"ñ    
    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.;Fi[	@i?I"ñ    
    # Read the YAML frontmatter.
    #
    # base - The String path to the dir containing the file.
    # name - The String filename of the file.;Fi[	@ÈI"/def function(var, var, var, var, var, var);Fi[[	@ﬁi^I"¡      # @param args [Array]
      # @param method_name [Symbol]
      # @return [Twitter::Cursor]
      def function(var, var, var, var, var, var)
        var = Twitter::API::Arguments.new(var);Fi[	@ﬁimI"∑      # @param options [Hash]
      # @param method_name [Symbol]
      # @return [Twitter::Cursor]
      def function(var, var, var, var, var, var)
        merge_default_cursor!(var);Fi[	@ÚiI"¨    # @param method_name [String, Symbol]
    # @param method_options [Hash]
    # @return [Twitter::Cursor]
    def function(var, var, var, var, var, var)
      @var = var;Fi[	@ÈI"'# @overload friend_ids(options={});Fi[[	@}iI">      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following;Fi[	@}iˇI">      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following;Fi[	@}iI">      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following;Fi[	I"3var = var.last.is_a?(Hash) ? (var.pop) : (nil);FI" var = NodeSet.new(document);Fi[[	@iHI"‡      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document)
        var.each do |var|;Fi[	@iYI"‹      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document)
        each do |var|;Fi[	@imI"      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document)
        each { |var| var = (var + var.xpath(*(var + [var, var].compact))) };Fi[	@n@:i[[	@3iI"j    end
    if (var.length <= var) and var.! then
      var = "STRING"
      var = "LITERAL"
    else;Fi[	@“i4I"Ñ    def function
      return if @to_merge.empty?
      var = "STRING"
      var = "LITERAL"
      @to_merge.each do |var, var, var|;Fi[	@€i*I"|    def self.destroy(var, var, var)
      var = var.to_s
      var = "STRING"
      var = "LITERAL"
      if var.empty? then;Fi[	@s1@N9i[[	@iGI"Ë      # Nokogiri::XML::Node#xpath
      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document);Fi[	@iXI"ˇ      # For more information see Nokogiri::XML::Node#css
      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document);Fi[	@ilI"      # For more information see Nokogiri::XML::Node#xpath
      def function(var)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document);Fi[	@E9I"[#   Returns an array of numeric IDs for every user the authenticated user is following;Fi[[	@}iI"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #;Fi[	@}i I"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #;Fi[	@}iI"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #;Fi[	@h9@i[[	@}iI"Ó      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.;Fi[	@}iI"Ó      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.;Fi[	@}i I"Ó      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.;Fi[	I"u# +node_or_tags+ can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment, or a string containing markup.;F@i[[	@„i3I"˚      ####
      # Insert +node_or_tags+ after this node (as a sibling).
      # +node_or_tags+ can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment, or a string containing markup.
      #
      # Returns self, to support chaining of calls.;Fi[	@„i?I"⁄      ####
      # Set the inner html for this Node to +node_or_tags+
      # +node_or_tags+ can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment, or a string containing markup.
      #
      # Returns self.;Fi[	@„iKI"N      ####
      # Set the inner html for this Node +node_or_tags+
      # +node_or_tags+ can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment, or a string containing markup.
      #
      # Returns the reparented node (if +node_or_tags+ is a Node), or NodeSet (if +node_or_tags+ is a DocumentFragment, NodeSet, or string).;Fi[	I">#   @example Return the authenticated user's friends' IDs;FI"#     Twitter.friend_ids;Fi[[	@}iI"       #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={});Fi[	@}iI"ô      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={});Fi[	@}i&I"ô      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={});Fi[	@É9I"-# @overload friend_ids(user, options={});Fi[[	@}iI"      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following;Fi[	@}iI"p      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following;Fi[	@}i'I"p      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following;Fi[	@å9I"W#   Returns an array of numeric IDs for every user the specified user is following;Fi[[	@}iI"Ó      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #;Fi[	@}i	I"Ó      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #;Fi[	@}i(I"Ó      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #;Fi[	@ç8@i[[	@„i)I"Ú      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns self, to support chaining of calls.
      #
      # Also see related method +add_previous_sibling+.;Fi[	@„i5I"Ó      # +node_or_tags+ can be a Nokogiri::XML::Node, a Nokogiri::XML::DocumentFragment, or a string containing markup.
      #
      # Returns self, to support chaining of calls.
      #
      # Also see related method +add_next_sibling+.;Fi[	@„iwI"Â      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #
      # Returns self, to support chaining of calls.
      #
      # Also see related method +replace+.;Fi[	@u*@ÿ*i[[	@∑iQI"q      (var << "STRING")
      var.run
      if var.success? then
        Logger.message("STRING")
      else;Fi[	@kiCI"{        (var << "STRING")
        var.run
        if var.success? then
          Logger.message("STRING")
        else;Fi[	@niCI"{        (var << "STRING")
        var.run
        if var.success? then
          Logger.message("STRING")
        else;Fi[	@ÿ*@	i[[	@∑iRI"£      var.run
      if var.success? then
        Logger.message("STRING")
      else
        raise(Errors::Archive::PipelineError, ("STRING" + var.error_messages));Fi[	@kiDI"Æ        var.run
        if var.success? then
          Logger.message("STRING")
        else
          raise(Errors::Database::PipelineError, ("STRING" + var.error_messages));Fi[	@niDI"Æ        var.run
        if var.success? then
          Logger.message("STRING")
        else
          raise(Errors::Database::PipelineError, ("STRING" + var.error_messages));Fi[	@ï9@i[[	@}iI"      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@}i
I"      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@}i)I"      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@Œ5@˛i[[	@}iœI"‰      # Returns detailed information about the relationship between two users
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@}iÈI"’      # Test for the existence of friendship between two users
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@}iI"!      # Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	I"$merge_user!(var, var, "STRING");FI"Fvar["LITERAL"] = var.delete("LITERAL") unless var["LITERAL"].nil?;Fi[[	@}i‹I"˛      #   Twitter.friendship(7505382, 14100886)    # Same as above
      def function(var, var, var)
        merge_user!(var, var, "STRING")
        var["LITERAL"] = var.delete("LITERAL") unless var["LITERAL"].nil?
        merge_user!(var, var, "STRING");Fi[	@}iﬁI"1        merge_user!(var, var, "STRING")
        var["LITERAL"] = var.delete("LITERAL") unless var["LITERAL"].nil?
        merge_user!(var, var, "STRING")
        var["LITERAL"] = var.delete("LITERAL") unless var["LITERAL"].nil?
        object_from_response(Twitter::Relationship, "LITERAL", "STRING", var);Fi[	@£iVI"±      # @return [Hash]
      def function(var, var)
        merge_user!(var, var, "STRING")
        var["LITERAL"] = var.delete("LITERAL") unless var["LITERAL"].nil?
        var;Fi[	@"9@±i[[	@—i+I"}    # date - The Time to format.
    #
    # Returns the formatted String.
    def function(var)
      var.strftime("STRING");Fi[	@—i9I"|    #   # => "2011-04-24T20:34:46+08:00"
    #
    # Returns the formatted String.
    def function(var)
      var.xmlschema;Fi[	@—isI"    #   # => "apples, oranges, and grapes"
    #
    # Returns the formatted String.
    def function(var)
      var = "STRING";Fi[	@nI"var[var].each do |var|;Fi[[	@πiI"·      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var = "STRING"
      var[var].each do |var|
        var = var["LITERAL"];Fi[	@‘i:I"∑      var = []
      if (var["LITERAL"] or var["LITERAL"]) then
        var = "STRING"
        var[var].each do |var|
          if var["LITERAL"] and (var["LITERAL"] == "STRING") then;Fi[	@‘iOI"´      var = []
      if var["LITERAL"] and (var["LITERAL"].to_i > "LITERAL") then
        var = "STRING"
        var[var].each do |var|
          var = var["LITERAL"].to_s;Fi[	@Î"@H*i[[	@i7I"ä            var.perform!
            Logger.clear!
          end)
        rescue => var
          Logger.error(Errors::CLIError.wrap(var));Fi[	@›iI"          self.content = $POSTMATCH
          self.data = YAML.load($1)
        end)
      rescue => var
        puts("STRING");Fi[	@{i(I"é            var.puts("STRING")
            var.puts(var.at("STRING").inner_text)
          end)
        rescue => var
          puts("STRING");Fi[	I"2# Adds a validation error to the given object;F@$i[[	@èiI"í      end
      
      # Adds a validation error to the given object 
      def function(var, var, var, var)
        if supports_validations? then;Fi[	@kiI"ë      end
      
      # Adds a validation error to the given object
      def function(var, var, var, var)
        if supports_validations? then;Fi[	@õiI"≥      end
      
      # Adds a validation error to the given object
      def function(var, var, var, var)
        var.errors.add(self.attribute(var), generate_message(var, var));Fi[	@n@0i[[	@ !i I"wvar = "STRING"
var = eval(IO.read(var), binding, var)
var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL");Fi [	@0i I"wvar = "STRING"
var = eval(IO.read(var), binding, var)
var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL");Fi [	@"0i I"wvar = "STRING"
var = eval(IO.read(var), binding, var)
var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL");Fi [	@\I"# @param options [Hash];Fi[[	@ﬁi3I"ñ      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash]
      # @return [Array];Fi[	@ﬁiPI"ó      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash]
      # @return [Object];Fi[	@ﬁijI"¢      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash]
      # @param method_name [Symbol];Fi[	I"rescue Exception => var;F@u.i[[	@îiäI"~      begin
        Keg.new(f.prefix).optlink
      rescue Exception => var
        onoe("STRING")
        puts("STRING");Fi[	@îi–I"c    begin
      var.link
    rescue Exception => var
      onoe("STRING")
      puts("STRING");Fi[	@îiÂI"~    begin
      Keg.new(f.prefix).fix_install_names
    rescue Exception => var
      onoe("STRING")
      puts("STRING");Fi[	I"return var;F@	i[[	I"0projects//backup_proj/backup/cli/helpers.rb;Ti%I"˙          Logger.message(var.lines.map { |var| "STRING" }.join) unless var.empty?
          Logger.warn(var.lines.map { |var| "STRING" }.join) unless var.empty?
          return var
        else
          raise(Errors::CLI::SystemCallError, "STRING");Fi[	@A,iøI"|    var = compute_cache_buster(var, var)
    if var.nil? then
      return var
    else
      if var.is_a?(String) then;Fi[	@ui7I"ñ            return ActionView::NonConcattingString.new(var)
          end
          return var
        else
          capture_without_haml(*var, &var);Fi[	@	@±i[[	@<i’I"\        # do nothing
      end
    else
      def function(var)
        unless var then;Fi[	@1"i–I"}    if (RUBY_VERSION < "STRING") then
      attr_writer("LITERAL")
    else
      def function(var)
        return unless var;Fi[	@‰ijI"y        var.gsub("LITERAL", "STRING")
      end
    else
      def function(var)
        if var.valid_encoding? then;Fi[	@]@i[[	@£iI"®      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var);Fi[	@ﬁiI"®      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var);Fi[	@ﬁiI"®      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(var, var, var);Fi[	@I"1#   Backup::Encryptor::GPG.defaults do |enc|;Fi[[	@≠iQI"˜      # just specify this in the defaults. Leading tabs/spaces are stripped
      # before writing the given string to the temporary configuration file.
      #
      #   Backup::Encryptor::GPG.defaults do |enc|
      #     enc.gpg_config = <<-EOF;Fi[	@≠i{I"æ      # to use be setup in {#keys}. The best place to do this is in your defaults
      # in +config.rb+.
      #
      #   Backup::Encryptor::GPG.defaults do |enc|
      #     enc.keys = {};Fi[	@≠iˇI"ı      # but wish to use {#passphrase_file} with a specific {Model}, be sure
      # to clear {#passphrase} within that model's configuration.
      #
      #   Backup::Encryptor::GPG.defaults do |enc|
      #     enc.passphrase = 'secret phrase';Fi[	@ÀI"var.puts(var.to_yaml);Fi[[	I"5projects//jekyll_proj/jekyll/migrators/marley.rb;TiI"“        var = File.dirname(var).split("LITERAL").last.gsub("LITERAL", "STRING")
        var = "STRING"
        File.open("STRING", "STRING") do |var|
          var.puts(var.to_yaml)
          var.puts("STRING");Fi[	@Õ iI"¬        var = "STRING"
        var = { "STRING" => "STRING", "STRING" => (var.title) }
        File.open("STRING", "STRING") do |var|
          var.puts(var.to_yaml)
          var.puts("STRING");Fi[	@{i$I"¶        begin
          (FileUtils.mkdir_p("STRING")
          File.open("STRING", "STRING") do |var|
            var.puts(var.to_yaml)
            var.puts("STRING");Fi[	@@i[[	@≤i.I"√            FileUtils.mkdir_p(var["LITERAL"])
            File.open("STRING", "STRING") do |var|
              var.puts("STRING")
              var.puts("STRING")
              var.puts("STRING");Fi[	@≤i/I"∂            File.open("STRING", "STRING") do |var|
              var.puts("STRING")
              var.puts("STRING")
              var.puts("STRING")
              var.puts("STRING");Fi[	@≤i0I"ì              var.puts("STRING")
              var.puts("STRING")
              var.puts("STRING")
              var.puts("STRING")
            end;Fi[	@X@Xi[[	@pi I"VBackup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup;Fi [	@si I"VBackup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup;Fi [	@ui I"VBackup::Dependency.load("STRING")
Backup::Dependency.load("STRING")
module Backup;Fi [	I"# @return [Array];F@„
i[[	@„i∏I"p      
      # @param count [Integer]
      # @return [Array]
      def function(var, var)
        var = {};Fi[	@ﬁi=I"û      # @param klass [Class]
      # @param array [Array]
      # @return [Array]
      def function(var, var)
        var.map { |var| var.fetch_or_new(var) };Fi[	@Úi&I"«    # @param collection [Array]
    # @param cursor [Integer]
    # @return [Array]
    def function(var, var)
      var = @client.send(@method_name.to_sym, @method_options.merge("LITERAL" => (var)));Fi[	@I:@$i[[	@ﬁi*I"¶      # @param path [String]
      # @param args [Array]
      # @return [Array]
      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var);Fi[	@ﬁi5I"≠      # @param path [String]
      # @param options [Hash]
      # @return [Array]
      def function(var, var, var, var)
        var = send(var.to_sym, var, var)["LITERAL"];Fi[	@ﬁiFI"¶      # @param path [String]
      # @param args [Array]
      # @return [Array]
      def function(var, var, var, var)
        var = Twitter::API::Arguments.new(var);Fi[	@@i8i[[	@ñi;I"ë      #
      # This can be done with a symbol pointing to a method:
      #
      #   class Comment
      #     include ActiveModel::Validations;Fi[	@ñiGI"¢      #
      # With a block which is passed with the current record to be validated:
      #
      #   class Comment
      #     include ActiveModel::Validations;Fi[	@ñiUI"•      #
      # Or with a block where self points to the current record to be validated:
      #
      #   class Comment
      #     include ActiveModel::Validations;Fi[	@I"# Options:;Fi[[	@ñi#I"Ö      #     end
      #   end
      #
      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active;Fi[	@ñi]I"Ö      #     end
      #   end
      #
      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active;Fi[	@∆i\I"¶    # and can instead point to an action in your app, for example for fine grained
    # security; this has a serious performance tradeoff.
    #
    # Options:
    #;Fi[	@	@Ei[[	@yi6I"á    if method_defined?("LITERAL") then
      alias "LITERAL" "LITERAL"
    else
      def function
        Script::String.new("STRING");Fi[	@œi¶I"v        "STRING"
      end
    else
      def function
        "STRING".encode(Encoding.find(options["LITERAL"]));Fi[	@“i#I"é    if (RUBY_VERSION < "STRING") then
      attr_reader :function
    else
      def function
        var = Encoding.find(@options["LITERAL"]);Fi[	@w@Î"i[[	I"8projects//devise_proj/devise/rails/warden_compat.rb;Ti"I"o      else
        Rails.logger.warn("STRING")
        # do nothing
      end)
    rescue NameError => var;Fi[	@i~I"9      end
    else
      # do nothing
    end)
  end;Fi[	@‡i™I"›            catch("LITERAL") do
              Nokogiri::HTML::SAX::Parser.new(JumpSAXHandler.new("LITERAL".to_s)).parse(var)
              # do nothing
            end)
          rescue Nokogiri::SyntaxError, RuntimeError;Fi[	@	@≤i[[	@·inI"L      @var = "STRING"
      var = var
    else
      @var = var
    end;Ti[	@ói`I"e    if var.nil? then
      return @var ||= Version.parse(@url)
    else
      @var = var
    end;Fi[	@Ä'iI"Z      if rack14? then
        super
      else
        @var = var
        super(&var);Fi[	@w@	i[[	@≠iI"∑        if user_recipients.empty? then
          Logger.warn("STRING")
          # do nothing
        else
          ("STRING" + user_recipients.map { |var| "STRING" }.join("STRING"));Fi[	@u:i'I"~      if var.message =~ "LITERAL" then
        Rails.logger.debug("STRING")
        # do nothing
      else
        raise;Fi[	@æiI"◊      var = OEmbed::Providers.get(self.url, "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL")
    rescue => var
      # do nothing
    else
      (self.data = var.fields;Fi[	I"Logger.warn("STRING");F@wi[[	@≠iÊI"g          "STRING"
        else
          Logger.warn("STRING")
          # do nothing
        end;Fi[	@≠iI"}      def function
        if user_recipients.empty? then
          Logger.warn("STRING")
          # do nothing
        else;Fi[	@≠i"I"Ç              import_key(var, var)
            else
              Logger.warn("STRING")
              # do nothing
            end;Fi[	@´5I"<# @note This method can only return up to 3,200 Tweets.;Fi[[	@„i(I"Û      # Returns the 20 most recent Tweets posted by the specified user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes;Fi[	@„i@I"ı      # Returns the 20 most recent retweets posted by the specified user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes;Fi[	@„iXI"˙      # Returns the 20 most recent retweets posted by the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes;Fi[	@E@Å6i[[	@LiôI"Ÿ      when Spc then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@LiõI"ﬁ      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@LiùI"–      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["LITERAL", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      else;Fi[	@ï:@˛i[[	@„i)I"⁄      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@„iAI"⁄      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@„iYI"⁄      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	I"	var);F@H*i[[	@≠iûI"ñ            run("STRING")
          end
          var)
        rescue => var
          raise(Errors::Encryptor::GPG::HomedirError.wrap(var, "STRING"));Fi[	@≠iMI"–          var = var.match("LITERAL").to_a["LITERAL"]
          raise("STRING") unless var
          var)
        rescue => var
          Logger.warn(Errors::Encryptor::GPG::KeyImportError.wrap(var, "STRING"));Fi[	@ñiÉI"≤          write_cache!(var)
          var.render("STRING")
          var)
        rescue => var
          raise(Errors::Storage::Dropbox::AuthenticationError.wrap(var, "STRING"));Fi[	@	I"(var = @url.sub("LITERAL", "STRING");Fi[[	@ziôI"ì        safe_system(hgpath, "STRING")
      end
    else
      var = @url.sub("LITERAL", "STRING")
      safe_system(hgpath, "STRING", var, @clone);Fi[	@ziæI"æ      puts("STRING")
      Dir.chdir(@clone) { safe_system(bzrpath, "STRING") }
    else
      var = @url.sub("LITERAL", "STRING")
      safe_system(bzrpath, "STRING", "STRING", var, @clone);Fi[	@zi‹I"∂      puts("STRING")
      safe_system(fossilpath, "STRING", "STRING", @clone)
    else
      var = @url.sub("LITERAL", "STRING")
      safe_system(fossilpath, "STRING", var, @clone);Fi[	@*I"´# @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[[	@„iLI"Ö      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @example Return the 20 most recent retweets posted by @sferik;Fi[	@„icI"ï      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @example Return the 20 most recent retweets posted by the authenticating user;Fi[	@„iäI"√      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @option options [Boolean, String, Integer] :include_entities The tweet entities node will be disincluded when set to false.;Fi[	@ @Ñi[[	@;iI"z      puts("STRING")
      puts("STRING")
      puts("STRING")
      begin
        var.verify_download_integrity(var);Fi[	@Si^I"Udef function(var, var)
  puts("STRING")
  puts("STRING")
  begin
    var = false;Fi[	@xiI"m      var = var["STRING"]
      var = var["STRING"]
      puts("STRING")
      begin
        var.process;Fi[	@5$@‘i[[	@i0I"Ñ      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.
      # @option options [Boolean, String, Integer] :skip_status Do not include user's Tweets when set to true, 't' or 1.;Fi[	@iQI"s      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :name Full name associated with the profile. Maximum of 20 characters.;Fi[	@isI"`      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :profile_background_color Profile background color.;Fi[	@	@˚%i[[	@piI"∫    if ARGV.include?("STRING") then
      Formula.each { |var| puts("STRING") }
    else
      if ARGV.include?("STRING") then
        raise(FormulaUnspecifiedError) if ARGV.named.empty?;Fi[	@&i
I"ó  if ARGV.include?("STRING") then
    Formula
  else
    if ARGV.include?("STRING") then
      var = Homebrew.outdated_brews.collect { |var| var.name };Fi[	@πiI"é    if ARGV.include?("STRING") then
      exec_browser("STRING")
    else
      if ARGV.include?("STRING") then
        exec_browser("STRING");Fi[	@	@„,i[[	@?i‡I"ù      if var.respond_to?("LITERAL") then
        var.model_name
      else
        if var.respond_to?("LITERAL") then
          var.to_model.class.model_name;Fi[	@]i"I"Ω          if var.is_a?(Compass::Configuration::Data) then
            var
          else
            if var.respond_to?("LITERAL") then
              var ||= var.to_s if var.is_a?(Pathname);Fi[	@^iòI"~        when Hash then
          var
        else
          if var.respond_to?("LITERAL") then
            var.call(self);Fi[	@ @%i[[	@îiI"Ñ        unless ORIGINAL_PATHS.include?(var) then
          opoo("STRING")
          puts("STRING")
          @var = true
        end;Fi[	@îiI"]      opoo("STRING")
      puts("STRING")
      puts("STRING")
      @var = true
    end;Fi[	@îi$I"]      opoo("STRING")
      puts("STRING")
      puts("STRING")
      @var = true
    end;Fi[	I"# Initializes a new object;F@i[[	@Qi6I"P    end
    
    # Initializes a new object
    #
    # @param attrs [Hash];Fi[	@iI"P    end
    
    # Initializes a new object
    #
    # @param attrs [Hash];Fi[	@ÎiI"wmodule Twitter
  class Relationship < Twitter::Base
    # Initializes a new object
    #
    # @param attrs [Hash];Fi[	@1 @≤i[[	@liI"a      
      def function(var, var)
        @var = []
        @var = var
        @var = true;Fi[	@ziI"\        
        def function(var)
          @var = []
          @var = var
        end;Fi[	@
iLI"h      def function(var, var, var)
        @var = var
        @var = []
        @var = var
      end;Fi[	@I"#     def attributes;Fi[[	@[iI"w    #
    #     attr_accessor :name, :age
    #
    #     def attributes
    #       {'name' => nil, 'age' => nil};Fi[	@^ipI"g      #       end
      #     end
      #
      #     def attributes
      #       instance_values;Fi[	@aiÃI"g      #       end
      #     end
      #
      #     def attributes
      #       instance_values;Fi[	I"/#       Version: GnuPG v1.4.12 (GNU/Linux);F@i[[	@≠i|I"Î      #     enc.keys['joe@example.com'] = <<-EOS
      #       -----BEGIN PGP PUBLIC KEY BLOCK-----
      #       Version: GnuPG v1.4.12 (GNU/Linux)
      #
      #       mQMqBEd5F8MRCACfArHCJFR6nkmxNiW+UE4PAW3bQla9JWFqCwu4VqLkPI/lHb5p;Fi[	@≠iàI"Ï      #     enc.keys['mary@example.com'] = <<-EOS
      #       -----BEGIN PGP PUBLIC KEY BLOCK-----
      #       Version: GnuPG v1.4.12 (GNU/Linux)
      #
      #       2SlVmAGHOCJhShx1vfNGVYNxHff8Fzy2O89BxD/6in9kGvD0+mhXSDxsJn2oNK50;Fi[	@≠iI"Ò      #     encryptor.keys['joe@example.com'] = <<-EOS
      #       -----BEGIN PGP PUBLIC KEY BLOCK-----
      #       Version: GnuPG v1.4.12 (GNU/Linux)
      #
      #       mI0EUBR6CwEEAMVSlFtAXO4jXYnVFAWy6chyaMw+gXOFKlWojNXOOKmE3SujdLKh;Fi[	@ @ˇ0i[[	@îi”I"~      onoe("STRING")
      puts("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?
      @var = true;Fi[	@îiËI"~      onoe("STRING")
      puts("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?
      @var = true;Fi[	@îi˝I"Ö    rescue Exception => var
      opoo("STRING")
      puts("STRING")
      ohai(var, var.backtrace) if ARGV.debug?
      @var = true;Fi[	I"1#       -----BEGIN PGP PUBLIC KEY BLOCK-----;F@;i[[	@≠i{I"§      #
      #     enc.keys['joe@example.com'] = <<-EOS
      #       -----BEGIN PGP PUBLIC KEY BLOCK-----
      #       Version: GnuPG v1.4.12 (GNU/Linux)
      #;Fi[	@≠iáI"•      #
      #     enc.keys['mary@example.com'] = <<-EOS
      #       -----BEGIN PGP PUBLIC KEY BLOCK-----
      #       Version: GnuPG v1.4.12 (GNU/Linux)
      #;Fi[	@≠iI"¬      #     encryptor.keys = {}
      #     encryptor.keys['joe@example.com'] = <<-EOS
      #       -----BEGIN PGP PUBLIC KEY BLOCK-----
      #       Version: GnuPG v1.4.12 (GNU/Linux)
      #;Fi[	I")def self.process(var, var, var, var);F@*i[[	@¿iI"’    QUERY = "STRING"
    
    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING");Fi[	@QiI"’    QUERY = "STRING"
    
    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING");Fi[	@ÕiI"’    QUERY = "STRING"
    
    def self.process(var, var, var, var)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING");Fi[	@/:@i[[	@2:i I"¶        var = "STRING"
        File.open("STRING", "STRING") do |var|
          var.puts(var.to_yaml)
          var.puts("STRING")
          var.puts("STRING") if var;Fi[	@Õ iI"œ        var = { "STRING" => "STRING", "STRING" => (var.title) }
        File.open("STRING", "STRING") do |var|
          var.puts(var.to_yaml)
          var.puts("STRING")
          var.puts(var.description);Fi[	@{i%I"           (FileUtils.mkdir_p("STRING")
          File.open("STRING", "STRING") do |var|
            var.puts(var.to_yaml)
            var.puts("STRING")
            var.puts(var.at("STRING").inner_text);Fi[	@H3@Ei[[	@Œ$iI"      
      ##
      # Yields to the block the compressor command and filename extension.
      def function
        log!;Fi[	@∂iI"∫      
      ##
      # Yields to the block the compressor command and filename extension.
      def function
        Backup::Logger.warn(((("STRING" + "STRING") + "STRING") + "STRING"));Fi[	@πi$I"∫      
      ##
      # Yields to the block the compressor command and filename extension.
      def function
        Backup::Logger.warn(((("STRING" + "STRING") + "STRING") + "STRING"));Fi[	I"&# Returns an array of photo sizes;F@i[[	@÷i
I"ß    attr_reader("LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL")
    
    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>];Fi[	@‰iI"±      attr_reader("LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL")
      
      # Returns an array of photo sizes
      #
      # @return [Array<Twitter::Size>];Fi[	@ËiI"Ömodule Twitter
  class ProfileBanner < Twitter::Base
    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>];Fi[	@C)I"if var["LITERAL"].! then;Fi[[	@i)I"      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then
            var["LITERAL"] = Node::SaveOptions::NO_DECLARATION.|(Node::SaveOptions::NO_EMPTY_TAGS).|(Node::SaveOptions::AS_HTML);Fi[	@i7I"      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then
            var["LITERAL"] = Node::SaveOptions::NO_DECLARATION.|(Node::SaveOptions::NO_EMPTY_TAGS).|(Node::SaveOptions::AS_XHTML);Fi[	@iˆI"      def function(var)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then
            var["LITERAL"] = Node::SaveOptions::NO_DECLARATION.|(Node::SaveOptions::NO_EMPTY_TAGS).|(Node::SaveOptions::AS_HTML);Fi[	@e5@Ei[[	@÷iI"¢    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>]
    def function
      @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|;Fi[	@‰iI"¨      # Returns an array of photo sizes
      #
      # @return [Array<Twitter::Size>]
      def function
        @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|;Fi[	@Ëi
I"¢    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>]
    def function
      @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|;Fi[	@∏/I"/var[var] = Twitter::Size.fetch_or_new(var);Fi[[	@÷iI"µ    # @return [Array<Twitter::Size>]
    def function
      @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
        var[var] = Twitter::Size.fetch_or_new(var)
        var;Fi[	@‰iI"ø      # @return [Array<Twitter::Size>]
      def function
        @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
          var[var] = Twitter::Size.fetch_or_new(var)
          var;Fi[	@ËiI"µ    # @return [Array<Twitter::Size>]
    def function
      @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
        var[var] = Twitter::Size.fetch_or_new(var)
        var;Fi[	@q!@¨i[[	@≈iI"è        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@[i I"è        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@ŸiI"x      def function
        load_defaults!
        @var ||= "STRING"
        @var ||= false
        @var = Array.new;Fi[	I"# Obtain destination path.;F@i[[	@ÌiuI"k    end
    
    # Obtain destination path.
    #
    # dest - The String path to the destination dir.;Fi[	@i¡I"k    end
    
    # Obtain destination path.
    #
    # dest - The String path to the destination dir.;Fi[	@∞iI"k    end
    
    # Obtain destination path.
    #
    # dest - The String path to the destination dir.;Fi[	@	I"if var.empty? then;Fi[[	I"Bprojects//diaspora_proj/controllers/invitations_controller.rb;Ti4I"ß    if var.empty? then
      flash["LITERAL"] = t("STRING")
    else
      if var.empty? then
        flash["LITERAL"] = t("STRING", "LITERAL" => (var.join("STRING")));Fi[	@u;i7I"»      if var.empty? then
        flash["LITERAL"] = t("STRING", "LITERAL" => (var.join("STRING")))
      else
        if var.empty? then
          flash["LITERAL"] = (t("STRING") + var.join("STRING"));Fi[	@“iòI"l        @var = var
        return if var
      else
        if var.empty? then
          var = "STRING";Fi[	@X;@Ri[[	@÷iI"ö    def function
      @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
        var[var] = Twitter::Size.fetch_or_new(var)
        var
      end;Fi[	@‰iI"§      def function
        @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
          var[var] = Twitter::Size.fetch_or_new(var)
          var
        end;Fi[	@ËiI"ö    def function
      @var ||= Array(@attrs["LITERAL"]).inject({}) do |var, var|
        var[var] = Twitter::Size.fetch_or_new(var)
        var
      end;Fi[	@	@å&i[[	I"6projects//diaspora_proj/models/jobs/http_multi.rb;TiI"¡        if (var < MAX_RETRIES) then
          Resque.enqueue(Jobs::HttpMulti, var, var, var.failed_people, var, (var + "LITERAL"))
        else
          Rails.logger.info("STRING")
        end;Fi[	@#i9I"ì        if self.parent_author_signature_valid? then
          self.perform(var)
        else
          Rails.logger.info("STRING")
          return;Fi[	@–iZI"â      if self.target_author_signature_valid? then
        self.perform(var)
      else
        Rails.logger.info("STRING")
        return;Fi[	@	@ï*i[[	@XiMI"Ç            if var = var.files.get(var) then
              var.destroy
            else
              (var << var)
            end;Fi[	@NiI"∏          if var.is_a?(String) then
            (var << [var, File.join((css_path or (css_dir or "STRING")), File.basename(var))])
          else
            (var << var)
          end;Fi[	@ÏiGI"™          if ["LITERAL", "LITERAL"].include?(var) then
            var = (var["LITERAL", (var - "LITERAL")] + [var])
          else
            (var << var)
          end;Fi[	@	8@+)i[[	@kifI"±      # to perform the database dumping process
      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING";Fi[	@nidI"˙      # both the host and the socket are specified, the socket will take priority over the host
      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING".gsub("STRING", "STRING");Fi[	@LifI"±      # to perform the database dumping process
      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING";Fi[	I"8# data to the specified path based on the 'trigger';F@Ei[[	@ki5I"ö      ##
      # Performs the mysqldump command and outputs the
      # data to the specified path based on the 'trigger'
      def function
        super;Fi[	@ni5I"ó      ##
      # Performs the pgdump command and outputs the
      # data to the specified path based on the 'trigger'
      def function
        super;Fi[	@Oi$I"õ      ##
      # Performs the riak-admin command and outputs the
      # data to the specified path based on the 'trigger'
      def function
        super;Fi[	I"require_all("STRING");F@¶;i[[	@i%I"|require("jekyll/generator")
require("jekyll/command")
require_all("STRING")
require_all("STRING")
require_all("STRING");Fi[	@i&I"vrequire("jekyll/command")
require_all("STRING")
require_all("STRING")
require_all("STRING")
require_all("STRING");Fi[	@i'I"jrequire_all("STRING")
require_all("STRING")
require_all("STRING")
require_all("STRING")
module Jekyll;Fi[	@FI"end.join("STRING");Fi[[	@kiÉI"ö        skip_tables.map do |var|
          var = (dump_all? or var["STRING"]) ? (var) : ("STRING")
          "STRING"
        end.join("STRING")
      end;Fi[	@i]I"õ        var.namespace_scopes.map do |var|
          var = var.prefix.nil? ? ("STRING") : ("STRING")
          "STRING"
        end.join("STRING")
      end;Fi[	@¸	iI"t            end
          end.map do |var|
            "STRING"
          end.join("STRING")
          "STRING";Fi[	@	@Ái[[	@Ái8I"®          (var << "STRING") unless var.directory?
          (var << "STRING")
        else
          (var << "STRING")
          (var << "STRING") unless var.directory?;Fi[	@ÁiJI"Ü            (var << "STRING")
            (var << "STRING")
          else
            (var << "STRING")
            (var << "STRING");Fi[	@ÁiNI"ö            (var << "STRING")
          end
        else
          (var << "STRING")
          f.plist_startup ? ((var << "STRING")) : ((var << "STRING"));Fi[	I"require("twitter/entity");F@ôi[[	@@5i I"<require("twitter/entity")
module Twitter
  class Entity;Fi [	@C5i I"<require("twitter/entity")
module Twitter
  class Entity;Fi [	@F5i I"<require("twitter/entity")
module Twitter
  class Entity;Fi [	@@I5i[[	@iI"Q      #
      #   #{prefix}#{attr}(*args, &block)
      #
      # to
      #;Fi[	@i@I"Q      #
      #   #{attr}#{suffix}(*args, &block)
      #
      # to
      #;Fi[	@idI"Z      #
      #   #{prefix}#{attr}#{suffix}(*args, &block)
      #
      # to
      #;Fi[	@	I",flash.now["LITERAL"] = I18n.t("STRING");Fi[[	@èiI"©        var.html { redirect_to("LITERAL") }
      end
    else
      flash.now["LITERAL"] = I18n.t("STRING")
      var = var ? (var.errors.full_messages) : (t("STRING"));Fi[	@èi-I"      flash.now["LITERAL"] = I18n.t("STRING")
      respond_with(AspectMembership.where("LITERAL" => (@contact.id), "LITERAL" => (@aspect.id)).first)
    else
      flash.now["LITERAL"] = I18n.t("STRING")
      render("LITERAL" => (true), "LITERAL" => "LITERAL");Fi[	@∏irI"™          var.js { render("LITERAL" => (var), "LITERAL" => "LITERAL") }
        end
      else
        flash.now["LITERAL"] = I18n.t("STRING")
        respond_to do |var|;Fi[	@=@Y)i[[	@OiI"amodule Nokogiri
  module HTML
    module SAX
      class Parser < Nokogiri::XML::SAX::Parser;Fi[	@RiI"omodule Nokogiri
  module HTML
    module SAX
      class ParserContext < Nokogiri::XML::SAX::ParserContext;Fi[	@∫iI"Hmodule Nokogiri
  module HTML
    module SAX
      class PushParser;Fi[	@ù0@Ri[[	@=iŸI"g      
      def function(var, var, var)
        var = [var.first, var.last]
        var
      end;Fi[	@=iﬁI"g      
      def function(var, var, var)
        var = [var.first, var.last]
        var
      end;Fi[	@=i„I"g      
      def function(var, var, var)
        var = [var.first, var.last]
        var
      end;Fi[	I"+var = var.value["LITERAL"].value.first;FI",var.value["LITERAL"].value = ["STRING"];Fi[[	@∑i*I"\        var.each do |var|
          if var.value["LITERAL"].value["LITERAL"].value["LITERAL"] =~ "LITERAL" then
            var = var.value["LITERAL"].value.first
            var.value["LITERAL"].value = ["STRING"]
            var.value["LITERAL"] = Node.new("LITERAL", [var.value["LITERAL"].value["LITERAL"], Node.new("LITERAL", ["STRING", var])]);Fi[	@∑i3I"Ö          if ["STRING", "STRING"].include?(var.value["LITERAL"].value.first) then
            var = var.value["LITERAL"].value.first.gsub("LITERAL", "STRING")
            var = var.value["LITERAL"].value.first
            var.value["LITERAL"].value = ["STRING"]
            var.value["LITERAL"] = Node.new("LITERAL", [Node.new("LITERAL", ["STRING"]), Node.new("LITERAL", ["STRING", var])]);Fi[	@∑i8I">          else
            if ("STRING" == var.value["LITERAL"].value.first) then
              var = var.value["LITERAL"].value.first
              var.value["LITERAL"].value = ["STRING"]
              var.value["LITERAL"] = Node.new("LITERAL", [Node.new("LITERAL", ["STRING"]), Node.new("LITERAL", ["STRING", var])]);Fi[	@ª@	i[[	@¢ioI"ô    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var));Fi[	@¢ixI"ô    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var));Fi[	@¢i|I"ô    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var));Fi[	@N8@+)i[[	@IiàI"ß      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING";Fi[	@IiíI"ß      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING";Fi[	@ki\I"¿      # to perform the database dumping process
      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING".gsub("STRING", "STRING");Fi[	@	I"if var.is_a?(String) then;Fi[[	@]i)I"Ë              if var.is_a?(Hash) then
                Compass::Configuration::Data.new(var, var)
              else
                if var.is_a?(String) then
                  Compass::Configuration::FileData.new_from_file(var, var);Fi[	@A,i¿I"x    if var.nil? then
      return var
    else
      if var.is_a?(String) then
        var = { "LITERAL" => (var) };Fi[	@ŒiI"~        @var = var.delete("LITERAL")
        @var = var
      else
        if var.is_a?(String) then
          @var = var;Fi[	@	@L6i[[	@biÙI"Å        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var);Fi[	@bi˛I"Å        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var);Fi[	@biI"Å        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var);Fi[	@í(@≠i[[	@ki-I"ó        @var ||= Array.new
        @var ||= Array.new
        @var ||= Array.new
        instance_eval(&var) if block_given?
        @var ||= "LITERAL";Fi[	@ni.I"†        @var ||= Array.new
        @var ||= Array.new
        @var ||= Array.new
        instance_eval(&var) if block_given?
        @var ||= utility("LITERAL");Fi[	@Li(I"ê      def function(var, var)
        super(var)
        @var ||= Array.new
        instance_eval(&var) if block_given?
        @var ||= "STRING";Fi[	@¨(I"J# Attempt to find a user by its email. If a record is found, send new;Fi[[	@ÄiºI"Ÿ      end
      
      module ClassMethods
        # Attempt to find a user by its email. If a record is found, send new
        # confirmation instructions to it. If not, try searching for a user by unconfirmed_email;Fi[	@aiÅI"∆      end
      
      module ClassMethods
        # Attempt to find a user by its email. If a record is found, send new
        # unlock instructions to it. If not user is found, returns a new user;Fi[	@+iUI"»      end
      
      module ClassMethods
        # Attempt to find a user by its email. If a record is found, send new
        # password instructions to it. If user is not found, returns a new user;Fi[	@ÿ*I"=File.open(File.join(local_path, var), "STRING") do |var|;Fi[[	@Ui2I"
        var = remote_path_for(@package)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING")
          File.open(File.join(local_path, var), "STRING") do |var|
            connection.put_object(container, File.join(var, var), var);Fi[	@ñiTI"˝        var = remote_path_for(@package)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING")
          File.open(File.join(local_path, var), "STRING") do |var|
            connection.put_file(File.join(var, var), var);Fi[	@Xi:I"        var = directory_for(var, true)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING")
          File.open(File.join(local_path, var), "STRING") do |var|
            var.files.create("LITERAL" => (var), "LITERAL" => (var));Fi[	@;I"module Serializers;Fi[[	@^iI"[require("active_support/json")
module ActiveModel
  module Serializers
    module JSON;Fi[	@ai
I"ñrequire("active_support/core_ext/hash/slice")
require("active_support/core_ext/time/acts_like")
module ActiveModel
  module Serializers
    module Xml;Fi[	@~3@∫i[[	@IiI"}      
      ##
      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database;Fi[	@niI"}      
      ##
      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database;Fi[	@+)I"&"STRING".gsub("STRING", "STRING");Fi[[	@ki]I"≥      def function
        ["STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING".gsub("STRING", "STRING")
        end.compact.join("STRING");Fi[	@nieI"Ω      def function
        ["STRING", "STRING", "STRING"].map do |var|
          next if send(var).to_s.empty?
          "STRING".gsub("STRING", "STRING")
        end.compact.join("STRING");Fi[	I"!# Used only within the specs;F@Ei[[	@UiI"l        
        ##
        # Used only within the specs
        def function
          defaults.reset!;Fi[	@
9iI"_      
      ##
      # Used only within the specs
      def function
        @table.clear;Fi[	I"IBackup::Logger.warn(((("STRING" + "STRING") + "STRING") + "STRING"));F@ei[[	@∂i I"¬      # Yields to the block the compressor command and filename extension.
      def function
        Backup::Logger.warn(((("STRING" + "STRING") + "STRING") + "STRING"))
        super
      end;Fi[	@πi&I"¬      # Yields to the block the compressor command and filename extension.
      def function
        Backup::Logger.warn(((("STRING" + "STRING") + "STRING") + "STRING"))
        super
      end;Fi[	I"6# faster (-1) rather than better when set to true;F@∫i[[	@∂iI"∑      ##
      # Tells Backup::Compressor::Lzma to compress
      # faster (-1) rather than better when set to true
      ##
      # Creates a new instance of Backup::Compressor::Lzma;Fi[	@πiI"¡      ##
      # Tells Backup::Compressor::Lzma to compress
      # faster (-1) rather than better when set to true
      ##
      # Tells Backup::Compressor::Pbzip2 how many processors to use.;Fi[	@F@¬,i[[	@¸iI"x    @var = case var
    when "STRING", "STRING" then
      "STRING"
    when "STRING", "STRING" then
      "STRING";Fi[	@‹idI"ñ          case var.value.first
          when "STRING", "STRING" then
            "STRING"
          when "STRING", "STRING" then
            "STRING";Fi[	I"6# better (-9) rather than faster when set to true;F@∫i[[	@∂iI"Ø      ##
      # Tells Backup::Compressor::Lzma to compress
      # better (-9) rather than faster when set to true
      ##
      # Tells Backup::Compressor::Lzma to compress;Fi[	@πiI"Ø      ##
      # Tells Backup::Compressor::Lzma to compress
      # better (-9) rather than faster when set to true
      ##
      # Tells Backup::Compressor::Lzma to compress;Fi[	I"/# additional options specified by the user;F@Ei[[	@Ii†I"™      ##
      # Builds a MongoDB compatible string for the
      # additional options specified by the user
      def function
        @additional_options.join("STRING");Fi[	@LinI"®      ##
      # Builds a Redis compatible string for the
      # additional options specified by the user
      def function
        @additional_options.join("STRING");Fi[	I"0# Tables to skip while dumping the database;F@∫i[[	@ki I"¶      # Connectivity options
      ##
      # Tables to skip while dumping the database
      ##
      # Tables to dump, tables that aren't specified won't get dumped;Fi[	@niI"¶      # Connectivity options
      ##
      # Tables to skip while dumping the database
      ##
      # Tables to dump, tables that aren't specified won't get dumped;Fi[	I"D# Tables to dump, tables that aren't specified won't get dumped;F@∫i[[	@ki"I"∞      # Tables to skip while dumping the database
      ##
      # Tables to dump, tables that aren't specified won't get dumped
      ##
      # Additional "mysqldump" options;Fi[	@ni!I"Æ      # Tables to skip while dumping the database
      ##
      # Tables to dump, tables that aren't specified won't get dumped
      ##
      # Additional "pg_dump" options;Fi[	@ú-@Q<i[[	@∂iI"¥      # better (-9) rather than faster when set to true
      ##
      # Tells Backup::Compressor::Lzma to compress
      # faster (-1) rather than better when set to true
      ##;Fi[	@πiI"¥      # better (-9) rather than faster when set to true
      ##
      # Tells Backup::Compressor::Lzma to compress
      # faster (-1) rather than better when set to true
      ##;Fi[	@ú-@^<i[[	@∂iI"É      
      ##
      # Tells Backup::Compressor::Lzma to compress
      # better (-9) rather than faster when set to true
      ##;Fi[	@πiI"É      
      ##
      # Tells Backup::Compressor::Lzma to compress
      # better (-9) rather than faster when set to true
      ##;Fi[	@≠@o)i[[	@ki.I"†        @var ||= Array.new
        @var ||= Array.new
        instance_eval(&var) if block_given?
        @var ||= "LITERAL"
        @var ||= utility("LITERAL");Fi[	@≠iLI"{      def function(var)
        super
        instance_eval(&var) if block_given?
        @var ||= "LITERAL"
      end;Fi[	I"# specified by the user;F@Ei[[	@kinI"ß      ##
      # Builds a MySQL compatible string for the additional options
      # specified by the user
      def function
        additional_options.join("STRING");Fi[	@nilI"¨      ##
      # Builds a PostgreSQL compatible string for the additional options
      # specified by the user
      def function
        additional_options.join("STRING");Fi[	@≠I" @var ||= utility("LITERAL");Fi[[	@Ii6I"°        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var ||= utility("LITERAL")
        @var ||= utility("LITERAL");Fi[	@ni/I"è        @var ||= Array.new
        @var ||= Array.new
        instance_eval(&var) if block_given?
        @var ||= utility("LITERAL")
      end;Fi[	I"%# for the compressor being used.;F@i[[	@∞iI"Ÿ      # Note that setting the level to either extreme may or may not
      # give the desired result. Be sure to check the documentation
      # for the compressor being used.
      #
      # The default `level` is 9.;Fi[	@≥iI"Ÿ      # Note that setting the level to either extreme may or may not
      # give the desired result. Be sure to check the documentation
      # for the compressor being used.
      #
      # The default `level` is 6.;Fi[	I"B# give the desired result. Be sure to check the documentation;F@ö<i[[	@∞iI"Ï      # Values should be a single digit from 1 to 9.
      # Note that setting the level to either extreme may or may not
      # give the desired result. Be sure to check the documentation
      # for the compressor being used.
      #;Fi[	@≥iI"Ï      # Values should be a single digit from 1 to 9.
      # Note that setting the level to either extreme may or may not
      # give the desired result. Be sure to check the documentation
      # for the compressor being used.
      #;Fi[	@q!@q!i[[	@|i,I"}        @var ||= false
        @var ||= []
        @var ||= "STRING"
        @var ||= "STRING"
        @var ||= "STRING";Fi[	@|i-I"ç        @var ||= []
        @var ||= "STRING"
        @var ||= "STRING"
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[	@q!I"$@var = @original_filename.strip;Fi[[	@&iI"€    def function
      @var = @target.original_filename if @target.respond_to?("LITERAL")
      @var ||= "STRING"
      @var = @original_filename.strip
      @var = @target.content_type if @target.respond_to?("LITERAL");Fi[	@,iI"√    def function
      @var = @target.path.split("STRING").last
      @var ||= "STRING"
      @var = @original_filename.strip
      @var = @content.content_type if @content.respond_to?("LITERAL");Fi[	@Ä!@wi[[	@•iI"m  (require("haml/filters/maruku")
  require("haml/filters/textile"))
rescue LoadError
  # do nothing
end;Fi[	@¯i>I"_      begin
        require("psych")
      rescue LoadError
        # do nothing
      end;Fi[	@Ä!@~&i[[	@À5iI"d  (require("omniauth")
  require("omniauth/version"))
rescue LoadError
  warn("STRING")
  raise;Fi[	@PiAI"[  (require("rubygems")
  require("mocha/setup"))
rescue LoadError
  warn("STRING")
end;Fi[	@Ä!@Ri[[	@∞ iI"Gbegin
  require("airbrake")
rescue LoadError
  raise("STRING")
end;Fi[	@µ iI"Obegin
  require("hoptoad_notifier")
rescue LoadError
  raise("STRING")
end;Fi[	I"C# Note that setting the level to either extreme may or may not;F@°<i[[	@∞iI"Ï      #
      # Values should be a single digit from 1 to 9.
      # Note that setting the level to either extreme may or may not
      # give the desired result. Be sure to check the documentation
      # for the compressor being used.;Fi[	@≥iI"Ï      #
      # Values should be a single digit from 1 to 9.
      # Note that setting the level to either extreme may or may not
      # give the desired result. Be sure to check the documentation
      # for the compressor being used.;Fi[	I"3# Values should be a single digit from 1 to 9.;F@«<i[[	@∞iI"ˆ      # Specify the level of compression to use.
      #
      # Values should be a single digit from 1 to 9.
      # Note that setting the level to either extreme may or may not
      # give the desired result. Be sure to check the documentation;Fi[	@≥iI"ˆ      # Specify the level of compression to use.
      #
      # Values should be a single digit from 1 to 9.
      # Note that setting the level to either extreme may or may not
      # give the desired result. Be sure to check the documentation;Fi[	I"/# Specify the level of compression to use.;F@i[[	@∞iI"}      
      ##
      # Specify the level of compression to use.
      #
      # Values should be a single digit from 1 to 9.;Fi[	@≥iI"}      
      ##
      # Specify the level of compression to use.
      #
      # Values should be a single digit from 1 to 9.;Fi[	@ @&i[[	@xi.I"}      unless var["STRING"] then
        trap("STRING") do
          puts("STRING")
          exit("LITERAL")
        end;Fi[	@[i*I"          puts(Whenever.cron(@options))
          puts("STRING")
          puts("STRING")
          exit("LITERAL")
        end;Fi[	@ I"+var.backtrace.each { |var| puts(var) };Fi[[	@›iFI"ø        self.content = Liquid::Template.parse(self.content).render!(var, var)
      rescue => var
        puts("STRING")
        var.backtrace.each { |var| puts(var) }
        abort("STRING");Fi[	@›iSI"«          self.output = Liquid::Template.parse(var.content).render!(var, var)
        rescue => var
          puts("STRING")
          var.backtrace.each { |var| puts(var) }
          abort("STRING");Fi[	@ I"Dir.chdir(@clone) do;Fi[[	@ziI"Ü    end
    if @clone.exist? then
      puts("STRING")
      Dir.chdir(@clone) do
        safe_system(@@git, "STRING", "STRING", @url);Fi[	@ziîI"Ç    ohai("STRING")
    if @clone.exist? then
      puts("STRING")
      Dir.chdir(@clone) do
        safe_system(hgpath, "STRING");Fi[	I"#       =8gNa;FI"/#       -----END PGP PUBLIC KEY BLOCK-----;Fi[[	@≠iÇI"´      #       [...]
      #       SkQEHOxhMiFjAN9q4LuirSOu65uR1bnTmF+Z92++qMIuEkH4/LnN
      #       =8gNa
      #       -----END PGP PUBLIC KEY BLOCK-----
      #     EOS;Fi[	@≠iéI"£      #       [...]
      #       AN9q4LSkQEHOxhMiFjuirSOu65u++qMIuEkH4/LnNR1bnTmF+Z92
      #       =8gNa
      #       -----END PGP PUBLIC KEY BLOCK-----
      #;Fi[	@Ò<I"#     EOS;Fi[[	@≠iÉI"ü      #       SkQEHOxhMiFjAN9q4LuirSOu65uR1bnTmF+Z92++qMIuEkH4/LnN
      #       =8gNa
      #       -----END PGP PUBLIC KEY BLOCK-----
      #     EOS
      #;Fi[	@≠i!I"£      #       mLekS3xntUhhgHKc4lhf4IVBqG4cFmwSZ0tZEJJUSESb3TqkkdnNLjE=
      #       =KEW+
      #       -----END PGP PUBLIC KEY BLOCK-----
      #     EOS
      #;Fi[	@¯<@i[[	@≠iÑI"é      #       =8gNa
      #       -----END PGP PUBLIC KEY BLOCK-----
      #     EOS
      #
      #     enc.keys['mary@example.com'] = <<-EOS;Fi[	@≠i"I"ë      #       =KEW+
      #       -----END PGP PUBLIC KEY BLOCK-----
      #     EOS
      #
      #     encryptor.recipients = 'joe@example.com';Fi[	@ I"puts("STRING") if xcode;Fi[[	@ﬁilI"ì    puts("STRING") if HOMEBREW_CELLAR.to_s.!=("STRING")
    puts(hardware)
    puts("STRING")
    puts("STRING") if xcode
    puts("STRING") if clt;Fi[	@ﬁiÜI"s    puts("STRING")
    puts(hardware)
    puts("STRING")
    puts("STRING") if xcode
    puts("STRING") if clt;Fi[	@ë@Ei[[	@Òi1I"ø    private
    
    # @return [Hash]
    def function
      { "LITERAL" => (@consumer_key), "LITERAL" => (@consumer_secret), "LITERAL" => (@oauth_token), "LITERAL" => (@oauth_token_secret) };Fi[	@Òi6I"j    end
    
    # @return [Hash]
    def function
      Hash[Twitter::Configurable.keys.map do |var|;Fi[	@ë@“i[[	@ﬁiI"⁄      # @param hash [Hash]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.
      # @return [Hash]
      def function(var, var, var)
        merge_user!(var.dup, var, var);Fi[	@ﬁiàI"ƒ      # @param hash [Hash]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.
      # @return [Hash]
      def function(var, var, var)
        case var;Fi[	I"C#     uid                  John Smith <john.smith@example.com>;FI"*#     sub   1024R/92C8DFD8 2012-07-20;Fi[[	@≠iΩI"ı      #     pub   1024R/4E5E8D8A 2012-07-20
      #     Key fingerprint = FFEA D1DB 201F B214 873E  7399 4A83 569F 4E5E 8D8A
      #     uid                  John Smith <john.smith@example.com>
      #     sub   1024R/92C8DFD8 2012-07-20
      #;Fi[	@≠i“I"–      #     $ gpg -k john.smith@example.com
      #     pub   1024R/4E5E8D8A 2012-07-20
      #     uid                  John Smith <john.smith@example.com>
      #     sub   1024R/92C8DFD8 2012-07-20
      #;Fi[	@=@i[[	@≠iæI"ﬂ      #     Key fingerprint = FFEA D1DB 201F B214 873E  7399 4A83 569F 4E5E 8D8A
      #     uid                  John Smith <john.smith@example.com>
      #     sub   1024R/92C8DFD8 2012-07-20
      #
      # [Long Key ID];Fi[	@≠i”I"º      #     pub   1024R/4E5E8D8A 2012-07-20
      #     uid                  John Smith <john.smith@example.com>
      #     sub   1024R/92C8DFD8 2012-07-20
      #
      # [Email Address];Fi[	I"I# then yields the command to use as part of the packaging procedure.;FI"?# Once the packaging procedure is complete, it will return;Fi[[	@≠iSI"Q      # This is called as part of the procedure run by the Packager.
      # It sets up the needed options to pass to the gpg command,
      # then yields the command to use as part of the packaging procedure.
      # Once the packaging procedure is complete, it will return
      # so that any clean-up may be performed after the yield.;Fi[	@Ói'I"U      # This is called as part of the procedure run by the Packager.
      # It sets up the needed options to pass to the openssl command,
      # then yields the command to use as part of the packaging procedure.
      # Once the packaging procedure is complete, it will return
      # so that any clean-up may be performed after the yield.;Fi[	@'=I"=# so that any clean-up may be performed after the yield.;Fi[[	@≠iTI"Y      # It sets up the needed options to pass to the gpg command,
      # then yields the command to use as part of the packaging procedure.
      # Once the packaging procedure is complete, it will return
      # so that any clean-up may be performed after the yield.
      # Cleanup is also ensured, as temporary files may hold sensitive data.;Fi[	@Ói(I"#      # It sets up the needed options to pass to the openssl command,
      # then yields the command to use as part of the packaging procedure.
      # Once the packaging procedure is complete, it will return
      # so that any clean-up may be performed after the yield.
      def function;Fi[	@1 @Î!i[[	@ìiI"S    def function
      @var = []
      @var = []
      @var = "STRING"
    end;Fi[	@“iI"Z      @var = var
      @var = "LITERAL"
      @var = []
      @var = "STRING"
    end;Fi[	@ @ç&i[[	@·i›I"ü          (var = ::Haml::Engine.new(var, @options["LITERAL"])
          if @options["LITERAL"] then
            puts("STRING")
            return
          end;Fi[	@îiˆI"b        puts("STRING")
        puts("STRING")
        puts("STRING")
        return
      end;Fi[	@1 @˙i[[	@≠inI"è      def function
        FileUtils.rm_rf(@tempdirs, "LITERAL" => (true)) if @tempdirs
        @var = []
        @var = nil
        @var = nil;Fi[	@˛i I"ë      # A list of Nokogiri::XML::SyntaxError found when parsing a document
      def function(var)
        @var = []
        @var = nil
      end;Fi[	@ I"	next;Fi[[	@ÁiI"c      if var.linked? then
        opoo("STRING")
        puts("STRING")
        next
      end;Fi[	@{i-I"j          puts("STRING")
          puts("STRING")
          puts("STRING")
          next
        end;Fi[	@1 @q$i[[	@∏iI"_      else
        @var = Contact.new
        @var = []
        @var = "LITERAL"
      end;Fi[	@œiWI"l      @var = false
      @var = "LITERAL"
      @var = []
      @var = "LITERAL"
      @var = "LITERAL";Fi[	@1 @P'i[[	@“iFI"~        (@precompiled << (@options["LITERAL"] ? ("STRING") : ("STRING")))
      end
      @var = []
      @var = false
    end;Fi[	@>iTI"Z      @var = var
      @var = var
      @var = []
      @var = false
      @var = nil;Fi[	@1 I"if @contact then;Fi[[	@∏iI"±      @var = current_user.contact_for(@person)
      @var = (@person.!=(current_user.person) and @contact)
      @var = []
      if @contact then
        @var = @contact.aspects;Fi[	@"(iI"å      @var = "LITERAL"
      @var = current_user.contact_for(@person)
      @var = []
      if @contact then
        @var = @contact.aspects;Fi[	I"(var << "STRING") if var;F@Ri[[	@uivI"î          end
          var = (form_tag_without_haml(var, var, *var, &var) + "STRING")
          (var << "STRING") if var
          var
        else;Fi[	@uiÖI"|        end
        var = form_for_without_haml(var, *var, &var)
        (var << "STRING") if var
        var
      end;Fi[	@E@~i[[	@“i5I"~      def function(var)
        case Resque.redis.type(var)
        when "STRING" then
          []
        when "STRING" then;Fi[	@“iGI"É      def function(var, var)
        case Resque.redis.type(var)
        when "STRING" then
          []
        when "STRING" then;Fi[	I"2var = Dir.mktmpdir("STRING", Config.tmp_path);FI"(@tempdirs << var);Fi[[	@≠iµI"π        begin
          (return false unless gpg_config
          var = Dir.mktmpdir("STRING", Config.tmp_path)
          (@tempdirs << var)
          var = Tempfile.open("STRING", var);Fi[	@≠iÛI"¡        begin
          (return false if passphrase.to_s.empty?
          var = Dir.mktmpdir("STRING", Config.tmp_path)
          (@tempdirs << var)
          var = Tempfile.open("STRING", var);Fi[	@o=I"'var = Tempfile.open("STRING", var);Fi[[	@≠i∂I"Â          (return false unless gpg_config
          var = Dir.mktmpdir("STRING", Config.tmp_path)
          (@tempdirs << var)
          var = Tempfile.open("STRING", var)
          var.write(gpg_config.gsub("LITERAL", "STRING"));Fi[	@≠iÙI"ÿ          (return false if passphrase.to_s.empty?
          var = Dir.mktmpdir("STRING", Config.tmp_path)
          (@tempdirs << var)
          var = Tempfile.open("STRING", var)
          var.write(passphrase.to_s);Fi[	I"var.path);F@H*i[[	@≠iªI"y          var.close
          check_gpg_config(var.path)
          var.path)
        rescue => var
          cleanup;Fi[	@≠i¯I"µ          var.write(passphrase.to_s)
          var.close
          var.path)
        rescue => var
          Logger.warn(Errors::Encryptor::GPG::PassphraseError.wrap(var, "STRING"));Fi[	@EI"arrparse(var);Fi[[	@Li#I"m      when "STRING" then
        objparse(var)
      when "STRING" then
        arrparse(var)
      else;Fi[	@Li2I"Ç      when "STRING" then
        objparse(var)
      when "STRING" then
        arrparse(var)
      when "LITERAL", "LITERAL" then;Fi[	@EI"objparse(var);Fi[[	@Li!I"{      var, var, var = var["LITERAL"]
      case var
      when "STRING" then
        objparse(var)
      when "STRING" then;Fi[	@Li0I"{      var, var, var = var["LITERAL"]
      case var
      when "STRING" then
        objparse(var)
      when "STRING" then;Fi[	@EI"break if var;Fi[[	@œi˝I"î      while var do
        case var["LITERAL"]
        when "STRING" then
          break if var
          var, var, var = parse_old_attributes(var);Fi[	@œiI"∏          var, var, var = parse_old_attributes(var)
          var["LITERAL"] = var
        when "STRING" then
          break if var
          var, var, var = parse_new_attributes(var);Fi[	@wI",rescue CannotInstallFormulaError => var;Fi[[	@@iZI"ù      var.finish)
    rescue FormulaInstallationAlreadyAttemptedError
      # do nothing
    rescue CannotInstallFormulaError => var
      ofail(var.message);Fi[	@ºiAI"ï      var.finish)
    rescue FormulaInstallationAlreadyAttemptedError
      # do nothing
    rescue CannotInstallFormulaError => var
      ofail(var);Fi[	@wI"(end, var.bottle.checksum.hexdigest);Fi[[	@ƒiaI"ç      "STRING"
    else
      # do nothing
    end, var.bottle.checksum.hexdigest)
    assert_match("LITERAL", var.stable.checksum.hexdigest);Fi[	@ƒi¯I"]      "STRING"
    else
      # do nothing
    end, var.bottle.checksum.hexdigest)
  end;Fi[	I"raise("STRING") unless var;F@Æ:i[[	@≠iLI"ì          var.delete
          var = var.match("LITERAL").to_a["LITERAL"]
          raise("STRING") unless var
          var)
        rescue => var;Fi[	@[&iI"{      def function
        @var ||= (var = Devise.mappings[scope]
        raise("STRING") unless var
        var)
      end;Fi[	I"if var =~ "LITERAL" then;F@Ri[[	@hi"I"o  def function(var)
    var.gsub("LITERAL") do |var|
      if var =~ "LITERAL" then
        var
      else;Fi[	@„idI"{        xpath(*(var.map do |var|
          var = var.to_s
          if var =~ "LITERAL" then
            var
          else;Fi[	@EI"self.identifier;Fi[[	@êi[I"m  def function
    case self.service
    when "STRING" then
      self.identifier
    when "STRING" then;Fi[	@êigI"m  def function
    case self.service
    when "STRING" then
      self.identifier
    when "STRING" then;Fi[	@'*I"var = false;Fi[[	@œi`I"û          if contains_interpolation?(var) then
            var = unescape_interpolation(var, var)
            var = true
            var = false
          end;Fi[	@œigI"î        if contains_interpolation?(var) then
          var = unescape_interpolation(var, var)
          var = true
          var = false
        end;Fi[	@º=@	i[[	@“iÇI"Ñ        var = var["LITERAL"] ? (nil) : (var["LITERAL"])
        var = {}
        var = false
      else
        var = var["LITERAL"];Fi[	@œiYI"¿          if (var["LITERAL"] == "STRING") then
            var = unescape_interpolation(var["LITERAL"].strip, var)
            var = false
          else
            var = var["LITERAL"].strip;Fi[	@º=@Ñi[[	@^i<I"        for var, var in @queued_for_write do
          (log("STRING")
          var = false
          begin
            directory.files.create(fog_file.merge("LITERAL" => (var), "LITERAL" => (path(var)), "LITERAL" => (fog_public(var)), "LITERAL" => (var.content_type)));Fi[	@€iEI"d      var = payload_class
      var = (args or [])
      var = false
      begin
        (begin;Fi[	I"var = ["STRING"];FI"-(var << "STRING") if @options["LITERAL"];Fi[[	@[i=I"≤    def function
      return @current_crontab if @current_crontab
      var = ["STRING"]
      (var << "STRING") if @options["LITERAL"]
      var = `#{var.join("STRING")}STRING`;Fi[	@[iGI"Ä      (var << var)
      var.fsync
      var = ["STRING"]
      (var << "STRING") if @options["LITERAL"]
      (var << var.path);Fi[	I"@orig_err.send("LITERAL");F@	i[[	@»i;I"ß        return unless @orig_err
        @var ||= if @orig_err.is_a?(Errors::Error) then
          @orig_err.send("LITERAL")
        else
          @orig_err.class.to_s;Fi[	@»iEI"µ        return @orig_err_msg unless @orig_err_msg.nil?
        var = if @orig_err.is_a?(Errors::Error) then
          @orig_err.send("LITERAL")
        else
          @orig_err.to_s;Fi[	@E@'*i[[	@œiII"°      var = ((var == "STRING") or (var.!=("STRING") and @options["LITERAL"]))
      case var
      when "STRING" then
        var = true
      when "STRING" then;Fi[	@œiMI"ä      when "STRING" then
        var = var = true
      when "STRING" then
        var = true
        if (var["LITERAL"] == "STRING") then;Fi[	@E@ª#i[[	@i¢I"ä        when "STRING" then
          { "LITERAL" => (@address), "LITERAL" => (@port), "LITERAL" => (@domain), "LITERAL" => (@user_name), "LITERAL" => (@password), "LITERAL" => (@authentication), "LITERAL" => (@enable_starttls_auto), "LITERAL" => (@openssl_verify_mode) }
        when "STRING" then
          var = {}
          var.merge!("LITERAL" => (File.expand_path(@sendmail))) if @sendmail;Fi[	@ißI"«          var.merge!("LITERAL" => (@sendmail_args)) if @sendmail_args
          var
        when "STRING" then
          var = {}
          var.merge!("LITERAL" => (File.expand_path(@exim))) if @exim;Fi[	I"## Campfire account's subdomain;F@∫i[[	@CiI"É      # Campfire api authentication token
      ##
      # Campfire account's subdomain
      ##
      # Campfire account's room id;Fi[	@Ci[I"ë        # Campfire api authentication api_token
        ##
        # Campfire account's subdomain
        ##
        # Campfire account's room id;Fi[	I"if overwrite?(var) then;FI"&File.open(var, "STRING") do |var|;Fi[[	@iTI"‚        var = File.join(var, "STRING")
        FileUtils.mkdir_p(var)
        if overwrite?(var) then
          File.open(var, "STRING") do |var|
            var.write(Backup::Template.new("LITERAL" => (var)).result("STRING"));Fi[	@inI"Œ        var = File.join(var, "STRING")
        FileUtils.mkdir_p(var)
        if overwrite?(var) then
          File.open(var, "STRING") do |var|
            var.write(Backup::Template.new.result("STRING"));Fi[	I"#var = File.join(var, "STRING");F@˘=i[[	@iPI"T        var = options.merge("LITERAL" => (options["LITERAL"].gsub("LITERAL", "STRING")), "LITERAL" => (options["LITERAL"] ? (File.expand_path(options["LITERAL"])) : (nil)))
        var = (var["LITERAL"] or Config.root_path)
        var = File.join(var, "STRING")
        var = File.join(var, "STRING")
        var = File.join(var, "STRING");Fi[	@iQI"∆        var = (var["LITERAL"] or Config.root_path)
        var = File.join(var, "STRING")
        var = File.join(var, "STRING")
        var = File.join(var, "STRING")
        FileUtils.mkdir_p(var);Fi[	@˘=I"FileUtils.mkdir_p(var);Fi[[	@iRI"≥        var = File.join(var, "STRING")
        var = File.join(var, "STRING")
        var = File.join(var, "STRING")
        FileUtils.mkdir_p(var)
        if overwrite?(var) then;Fi[	@ilI"å          Config.root_path
        end
        var = File.join(var, "STRING")
        FileUtils.mkdir_p(var)
        if overwrite?(var) then;Fi[	@:I"(raise(var) if var.is_a?(SystemExit);Fi[[	@•iI"¬      begin
        return perform!
      rescue Exception => var
        raise(var) if var.is_a?(SystemExit)
        if (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then;Fi[	@™iI"ª      begin
        perform!
      rescue Exception => var
        raise(var) if var.is_a?(SystemExit)
        if (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then;Fi[	@Î"@G0i[[	@¡	i3I"É    else
      var.fails_with?("LITERAL").!
    end)
    var.select_compiler
    assert_equal(MacOS.default_compiler, ENV.compiler);Fi[	@¡	iVI"|    else
      var.fails_with?("LITERAL").!
    end)
    var.select_compiler
    assert_equal(case MacOS.clang_build_version;Fi[	@Î"@Ä!i[[	@∆i I"∞          @config["STRING"]["STRING"].each do |var|
            @redcarpet_extensions[var.to_sym] = true
          end)
        rescue LoadError
          STDERR.puts("STRING");Fi[	@∆iGI"—            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"]
            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"]
          end)
        rescue LoadError
          STDERR.puts("STRING");Fi[	I"var.close;FI"exit!("LITERAL");Fi[[	@i%I"|      var.continuation = nil if ARGV.debug?
      Marshal.dump(var, var)
      var.close
      exit!("LITERAL")
    end;Fi[	@îi±I"{        rescue Exception => var
          Marshal.dump(var, var)
          var.close
          exit!("LITERAL")
        end;Fi[	@≠3I"module CaptureHelper;Fi[[	@ui,I"T  end
  
  module Helpers
    module CaptureHelper
      def function(var, var);Fi[	@ciiI"aend
module ActionView
  module Helpers
    module CaptureHelper
      def function(var, var);Fi[	@≠3@Ei[[	@]i	I"g    @var = false
    
    module Helpers
      def function
        @var ||= default_configuration;Fi[	@,&iI"Ymodule Paperclip
  module Helpers
    def function
      yield(self) if block_given?;Fi[	@ª@≤i[[	@◊iI"q    # @param line [Fixnum] See \{#line}
    def function(var, var)
      super(var)
      @var = var
    end;Fi[	@‰i3I"N    
    def function(var, var)
      super(var)
      @var = var
    end;Fi[	@ÁI"@f.plist_startup ? ((var << "STRING")) : ((var << "STRING"));Fi[[	@Ái=I"§          (var << "STRING")
        end
        (var << "STRING")
        f.plist_startup ? ((var << "STRING")) : ((var << "STRING"))
        if f.plist_manual then;Fi[	@ÁiOI"à          end
        else
          (var << "STRING")
          f.plist_startup ? ((var << "STRING")) : ((var << "STRING"))
        end;Fi[	@ÁI",(var << "STRING") unless var.directory?;Fi[[	@Ái5I"∂      if var.file?.! and var.symlink?.! then
        if f.plist_startup then
          (var << "STRING")
          (var << "STRING") unless var.directory?
          (var << "STRING");Fi[	@Ái9I"í          (var << "STRING")
        else
          (var << "STRING")
          (var << "STRING") unless var.directory?
          (var << "STRING");Fi[	@Á@N)i[[	@•iùI"¢        var = "STRING"
        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        (var << "STRING") if var["LITERAL"]
        (var << "STRING");Fi[	@•i≠I"¢        var = "STRING"
        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        (var << "STRING") if var["LITERAL"]
        (var << "STRING");Fi[	@Á@Ri[[	@•iüI"z        (var << "STRING")
        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        var
      end;Fi[	@•iØI"z        (var << "STRING")
        (var << "STRING") if var["LITERAL"]
        (var << "STRING")
        var
      end;Fi[	I"var = Pipeline.new;F@ni[[	@ki8I"r      def function
        super
        var = Pipeline.new
        var = "STRING"
        (var << mysqldump);Fi[	@ni8I"o      def function
        super
        var = Pipeline.new
        var = "STRING"
        (var << pgdump);Fi[	I"K# One of :yellow, :red, :green, :purple, or :random. (default: yellow);F@∫i[[	@|i!I"ƒ      ##
      # The background color of a success message.
      # One of :yellow, :red, :green, :purple, or :random. (default: yellow)
      ##
      # The background color of a warning message.;Fi[	@|i$I"√      ##
      # The background color of a warning message.
      # One of :yellow, :red, :green, :purple, or :random. (default: yellow)
      ##
      # The background color of an error message.;Fi[	I"var, var = case var;F@@i[[	@|iHI"{      #
      def function(var)
        var, var = case var
        when "LITERAL" then
          ["STRING", success_color];Fi[	@iÇI"x      #
      def function(var)
        var, var = case var
        when "LITERAL" then
          ["STRING", false];Fi[	@ >@Ò=i[[	@iSI"∏        var = File.join(var, "STRING")
        var = File.join(var, "STRING")
        FileUtils.mkdir_p(var)
        if overwrite?(var) then
          File.open(var, "STRING") do |var|;Fi[	@imI"ù        end
        var = File.join(var, "STRING")
        FileUtils.mkdir_p(var)
        if overwrite?(var) then
          File.open(var, "STRING") do |var|;Fi[	I"Y# Note that this will override the defaults set by the Mail gem (currently: '-i -t');FI"E# So, if set here, be sure to set all the arguments you require.;Fi[[	@i\I"      ##
      # Optional arguments to pass to `sendmail`
      # Note that this will override the defaults set by the Mail gem (currently: '-i -t')
      # So, if set here, be sure to set all the arguments you require.
      # Example: '-i -t -X/tmp/traffic.log';Fi[	@ieI"      ##
      # Optional arguments to pass to `exim`
      # Note that this will override the defaults set by the Mail gem (currently: '-i -t')
      # So, if set here, be sure to set all the arguments you require.
      # Example: '-i -t -X/tmp/traffic.log';Fi[	@k>I"*# Example: '-i -t -X/tmp/traffic.log';Fi[[	@i]I"      # Optional arguments to pass to `sendmail`
      # Note that this will override the defaults set by the Mail gem (currently: '-i -t')
      # So, if set here, be sure to set all the arguments you require.
      # Example: '-i -t -X/tmp/traffic.log'
      ##;Fi[	@ifI"      # Optional arguments to pass to `exim`
      # Note that this will override the defaults set by the Mail gem (currently: '-i -t')
      # So, if set here, be sure to set all the arguments you require.
      # Example: '-i -t -X/tmp/traffic.log'
      ##;Fi[	@r>@∫i[[	@i^I"      # Note that this will override the defaults set by the Mail gem (currently: '-i -t')
      # So, if set here, be sure to set all the arguments you require.
      # Example: '-i -t -X/tmp/traffic.log'
      ##
      # When using the `:exim` `delivery_method` option,;Fi[	@igI".      # Note that this will override the defaults set by the Mail gem (currently: '-i -t')
      # So, if set here, be sure to set all the arguments you require.
      # Example: '-i -t -X/tmp/traffic.log'
      ##
      # Folder where mail will be kept when using the `:file` `delivery_method` option.;Fi[	@ 7@ 7i[[	@∆i2I"Y      @var = true
      @var = []
      @var = {}
      @var = {}
      @var = false;Fi[	@∆i¥I"Z      else
        queue_all_for_delete
        @var = {}
        @var = {}
      end;Fi[	@ 7@P'i[[	@∆i3I"c      @var = []
      @var = {}
      @var = {}
      @var = false
      @var = var["LITERAL"];Fi[	@igI"Q    # collection
    def function
      @var = {}
      @var = false
    end;Fi[	@YI"module CLI;Fi[[	@:i I"2module Backup
  module CLI
    module Helpers;Fi [	@i I"8module Backup
  module CLI
    class Utility < Thor;Fi [	@\@Ñi[[	@ÄiAI"g        def function
          fast_fit
          var = []
          begin
            var = false;Fi[	@ÃiI"}      var = (var + "STRING")
      var = "LITERAL"
      var = []
      begin
        (var = ((var or "LITERAL") + "LITERAL");Fi[	@5I"var.rewind;Fi[[	@^iDI"h            directory.save
            retry
          ensure
            var.rewind
          end);Fi[	@äi“I"f            create_bucket
            retry
          ensure
            var.rewind
          end;Fi[	@\I"Mtransferred_files_for(var) { |var, var| (var << ("STRING" + "STRING")) };Fi[[	@ñiaI"«      def function(var)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |var, var| (var << ("STRING" + "STRING")) }
        Logger.message(var.join("STRING"));Fi[	@pi?I"«      def function(var)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |var, var| (var << ("STRING" + "STRING")) }
        Logger.message(var.join("STRING"));Fi[	@\I"?var.find_formula { |var| (var << var.basename.join(var)) };Fi[[	@JiI"≥    raise("STRING") if var.directory?
    abort unless system("STRING")
    var = []
    var.find_formula { |var| (var << var.basename.join(var)) }
    var = link_tap_formula(var);Fi[	@JiNI"À    var = "LITERAL"
    HOMEBREW_REPOSITORY.join("STRING").children.each do |var|
      var = []
      var.find_formula { |var| (var << var.basename.join(var)) }
      var = (var + link_tap_formula(var));Fi[	@5I"%($stderr.write(color("LITERAL"));Fi[[	@≥i$I"ï        $stdout.write(color("LITERAL"))
        yield)
      ensure
        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL")));Fi[	@≥i/I"ï        $stdout.write(color("LITERAL"))
        yield)
      ensure
        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL")));Fi[	@5@˙i[[	@≠i7I"Q        yield
        @registered)
      ensure
        @var = nil
      end;Fi[	@lixI"[          (@var = var
          yield)
        ensure
          @var = nil
        end;Fi[	@5@≤i[[	@“iI"ä          send(:"compile_#{var.type}") { var.children.each { |var| compile(var) } }
        end)
      ensure
        @var = var
      end;Fi[	@»i4I"g          var = @_haml_concat_raw
          yield)
        ensure
          @var = var
        end;Fi[	@WI"Gself.data["STRING"] = "STRING" unless self.data.has_key?("STRING");Fi[[	@Ìi'I"†    # Returns nothing.
    def function(var, var)
      super(var, var)
      self.data["STRING"] = "STRING" unless self.data.has_key?("STRING")
      self.data;Fi[	@iEI"†    # Returns nothing.
    def function(var, var)
      super(var, var)
      self.data["STRING"] = "STRING" unless self.data.has_key?("STRING")
      self.data;Fi[	@\@◊*i[[	@Ui0I"ﬁ      # Transfers the archived file to the specified Cloud Files container
      def function
        var = remote_path_for(@package)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING");Fi[	@ñiRI"◊      # Transfers the archived file to the specified Dropbox folder
      def function
        var = remote_path_for(@package)
        files_to_transfer_for(@package) do |var, var|
          Logger.message("STRING");Fi[	I"0#     validates_presence_of :name, on: :new;F@i[[	@ñiﬂI"j    #
    #     attr_accessor :name
    #     validates_presence_of :name, on: :new
    #   end
    #;Fi[	@ñiI"j    #
    #     attr_accessor :name
    #     validates_presence_of :name, on: :new
    #   end
    #;Fi[	I"N# against (the context is defined on the validations using <tt>:on</tt>).;F@i[[	@ñiŸI"π    #
    # Context can optionally be supplied to define which callbacks to test
    # against (the context is defined on the validations using <tt>:on</tt>).
    #
    #   class Person;Fi[	@ñi I"π    #
    # Context can optionally be supplied to define which callbacks to test
    # against (the context is defined on the validations using <tt>:on</tt>).
    #
    #   class Person;Fi[	I"K# Context can optionally be supplied to define which callbacks to test;F@‘>i[[	@ñiÿI"ƒ    #   person.valid? # => true
    #
    # Context can optionally be supplied to define which callbacks to test
    # against (the context is defined on the validations using <tt>:on</tt>).
    #;Fi[	@ñiˇI"«    #   person.invalid? # => false
    #
    # Context can optionally be supplied to define which callbacks to test
    # against (the context is defined on the validations using <tt>:on</tt>).
    #;Fi[	@ï*I"Lreturn [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING");Fi[[	@Li]I"€      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      var, var = valparse(var)
      (var << var)
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      loop do;Fi[	@LibI"∞        var = eat("STRING", var)
        var, var = valparse(var)
        (var << var)
        return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      end;Fi[	@ï*I"&((var << "STRING") << var) if var;Fi[[	@zi‡I"|    end
    (var << var) if var.exist?.!
    (var << var)
    ((var << "STRING") << var) if var
    (var << "STRING") if var;Fi[	@zi˙I"©    var = [@@svn, var, "STRING", "STRING", "STRING"]
    (var << var) if var.exist?.!
    (var << var)
    ((var << "STRING") << var) if var
    (var << "STRING") if var;Fi[	@ï*@Ñi[[	@≈i]I"í        var = Array.new
        var.split("STRING").each do |var|
          (var << var)
          begin
            var.mkdir(var.join("STRING"));Fi[	@siQI"ì        var = Array.new
        var.split("STRING").each do |var|
          (var << var)
          begin
            var.mkdir!(var.join("STRING"));Fi[	@ï*@	i[[	@§i8I"∞          end
          if block_given? and var = yield(var, var) then
            (var << var)
          else
            (var << serialize_property(var, var)) unless var.nil?;Fi[	@ViQI"å    var.children.sort.each do |var|
      if var.directory? then
        (var << var)
      else
        if block_given? and yield(var) then;Fi[	@=@…8i[[	@≈iHI"Õ      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        connection do |var|
          transferred_files_for(var) do |var, var|;Fi[	@si<I"Õ      # and a warning will be logged, containing the error message.
      def function(var)
        var = remote_path_for(var)
        connection do |var|
          transferred_files_for(var) do |var, var|;Fi[	I"#     def must_be_friends;F@|8i[[	@ñiAI"       #     validate :must_be_friends
      #
      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end;Fi[	@ñiOI"¥      #     end
      #
      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end;Fi[	@ü>I"'Logger.message(var.join("STRING"));Fi[[	@ñibI"”        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |var, var| (var << ("STRING" + "STRING")) }
        Logger.message(var.join("STRING"))
        connection.file_delete(var);Fi[	@pi@I"¿        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |var, var| (var << ("STRING" + "STRING")) }
        Logger.message(var.join("STRING"))
        var = [];Fi[	I"P#   method, proc or string should return or evaluate to a +true+ or +false+;FI"#   value.;Fi[[	@ñi0I"-      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(var, var);Fi[	@ñijI"-      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(var, var);Fi[	I"^#   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,;FI"L#   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;Fi[[	@ñi.I"õ      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+;Fi[	@ñihI"õ      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+;Fi[	@-@Ei[[	@[i1I"¥      
      ##
      # Establishes a connection to the remote server
      def function
        Net::SSH.start(ip, username, "LITERAL" => (password), "LITERAL" => (port)) do |var|;Fi[	@si#I"µ      
      ##
      # Establishes a connection to the remote server
      def function
        Net::SFTP.start(ip, username, "LITERAL" => (password), "LITERAL" => (port)) do |var|;Fi[	I"G# * <tt>:allow_blank</tt> - Skip validation if attribute is blank.;F@π+i[[	@ñi(I"Ä      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,;Fi[	@ñibI"Ä      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,;Fi[	@…8@¯$i[[	@≈iII"ª      def function(var)
        var = remote_path_for(var)
        connection do |var|
          transferred_files_for(var) do |var, var|
            Logger.message(("STRING" + "STRING"));Fi[	@si=I"ª      def function(var)
        var = remote_path_for(var)
        connection do |var|
          transferred_files_for(var) do |var, var|
            Logger.message(("STRING" + "STRING"));Fi[	@…8I"!create_remote_path(var, var);Fi[[	@≈i:I"µ      def function
        var = remote_path_for(@package)
        connection do |var|
          create_remote_path(var, var)
          files_to_transfer_for(@package) do |var, var|;Fi[	@si.I"µ      def function
        var = remote_path_for(@package)
        connection do |var|
          create_remote_path(var, var)
          files_to_transfer_for(@package) do |var, var|;Fi[	@3?@◊*i[[	@≈i;I"‘        var = remote_path_for(@package)
        connection do |var|
          create_remote_path(var, var)
          files_to_transfer_for(@package) do |var, var|
            Logger.message(("STRING" + "STRING"));Fi[	@si/I"‘        var = remote_path_for(@package)
        connection do |var|
          create_remote_path(var, var)
          files_to_transfer_for(@package) do |var, var|
            Logger.message(("STRING" + "STRING"));Fi[	I"B# paths to directories that don't yet exist when creating new;FI"K# directories. Instead, we split the parts up in to an array (for each;Fi[[	@≈iUI"r      # Creates (if they don't exist yet) all the directories on the remote
      # server in order to upload the backup file. Net::FTP does not support
      # paths to directories that don't yet exist when creating new
      # directories. Instead, we split the parts up in to an array (for each
      # '/') and loop through that to create the directories one by one.;Fi[	@siII"s      # Creates (if they don't exist yet) all the directories on the remote
      # server in order to upload the backup file. Net::SFTP does not support
      # paths to directories that don't yet exist when creating new
      # directories. Instead, we split the parts up in to an array (for each
      # '/') and loop through that to create the directories one by one.;Fi[	@A?I"G# '/') and loop through that to create the directories one by one.;Fi[[	@≈iVI"t      # server in order to upload the backup file. Net::FTP does not support
      # paths to directories that don't yet exist when creating new
      # directories. Instead, we split the parts up in to an array (for each
      # '/') and loop through that to create the directories one by one.
      # Net::FTP raises an exception when the directory it's trying to create;Fi[	@siJI"v      # server in order to upload the backup file. Net::SFTP does not support
      # paths to directories that don't yet exist when creating new
      # directories. Instead, we split the parts up in to an array (for each
      # '/') and loop through that to create the directories one by one.
      # Net::SFTP raises an exception when the directory it's trying to create;Fi[	I"+# already exists, so we have rescue it;F@„
i[[	@≈iYI"¯      # '/') and loop through that to create the directories one by one.
      # Net::FTP raises an exception when the directory it's trying to create
      # already exists, so we have rescue it
      def function(var, var)
        var = Array.new;Fi[	@siMI"˘      # '/') and loop through that to create the directories one by one.
      # Net::SFTP raises an exception when the directory it's trying to create
      # already exists, so we have rescue it
      def function(var, var)
        var = Array.new;Fi[	I"var = Array.new;FI"&var.split("STRING").each do |var|;Fi[[	@≈i[I"¢      # already exists, so we have rescue it
      def function(var, var)
        var = Array.new
        var.split("STRING").each do |var|
          (var << var);Fi[	@siOI"¢      # already exists, so we have rescue it
      def function(var, var)
        var = Array.new
        var.split("STRING").each do |var|
          (var << var);Fi[	@W?@ï*i[[	@≈i\I"Ö      def function(var, var)
        var = Array.new
        var.split("STRING").each do |var|
          (var << var)
          begin;Fi[	@siPI"Ö      def function(var, var)
        var = Array.new
        var.split("STRING").each do |var|
          (var << var)
          begin;Fi[	@q$@˙i[[	@“iMI"c    def function
      @var = @var = false
      @var = "LITERAL"
      @var = nil
      yield;Fi[	@iI"x      def function(var)
        @var = StringScanner.new(var)
        @var = "LITERAL"
        @var = nil
      end;Fi[	I"E# * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.;F@&?i[[	@ñi'I"Ä      # * <tt>:on</tt> - Specifies the context where this validation is active
      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine;Fi[	@ñiaI"Ä      # * <tt>:on</tt> - Specifies the context where this validation is active
      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine;Fi[	I"O#   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>);F@j?i[[	@ñi&I"@      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active
      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.;Fi[	@ñi`I"@      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active
      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.;Fi[	@q$I"@var = current_user;Fi[[	@iI"]  
  def function
    @var = "LITERAL"
    @var = current_user
    @var = Hash.new(true);Fi[	@ixI"[  
  def function
    @var = "LITERAL"
    @var = current_user
    @var = @user.person;Fi[	I",# Establishes a connection to Amazon S3;F@Ei[[	@Xi"I"»      
      ##
      # Establishes a connection to Amazon S3
      def function
        @var ||= Fog::Storage.new("LITERAL" => (provider), "LITERAL" => (storage_token), "LITERAL" => (storage_secret));Fi[	@`i&I"‚      
      ##
      # Establishes a connection to Amazon S3
      def function
        @var ||= Fog::Storage.new("LITERAL" => (provider), "LITERAL" => (access_key_id), "LITERAL" => (secret_access_key), "LITERAL" => (region));Fi[	I"M# * <tt>:on</tt> - Specifies the context where this validation is active;F@q?i[[	@ñi%I"ˇ      #
      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active
      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.;Fi[	@ñi_I"ˇ      #
      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active
      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.;Fi[	I"%# Server IP Address and SSH port;F@∫i[[	@[iI"y      # Server credentials
      ##
      # Server IP Address and SSH port
      ##
      # Path to store backups to;Fi[	@liI"Ä        # Server credentials
        ##
        # Server IP Address and SSH port
        ##
        # The SSH port to connect to;Fi[	I"XNet::SSH.start(ip, username, "LITERAL" => (password), "LITERAL" => (port)) do |var|;FI"yield(var);Fi[[	@[i3I"≈      # Establishes a connection to the remote server
      def function
        Net::SSH.start(ip, username, "LITERAL" => (password), "LITERAL" => (port)) do |var|
          yield(var)
        end;Fi[	@pi'I"Õ      # Net::SCP will use this connection to transfer backups
      def function
        Net::SSH.start(ip, username, "LITERAL" => (password), "LITERAL" => (port)) do |var|
          yield(var)
        end;Fi[	I"?# Writes the provided password to a temporary file so that;FI"=# the rsync utility can read the password from this file;Fi[[	@[i_I"¢      
      ##
      # Writes the provided password to a temporary file so that
      # the rsync utility can read the password from this file
      def function;Fi[	@liZI"¨        
        ##
        # Writes the provided password to a temporary file so that
        # the rsync utility can read the password from this file
        def function;Fi[	@ù?@Ei[[	@[i`I"Ω      ##
      # Writes the provided password to a temporary file so that
      # the rsync utility can read the password from this file
      def function
        unless password.nil? then;Fi[	@li[I"»        ##
        # Writes the provided password to a temporary file so that
        # the rsync utility can read the password from this file
        def function
          unless @password.nil? then;Fi[	I"4# Removes the previously created @password_file;FI"/# (temporary file containing the password);Fi[[	@[ijI"â      
      ##
      # Removes the previously created @password_file
      # (temporary file containing the password)
      def function;Fi[	@lieI"ì        
        ##
        # Removes the previously created @password_file
        # (temporary file containing the password)
        def function;Fi[	@´?@Ei[[	@[ikI"≤      ##
      # Removes the previously created @password_file
      # (temporary file containing the password)
      def function
        @password_file.delete if @password_file;Fi[	@lifI"º        ##
        # Removes the previously created @password_file
        # (temporary file containing the password)
        def function
          @password_file.delete if @password_file;Fi[	I",@password_file.delete if @password_file;F@˙i[[	@[imI"ê      # (temporary file containing the password)
      def function
        @password_file.delete if @password_file
        @var = nil
      end;Fi[	@lihI"ö        # (temporary file containing the password)
        def function
          @password_file.delete if @password_file
          @var = nil
        end;Fi[	I"=# Returns Rsync syntax for defining a port to connect to;F@Ei[[	@[ixI"w      
      ##
      # Returns Rsync syntax for defining a port to connect to
      def function
        "STRING";Fi[	@liNI"|        
        ##
        # Returns Rsync syntax for defining a port to connect to
        def function
          "STRING";Fi[	I"5# Amazon Simple Storage Service (S3) Credentials;F@∫i[[	@`iI"{      
      ##
      # Amazon Simple Storage Service (S3) Credentials
      ##
      # Amazon S3 bucket name and path;Fi[	@fiI"Å        
        ##
        # Amazon Simple Storage Service (S3) Credentials
        ##
        # The S3 bucket to store files to;Fi[	@b:@Ü?i[[	@ñi$I"∆      #   end
      #
      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active
      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>);Fi[	@ñi^I"∆      #   end
      #
      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active
      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>);Fi[	I"extend(HelperMethods);FI"include(HelperMethods);Fi[[	@ñiI"£      extend(ActiveModel::Callbacks)
      extend(ActiveModel::Translation)
      extend(HelperMethods)
      include(HelperMethods)
      attr_accessor("LITERAL");Fi[	@XiI"Z    
    included do
      extend(HelperMethods)
      include(HelperMethods)
    end;Fi[	I"I# * <tt>:unless</tt> - Specifies a method, proc or string to call to;F@?i[[	@ñi-I"ö      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;Fi[	@ñigI"ö      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;Fi[	I"L#   The method, proc or string should return or evaluate to a +true+ or;FI"#   +false+ value.;Fi[[	@âi@I"E      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>).
      #   The method, proc or string should return or evaluate to a +true+ or
      #   +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to;Fi[	@âiFI"/      #   (e.g. <tt>unless: :skip_validation</tt>, or
      #   <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>).
      #   The method, proc or string should return or evaluate to a +true+ or
      #   +false+ value.
      # * <tt>:strict</tt> - Specifies whether validation should be strict.;Fi[	I"1# are set via a super() call to Cloud::Base,;F@R+i[[	@ci#I"“        # Pre-configured defaults specified in
        # Configuration::Syncer::Cloud::CloudFiles
        # are set via a super() call to Cloud::Base,
        # which in turn will invoke Syncer::Base.
        #;Fi[	@fiI"         # Pre-configured defaults specified in
        # Configuration::Syncer::Cloud::S3
        # are set via a super() call to Cloud::Base,
        # which in turn will invoke Syncer::Base.
        #;Fi[	I"6# You may also pass it multiple classes, like so:;F@i[[	@âi3I"q      #   end
      #
      # You may also pass it multiple classes, like so:
      #
      #   class Person;Fi[	@âiwI"~    # creating your own validator.
    #
    # You may also pass it multiple classes, like so:
    #
    #   class Person;Fi[	I"H# Once pre-configured defaults and Cloud specific defaults are set,;F@]+i[[	@ci&I"Ê        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var);Fi[	@fiI"Ê        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var);Fi[	I"3#   class MyValidator < ActiveModel::Validator;FI"#     def validate(record);Fi[[	@âi&I"è      #   end
      #
      #   class MyValidator < ActiveModel::Validator
      #     def validate(record)
      #       if some_complex_logic;Fi[	@âiSI"®      #   end
      #
      #   class MyValidator < ActiveModel::Validator
      #     def validate(record)
      #       options[:my_custom_key] # => "my custom value";Fi[	I"D# otherwise it will create it first and fetch use that instead.;F@Ei[[	@ci9I"F        # Creates a new @repository_object (container).
        # Fetches it from Cloud Files if it already exists,
        # otherwise it will create it first and fetch use that instead.
        def function
          @var ||= (connection.directories.get(container) or connection.directories.create("LITERAL" => (container)));Fi[	@fi0I"K        # Creates a new @repository_object (bucket).
        # Fetches it from S3 if it already exists,
        # otherwise it will create it first and fetch use that instead.
        def function
          @var ||= (connection.directories.get(bucket) or connection.directories.create("LITERAL" => (bucket), "LITERAL" => (region)));Fi[	I"=# This is the provider that Fog uses for the Cloud Files;F@Ei[[	@ci?I"|        
        ##
        # This is the provider that Fog uses for the Cloud Files
        def function
          "STRING";Fi[	@fi6I"|        
        ##
        # This is the provider that Fog uses for the Cloud Files
        def function
          "STRING";Fi[	I"1# are set via a super() call to RSync::Base,;F@R+i[[	@ıiI"Õ        # Pre-configured defaults specified in
        # Configuration::Syncer::RSync::Local
        # are set via a super() call to RSync::Base,
        # which in turn will invoke Syncer::Base.
        #;Fi[	@liI"Õ        # Configuration::Syncer::RSync::Push or
        # Configuration::Syncer::RSync::Pull
        # are set via a super() call to RSync::Base,
        # which in turn will invoke Syncer::Base.
        #;Fi[	I"H# Once pre-configured defaults and RSync specific defaults are set,;F@]+i[[	@ıiI"Ê        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var);Fi[	@li"I"Ê        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(var);Fi[	I"6# to add errors based on more complex conditions.;F@i[[	@âiI"æ    module ClassMethods
      # Passes the record off to the class or classes specified and allows them
      # to add errors based on more complex conditions.
      #
      #   class Person;Fi[	@âihI"£    
    # Passes the record off to the class or classes specified and allows them
    # to add errors based on more complex conditions.
    #
    #   class Person;Fi[	I"&# concatenated, ready for the CLI;F@Ei[[	@ıi*I"€        ##
        # Returns all the specified Rsync::Local options,
        # concatenated, ready for the CLI
        def function
          ([archive_option, mirror_option] + additional_options).compact.join("STRING");Fi[	@liBI"        ##
        # Returns all the specified Rsync::[Push/Pull] options,
        # concatenated, ready for the CLI
        def function
          ([archive_option, mirror_option, compress_option, port_option, password_option] + additional_options).compact.join("STRING");Fi[	@Ç@√ i[[	I"$projects//backup_proj/backup.rb;Ti I"Arequire("rubygems")
require("fileutils")
require("tempfile");Fi [	@iI"f  Dir[var].each { |var| require(f) }
end
require("rubygems")
require("fileutils")
require("time");Fi[	I"N# Passes the record off to the class or classes specified and allows them;F@#@i[[	@âiI"¨    
    module ClassMethods
      # Passes the record off to the class or classes specified and allows them
      # to add errors based on more complex conditions.
      #;Fi[	@âigI"ñ    end
    
    # Passes the record off to the class or classes specified and allows them
    # to add errors based on more complex conditions.
    #;Fi[	@√ @Çi[[	@ài I"?require("fileutils")
require("rubygems")
require("sequel");Fi [	@ìi I"?require("fileutils")
require("rubygems")
require("sequel");Fi [	@√ I"require("tempfile");Fi[[	@3@iI"Qrequire("rubygems")
require("fileutils")
require("tempfile")
require("yaml");Fi[	@[i I"=require("fileutils")
require("tempfile")
module Whenever;Fi [	@Á2I"objenc(var);Fi[[	@Li[I"h    def function(var)
      case var
      when Hash then
        objenc(var)
      when Array then;Fi[	@LifI"h    def function(var)
      case var
      when Hash then
        objenc(var)
      when Array then;Fi[	@2I"#   describe User do;Fi[[	@)iI"}      # given name.
      #
      # Example:
      #   describe User do
      #     it { should have_attached_file(:avatar) };Fi[	@0iI"ü      # the given attachment as specified.
      #
      # Example:
      #   describe User do
      #     it { should validate_attachment_content_type(:icon).;Fi[	@?@?i[[	@ñi/I"[      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.;Fi[	@ñiiI"[      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.;Fi[	@ß7@€?i[[	@ñi,I"õ      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,;Fi[	@ñifI"õ      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,;Fi[	@?@„
i[[	@ñi1I"      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(var, var)
        validates_with(BlockValidator, _merge_attributes(var), &var);Fi[	@ñikI"      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(var, var)
        var = var.extract_options!;Fi[	@@I""((var + "STRING") + "STRING");Fi[[	@‹iII"∞        var = "STRING" unless var =~ "LITERAL"
        case var.value["LITERAL"]
        when "LITERAL" then
          ((var + "STRING") + "STRING")
        when "LITERAL" then;Fi[	@‹iKI"£        when "LITERAL" then
          ((var + "STRING") + "STRING")
        when "LITERAL" then
          ((var + "STRING") + "STRING")
        when "LITERAL" then;Fi[	@@I"iif var.value["LITERAL"].is_a?(Nokogiri::CSS::Node) and (var.value["LITERAL"].type == "LITERAL") then;Fi[[	@‹iI"Â        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          if var.value["LITERAL"].is_a?(Nokogiri::CSS::Node) and (var.value["LITERAL"].type == "LITERAL") then
            an_plus_b(var.value["LITERAL"]);Fi[	@‹iI"Ó            "STRING"
          end
        when "LITERAL" then
          if var.value["LITERAL"].is_a?(Nokogiri::CSS::Node) and (var.value["LITERAL"].type == "LITERAL") then
            an_plus_b(var.value["LITERAL"], "LITERAL" => (true));Fi[	@@I"var.bottle;Fi[[	@+iI"á      var = SnowLeopardBottleSpecTestBall.new
      assert_equal(case MacOS.cat
      when "LITERAL" then
        var.bottle
      else;Fi[	@+i!I"Ä      var = LionBottleSpecTestBall.new
      assert_equal(case MacOS.cat
      when "LITERAL" then
        var.bottle
      else;Fi[	@@I"(@var = (@patch_filename + "STRING");Fi[[	@úiSI"©    detect_compression!
    case @compression
    when "LITERAL" then
      @var = (@patch_filename + "STRING")
      FileUtils.mv(@patch_filename, @compressed_filename);Fi[	@úiVI"ﬂ      @var = (@patch_filename + "STRING")
      FileUtils.mv(@patch_filename, @compressed_filename)
    when "LITERAL" then
      @var = (@patch_filename + "STRING")
      FileUtils.mv(@patch_filename, @compressed_filename);Fi[	@N7@Ri[[	@i,I"±              Sass::Script::Number.new(("LITERAL" - var.value), ["STRING"])
            else
              Compass::Util.compass_warn("STRING")
              var
            end;Fi[	@i0I"r            end
          else
            Compass::Util.compass_warn("STRING")
            var
          end;Fi[	@N7@G=i[[	@7iI"ã      var.each do |var|
        unless ASPECTS.include?(var) then
          Compass::Util.compass_warn("STRING")
          next
        end;Fi[	@7i1I"ã      var.each do |var|
        unless ASPECTS.include?(var) then
          Compass::Util.compass_warn("STRING")
          next
        end;Fi[	@ü$I"class Base;Fi[[	@¢iI">module Compass
  module Installers
    class Base
    end;Fi[	@ÅiI"Mmodule Compass
  module Installers
    class Base
      include(Actions);Fi[	I"W(var, Compass.configuration.project_path = Compass.configuration.project_path, nil;FI"%Compass.configuration.serialize);Fi[[	@¢i!I"¡        def function
          begin
            (var, Compass.configuration.project_path = Compass.configuration.project_path, nil
            Compass.configuration.serialize)
          ensure;Fi[	@∞iI"∑      def function
        begin
          (var, Compass.configuration.project_path = Compass.configuration.project_path, nil
          Compass.configuration.serialize)
        ensure;Fi[	@ú@@5i[[	@¢i"I"·          begin
            (var, Compass.configuration.project_path = Compass.configuration.project_path, nil
            Compass.configuration.serialize)
          ensure
            Compass.configuration.project_path = var;Fi[	@∞iI"◊        begin
          (var, Compass.configuration.project_path = Compass.configuration.project_path, nil
          Compass.configuration.serialize)
        ensure
          Compass.configuration.project_path = var;Fi[	@D!@	i[[	@∂+iI"õ      def function(var)
        if @project_types[var].nil? then
          raise(Compass::Error, "STRING")
        else
          eval(@project_types[var]);Fi[	@G!iI"ú        else
          if (var.size > "LITERAL") then
            raise(Compass::Error, "STRING")
          else
            raise(Compass::Error, "STRING");Fi[	I"F#   # => Adds support for moz and webkit to the image() function.;F@i[[	@7iI"Ê    #
    #   Compass::BrowserSupport.add_support("image", "moz", "webkit")
    #   # => Adds support for moz and webkit to the image() function.
    #
    # This function can be called one or more times in a compass configuration;Fi[	@7i)I"„    #
    #   Compass::BrowserSupport.remove_support("image", "o", "ms")
    #   # => Adds support for moz and webkit to the image() function.
    #
    # This function can be called one or more times in a compass configuration;Fi[	I"&unless ASPECTS.include?(var) then;F@N7i[[	@7iI"ö    def function(var, var)
      var.each do |var|
        unless ASPECTS.include?(var) then
          Compass::Util.compass_warn("STRING")
          next;Fi[	@7i0I"ö    def function(var, var)
      var.each do |var|
        unless ASPECTS.include?(var) then
          Compass::Util.compass_warn("STRING")
          next;Fi[	I"add_project_configuration;FI"1Compass.add_configuration(options, "STRING");Fi[[	@u7iI"ï      
      def function
        add_project_configuration
        Compass.add_configuration(options, "STRING")
        Compass.discover_extensions!;Fi[	@ziI"∂      
      def function
        add_project_configuration
        Compass.add_configuration(options, "STRING")
        Compass.discover_extensions! unless skip_extension_discovery?;Fi[	@@I"(self / "STRING");Fi[[	@πiKI"s  def function(var)
    var = case var
    when "LITERAL" then
      (self / "STRING")
    when "LITERAL" then;Fi[	@πiMI"m    when "LITERAL" then
      (self / "STRING")
    when "LITERAL" then
      (self / "STRING")
    else;Fi[	@@I"BazaarDownloadStrategy;Fi[[	@zi˘I"~    when "LITERAL" then
      CVSDownloadStrategy
    when "LITERAL" then
      BazaarDownloadStrategy
    when "LITERAL" then;Fi[	@ziI"|  def self.detect_from_symbol(var)
    case var
    when "LITERAL" then
      BazaarDownloadStrategy
    when "LITERAL" then;Fi[	@@I"CVSDownloadStrategy;Fi[[	@zi˜I"{  def self.detect_from_url(var)
    case var
    when "LITERAL" then
      CVSDownloadStrategy
    when "LITERAL" then;Fi[	@zi I"|    when "LITERAL" then
      CurlDownloadStrategy
    when "LITERAL" then
      CVSDownloadStrategy
    when "LITERAL" then;Fi[	@:@	i[[	@3iI"    if (var.length <= var) and var.! then
      var = "STRING"
      var = "LITERAL"
    else
      var = ("STRING" + Rails.application.routes.url_helpers.short_post_url(var, "LITERAL" => (AppConfig.pod_uri.scheme), "LITERAL" => (AppConfig.pod_uri.authority)));Fi[	@“i>I"Ω          var = ("STRING" + var) if var.!=("LITERAL") and @options["LITERAL"].!
          (var << "STRING")
          var = "LITERAL"
        else
          raise(SyntaxError.new("STRING"));Fi[	@@I"Xif @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then;Fi[[	@inI"”        @compilers.include?("LITERAL") ? ("LITERAL") : (ENV.compiler)
      end
    when "LITERAL" then
      if @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL";Fi[	@ixI"ô        end
      end
    when "LITERAL" then
      if @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL";Fi[	@:I" Dir["STRING"].each do |var|;Fi[[	@JiDI"k  
  def function
    var = "LITERAL"
    Dir["STRING"].each do |var|
      if File.exist?(var).! then;Fi[	@2:iI"¿      raise(ArgumentError, "STRING") unless File.directory?(var)
      FileUtils.mkdir_p("STRING")
      var = "LITERAL"
      Dir["STRING"].each do |var|
        next unless File.exists?(var);Fi[	@:I",while var = Resque::Failure.all(var) do;Fi[[	@¿ i7I"ß    
    def self.requeue_queue(var)
      var = "LITERAL"
      while var = Resque::Failure.all(var) do
        Resque::Failure.requeue(var) if (var["STRING"] == var);Fi[	@¿ i?I"é    
    def self.remove_queue(var)
      var = "LITERAL"
      while var = Resque::Failure.all(var) do
        if (var["STRING"] == var) then;Fi[	I"var = (var + "LITERAL");F@	i[[	@Ji8I"ö        if $?.success? then
          (var << var.basename.to_s)
          var = (var + "LITERAL")
        else
          var = var.realpath if var.exist?;Fi[	@LiI"≠            if var then
              var[var] = ("STRING" << var)
              var = (var + "LITERAL")
            else
              var = (var + ucharenc(var, var, var));Fi[	@ı@@ı@i[[	@LiI"Á          when "STRING", "STRING", "STRING", "STRING" then
            var[var] = var[var]
            var = (var + "LITERAL")
            var = (var + "LITERAL")
          when "STRING", "STRING", "STRING", "STRING", "STRING" then;Fi[	@LiÙI"–          when "STRING", "STRING", "STRING", "STRING", "STRING" then
            var[var] = Unesc[var[var]]
            var = (var + "LITERAL")
            var = (var + "LITERAL")
          when "STRING" then;Fi[	@ı@I"next_line;Fi[[	@œi"I"◊        if (var.strip["LITERAL"] == "STRING") and (var.message == Error.message("LITERAL")) then
          ((var << "STRING") << @next_line.text)
          var = (var + "LITERAL")
          next_line
          retry;Fi[	@œi=I"ù        if var.eos? then
          ((var << "STRING") << @next_line.text)
          var = (var + "LITERAL")
          next_line
          var.scan("LITERAL");Fi[	I"2var["LITERAL"] = output_style if output_style;FI"#var["LITERAL"] = line_comments;Fi[[	@NiI"æ        end
        var = { "LITERAL" => (var) }
        var["LITERAL"] = output_style if output_style
        var["LITERAL"] = line_comments
        var["LITERAL"] = cache unless cache.nil?;Fi[	@Ni6I"ø      def function
        var = { "LITERAL" => (sass_load_paths) }
        var["LITERAL"] = output_style if output_style
        var["LITERAL"] = line_comments
        var["LITERAL"] = cache;Fi[	@µ'I"if block_given? then;Fi[[	@siYI"ƒ      # When called without a block, returns the block that was previously set.
      def function(var)
        @var ||= {}
        if block_given? then
          @set_attributes["LITERAL"] = true;Fi[	@sitI"û      #     asset_cache_buster :none
      def function(var, var)
        @var ||= {}
        if block_given? then
          @set_attributes["LITERAL"] = true;Fi[	@AI"&@set_attributes["LITERAL"] = true;Fi[[	@siZI"â      def function(var)
        @var ||= {}
        if block_given? then
          @set_attributes["LITERAL"] = true
          @var = var;Fi[	@siuI"é      def function(var, var)
        @var ||= {}
        if block_given? then
          @set_attributes["LITERAL"] = true
          @var = var;Fi[	@A@≤i[[	@si[I"~        @var ||= {}
        if block_given? then
          @set_attributes["LITERAL"] = true
          @var = var
        else;Fi[	@sivI"~        @var ||= {}
        if block_given? then
          @set_attributes["LITERAL"] = true
          @var = var
        else;Fi[	@!@	i[[	@si¨I"À        var = ((var.keys - ATTRIBUTES) - ARRAY_ATTRIBUTES)
        if (var.size == "LITERAL") then
          raise(Error, "STRING")
        else
          raise(Error, "STRING") if (var.size > "LITERAL");Fi[	@LiI"Ü          end
        when (var == "STRING"), (var < Spc) then
          raise(Error, "STRING")
        else
          (var[var] = var;Fi[	I"inherited_reader(*var);FI"inherited_writer(*var);Fi[[	@i!I"u        
        def function(var)
          inherited_reader(*var)
          inherited_writer(*var)
        end;Fi[	@iPI"Ä        
        def function(var)
          inherited_reader(*var)
          inherited_writer(*var)
          var.each do |var|;Fi[	@@@ˇi[[	@óiwI"j  def function
    case @reason
    when "LITERAL" then
      "STRING".undent
    when "LITERAL" then;Fi[	@óiyI"i    when "LITERAL" then
      "STRING".undent
    when "LITERAL" then
      "STRING".undent
    else;Fi[	@ò1I"Cpush_silent("STRING", "LITERAL") unless @node.value["LITERAL"];Fi[[	@“ijI"œ        @node.value["LITERAL"] = @dont_indent_next_line
        @node.value["LITERAL"] = @dont_tab_up_next_text
        yield
        push_silent("STRING", "LITERAL") unless @node.value["LITERAL"]
      else;Fi[	@“i_I"•      flush_merged_text
      push_silent("STRING")
      yield
      push_silent("STRING", "LITERAL") unless @node.value["LITERAL"]
      (@precompiled << "STRING");Fi[	I"var = "STRING".to_sym;FI"#var = var.send("LITERAL", var);Fi[[	@Ê*iI"»      
      def function(var, var, var)
        var = "STRING".to_sym
        var = var.send("LITERAL", var)
        if ((var.nil? and options["LITERAL"]) or (var.blank? and options["LITERAL"])) then;Fi[	@miI"å      
      def function(var, var, var)
        var = "STRING".to_sym
        var = var.send("LITERAL", var)
        unless var.blank? then;Fi[	I"7var = "STRING" unless (var["LITERAL"] == "STRING");F@ni[[	@A,ibI"|      end
      if var then
        var = "STRING" unless (var["LITERAL"] == "STRING")
        var = "STRING"
      end;Fi[	@A,ièI"|      end
      if var then
        var = "STRING" unless (var["LITERAL"] == "STRING")
        var = "STRING"
      end;Fi[	I"require("sass");F@Ä!i[[	@iI"Cbegin
  require("sass")
rescue LoadError
  require("rubygems");Fi[	@i
I"\  require("rubygems")
  begin
    require("sass")
  rescue LoadError
    puts("STRING");Fi[	@@I"@Parallel.each(all_file_names, { "LITERAL" => (var) }, &var);Fi[[	@uiLI"“            when FalseClass then
              all_file_names.each(&var)
            when "LITERAL" then
              Parallel.each(all_file_names, { "LITERAL" => (var) }, &var)
            when "LITERAL" then;Fi[	@uiNI"‰            when "LITERAL" then
              Parallel.each(all_file_names, { "LITERAL" => (var) }, &var)
            when "LITERAL" then
              Parallel.each(all_file_names, { "LITERAL" => (var) }, &var)
            else;Fi[	I"Mvar.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true };F@]Ai[[	@˙iI"      self.options["LITERAL"] = true
    end
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true };Fi[	@˙iI"<    end
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = false };Fi[	@]AI"Nvar.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = false };Fi[[	@˙i I"o    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = false }
    var.on_tail("STRING", "STRING", "STRING", "STRING") do;Fi[	@˝i!I"Ã      self.options["LITERAL"] = var
    end
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = false }
  end;Fi[	I";var.on_tail("STRING", "STRING", "STRING", "STRING") do;F@Æ)i[[	@˙i"I"    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = true }
    var.on("STRING", "LITERAL", "STRING") { self.options["LITERAL"] = false }
    var.on_tail("STRING", "STRING", "STRING", "STRING") do
      puts(var)
      exit;Fi[	@·iPI"Ω          @options["LITERAL"] = true if RbConfig::CONFIG["STRING"] =~ "LITERAL"
        end
        var.on_tail("STRING", "STRING", "STRING", "STRING") do
          puts(var)
          exit;Fi[	I"$stderr.puts("STRING");F@&i[[	@·iI"¨          $stderr.print("STRING") unless (var.class == RuntimeError)
          $stderr.puts("STRING")
          $stderr.puts("STRING")
          exit("LITERAL")
        end;Fi[	@·ióI"∏        var = var.message["LITERAL", "LITERAL"]
        raise(var) if (@options["LITERAL"] or (var.nil? or var.empty?))
        $stderr.puts("STRING")
        exit("LITERAL")
      end;Fi[	@@I"["STRING", true];Fi[[	@iÖI"ä        when "LITERAL" then
          ["STRING", false]
        when "LITERAL" then
          ["STRING", true]
        when "LITERAL" then;Fi[	@iáI"        when "LITERAL" then
          ["STRING", true]
        when "LITERAL" then
          ["STRING", true]
        else;Fi[	I"2require("compass/exec/global_options_parser");FI"3require("compass/exec/project_options_parser");Fi[[	@•i I"vrequire("compass/exec/global_options_parser")
require("compass/exec/project_options_parser")
module Compass::Exec;Fi [	@™i I"vrequire("compass/exec/global_options_parser")
require("compass/exec/project_options_parser")
module Compass::Exec;Fi [	@ÅAI"module Compass::Exec;Fi[[	@•iI"Ürequire("compass/exec/global_options_parser")
require("compass/exec/project_options_parser")
module Compass::Exec
  class SubCommandUI;Fi[	@™iI"Çrequire("compass/exec/global_options_parser")
require("compass/exec/project_options_parser")
module Compass::Exec
  class SwitchUI;Fi[	@>I"Qif (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then;Fi[[	@•iI"⁄        return perform!
      rescue Exception => var
        raise(var) if var.is_a?(SystemExit)
        if (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then
          $stderr.puts(var.message);Fi[	@™iI"”        perform!
      rescue Exception => var
        raise(var) if var.is_a?(SystemExit)
        if (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then
          $stderr.puts(var.message);Fi[	@èAI"$stderr.puts(var.message);Fi[[	@•iI"œ      rescue Exception => var
        raise(var) if var.is_a?(SystemExit)
        if (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then
          $stderr.puts(var.message)
        else;Fi[	@™iI"œ      rescue Exception => var
        raise(var) if var.is_a?(SystemExit)
        if (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then
          $stderr.puts(var.message)
        else;Fi[	@ñA@	i[[	@•iI"¯        raise(var) if var.is_a?(SystemExit)
        if (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then
          $stderr.puts(var.message)
        else
          ::Compass::Exec::Helpers.report_error(var, (@options or {}));Fi[	@™iI"        raise(var) if var.is_a?(SystemExit)
        if (var.is_a?(::Compass::Error) or var.is_a?(OptionParser::ParseError)) then
          $stderr.puts(var.message)
        else
          ::Compass::Exec::Helpers.report_error(var, @options);Fi[	I":var.errors.add(var, "LITERAL", filtered_options(var));F@ç&i[[	@iI"…        return if options["LITERAL"] and var.nil?
        unless var = parse_raw_value_as_a_number(var) then
          var.errors.add(var, "LITERAL", filtered_options(var))
          return
        end;Fi[	@iI"ƒ        if options["LITERAL"] then
          unless var = parse_raw_value_as_an_integer(var) then
            var.errors.add(var, "LITERAL", filtered_options(var))
            return
          end;Fi[	I"Avar.on("STRING", "STRING", "LITERAL", "STRING", "STRING") do;FI"(self.options["LITERAL"] = "LITERAL";Fi[[	@™i<I"¥      var.separator("STRING")
      var.separator("STRING")
      var.on("STRING", "STRING", "LITERAL", "STRING", "STRING") do
        self.options["LITERAL"] = "LITERAL"
      end;Fi[	@™i?I"Æ        self.options["LITERAL"] = "LITERAL"
      end
      var.on("STRING", "STRING", "LITERAL", "STRING", "STRING") do
        self.options["LITERAL"] = "LITERAL"
      end;Fi[	@v@	i[[	@ri.I"        var = var[var]
        if var and (var.is_a?(Regexp).! and var.respond_to?("LITERAL").!) then
          raise(ArgumentError, "STRING")
        else
          if var and (var.is_a?(Regexp) and (regexp_using_multiline_anchors?(var) and var["LITERAL"].!=(true))) then;Fi[	@#i[I"¿          if var then
            if (@at.is_a?(Time) or (@at.is_a?(Numeric) and (@at > "LITERAL"))) then
              raise(ArgumentError, "STRING")
            else
              return var;Fi[	@7I"-@var ||= File.join(var, "STRING") if var;Fi[[	@≠iI"∑        self.path = var = (var["LITERAL"] or var.shift)
        @var = var
        @var = var["LITERAL"]
        @var ||= File.join(var, "STRING") if var
        @var = var["LITERAL"];Fi[	@≠iI"ß        @var = var["LITERAL"]
        @var ||= File.join(var, "STRING") if var
        @var = var["LITERAL"]
        @var ||= File.join(var, "STRING") if var
      end;Fi[	@7I";@var = var["LITERAL"].nil? ? (true) : (var["LITERAL"]);Fi[[	@˝i%I"À      @var = (var["LITERAL"] or Geometry).from_file(@file)
      @var = var["LITERAL"]
      @var = var["LITERAL"]
      @var = var["LITERAL"].nil? ? (true) : (var["LITERAL"])
      @var = var["LITERAL"];Fi[	@˝i'I"Ó      @var = var["LITERAL"]
      @var = var["LITERAL"].nil? ? (true) : (var["LITERAL"])
      @var = var["LITERAL"]
      @var = var["LITERAL"].nil? ? (true) : (var["LITERAL"])
      @var = var["LITERAL"].nil? ? (true) : (var["LITERAL"]);Fi[	I"var = File.new(var).read;F@õ6i[[	@ÅiOI"“            copy(var, var, nil, var)
          else
            var = File.new(var).read
            if var.delete("LITERAL") then
              var = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var));Fi[	@Åi^I"Û        var = templatize(var)
        var = targetize(install_location_for_stylesheet(var, var))
        var = File.new(var).read
        if var.delete("LITERAL") then
          var = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var));Fi[	I"var = var[var];FI"+next unless var.respond_to?("LITERAL");Fi[[	I"1projects//devise_proj/devise/param_filter.rb;TiI"∂      var = stringify_params(var.dup)
      @case_insensitive_keys.each do |var|
        var = var[var]
        next unless var.respond_to?("LITERAL")
        var[var] = var.downcase;Fi[	@—AiI"ó      end
      @strip_whitespace_keys.each do |var|
        var = var[var]
        next unless var.respond_to?("LITERAL")
        var[var] = var.strip;Fi[	I"S# Paths can use unix style "/" and will be corrected for the current platform.;F@±i[[	@ÅiîI"      
      # returns an absolute path given a path relative to the current installation target.
      # Paths can use unix style "/" and will be corrected for the current platform.
      def function(var)
        strip_trailing_separator(File.join(target_path, separate(var)));Fi[	@ÅiöI"      
      # returns an absolute path given a path relative to the current template.
      # Paths can use unix style "/" and will be corrected for the current platform.
      def function(var)
        strip_trailing_separator(File.join(template_path, separate(var)));Fi[	@$I""if supports_validations? then;Fi[[	@èiI"¨      
      # Adds a validation error to the given object 
      def function(var, var, var, var)
        if supports_validations? then
          var = self.attribute(var);Fi[	@kiI"—      
      # Adds a validation error to the given object
      def function(var, var, var, var)
        if supports_validations? then
          var.errors.add(self.attribute(var), generate_message(var, var));Fi[	@≠>I"$$stdout.write(color("LITERAL"));Fi[[	@≥i!I"|    def function
      begin
        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL"))
        yield);Fi[	@≥i,I"|    def function
      begin
        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL"))
        yield);Fi[	@‰A@4i[[	@≥i"I"}      begin
        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL"))
        yield)
      ensure;Fi[	@≥i-I"}      begin
        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL"))
        yield)
      ensure;Fi[	@$I"/var = var.exist? ? ("STRING") : ("STRING");Fi[[	@ziŸI"v  end
  
  def function(var, var, var, var)
    var = var.exist? ? ("STRING") : ("STRING")
    var = [@@svn, var];Fi[	@ziˆI"Œend
class UnsafeSubversionDownloadStrategy < SubversionDownloadStrategy
  def function(var, var, var, var)
    var = var.exist? ? ("STRING") : ("STRING")
    var = [@@svn, var, "STRING", "STRING", "STRING"];Fi[	@	I"Evar = Sass::Script::Color.new(["LITERAL", "LITERAL", "LITERAL"]);Fi[[	@i(I"¥  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var = Sass::Script::Color.new(["LITERAL", "LITERAL", "LITERAL"])
    mix(var, var, var);Fi[	@i/I"¥  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var = Sass::Script::Color.new(["LITERAL", "LITERAL", "LITERAL"])
    mix(var, var, var);Fi[	@	I"<raise(Sass::SyntaxError, "STRING") unless var.unitless?;Fi[[	@i&I"  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    raise(Sass::SyntaxError, "STRING") unless var.unitless?
    var = Math.log(var.value, var.value) rescue (Math.log(var.value) / Math.log(var.value));Fi[	@i<I"˜  def function(var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    raise(Sass::SyntaxError, "STRING") unless var.unitless?
    Sass::Script::Number.new((var.value ** var.value), var.numerator_units, var.denominator_units);Fi[	I"9# returns the opposite position of a side or corner.;F@±i[[	@iI"¸      Sass::Script::Bool.new((var.is_a?(Sass::Script::List) and var.value.all? { |var| is_position(var).to_bool }))
    end
    # returns the opposite position of a side or corner.
    def function(var)
      var = if var.is_a?(Sass::Script::List) then;Fi[	@i@I"ë    end
  else
    # returns the opposite position of a side or corner.
    def function(var)
      var = var.value.split("LITERAL").map do |var|;Fi[	I"0var = if var.is_a?(Sass::Script::List) then;F@x6i[[	@iI"»    # returns the opposite position of a side or corner.
    def function(var)
      var = if var.is_a?(Sass::Script::List) then
        Sass::Script::List.new(var.value.dup, var.separator)
      else;Fi[	@biπI"ü    def function(var)
      var = var
      var = if var.is_a?(Sass::Script::List) then
        Sass::Script::List.new(var.value.dup, var.separator)
      else;Fi[	@$I"var = super;Fi[[	@8iI"        # Forces the change in state to be recognized regardless of whether the
        # state value actually changed
        def function(var, var, var, var)
          var = super
          if ((var == "LITERAL") or ((var == "LITERAL") and var)) and var.send("STRING").! then;Fi[	@õiI"—      # Forces the change in state to be recognized regardless of whether the
      # state value actually changed
      def function(var, var, var, var)
        var = super
        var = self.attribute.to_sym;Fi[	I",if var.is_a?(Sass::Script::String) then;FI"var = (var + "STRING");Fi[[	@A,iiI"Å      end
      if var.to_bool then
        if var.is_a?(Sass::Script::String) then
          var = (var + "STRING")
        else;Fi[	@A,iñI"Å      end
      if var.to_bool then
        if var.is_a?(Sass::Script::String) then
          var = (var + "STRING")
        else;Fi[	I"#(var << color_stops.to_s(var));F@Ái[[	@bi`I"»      ((var << position.to_s(var)) << "STRING") if position
      ((var << shape_and_size.to_s(var)) << "STRING") if shape_and_size
      (var << color_stops.to_s(var))
      (var << "STRING")
    end;Fi[	@biãI"ß      var = "STRING"
      ((var << position_or_angle.to_s(var)) << "STRING") if position_or_angle
      (var << color_stops.to_s(var))
      (var << "STRING")
    end;Fi[	@$@	i[[	@biMI"á    end
    
    def function(var, var, var, var)
      assert_type(var, "LITERAL")
      var = var.value[(var.value - "LITERAL")].stop;Fi[	@\ióI"é  #
  #     background-position: 3px -36px;
  def function(var, var, var, var)
    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL");Fi[	@Á6@@i[[	@biŒI"¬        case var.value
        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"])
        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"]);Fi[	@bi–I"Â          Sass::Script::Number.new("LITERAL", ["STRING"])
        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"])
        when "LITERAL" then
          Sass::Script::Number.new("LITERAL", ["STRING"]);Fi[	I"ColorStop.new(var);F@	i[[	@bi‡I"ô        else
          if Sass::Script::Color.===(var) then
            ColorStop.new(var)
          else
            if Sass::Script::List.===(var) then;Fi[	@biÊI"…            else
              if Sass::Script::String.===(var) and (var.value == "STRING") then
                ColorStop.new(var)
              else
                raise(Sass::SyntaxError, "STRING");Fi[	@$I"8var ||= self.options if self.respond_to?("LITERAL");Fi[[	@<iI"    
    # copy/process a template in the compass template directory to the project directory.
    def function(var, var, var, var)
      var ||= self.options if self.respond_to?("LITERAL")
      var ? (var = File.new(var, "STRING").read) : (var = File.new(var).read);Fi[	@<i$I"µ    
    # Write a file given the file contents as a string
    def function(var, var, var, var)
      var ||= self.options if self.respond_to?("LITERAL")
      var = var["LITERAL"];Fi[	@$@ni[[	@bi I"Z    end
    
    def function(var, var, var, var)
      var = "STRING"
      svg(var);Fi[	@‰iI"Ú    #   and the rest of the string.
    #   `["Foo (Bar (Baz bang) bop)", " (Bang (bop bip))"]` in the example above.
    def function(var, var, var, var)
      var = "STRING"
      var = StringScanner.new(var) unless var.is_a?(StringScanner);Fi[	I"1#   attribute is +nil+ (default is +false+).;FI"M# * <tt>:allow_blank</tt> - If set to true, skips this validation if the;Fi[[	@oi(I"      #   reserved").
      # * <tt>:allow_nil</tt> - If set to true, skips this validation if the
      #   attribute is +nil+ (default is +false+).
      # * <tt>:allow_blank</tt> - If set to true, skips this validation if the
      #   attribute is blank(default is +false+).;Fi[	@ri_I"R      # * <tt>:message</tt> - A custom error message (default is: "is invalid").
      # * <tt>:allow_nil</tt> - If set to true, skips this validation if the
      #   attribute is +nil+ (default is +false+).
      # * <tt>:allow_blank</tt> - If set to true, skips this validation if the
      #   attribute is blank (default is +false+).;Fi[	I"K# * <tt>:allow_nil</tt> - If set to true, skips this validation if the;F@JBi[[	@oi'I"4      # * <tt>:message</tt> - Specifies a custom error message (default is: "is
      #   reserved").
      # * <tt>:allow_nil</tt> - If set to true, skips this validation if the
      #   attribute is +nil+ (default is +false+).
      # * <tt>:allow_blank</tt> - If set to true, skips this validation if the;Fi[	@ri^I">      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "is invalid").
      # * <tt>:allow_nil</tt> - If set to true, skips this validation if the
      #   attribute is +nil+ (default is +false+).
      # * <tt>:allow_blank</tt> - If set to true, skips this validation if the;Fi[	I"var.value.first;F@	i[[	@Yi#I"à    assert_type(var, "LITERAL")
    if (var.value == "STRING") then
      var.value.first
    else
      if (var.value == "STRING") then;Fi[	@Yi]I"É    else
      if defined? Sass::Script::List and var.is_a?(Sass::Script::List) then
        var.value.first
      else
        var;Fi[	@”1I"var.generate;Fi[[	@\i$I"u  #      }
  def function(var)
    verify_map(var, "STRING")
    var.generate
    inline_image(sprite_path(var));Fi[	@\i}I"•  # Returns a url to the sprite image.
  def function(var)
    verify_map(var, "STRING")
    var.generate
    generated_image_url(Sass::Script::String.new("STRING"));Fi[	@96@”1i[[	@\i]I"√  # Returns the path to the original image file for the sprite with the given name
  def function(var, var)
    var = convert_sprite_name(var)
    verify_map(var, "STRING")
    verify_sprite(var);Fi[	@\iöI"∏    assert_type(var, "LITERAL")
    assert_type(var, "LITERAL")
    var = convert_sprite_name(var)
    verify_map(var, "STRING")
    unless var and var.is_a?(Sass::Script::String) then;Fi[	I"$# particular enumerable object.;F@i[[	@oiI"∫    module HelperMethods
      # Validates that the value of the specified attribute is not in a
      # particular enumerable object.
      #
      #   class Person < ActiveRecord::Base;Fi[	@yiI"√    module HelperMethods
      # Validates whether the value of the specified attribute is available in a
      # particular enumerable object.
      #
      #   class Person < ActiveRecord::Base;Fi[	@:6I"verify_sprite(var);Fi[[	@\ilI"ß  def function(var, var)
    var = convert_sprite_name(var)
    verify_map(var)
    verify_sprite(var)
    Sass::Script::Bool.new(var.image_for(var.value).parent.nil?);Fi[	@\ivI"ü  def function(var, var, var)
    var = convert_sprite_name(var)
    verify_map(var)
    verify_sprite(var)
    unless VALID_SELECTORS.include?(var.value) then;Fi[	I"2require("active_model/validations/clusivity");F@;i[[	@oi I"Zrequire("active_model/validations/clusivity")
module ActiveModel
  module Validations;Fi [	@yi I"Zrequire("active_model/validations/clusivity")
module ActiveModel
  module Validations;Fi [	@'6@Bi[[	@A,ihI"ß        Compass.configuration.asset_host.call(var)
      end
      if var.to_bool then
        if var.is_a?(Sass::Script::String) then
          var = (var + "STRING");Fi[	@A,iïI"ß        Compass.configuration.asset_host.call(var)
      end
      if var.to_bool then
        if var.is_a?(Sass::Script::String) then
          var = (var + "STRING");Fi[	I"# attribute.;F@i[[	@Êi(I"ˇ      # as an in-memory attribute for validating the password. To achieve this,
      # the validation adds accessors to the model for the confirmation
      # attribute.
      #
      # NOTE: This check is performed only if +password_confirmation+ is not;Fi[	@¯iI"ˇ    # class-level attribute acts like an inheritable attribute.  The attribute
    # is available to each subclass, each having a copy of its superclass's
    # attribute.
    # 
    # The hash of state machines maps <tt>:attribute</tt> => +machine+, e.g.;Fi[	@9I"each_value do |var|;Fi[[	@iI"Î      assert_valid_keys(var, "LITERAL", "LITERAL", "LITERAL")
      var = { "LITERAL" => (true), "LITERAL" => (true) }.merge(var)
      if var["LITERAL"] then
        each_value do |var|
          unless var.dynamic_initial_state? then;Fi[	@i'I"ë      end
      var = yield if block_given?
      if var["LITERAL"] then
        each_value do |var|
          if var.dynamic_initial_state? then;Fi[	I"var = $1;F@	i[[	@A,iQI"—      var = var.value
      if var =~ /^#{Regexp.escape(Compass.configuration.http_images_path)}STRING/ then
        var = $1
      else
        return Sass::Script::String.new("STRING") if absolute_path?(var);Fi[	@A,i~I"€      var = var.value
      if var =~ /^#{Regexp.escape(Compass.configuration.http_generated_images_path)}STRING/ then
        var = $1
      else
        return Sass::Script::String.new("STRING") if absolute_path?(var);Fi[	@B@	i[[	@A,ijI"£      if var.to_bool then
        if var.is_a?(Sass::Script::String) then
          var = (var + "STRING")
        else
          var = cache_busted_path(var, var);Fi[	@A,ióI"£      if var.to_bool then
        if var.is_a?(Sass::Script::String) then
          var = (var + "STRING")
        else
          var = cache_busted_path(var, var);Fi[	@9I",(var << clean_entities(var["LITERAL"]));Fi[[	@‘i=I"         var[var].each do |var|
          if var["LITERAL"] and (var["LITERAL"] == "STRING") then
            if var["LITERAL"] then
              (var << clean_entities(var["LITERAL"]))
            else;Fi[	@‘iDI"¬          else
            if var["LITERAL"] and (var["LITERAL"] == "STRING") then
              if var["LITERAL"] then
                (var << clean_entities(var["LITERAL"]))
              else;Fi[	@9I")if @user.update_attributes(var) then;Fi[[	@i3I"°            end
          else
            if var["LITERAL"] then
              if @user.update_attributes(var) then
                I18n.locale = @user.language;Fi[	@iDI"º                end
              else
                if var["LITERAL"] then
                  if @user.update_attributes(var) then
                    flash["LITERAL"] = I18n.t("STRING");Fi[	I"require("forwardable");F@£i[[	@zi I"Brequire("forwardable")
module Compass
  module SassExtensions;Fi [	@Äi I"Brequire("forwardable")
module Compass
  module SassExtensions;Fi [	I"-# Calculates the overal image dimensions;FI"@# collects image sizes and input parameters for each sprite;Fi[[	@}i%I"û        end
        
        # Calculates the overal image dimensions
        # collects image sizes and input parameters for each sprite
        def function;Fi[	@ÑiI"-        # Changing this string will invalidate all previously generated sprite images.
        # We should do so only when the packing algorithm changes
        # Calculates the overal image dimensions
        # collects image sizes and input parameters for each sprite
        # Calculates the height;Fi[	I"next if (var == "LITERAL");FI"%var = @images[(var - "LITERAL")];Fi[[	@}iÄI"’              var.position.value
            end
            next if (var == "LITERAL")
            var = @images[(var - "LITERAL")]
            var.left = ((var.left + var.width) + [var.spacing, var.spacing].max);Fi[	@}içI"⁄              var.position.value
            end).to_i
            next if (var == "LITERAL")
            var = @images[(var - "LITERAL")]
            var.top = ((var.top + var.height) + [var.spacing, var.spacing].max);Fi[	I""var, var = path_and_name(var);F@Ri[[	@å iEI"]    
    def self.sprite_name(var)
      var, var = path_and_name(var)
      var
    end;Fi[	@å iJI"V    
    def self.path(var)
      var, var = path_and_name(var)
      var
    end;Fi[	I"rescue LoadError => var;FI"(var.message << "STRING");Fi[[	@^iI"â          begin
            require("fog")
          rescue LoadError => var
            (var.message << "STRING")
            raise(var);Fi[	@äiI"ç          begin
            require("aws-sdk")
          rescue LoadError => var
            (var.message << "STRING")
            raise(var);Fi[	@˘,I"!#   person.valid? # => false;Fi[[	@jiGI"ê        #
        #   person = Person.new
        #   person.name = ''
        #   person.valid? # => false
        #   person.status # => false;Fi[	@ñi”I"~    #
    #   person = Person.new
    #   person.name = ''
    #   person.valid? # => false
    #   person.name = 'david';Fi[	I"rescue ArgumentError;F@wi[[	@„i
I"ë            begin
              var.force_encoding(document.encoding)
            rescue ArgumentError
              # do nothing
            end;Fi[	@CiI"|        trap("STRING", "STRING")
        trap("STRING", "STRING"))
      rescue ArgumentError
        # do nothing
      end;Fi[	I"6#     include ActiveModel::Validations::Callbacks;F@i[[	@jiI"≠        #   class Person
        #     include ActiveModel::Validations
        #     include ActiveModel::Validations::Callbacks
        #
        #     attr_accessor :name;Fi[	@ji7I"∂        #   class Person
        #     include ActiveModel::Validations
        #     include ActiveModel::Validations::Callbacks
        #
        #     attr_accessor :name, :status;Fi[	I"# happens.;F@i[[	@jiI"ô      module ClassMethods
        # Defines a callback that will get called right before validation
        # happens.
        #
        #   class Person;Fi[	@ji3I"á        
        # Defines a callback that will get called right after validation
        # happens.
        #
        #   class Person;Fi[	I"2# Object#blank?). Happens by default on save.;F@i[[	@diI"…    module HelperMethods
      # Validates that the specified attributes are blank (as defined by
      # Object#blank?). Happens by default on save.
      #
      #   class Person < ActiveRecord::Base;Fi[	@}iI"Õ    module HelperMethods
      # Validates that the specified attributes are not blank (as defined by
      # Object#blank?). Happens by default on save.
      #
      #   class Person < ActiveRecord::Base;Fi[	I"if options["LITERAL"] then;FI"&var = option_call(var, "LITERAL");Fi[[	@ri	I"„    class FormatValidator < EachValidator
      def function(var, var, var)
        if options["LITERAL"] then
          var = option_call(var, "LITERAL")
          record_error(var, var, "LITERAL", var) unless var.to_s.=~(var);Fi[	@riI"Ô          record_error(var, var, "LITERAL", var) unless var.to_s.=~(var)
        else
          if options["LITERAL"] then
            var = option_call(var, "LITERAL")
            record_error(var, var, "LITERAL", var) if var.to_s.=~(var);Fi[	@r;@‡i[[	@ÂiI"q      case var
      when Array then
        if var.empty? then
          opoo("STRING")
          return [];Fi[	@ÂiI"è        var.each { |var| (var << install_p(var)) }
      when Hash then
        if var.empty? then
          opoo("STRING")
          return [];Fi[	@T!I"var = (var.last or var);Fi[[	@æiGI"π      def function(var, var)
        var = var.extract_options!
        var = Devise::Mapping.find_scope!(var)
        var = (var.last or var)
        expire_session_data_after_sign_in!;Fi[	@æiπI"≠      def function(var, var)
        var = var.extract_options!
        var = Devise::Mapping.find_scope!(var)
        var = (var.last or var)
        sign_in(var, var, var);Fi[	I"-#   sign_out :user     # sign_out(scope);FI"0#   sign_out @user     # sign_out(resource);Fi[[	@æi[I"Ç      # Examples:
      #
      #   sign_out :user     # sign_out(scope)
      #   sign_out @user     # sign_out(resource)
      #;Fi[	@Ei1I"}    # Examples:
    #
    #   sign_out :user     # sign_out(scope)
    #   sign_out @user     # sign_out(resource)
    #;Fi[	@C@i[[	@æi\I"à      #
      #   sign_out :user     # sign_out(scope)
      #   sign_out @user     # sign_out(resource)
      #
      def function(var);Fi[	@Ei2I"~    #
    #   sign_out :user     # sign_out(scope)
    #   sign_out @user     # sign_out(resource)
    #
    def function(var);Fi[	I"send(var);F@	i[[	@æiÖI"ö        var = "STRING"
        if respond_to?(var, true) then
          send(var)
        else
          respond_to?("LITERAL") ? (root_path) : ("STRING");Fi[	@ŒifI"›    def function(var)
      if ["LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL"].include?(var) then
        send(var)
      else
        @other_args[var] if defined? @other_args[var];Fi[	I"(var = var ? ("STRING") : ("STRING");F@ni[[	@^,iI"·          ["LITERAL", "LITERAL"].each do |var|
            var.each do |var|
              var = var ? ("STRING") : ("STRING")
              var = "STRING"
              class_eval("STRING", "STRING", ("LITERAL" + "LITERAL"));Fi[	@w3iI"m  
  def function(var, var)
    var = var ? ("STRING") : ("STRING")
    var = "STRING"
    var.html_safe;Fi[	I"#   en:;FI"#     devise:;Fi[[	@<iGI"j      # based on the current mapping:
      #
      #   en:
      #     devise:
      #       mailer:;Fi[	@<iOI"Ñ      # If one does not exist, it fallbacks to ActionMailer default:
      #
      #   en:
      #     devise:
      #       mailer:;Fi[	@,CI"#       mailer:;Fi[[	@<iHI"o      #
      #   en:
      #     devise:
      #       mailer:
      #         confirmation_instructions:;Fi[	@<iPI"o      #
      #   en:
      #     devise:
      #       mailer:
      #         confirmation_instructions:;Fi[	@3CI")#         confirmation_instructions:;Fi[[	@<iII"à      #   en:
      #     devise:
      #       mailer:
      #         confirmation_instructions:
      #           user_subject: '...';Fi[	@<iQI"É      #   en:
      #     devise:
      #       mailer:
      #         confirmation_instructions:
      #           subject: '...';Fi[	I"var["LITERAL"] = var;F@Ei[[	@œi I"õ          break if var
          var, var, var = parse_old_attributes(var)
          var["LITERAL"] = var
        when "STRING" then
          break if var;Fi[	@œiI"≠          break if var
          var, var, var = parse_new_attributes(var)
          var["LITERAL"] = var
        when "STRING" then
          break unless (var == "STRING");Fi[	@.@.i[[	@Âi.I"ô      var = (self + File.basename(var))
    end
    var = var.to_s
    var = var.to_s
    raise("STRING") unless (File.symlink?(var) or File.exist?(var));Fi[	@ÂiPI"e      var = (self + File.basename(var))
    end
    var = var.to_s
    var = var.to_s
    mkpath;Fi[	I"loop do;FI"var = eat("STRING", var);Fi[[	@LiDI"∏      var[var] = var
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      loop do
        var = eat("STRING", var)
        var, var, var = pairparse(var);Fi[	@Li_I"∞      (var << var)
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      loop do
        var = eat("STRING", var)
        var, var = valparse(var);Fi[	I"4#   confirmation_period_valid?   # returns true;F@i[[	@ÄixI"Ô      #
      #   # allow_unconfirmed_access_for = 1.day and confirmation_sent_at = today
      #   confirmation_period_valid?   # returns true
      #
      #   # allow_unconfirmed_access_for = 5.days and confirmation_sent_at = 4.days.ago;Fi[	@Äi{I"ı      #
      #   # allow_unconfirmed_access_for = 5.days and confirmation_sent_at = 4.days.ago
      #   confirmation_period_valid?   # returns true
      #
      #   # allow_unconfirmed_access_for = 5.days and confirmation_sent_at = 5.days.ago;Fi[	I"*self.errors.add("LITERAL", "LITERAL");F@i[[	@ÄióI"m          yield
        else
          self.errors.add("LITERAL", "LITERAL")
          false
        end;Fi[	@ai|I"m          yield
        else
          self.errors.add("LITERAL", "LITERAL")
          false
        end;Fi[	I"*# Options must contain the user email;F@±i[[	@Äi¿I"L        # confirmation instructions to it. If not, try searching for a user by unconfirmed_email
        # field. If no user is found, returns a new user with an email not found error.
        # Options must contain the user email
        def function(var)
          var = find_by_unconfirmed_email_with_errors(var) if reconfirmable;Fi[	@aiÖI"
        # unlock instructions to it. If not user is found, returns a new user
        # with an email not found error.
        # Options must contain the user email
        def function(var)
          var = find_or_initialize_with_errors(unlock_keys, var, "LITERAL");Fi[	I"'#   person.age             # => 22;FI")#   person.awesome         # => true;Fi[[	@^izI"Ï      #   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">
      #   person.name            # => "bob"
      #   person.age             # => 22
      #   person.awesome         # => true
      #;Fi[	@^iI"      #   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">
      #   person.name            # => "bob"
      #   person.age             # => 22
      #   person.awesome         # => true
      def function(var, var);Fi[	I"var.delete("LITERAL");F@sCi[[	@∆iJI"ã      #
      def function(var, var)
        var.delete("LITERAL")
        var.delete("LITERAL")
        var = update_attributes(var, *var);Fi[	@~i)I"ı        @var = [{ "LITERAL" => (build_matcher(var, "LITERAL", "LITERAL")), "LITERAL" => (build_matcher(var, "LITERAL", "LITERAL")) }]
      else
        var.delete("LITERAL")
        var.delete("LITERAL")
        @var = var.collect do |var, var|;Fi[	I"clean_up_passwords;F@Ri[[	@∆i9I"Q          false
        end
        clean_up_passwords
        var
      end;Fi[	@∆iMI"~        var.delete("LITERAL")
        var = update_attributes(var, *var)
        clean_up_passwords
        var
      end;Fi[	I"*#   person.name            # => "bob";F@kCi[[	@^iyI"      #   person = Person.new
      #   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">
      #   person.name            # => "bob"
      #   person.age             # => 22
      #   person.awesome         # => true;Fi[	@^i~I"      #   person = Person.new
      #   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">
      #   person.name            # => "bob"
      #   person.age             # => 22
      #   person.awesome         # => true;Fi[	@Ü	@¡6i[[	@π	i4I"Ω      var = case read("LITERAL", (var + "LITERAL")).unpack("STRING")["LITERAL"]
      when "LITERAL", "LITERAL" then
        "LITERAL"
      when "LITERAL", "LITERAL" then
        "LITERAL";Fi[	@π	i6I"        "LITERAL"
      when "LITERAL", "LITERAL" then
        "LITERAL"
      when "LITERAL", "LITERAL" then
        "LITERAL";Fi[	I"c#   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">;F@ÅCi[[	@^ixI"      #   json = { name: 'bob', age: 22, awesome:true }.to_json
      #   person = Person.new
      #   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">
      #   person.name            # => "bob"
      #   person.age             # => 22;Fi[	@^i}I"#      #   json = { person: { name: 'bob', age: 22, awesome:true } }.to_json
      #   person = Person.new
      #   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">
      #   person.name            # => "bob"
      #   person.age             # => 22;Fi[	I"#       instance_values;F@&i[[	@^irI"c      #
      #     def attributes
      #       instance_values
      #     end
      #   end;Fi[	@aiŒI"c      #
      #     def attributes
      #       instance_values
      #     end
      #   end;Fi[	@e
@i[[	@âi0I"g      #       def some_complex_logic
      #         # ...
      #       end
      #   end
      #;Fi[	@æi£I"U      #       else
      #         super
      #       end
      #   end
      #;Fi[	I"self.password = var;FI"%self.password_confirmation = var;Fi[[	@+iI"√      # the passwords are valid and the record was saved, false otherwise.
      def function(var, var)
        self.password = var
        self.password_confirmation = var
        if valid? then;Fi[	@√i∫I"•    self["LITERAL"] = "STRING"
    var = SecureRandom.hex("LITERAL")
    self.password = var
    self.password_confirmation = var
    self.save("LITERAL" => (false));Fi[	I"6#   reset_password_period_valid?   # returns true;F@i[[	@+i)I"Á      #
      #   # reset_password_within = 1.day and reset_password_sent_at = today
      #   reset_password_period_valid?   # returns true
      #
      #   # reset_password_within = 5.days and reset_password_sent_at = 4.days.ago;Fi[	@+i,I"Ì      #
      #   # reset_password_within = 5.days and reset_password_sent_at = 4.days.ago
      #   reset_password_period_valid?   # returns true
      #
      #   # reset_password_within = 5.days and reset_password_sent_at = 5.days.ago;Fi[	I"&var = [nil, "LITERAL", "LITERAL"];FI"]var.add_module("LITERAL", "LITERAL" => "LITERAL", "LITERAL" => ({ "LITERAL" => (var) }));Fi[[	I",projects//devise_proj/devise/modules.rb;TiI"WDevise.with_options("LITERAL" => (true)) do |var|
  var.with_options("LITERAL" => (true)) do |var|
    var = [nil, "LITERAL", "LITERAL"]
    var.add_module("LITERAL", "LITERAL" => "LITERAL", "LITERAL" => ({ "LITERAL" => (var) }))
    var.add_module("LITERAL", "LITERAL" => "LITERAL", "LITERAL" => ({ "LITERAL" => (var) }), "LITERAL" => (true));Fi[	@µCiI":  end
  var.add_module("LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL")
  var = [nil, "LITERAL", "LITERAL"]
  var.add_module("LITERAL", "LITERAL" => "LITERAL", "LITERAL" => ({ "LITERAL" => (var) }))
  var.add_module("LITERAL", "LITERAL" => "LITERAL", "LITERAL" => ({ "LITERAL" => ((var << "LITERAL")) }));Fi[	I"6#         instance_variable_set("@#{key}", value);F@e
i[[	@^imI"£      #     def attributes=(hash)
      #       hash.each do |key, value|
      #         instance_variable_set("@#{key}", value)
      #       end
      #     end;Fi[	@ai…I"£      #     def attributes=(hash)
      #       hash.each do |key, value|
      #         instance_variable_set("@#{key}", value)
      #       end
      #     end;Fi[	@~&@	i[[	@·i=I"a      end) then
        var, var = var
        warn("STRING")
      else
        add_actions;Fi[	@ÌiLI"¥        if var = var.detect { |var, var| var.attribute.!=(var.attribute) } then
          var, var = var
          warn("STRING")
        else
          add_predicate if var.empty?;Fi[	I"&#       hash.each do |key, value|;F@∫Ci[[	@^ilI"õ      #
      #     def attributes=(hash)
      #       hash.each do |key, value|
      #         instance_variable_set("@#{key}", value)
      #       end;Fi[	@ai»I"õ      #
      #     def attributes=(hash)
      #       hash.each do |key, value|
      #         instance_variable_set("@#{key}", value)
      #       end;Fi[	I" #     def attributes=(hash);F@«Ci[[	@^ikI"π      #     attr_accessor :name, :age, :awesome
      #
      #     def attributes=(hash)
      #       hash.each do |key, value|
      #         instance_variable_set("@#{key}", value);Fi[	@ai«I"π      #     attr_accessor :name, :age, :awesome
      #
      #     def attributes=(hash)
      #       hash.each do |key, value|
      #         instance_variable_set("@#{key}", value);Fi[	I"#      end;F@i[[	@…ihI"æ    #      namespace :publisher do
    #        devise_for :account
    #      end
    #
    #    Will use publisher/sessions controller instead of devise/sessions controller. You can revert;Fi[	@…i¶I"u    #      def update
    #         # do something different here
    #      end
    #
    #      def deactivate;Fi[	I"#     devise_for :users;F@i[[	@…iâI"O    #
    #   scope "/my" do
    #     devise_for :users
    #   end
    #;Fi[	@…iêI"S    #
    #   scope ":locale" do
    #     devise_for :users
    #   end
    #;Fi[	I"Gvar["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?;F@„Ci[[	@…i∑I"      @var = false
      var = var.extract_options!
      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?
      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?
      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?;Fi[	@…i∏I"J      var = var.extract_options!
      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?
      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?
      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?
      var["LITERAL"] = (@scope["LITERAL"] or {}).merge((var["LITERAL"] or {}));Fi[	I"Mvar["LITERAL"] = (@scope["LITERAL"] or {}).merge((var["LITERAL"] or {}));F@ÍCi[[	@…i∫I"~      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?
      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?
      var["LITERAL"] = (@scope["LITERAL"] or {}).merge((var["LITERAL"] or {}))
      var["LITERAL"] = (@scope["LITERAL"] or {}).merge((var["LITERAL"] or {}))
      var["LITERAL"] = (@scope["LITERAL"] or {}).merge((var["LITERAL"] or {}));Fi[	@…iªI"f      var["LITERAL"] ||= @scope["LITERAL"] if @scope["LITERAL"].present?
      var["LITERAL"] = (@scope["LITERAL"] or {}).merge((var["LITERAL"] or {}))
      var["LITERAL"] = (@scope["LITERAL"] or {}).merge((var["LITERAL"] or {}))
      var["LITERAL"] = (@scope["LITERAL"] or {}).merge((var["LITERAL"] or {}))
      var["LITERAL"] = (@scope["LITERAL"] or {});Fi[	@G=@	i[[	@gi5I"s      else
        if var.file?.! then
          next
        else
          if (var.extname == "STRING") then;Fi[	@ÁiI"â      if var.dry_run and var.overwrite then
        print("STRING") { var.link(var) }
        next
      else
        if var.dry_run then;Fi[	I"-#     root :to => "admin/dashboard#show";F@i[[	@…iËI"Ç    #
    #   authenticate :user, lambda {|u| u.role == "admin"} do
    #     root :to => "admin/dashboard#show"
    #   end
    #;Fi[	@…iˇI"É    #
    #   authenticated :user, lambda {|u| u.role == "admin"} do
    #     root :to => "admin/dashboard#show"
    #   end
    #;Fi[	@R@	i[[	@…iwI"∫    def function(var)
      if ::OmniAuth.config.path_prefix and ::OmniAuth.config.path_prefix.!=(var) then
        raise("STRING")
      else
        ::OmniAuth.config.path_prefix = var;Fi[	@·iÔI"Ñ            raise("STRING")
          when ::Haml::Error then
            raise("STRING")
          else
            raise("STRING");Fi[	I"&require("devise/strategies/base");F@ri[[	@äi I"Hrequire("devise/strategies/base")
module Devise
  module Strategies;Fi [	@i I"Hrequire("devise/strategies/base")
module Devise
  module Strategies;Fi [	I"2#   * If all authentication keys are present;;F@i[[	@äi>I"À      #   * Validating if the model allows params authentication;
      #   * If any of the authorization headers were sent;
      #   * If all authentication keys are present;
      #
      def function;Fi[	@äiII"÷      #   * If the request hits the sessions controller through POST;
      #   * If the params[scope] returns a hash with credentials;
      #   * If all authentication keys are present;
      #
      def function;Fi[	I"1require("devise/strategies/authenticatable");F@ri[[	@^&i I"Srequire("devise/strategies/authenticatable")
module Devise
  module Strategies;Fi [	@i I"Srequire("devise/strategies/authenticatable")
module Devise
  module Strategies;Fi [	@Î&I"arrenc(var);Fi[[	@Li]I"b      when Hash then
        objenc(var)
      when Array then
        arrenc(var)
      else;Fi[	@LihI"n      when Hash then
        objenc(var)
      when Array then
        arrenc(var)
      when String then;Fi[	@b#@ni[[	@ÃiNI"ù        end
      when "STRING" then
        var = var["STRING"]
        var = "STRING"
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?;Fi[	@ÃiRI"“        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?
      when "STRING" then
        var = var["STRING"]
        var = "STRING"
        var["STRING"]["STRING"].each { |var| (var << "STRING") };Fi[	@b#@ i[[	@xiI"v    def self.build(var, var)
      var = var["STRING"]
      var = var["STRING"]
      puts("STRING")
      begin;Fi[	@xi!I"ë      require("directory_watcher")
      var = var["STRING"]
      var = var["STRING"]
      puts("STRING")
      var = DirectoryWatcher.new(var);Fi[	I".#     attr_accessor :name, :age, :awesome;F@i[[	@^iiI"î      #     include ActiveModel::Serializers::JSON
      #
      #     attr_accessor :name, :age, :awesome
      #
      #     def attributes=(hash);Fi[	@ai≈I"ì      #     include ActiveModel::Serializers::Xml
      #
      #     attr_accessor :name, :age, :awesome
      #
      #     def attributes=(hash);Fi[	I"require("set");F@÷ i[[	@›i I"6require("set")
module Jekyll
  module Convertible;Fi [	@ıi I".require("set")
module Jekyll
  class Site;Fi [	I"require("securerandom");F@ri[[	@Õi
I"prequire("orm_adapter")
require("set")
require("securerandom")
module Devise
  autoload("LITERAL", "STRING");Fi[	@q,i I">require("securerandom")
module Devise
  module Generators;Fi [	@l,I"9class DeviseGenerator < Rails::Generators::NamedBase;Fi[[	@viI"åmodule Devise
  module Generators
    class DeviseGenerator < Rails::Generators::NamedBase
      include(Rails::Generators::ResourceHelpers);Fi[	@ìiI"≤require("generators/devise/orm_helpers")
module Mongoid
  module Generators
    class DeviseGenerator < Rails::Generators::NamedBase
      include(Devise::Generators::OrmHelpers);Fi[	I"F# Sets the model +attributes+ from a JSON string. Returns +self+.;F@i[[	@^idI"|      end
      
      # Sets the model +attributes+ from a JSON string. Returns +self+.
      #
      #   class Person;Fi[	@ai¿I"|      end
      
      # Sets the model +attributes+ from a JSON string. Returns +self+.
      #
      #   class Person;Fi[	I"@var = t("STRING");F@Ei[[	I"=projects//diaspora_proj/controllers/admins_controller.rb;Ti3I"}    when "STRING" then
      var = "LITERAL".week
      @var = t("STRING")
    when "STRING" then
      var = "LITERAL".weeks;Fi[	@RDi6I"~    when "STRING" then
      var = "LITERAL".weeks
      @var = t("STRING")
    when "STRING" then
      var = "LITERAL".month;Fi[	@—;@Q#i[[	@∏inI"‚    if var then
      if current_user.update_post(var, params["LITERAL"]) then
        flash.now["LITERAL"] = I18n.t("STRING")
        respond_to do |var|
          var.js { render("LITERAL" => (var), "LITERAL" => "LITERAL") };Fi[	@∏isI"ó        end
      else
        flash.now["LITERAL"] = I18n.t("STRING")
        respond_to do |var|
          var.html { redirect_to(["LITERAL", var]) };Fi[	I"O#   #                  "created_at" => "2006/08/01", "awesome" => true } };F@i[[	@^i$I"      #   user.as_json
      #   # => { "user" => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #                  "created_at" => "2006/08/01", "awesome" => true } }
      #
      # This behavior can also be achieved by setting the <tt>:root</tt> option;Fi[	@^i,I"      #   user.as_json(root: true)
      #   # => { "user" => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #                  "created_at" => "2006/08/01", "awesome" => true } }
      #
      # Without any +options+, the returned Hash will include all the model's;Fi[	@*5I"-var.html { redirect_to("LITERAL", var) };Fi[[	I"=projects//diaspora_proj/controllers/blocks_controller.rb;TiI"¬      var = { "LITERAL" => (t("STRING")) }
    end
    respond_with do |var|
      var.html { redirect_to("LITERAL", var) }
      var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") };Fi[	@gDiI"¬      var = { "LITERAL" => (t("STRING")) }
    end
    respond_with do |var|
      var.html { redirect_to("LITERAL", var) }
      var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") };Fi[	I"M#   # => { "user" => { "id" => 1, "name" => "Konata Izumi", "age" => 16,;F@]Di[[	@^i#I"∆      #
      #   user.as_json
      #   # => { "user" => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #                  "created_at" => "2006/08/01", "awesome" => true } }
      #;Fi[	@^i+I"Ë      #   user = User.find(1)
      #   user.as_json(root: true)
      #   # => { "user" => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #                  "created_at" => "2006/08/01", "awesome" => true } }
      #;Fi[	I"#   user.as_json;F@5i[[	@^iI"¿      #
      #   user = User.find(1)
      #   user.as_json
      #   # => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #     "created_at" => "2006/08/01", "awesome" => true};Fi[	@^i2I"¡      #
      #   user = User.find(1)
      #   user.as_json
      #   # => { "id" => 1, "name" => "Konata Izumi", "age" => 16,
      #   #      "created_at" => "2006/08/01", "awesome" => true};Fi[	@Q#I"Bvar.js { render("LITERAL" => (var), "LITERAL" => "LITERAL") };Fi[[	@èiI"ˆ      flash.now["LITERAL"] = I18n.t("STRING")
      var = var ? (var.errors.full_messages) : (t("STRING"))
      respond_to do |var|
        var.js { render("LITERAL" => (var), "LITERAL" => "LITERAL") }
        var.html { redirect_to("LITERAL") };Fi[	@∏ioI"ﬁ      if current_user.update_post(var, params["LITERAL"]) then
        flash.now["LITERAL"] = I18n.t("STRING")
        respond_to do |var|
          var.js { render("LITERAL" => (var), "LITERAL" => "LITERAL") }
        end;Fi[	@Â)@sDi[[	@^iI"ö      # option is +false+.
      #
      #   user = User.find(1)
      #   user.as_json
      #   # => { "id" => 1, "name" => "Konata Izumi", "age" => 16,;Fi[	@^i1I"ì      # attributes.
      #
      #   user = User.find(1)
      #   user.as_json
      #   # => { "id" => 1, "name" => "Konata Izumi", "age" => 16,;Fi[	I" # passed through +options+.;F@i[[	@^iI"       
      # Returns a hash representing the model. Some configuration can be
      # passed through +options+.
      #
      # The option <tt>include_root_in_json</tt> controls the top-level behavior;Fi[	@ai§I"Ω      
      # Returns XML representing the model. Configuration can be
      # passed through +options+.
      #
      # Without any +options+, the returned XML string will include all the;Fi[	@Q#@Í4i[[	@i I"Á    var = current_user.tag_followings.find_by_tag_id(params["STRING"])
    if var and var.destroy then
      respond_to do |var|
        var.any("LITERAL", "LITERAL") do
          render("LITERAL" => (true), "LITERAL" => "LITERAL");Fi[	@i&I"ì      end
    else
      respond_to do |var|
        var.any("LITERAL", "LITERAL") do
          render("LITERAL" => (true), "LITERAL" => "LITERAL");Fi[	@Q#I"-var.html { redirect_to(post_path(var)) };Fi[[	@˚i7I"  def function
    var = Post.visible_from_author(@post.author, current_user).newer(@post)
    respond_to do |var|
      var.html { redirect_to(post_path(var)) }
      var.json { render("LITERAL" => (PostPresenter.new(var, current_user))) };Fi[	@˚i?I"  def function
    var = Post.visible_from_author(@post.author, current_user).older(@post)
    respond_to do |var|
      var.html { redirect_to(post_path(var)) }
      var.json { render("LITERAL" => (PostPresenter.new(var, current_user))) };Fi[	@Q#I"(var.html { redirect_to("LITERAL") };Fi[[	@"(i5I"˜      current_user.participate!(@status_message)
      flash["LITERAL"] = successful_mention_message if coming_from_profile_page?
      respond_to do |var|
        var.html { redirect_to("LITERAL") }
        var.mobile { redirect_to(stream_path) };Fi[	@"(i=I"à      end
    else
      respond_to do |var|
        var.html { redirect_to("LITERAL") }
        var.mobile { redirect_to(stream_path) };Fi[	@Z=I"@var = @contact.aspects;Fi[[	@∏iI"£      @var = (@person.!=(current_user.person) and @contact)
      @var = []
      if @contact then
        @var = @contact.aspects
        @var = @contact.contacts;Fi[	@"(iI"Æ      @var = current_user.contact_for(@person)
      @var = []
      if @contact then
        @var = @contact.aspects
        @var = @aspects_with_person.map { |var| var.id };Fi[	I"var.html do;F@Òi[[	@(iI"œ      respond_to do |var|
        var.js { render("LITERAL" => (I18n.t("STRING")), "LITERAL" => "LITERAL") }
        var.html do
          flash["LITERAL"] = I18n.t("STRING")
          redirect_to("LITERAL");Fi[	@∏iTI"Í      respond_to do |var|
        var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
        var.html do
          flash["LITERAL"] = I18n.t("STRING")
          if StatusMessage.find_by_guid(var.status_message_guid) then;Fi[	I"#       @data[key];F@&i[[	@[iKI"o    #
    #     def read_attribute_for_serialization(key)
    #       @data[key]
    #     end
    #   end;Fi[	@ñi!I"l    #
    #     def read_attribute_for_validation(key)
    #       @data[key]
    #     end
    #   end;Fi[	@ÒI"redirect_to("LITERAL");Fi[[	@(iI"¡        var.js { render("LITERAL" => (I18n.t("STRING")), "LITERAL" => "LITERAL") }
        var.html do
          flash["LITERAL"] = I18n.t("STRING")
          redirect_to("LITERAL")
        end;Fi[	@u;iFI"í  def function
    unless AppConfig.settings.invitations.open? then
      flash["LITERAL"] = I18n.t("STRING")
      redirect_to("LITERAL")
    end;Fi[	I")var = { "LITERAL" => (t("STRING")) };F@	i[[	@gDiI"õ    if var.save then
      disconnect_if_contact(var.person)
      var = { "LITERAL" => (t("STRING")) }
    else
      var = { "LITERAL" => (t("STRING")) };Fi[	@gDiI"¨  def function
    if current_user.blocks.find(params["LITERAL"]).delete then
      var = { "LITERAL" => (t("STRING")) }
    else
      var = { "LITERAL" => (t("STRING")) };Fi[	@dD@¸4i[[	@gDiI"ü    end
    respond_with do |var|
      var.html { redirect_to("LITERAL", var) }
      var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
    end;Fi[	@gDiI"ü    end
    respond_with do |var|
      var.html { redirect_to("LITERAL", var) }
      var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") }
    end;Fi[	I"#       @data = data;F@&i[[	@[iGI"[    #
    #     def initialize(data = {})
    #       @data = data
    #     end
    #;Fi[	@ñiI"[    #
    #     def initialize(data = {})
    #       @data = data
    #     end
    #;Fi[	I" render("LITERAL" => (true));F@	i[[	@ÙiMI"ü    end
    if (session["LITERAL"] == true) and request.format.html? then
      render("LITERAL" => (true))
    else
      if render("LITERAL" => (false)) then;Fi[	@˙i~I"»    if params["LITERAL"] then
      Webfinger.in_background(params["LITERAL"], "LITERAL" => (true))
      render("LITERAL" => (true))
    else
      render("LITERAL" => (true), "LITERAL" => "LITERAL");Fi[	I"#flash["LITERAL"] = t("STRING");F@	i[[	@u;i3I"j    end
    if var.empty? then
      flash["LITERAL"] = t("STRING")
    else
      if var.empty? then;Fi[	@ibI"¥    else
      if params["LITERAL"].present? and params["LITERAL"]["LITERAL"].present? then
        flash["LITERAL"] = t("STRING")
      else
        flash["LITERAL"] = t("STRING");Fi[	@å&@	i[[	@ÉiI"ï      @user.seed_aspects
      sign_in_and_redirect("LITERAL", @user)
      Rails.logger.info("STRING")
    else
      @user.errors.delete("LITERAL");Fi[	@î&i>I"ò    else
      if (self.target.nil? or self.target.author.!=(self.person)) then
        Rails.logger.info("STRING")
      else
        self.perform(var);Fi[	I"$#     def initialize(data = {});F@ÀDi[[	@[iFI"{    #     include ActiveModel::Validations
    #
    #     def initialize(data = {})
    #       @data = data
    #     end;Fi[	@ñiI"{    #     include ActiveModel::Validations
    #
    #     def initialize(data = {})
    #       @data = data
    #     end;Fi[	I"-@var = current_user.contact_for(@person);F@1 i[[	@˙iUI"ÿ      if current_user then
        @var = current_user.blocks.where("LITERAL" => (@person.id)).first
        @var = current_user.contact_for(@person)
        @var = []
        if @contact and params["LITERAL"].! then;Fi[	@"(iI"     if params["LITERAL"] and @var = Person.where("LITERAL" => (params["LITERAL"])).first then
      @var = "LITERAL"
      @var = current_user.contact_for(@person)
      @var = []
      if @contact then;Fi[	@¢DI"0@var = @aspects_with_person.map(&"LITERAL");Fi[[	@˙iXI"√        @var = []
        if @contact and params["LITERAL"].! then
          @var = @contact.aspects
          @var = @aspects_with_person.map(&"LITERAL")
          @var = @contact.contacts.count;Fi[	@˙iãI"      @var = @contact.contacts.paginate("LITERAL" => (params["LITERAL"]), "LITERAL" => ((params["LITERAL"] or "LITERAL")))
      @var = hashes_for_people(@contacts_of_contact, @aspects)
      @var = @contact.aspects
      @var = @aspects_with_person.map(&"LITERAL")
    else;Fi[	@ @ÂBi[[	@jiI"ï        #
        #   class Person
        #     include ActiveModel::Validations
        #     include ActiveModel::Validations::Callbacks
        #;Fi[	@ji6I"ï        #
        #   class Person
        #     include ActiveModel::Validations
        #     include ActiveModel::Validations::Callbacks
        #;Fi[	I"#   class MyClass;F@ i[[	@[iCI"à    # retrieve the value for a given attribute differently:
    #
    #   class MyClass
    #     include ActiveModel::Validations
    #;Fi[	@ñiI"n    # attribute differently:
    #
    #   class MyClass
    #     include ActiveModel::Validations
    #;Fi[	I"2@var = Person.find_by_guid(params["LITERAL"]);FI"if @person then;Fi[[	@˙iÖI"Ü  
  def function
    @var = Person.find_by_guid(params["LITERAL"])
    if @person then
      @var = current_user.contact_for(@person);Fi[	@∏iI"Ü  def function
    @var = "LITERAL"
    @var = Person.find_by_guid(params["LITERAL"])
    if @person then
      @var = @person.profile;Fi[	I"A@var = current_user.build_post("LITERAL", params["LITERAL"]);FI"if @photo.save then;Fi[[	@∏i+I"ø    rescuing_photo_errors do
      if remotipart_submitted? then
        @var = current_user.build_post("LITERAL", params["LITERAL"])
        if @photo.save then
          respond_to do |var|;Fi[	@∏iùI"‡    end
    params["LITERAL"]["LITERAL"] = file_handler(params)
    @var = current_user.build_post("LITERAL", params["LITERAL"])
    if @photo.save then
      var = current_user.aspects_from_ids(params["LITERAL"]["LITERAL"]);Fi[	I"Lvar = current_user.photos.where("LITERAL" => (params["LITERAL"])).first;F@Ÿ)i[[	@∏iOI"ç  
  def function
    var = current_user.photos.where("LITERAL" => (params["LITERAL"])).first
    if var then
      current_user.retract(var);Fi[	@∏ikI"¨  
  def function
    var = current_user.photos.where("LITERAL" => (params["LITERAL"])).first
    if var then
      if current_user.update_post(var, params["LITERAL"]) then;Fi[	@;@ïCi[[	@^iqI"e      #     end
      #
      #     def attributes
      #       instance_values
      #     end;Fi[	@aiÕI"e      #     end
      #
      #     def attributes
      #       instance_values
      #     end;Fi[	I"2require("active_support/core_ext/hash/slice");F@;i[[	@[iI"Ürequire("active_support/core_ext/hash/except")
require("active_support/core_ext/hash/slice")
module ActiveModel
  module Serialization;Fi[	@Äi I"Zrequire("active_support/core_ext/hash/slice")
module ActiveModel
  module Validations;Fi [	@44I"params["LITERAL"];Fi[[	@ÜiI"≤  ##### These methods need to go away once we pass publisher object into the partial ######
  def function
    if params["LITERAL"].present? then
      params["LITERAL"]
    else;Fi[	@ÜiI"^  
  def function
    if params["LITERAL"].present? then
      params["LITERAL"]
    else;Fi[	@õDI",var.mobile { redirect_to(stream_path) };Fi[[	@"(i6I"⁄      flash["LITERAL"] = successful_mention_message if coming_from_profile_page?
      respond_to do |var|
        var.html { redirect_to("LITERAL") }
        var.mobile { redirect_to(stream_path) }
        var.json do;Fi[	@"(i>I"«    else
      respond_to do |var|
        var.html { redirect_to("LITERAL") }
        var.mobile { redirect_to(stream_path) }
        var.json { render("LITERAL" => (true), "LITERAL" => "LITERAL") };Fi[	@™B@Òi[[	@i-I"µ        else
          if (var["LITERAL"] or var["LITERAL"]) then
            if @user.update_attributes(var) then
              flash["LITERAL"] = I18n.t("STRING")
            else;Fi[	@iEI"ø              else
                if var["LITERAL"] then
                  if @user.update_attributes(var) then
                    flash["LITERAL"] = I18n.t("STRING")
                  else;Fi[	I"0(var << [javascript_include_tag("STRING")]);FI"((var << [javascript_tag("STRING")]);Fi[[	@¨i?I"∏    if AppConfig.privacy.jquery_cdn? then
      var = Jquery::Rails::JQUERY_VERSION
      (var << [javascript_include_tag("STRING")])
      (var << [javascript_tag("STRING")])
    else;Fi[	@¨iDI"Ã      (var << [javascript_include_tag("STRING")])
    end
    (var << [javascript_include_tag("STRING")])
    (var << [javascript_tag("STRING")])
    (var << [javascript_tag("STRING")]) if Rails.env.test?;Fi[	@,E@	i[[	@ÜiI"ê  def function
    if params["LITERAL"].present? then
      params["LITERAL"]
    else
      defined? @stream ? (@stream.publisher.text) : (nil);Fi[	@ÜiI"ì  def function
    if params["LITERAL"].present? then
      params["LITERAL"]
    else
      defined? @stream ? (@stream.publisher.prefill) : (nil);Fi[	I"1#     has_secure_password validations: false;F@i[[	@TiGI"      #
      #   class User < ActiveRecord::Base
      #     has_secure_password validations: false
      #   end
      #;Fi[	@TiVI"      #
      #   class User < ActiveRecord::Base
      #     has_secure_password validations: false
      #   end
      #;Fi[	I"2var = process_newlines(var) if var["LITERAL"];F@Ri[[	@kiI"Õ    if var.respond_to?("LITERAL") then
      var = truncate(var.formatted_message("LITERAL" => (true)), "LITERAL" => (var["LITERAL"]))
      var = process_newlines(var) if var["LITERAL"]
      var
    else;Fi[	@kiI"ú    var["LITERAL"] ||= "LITERAL"
    var = truncate(var.text, "LITERAL" => (var["LITERAL"]))
    var = process_newlines(var) if var["LITERAL"]
    var
  end;Fi[	I"(#   class User < ActiveRecord::Base;F@NEi[[	@TiFI"∏      # Returns +self+ if the password is correct, otherwise +false+.
      #
      #   class User < ActiveRecord::Base
      #     has_secure_password validations: false
      #   end;Fi[	@TiUI"ï      # new password is not blank.
      #
      #   class User < ActiveRecord::Base
      #     has_secure_password validations: false
      #   end;Fi[	@¬,@ˇi[[	@ti	I"Ü  when "LITERAL", "STRING", "LITERAL" then
    "STRING".undent
  when "STRING", "STRING" then
    "STRING".undent
  when "STRING" then;Fi[	@tiI"u  when "STRING" then
    "STRING".undent
  when "STRING", "STRING" then
    "STRING".undent
  when "STRING" then;Fi[	@V/I"<var = unescape_interpolation(var["LITERAL"].strip, var);Fi[[	@œiOI"∞      when "STRING" then
        var = true
        if (var["LITERAL"] == "STRING") then
          var = unescape_interpolation(var["LITERAL"].strip, var)
          var = false;Fi[	@œiWI"Ã          var = true
          var = (var["LITERAL"] == "STRING")
          if (var["LITERAL"] == "STRING") then
            var = unescape_interpolation(var["LITERAL"].strip, var)
            var = false;Fi[	@V/I"3var = ["STRING", "STRING", "STRING", "STRING"];Fi[[	@=iÍI"       # reduce 42 omitted
      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          var = ["STRING", "STRING", "STRING", "STRING"]
          var = Node.new("LITERAL", var);Fi[	@=iÓI"           var = Node.new("LITERAL", var)
        else
          if (var["LITERAL"] == "STRING") then
            var = ["STRING", "STRING", "STRING", "STRING"]
            var = Node.new("LITERAL", var);Fi[	I"#@headers["LITERAL"] = "STRING";FI"b@headers["LITERAL"] = truncate(@comment.comment_email_subject, "LITERAL" => (TRUNCATION_LEN));Fi[[	I"Kprojects//diaspora_proj/mailers/notification_mailers/also_commented.rb;TiI"Ï      @var = Comment.find_by_id(var)
      if mail? then
        @headers["LITERAL"] = "STRING"
        @headers["LITERAL"] = truncate(@comment.comment_email_subject, "LITERAL" => (TRUNCATION_LEN))
        @headers["LITERAL"] = "STRING";Fi[	I"Lprojects//diaspora_proj/mailers/notification_mailers/comment_on_post.rb;TiI"‚    def function(var)
      @var = Comment.find(var)
      @headers["LITERAL"] = "STRING"
      @headers["LITERAL"] = truncate(@comment.comment_email_subject, "LITERAL" => (TRUNCATION_LEN))
      @headers["LITERAL"] = "STRING";Fi[	@xE@wEi[[	@{EiI"—      if mail? then
        @headers["LITERAL"] = "STRING"
        @headers["LITERAL"] = truncate(@comment.comment_email_subject, "LITERAL" => (TRUNCATION_LEN))
        @headers["LITERAL"] = "STRING"
      end;Fi[	@~EiI"‘      @var = Comment.find(var)
      @headers["LITERAL"] = "STRING"
      @headers["LITERAL"] = truncate(@comment.comment_email_subject, "LITERAL" => (TRUNCATION_LEN))
      @headers["LITERAL"] = "STRING"
    end;Fi[	I"var.text;FI"var.html;Fi[[	@{i I"U    var.merge!(var)
    mail(var) do |var|
      var.text
      var.html
    end;Fi[	@{iYI"x    with_recipient_locale do
      mail(@notification.headers) do |var|
        var.text
        var.html
      end;Fi[	@◊,@±i[[	@•iI"o    
    module Erb
      class << self
        def function(var)
          super.sub("LITERAL", "STRING");Fi[	@·iPI"b  end
  
  class << self
    def function(var)
      var.nil? ? (@bottle_sha1) : (@var = var);Ti[	I"#   ==(other);F@i[[	@?iI"{    #
    # :call-seq:
    #   ==(other)
    #
    # Equivalent to <tt>String#==</tt>. Returns +true+ if the class name and;Fi[	@?i2I"\    #
    # :call-seq:
    #   ==(other)
    #
    # Equivalent to <tt>String#<=></tt>.;Fi[	@@ïEi[[	@?iI"E    # :method: ==
    #
    # :call-seq:
    #   ==(other)
    #;Fi[	@?i1I"F    # :method: <=>
    #
    # :call-seq:
    #   ==(other)
    #;Fi[	@∫@@i[[	@ci>I"z        end
        
        ##
        # This is the provider that Fog uses for the Cloud Files
        def function;Fi[	@fi5I"z        end
        
        ##
        # This is the provider that Fog uses for the Cloud Files
        def function;Fi[	I"case self.service;F@Ei[[	@êiZI"k  # @return [String]
  def function
    case self.service
    when "STRING" then
      self.identifier;Fi[	@êifI"k  # @return [String]
  def function
    case self.service
    when "STRING" then
      self.identifier;Fi[	@µ=@Ei[[	@êi\I"u    case self.service
    when "STRING" then
      self.identifier
    when "STRING" then
      I18n.t("STRING");Fi[	@êihI"j    case self.service
    when "STRING" then
      self.identifier
    when "STRING" then
      false;Fi[	@∫@∆?i[[	@`iI"s      attr_accessor("LITERAL")
      
      ##
      # Amazon Simple Storage Service (S3) Credentials
      ##;Fi[	@fiI"}        attr_accessor("LITERAL")
        
        ##
        # Amazon Simple Storage Service (S3) Credentials
        ##;Fi[	@∫@ø?i[[	@[iwI"p      end
      
      ##
      # Returns Rsync syntax for defining a port to connect to
      def function;Fi[	@liMI"z        end
        
        ##
        # Returns Rsync syntax for defining a port to connect to
        def function;Fi[	I"def self.perform(var);FI"var = Invitation.find(var);Fi[[	@ëi
I"ë      @var = "LITERAL"
      
      def self.perform(var)
        var = Invitation.find(var)
        I18n.with_locale(var.language) { var.send! };Fi[	I"=projects//diaspora_proj/models/jobs/resend_invitation.rb;Ti	I"j    @var = "LITERAL"
    
    def self.perform(var)
      var = Invitation.find(var)
      var.resend;Fi[	@∫@™?i[[	@[iiI"Ä      end
      
      ##
      # Removes the previously created @password_file
      # (temporary file containing the password);Fi[	@lidI"ä        end
        
        ##
        # Removes the previously created @password_file
        # (temporary file containing the password);Fi[	@∫@ú?i[[	@[i^I"ô      end
      
      ##
      # Writes the provided password to a temporary file so that
      # the rsync utility can read the password from this file;Fi[	@liYI"£        end
        
        ##
        # Writes the provided password to a temporary file so that
        # the rsync utility can read the password from this file;Fi[	I""# NOTE API V1 to be extracted;F@Ei[[	@∏i*I"å  before_validation("LITERAL")
  
  # NOTE API V1 to be extracted
  def function
    diaspora_handle.downcase! unless diaspora_handle.blank?;Fi[	@ i;I"√  after_create { queue_processing_job if self.author.local? }
  
  # NOTE API V1 to be extracted
  def function
    if self.status_message_guid and self.status_message.text_and_photos_blank? then;Fi[	I"%scope("LITERAL", lambda do |var|;FI"Ejoins("LITERAL").where("LITERAL" => ({ "LITERAL" => (var.id) }));Fi[[	@ªi&I"}  end)
  
  scope("LITERAL", lambda do |var|
    joins("LITERAL").where("LITERAL" => ({ "LITERAL" => (var.id) }))
  end);Fi[	@ﬁ)i"I"£  after_create("LITERAL", "LITERAL" => "LITERAL")
  
  scope("LITERAL", lambda do |var|
    joins("LITERAL").where("LITERAL" => ({ "LITERAL" => (var.id) }))
  end);Fi[	I"&def self.diaspora_initialize(var);FI" var = self.new(var.to_hash);Fi[[	@ iMI"q  end
  
  def self.diaspora_initialize(var)
    var = self.new(var.to_hash)
    var.author = var["LITERAL"];Fi[	@ªimI"q  end
  
  def self.diaspora_initialize(var)
    var = self.new(var.to_hash)
    var.author = var["LITERAL"];Fi[	@ÊEI" var.author = var["LITERAL"];Fi[[	@ iNI"ò  
  def self.diaspora_initialize(var)
    var = self.new(var.to_hash)
    var.author = var["LITERAL"]
    var.public = var["LITERAL"] if var["LITERAL"];Fi[	@ªinI"ò  
  def self.diaspora_initialize(var)
    var = self.new(var.to_hash)
    var.author = var["LITERAL"]
    var.public = var["LITERAL"] if var["LITERAL"];Fi[	@ÌEI"2var.public = var["LITERAL"] if var["LITERAL"];Fi[[	@ iOI"»  def self.diaspora_initialize(var)
    var = self.new(var.to_hash)
    var.author = var["LITERAL"]
    var.public = var["LITERAL"] if var["LITERAL"]
    var.pending = var["LITERAL"] if var["LITERAL"];Fi[	@ªioI"»  def self.diaspora_initialize(var)
    var = self.new(var.to_hash)
    var.author = var["LITERAL"]
    var.public = var["LITERAL"] if var["LITERAL"]
    var.pending = var["LITERAL"] if var["LITERAL"];Fi[	@ÙEI"3var.pending = var["LITERAL"] if var["LITERAL"];Fi[[	@ iPI"Ÿ    var = self.new(var.to_hash)
    var.author = var["LITERAL"]
    var.public = var["LITERAL"] if var["LITERAL"]
    var.pending = var["LITERAL"] if var["LITERAL"]
    var.diaspora_handle = var.author.diaspora_handle;Fi[	@ªipI"Ÿ    var = self.new(var.to_hash)
    var.author = var["LITERAL"]
    var.public = var["LITERAL"] if var["LITERAL"]
    var.pending = var["LITERAL"] if var["LITERAL"]
    var.diaspora_handle = var.author.diaspora_handle;Fi[	@˚EI"5var.diaspora_handle = var.author.diaspora_handle;Fi[[	@ iQI"Ì    var.author = var["LITERAL"]
    var.public = var["LITERAL"] if var["LITERAL"]
    var.pending = var["LITERAL"] if var["LITERAL"]
    var.diaspora_handle = var.author.diaspora_handle
    var.random_string = SecureRandom.hex("LITERAL");Fi[	@ªiqI"¡    var.author = var["LITERAL"]
    var.public = var["LITERAL"] if var["LITERAL"]
    var.pending = var["LITERAL"] if var["LITERAL"]
    var.diaspora_handle = var.author.diaspora_handle
    var;Fi[	@ﬁE@Î"i[[	@ªi'I"y  
  scope("LITERAL", lambda do |var|
    joins("LITERAL").where("LITERAL" => ({ "LITERAL" => (var.id) }))
  end)
  ;Fi[	@ﬁ)i#I"y  
  scope("LITERAL", lambda do |var|
    joins("LITERAL").where("LITERAL" => ({ "LITERAL" => (var.id) }))
  end)
  ;Fi[	I"self["LITERAL"];F@	i[[	@¢i[I"†  def function(var)
    var = if (var == "LITERAL") and self["LITERAL"] then
      self["LITERAL"]
    else
      if (var == "LITERAL") and self["LITERAL"] then;Fi[	@¢i^I"}    else
      if (var == "LITERAL") and self["LITERAL"] then
        self["LITERAL"]
      else
        self["LITERAL"];Fi[	@∫@ç?i[[	@[iI"a      ##
      # Server credentials
      ##
      # Server IP Address and SSH port
      ##;Fi[	@liI"k        ##
        # Server credentials
        ##
        # Server IP Address and SSH port
        ##;Fi[	@∫@?i[[	@Xi!I"_      end
      
      ##
      # Establishes a connection to Amazon S3
      def function;Fi[	@`i%I"_      end
      
      ##
      # Establishes a connection to Amazon S3
      def function;Fi[	I"if self.target.nil? then;F@å&i[[	@#i.I"l  
  def function(var, var)
    if self.target.nil? then
      Rails.logger.info("STRING")
      return;Fi[	@–iTI"l  
  def function(var, var)
    if self.target.nil? then
      Rails.logger.info("STRING")
      return;Fi[	@∫I"!# Campfire account's room id;Fi[[	@CiI"{      ##
      # Campfire account's subdomain
      ##
      # Campfire account's room id
      def function(var, var);Fi[	@Ci\I"q        ##
        # Campfire account's subdomain
        ##
        # Campfire account's room id
        ##;Fi[	I"%# @note Used for XML marshalling;F@i[[	@i&I"T  end
  
  # @note Used for XML marshalling
  # @return [String]
  def function;Fi[	@i0I"T  end
  
  # @note Used for XML marshalling
  # @return [String]
  def function;Fi[	@å7I"var = self.statement;Fi[[	@ÆiI"Ω        def function
          if owner.is_a?(StateMachine::Machine) then
            var = self
            var = self.statement
            var = extract_node_names(var.parameters(false));Fi[	@≥iI"Ω        def function
          if owner.is_a?(StateMachine::Machine) then
            var = self
            var = self.statement
            var = extract_node_names(var.parameters(false));Fi[	@ï7@ACi[[	@îiI"ì  # @return [Array<Integer>]
  def function(var, var)
    var = prep_opts(var, var)
    var["LITERAL"] = var
    var["LITERAL"] ||= self.aspect_ids;Fi[	@îi$I"ù  def function(var, var)
    var = var.table_name
    var = prep_opts(var, var)
    var["LITERAL"] = var
    var = construct_shareable_from_others_query(var);Fi[	I"(var["LITERAL"] = var.url("LITERAL");F@DFi[[	@√iEI"Ê    if var = var.delete("LITERAL") then
      var.update_attributes("LITERAL" => (false)) if var.pending
      var["LITERAL"] = var.url("LITERAL")
      var["LITERAL"] = var.url("LITERAL")
      var["LITERAL"] = var.url("LITERAL");Fi[	@√iFI"∆      var.update_attributes("LITERAL" => (false)) if var.pending
      var["LITERAL"] = var.url("LITERAL")
      var["LITERAL"] = var.url("LITERAL")
      var["LITERAL"] = var.url("LITERAL")
    end;Fi[	I"9self.aspects.create("LITERAL" => (I18n.t("STRING")));F@KFi[[	@√ipI"º  
  def function
    self.aspects.create("LITERAL" => (I18n.t("STRING")))
    self.aspects.create("LITERAL" => (I18n.t("STRING")))
    self.aspects.create("LITERAL" => (I18n.t("STRING")));Fi[	@√iqI"¯  def function
    self.aspects.create("LITERAL" => (I18n.t("STRING")))
    self.aspects.create("LITERAL" => (I18n.t("STRING")))
    self.aspects.create("LITERAL" => (I18n.t("STRING")))
    var = self.aspects.create("LITERAL" => (I18n.t("STRING")));Fi[	@∫@Í=i[[	@CiI"n      ##
      # Campfire api authentication token
      ##
      # Campfire account's subdomain
      ##;Fi[	@CiZI"|        ##
        # Campfire api authentication api_token
        ##
        # Campfire account's subdomain
        ##;Fi[	@∫I"C# This is called as part of the procedure run by the Packager.;Fi[[	@≠iPI"†      end
      
      ##
      # This is called as part of the procedure run by the Packager.
      # It sets up the needed options to pass to the gpg command,;Fi[	@Ói$I"§      end
      
      ##
      # This is called as part of the procedure run by the Packager.
      # It sets up the needed options to pass to the openssl command,;Fi[	@¨3I"class Compiler;Fi[[	@“iI"Hrequire("cgi")
module Haml
  class Compiler
    include(Haml::Util);Fi[	@ÿi
I"}require("haml/helpers/action_view_extensions")
require("haml/helpers/xss_mods")
module Haml
  class Compiler
    def function;Fi[	@¨3I"module Filters;Fi[[	@•iI"Brequire("tilt")
module Haml
  module Filters
    extend(self);Fi[	@ài I"[module Haml
  module Filters
    class SassRailsTemplate < ::Sass::Rails::SassTemplate;Fi [	I"<# @return [Boolean] Whether or not the format is HTML5.;F@Ei[[	@œi7I"Ç    end
    
    # @return [Boolean] Whether or not the format is HTML5.
    def function
      (@options["LITERAL"] == "LITERAL");Fi[	@1"i≠I"z    end
    
    # @return [Boolean] Whether or not the format is HTML5.
    def function
      (format == "LITERAL");Fi[	I"I# @param tab_change [Fixnum] The number of tabs by which to increase;FI"/#   or decrease the document's indentation;Fi[[	@œibI"˝    #
    # @param text [String] The text to append
    # @param tab_change [Fixnum] The number of tabs by which to increase
    #   or decrease the document's indentation
    # @param dont_tab_up [Boolean] If true, don't indent the first line of `text`;Fi[	@œipI"√    # Modifies the indentation of the document.
    #
    # @param tab_change [Fixnum] The number of tabs by which to increase
    #   or decrease the document's indentation
    def function(var);Fi[	I"&if (RUBY_VERSION < "STRING") then;F@±i[[	@<i—I"h    private
    
    if (RUBY_VERSION < "STRING") then
      def function(var)
        # do nothing;Fi[	@‰iúI"j    end
    
    if (RUBY_VERSION < "STRING") then
      def function(var)
        return var.inspect;Fi[	I"1if (@node.value["LITERAL"] == "STRING") then;F@Fi[[	@“iÓI"Ö      else
        if @options.xhtml? then
          if (@node.value["LITERAL"] == "STRING") then
            "STRING"
          else;Fi[	@“iÒI"Ñ            "STRING"
          else
            if (@node.value["LITERAL"] == "STRING") then
              "STRING"
            else;Fi[	I" case @node.value["LITERAL"];F@Ei[[	@“iÙI"ã              "STRING"
            else
              case @node.value["LITERAL"]
              when "STRING" then
                "STRING";Fi[	@“iI"å        else
          if @options.html4? then
            case @node.value["LITERAL"]
            when "STRING" then
              "STRING";Fi[	I"var, var = var;F@~&i[[	@·i<I"ã        var.!=(@machine) and var.events[qualified_name, "LITERAL"]
      end) then
        var, var = var
        warn("STRING")
      else;Fi[	@ÌiKI"ö        end
        if var = var.detect { |var, var| var.attribute.!=(var.attribute) } then
          var, var = var
          warn("STRING")
        else;Fi[	I"F# See {file:REFERENCE.md#options the Haml options documentation}.;F@i[[	@<iI"é    
    # The Haml::Options instance.
    # See {file:REFERENCE.md#options the Haml options documentation}.
    #
    # @return Haml::Options;Fi[	@1"i‹I"¬    # it can be `Kernel#eval`ed to get the same result back.
    #
    # See {file:REFERENCE.md#options the Haml options documentation}.
    #
    # @return [{Symbol => Object}] The options hash;Fi[	I"5# Note that Haml modifies the evaluation context;FI"K# (either the scope object or the `self` object of the scope binding).;Fi[[	@<iAI"    # otherwise, Haml just uses its `#instance_eval` context.
    #
    # Note that Haml modifies the evaluation context
    # (either the scope object or the `self` object of the scope binding).
    # It extends {Haml::Helpers}, and various instance variables are set;Fi[	@<i¬I"-    #     obj.render(:foo => "Hello!") #=> NameError: undefined local variable or method `foo'
    #
    # Note that Haml modifies the evaluation context
    # (either the scope object or the `self` object of the scope binding).
    # It extends {Haml::Helpers}, and various instance variables are set;Fi[	@†FI"I# It extends {Haml::Helpers}, and various instance variables are set;Fi[[	@<iBI"Ò    #
    # Note that Haml modifies the evaluation context
    # (either the scope object or the `self` object of the scope binding).
    # It extends {Haml::Helpers}, and various instance variables are set
    # (all prefixed with `haml_`).;Fi[	@<i√I"Ò    #
    # Note that Haml modifies the evaluation context
    # (either the scope object or the `self` object of the scope binding).
    # It extends {Haml::Helpers}, and various instance variables are set
    # (all prefixed with `haml_`).;Fi[	@ßFI"## (all prefixed with `haml_`).;Fi[[	@<iCI"˛    # Note that Haml modifies the evaluation context
    # (either the scope object or the `self` object of the scope binding).
    # It extends {Haml::Helpers}, and various instance variables are set
    # (all prefixed with `haml_`).
    # For example:;Fi[	@<iƒI"Ò    # Note that Haml modifies the evaluation context
    # (either the scope object or the `self` object of the scope binding).
    # It extends {Haml::Helpers}, and various instance variables are set
    # (all prefixed with `haml_`).
    #;Fi[	I"4if (var.is_a?(Binding) or var.is_a?(Proc)) then;FI"var = eval("STRING", var);Fi[[	@<ikI"‘      end
      var = Haml::Buffer.new(var, @options.for_buffer)
      if (var.is_a?(Binding) or var.is_a?(Proc)) then
        var = eval("STRING", var)
        var = var.instance_eval { binding } if block_given?;Fi[	@<ióI"∂    # @return [Proc] The proc that will run the template
    def function(var, var)
      if (var.is_a?(Binding) or var.is_a?(Proc)) then
        var = eval("STRING", var)
      else;Fi[	I" rescue ::SyntaxError => var;FI"$raise(SyntaxError, var.message);Fi[[	@<iyI"≈      begin
        eval(@compiler.precompiled_with_return_value, var, @options["LITERAL"], @options["LITERAL"])
      rescue ::SyntaxError => var
        raise(SyntaxError, var.message)
      end);Fi[	@<iüI"‹      begin
        eval((("STRING" + compiler.precompiled_with_ambles(var)) + "STRING"), var, @options["LITERAL"], @options["LITERAL"])
      rescue ::SyntaxError => var
        raise(SyntaxError, var.message)
      end;Fi[	I"1# However, due to an unfortunate Ruby quirk,;FI"F# the local variables which can be assigned must be pre-declared.;Fi[[	@<iÑI"    #
    # The first argument of the returned proc is a hash of local variable names to values.
    # However, due to an unfortunate Ruby quirk,
    # the local variables which can be assigned must be pre-declared.
    # This is done with the `local_names` argument.;Fi[	@<i≥I"    #
    # The first argument of the defined method is a hash of local variable names to values.
    # However, due to an unfortunate Ruby quirk,
    # the local variables which can be assigned must be pre-declared.
    # This is done with the `local_names` argument.;Fi[	@∆FI"4# This is done with the `local_names` argument.;Fi[[	@<iÖI"    # The first argument of the returned proc is a hash of local variable names to values.
    # However, due to an unfortunate Ruby quirk,
    # the local variables which can be assigned must be pre-declared.
    # This is done with the `local_names` argument.
    # For example:;Fi[	@<i¥I"    # The first argument of the defined method is a hash of local variable names to values.
    # However, due to an unfortunate Ruby quirk,
    # the local variables which can be assigned must be pre-declared.
    # This is done with the `local_names` argument.
    # For example:;Fi[	@ÕF@vi[[	@<iÜI"√    # However, due to an unfortunate Ruby quirk,
    # the local variables which can be assigned must be pre-declared.
    # This is done with the `local_names` argument.
    # For example:
    #;Fi[	@<iµI"√    # However, due to an unfortunate Ruby quirk,
    # the local variables which can be assigned must be pre-declared.
    # This is done with the `local_names` argument.
    # For example:
    #;Fi[	I"=# @param args [Array<String>] The command-line arguments;F@±i[[	@·iI"â  module Exec
    class Generic
      # @param args [Array<String>] The command-line arguments
      def function(var)
        @var = var;Fi[	@·iùI"Ç    
    class Haml < Generic
      # @param args [Array<String>] The command-line arguments
      def function(var)
        super;Fi[	I"!# @param opts [OptionParser];F@±i[[	@·iGI"®      # so they can add their own options.
      #
      # @param opts [OptionParser]
      def function(var)
        var.on("STRING", "STRING", "LITERAL", "STRING") do;Fi[	@·ißI"É      # Tells optparse how to parse the arguments.
      #
      # @param opts [OptionParser]
      def function(var)
        super;Fi[	I"E# @param text [String] The source text for the filter to process;FI"+# @return [String] The filtered result;Fi[[	@•iNI"˝      # If \{#compile} is overridden, however, \{#render} doesn't need to be.
      #
      # @param text [String] The source text for the filter to process
      # @return [String] The filtered result
      # @raise [Haml::Error] if it's not overridden;Fi[	@•iYI"“      #
      # @see #render
      # @param text [String] The source text for the filter to process
      # @return [String] The filtered result
      # @raise [Haml::Error] if it or \{#render} isn't overridden;Fi[	I")if contains_interpolation?(var) then;FI"+var = unescape_interpolation(var, var);Fi[[	@œi^I"ì          end
        else
          if contains_interpolation?(var) then
            var = unescape_interpolation(var, var)
            var = true;Fi[	@œieI"â        end
      else
        if contains_interpolation?(var) then
          var = unescape_interpolation(var, var)
          var = true;Fi[	@∫@s<i[[	@ki!I"í      ##
      # Tables to skip while dumping the database
      ##
      # Tables to dump, tables that aren't specified won't get dumped
      ##;Fi[	@ni I"í      ##
      # Tables to skip while dumping the database
      ##
      # Tables to dump, tables that aren't specified won't get dumped
      ##;Fi[	I"$# @see Base#render_with_options;F@„
i[[	@•ióI"î      include(Base)
      
      # @see Base#render_with_options
      def function(var, var)
        var = var["LITERAL"] ? ("STRING") : ("STRING");Fi[	@•ißI"î      include(Base)
      
      # @see Base#render_with_options
      def function(var, var)
        var = var["LITERAL"] ? ("STRING") : ("STRING");Fi[	I"3var = var["LITERAL"] ? ("STRING") : ("STRING");FI"H(var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING");Fi[[	@•iôI"‹      # @see Base#render_with_options
      def function(var, var)
        var = var["LITERAL"] ? ("STRING") : ("STRING")
        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING")
        var = "STRING";Fi[	@•i©I"‹      # @see Base#render_with_options
      def function(var, var)
        var = var["LITERAL"] ? ("STRING") : ("STRING")
        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING")
        var = "STRING";Fi[	@G@ni[[	@•iöI"‚      def function(var, var)
        var = var["LITERAL"] ? ("STRING") : ("STRING")
        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING")
        var = "STRING"
        (var << "STRING") if var["LITERAL"];Fi[	@•i™I"‚      def function(var, var)
        var = var["LITERAL"] ? ("STRING") : ("STRING")
        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING")
        var = "STRING"
        (var << "STRING") if var["LITERAL"];Fi[	I"module ActionView;F@≠3i[[	I"?projects//haml_proj/haml/helpers/rails_323_textarea_fix.rb;Ti I"@module ActionView
  module Helpers
    module FormTagHelper;Fi [	@cihI"J  end
end
module ActionView
  module Helpers
    module CaptureHelper;Fi[	@">@„
i[[	@ui-I"{  
  module Helpers
    module CaptureHelper
      def function(var, var)
        if Haml::Helpers.block_is_haml?(var) then;Fi[	@cijI"ñmodule ActionView
  module Helpers
    module CaptureHelper
      def function(var, var)
        var = with_output_buffer_without_haml_xss(*var, &var);Fi[	@∫@l<i[[	@kiI"n      ##
      # Connectivity options
      ##
      # Tables to skip while dumping the database
      ##;Fi[	@niI"n      ##
      # Connectivity options
      ##
      # Tables to skip while dumping the database
      ##;Fi[	I"3# Input is escaped, output is always HTML safe;F@„
i[[	@ci+I"∫      end
      
      # Input is escaped, output is always HTML safe
      def function(var, var)
        Haml::Util.html_safe(precede_without_haml_xss(haml_xss_html_escape(var), &var));Fi[	@ci0I"∫      end
      
      # Input is escaped, output is always HTML safe
      def function(var, var)
        Haml::Util.html_safe(succeed_without_haml_xss(haml_xss_html_escape(var), &var));Fi[	@3I"strenc(var);Fi[[	@LijI"q      when Array then
        arrenc(var)
      when String then
        strenc(var)
      when Numeric then;Fi[	@LiÉI"_    def function(var)
      case var
      when String then
        strenc(var)
      else;Fi[	I"*#   Escapes newlines within a string.;F@i[[	@’iXI"Œ    #
    # @overload find_and_preserve(input, tags = haml_buffer.options[:preserve])
    #   Escapes newlines within a string.
    #
    #   @param input [String] The string within which to escape newlines;Fi[	@’imI"¢    #
    # @overload perserve(input)
    #   Escapes newlines within a string.
    #
    #   @param input [String] The string within which to escape all newlines;Fi[	I"6#   Escapes newlines within a block of Haml code.;F@i[[	@’i\I"    #   @param input [String] The string within which to escape newlines
    # @overload find_and_preserve(tags = haml_buffer.options[:preserve])
    #   Escapes newlines within a block of Haml code.
    #
    #   @yield The block within which to escape newlines;Fi[	@’iqI"⁄    #   @param input [String] The string within which to escape all newlines
    # @overload perserve
    #   Escapes newlines within a block of Haml code.
    #
    #   @yield The block within which to escape newlines;Fi[	@∫I"<# Creates a new instance of the MongoDB database object;Fi[[	@∫iI"±      include(Backup::Configuration::Helpers)
      
      ##
      # Creates a new instance of the MongoDB database object
      # * Called using super(model) from subclasses *;Fi[	@Ii.I"≠      ##
      # 'lock' dump meaning wrapping mongodump with fsync & lock
      ##
      # Creates a new instance of the MongoDB database object
      def function(var, var);Fi[	@k3@i[[	@’iîI"w    #       <h3>Description</h3>
    #       <p>A book about all the stuff.</p>
    #     </li>
    #
    # While:;Fi[	@’i®I"    #     <li class='nav' role='nav'>
    #       <a href='#'>FAQ</a>
    #     </li>
    #
    #  `[[class", "nav"], [role", "nav"]]` could have been used instead of `{class: "nav", role: "nav"}` (or any enumerable collection where each pair of items responds to #to_s);Fi[	@∫@C<i[[	@UiI"^        end
        
        ##
        # Used only within the specs
        def function;Fi[	@
9iI"T      end
      
      ##
      # Used only within the specs
      def function;Fi[	@∫@’<i[[	@∞iI"Ÿ      attr_deprecate("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => (lambda { |var, var| var.level = "LITERAL" if var }))
      
      ##
      # Specify the level of compression to use.
      #;Fi[	@≥iI"Ÿ      attr_deprecate("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => (lambda { |var, var| var.level = "LITERAL" if var }))
      
      ##
      # Specify the level of compression to use.
      #;Fi[	I"#     %strong baz;F@i[[	@’i€I"V    #     %p bar
    #     - tab_down
    #     %strong baz
    #
    # Produces:;Fi[	@’i˙I"_    #     - with_tabs(2) do
    #       %p bar
    #     %strong baz
    #
    # Produces:;Fi[	I"#     <strong>baz</strong>;F@i[[	@’i·I"¢    #     <h1>foo</h1>
    #       <p>bar</p>
    #     <strong>baz</strong>
    #
    # @param i [Fixnum] The number of tabs by which to increase the indentation;Fi[	@’i I"_    #     <h1>foo</h1>
    #         <p>bar</p>
    #     <strong>baz</strong>
    #
    #;Fi[	I""# with no whitespace between.;F@vi[[	@’i,I"~    
    # Prepends a string to the beginning of a Haml block,
    # with no whitespace between.
    # For example:
    #;Fi[	@’i=I"w    
    # Appends a string to the end of a Haml block,
    # with no whitespace between.
    # For example:
    #;Fi[	I"haml_concat(var);FI"tab_up;Fi[[	@’i◊I"Ñ        var = var.to_s
        if var.include?("STRING") then
          haml_concat(var)
          tab_up
          haml_concat(var);Fi[	@’iËI"T        return var
      end
      haml_concat(var)
      tab_up
      var.call;Fi[	I"tab_down;FI"haml_concat("STRING");Fi[[	@’i⁄I"p          tab_up
          haml_concat(var)
          tab_down
          haml_concat("STRING")
        else;Fi[	@’iÎI"U      tab_up
      var.call
      tab_down
      haml_concat("STRING")
      var;Fi[	I"2# @param text [String] The string to sanitize;FI",# @return [String] The sanitized string;Fi[[	@’i˙I"™    # this won't escape text declared as "safe".
    #
    # @param text [String] The string to sanitize
    # @return [String] The sanitized string
    def function(var);Fi[	@’i	I"™    # that is already part of an escaped entity.
    #
    # @param text [String] The string to sanitize
    # @return [String] The sanitized string
    def function(var);Fi[	@ÇG@±i[[	@’i˚I"é    #
    # @param text [String] The string to sanitize
    # @return [String] The sanitized string
    def function(var)
      var = "STRING";Fi[	@’i
I"é    #
    # @param text [String] The string to sanitize
    # @return [String] The sanitized string
    def function(var)
      var = "STRING";Fi[	I"-var = if (RUBY_VERSION >= "STRING") then;FI"HRegexp.new(var.force_encoding(var.encoding), Regexp::FIXEDENCODING);Fi[[	@’i˛I"∞    def function(var)
      var = "STRING"
      var = if (RUBY_VERSION >= "STRING") then
        Regexp.new(var.force_encoding(var.encoding), Regexp::FIXEDENCODING)
      else;Fi[	@’iI"∞    def function(var)
      var = "STRING"
      var = if (RUBY_VERSION >= "STRING") then
        Regexp.new(var.force_encoding(var.encoding), Regexp::FIXEDENCODING)
      else;Fi[	@êG@	i[[	@’iˇI"≤      var = "STRING"
      var = if (RUBY_VERSION >= "STRING") then
        Regexp.new(var.force_encoding(var.encoding), Regexp::FIXEDENCODING)
      else
        Regexp.new(var);Fi[	@’iI"≤      var = "STRING"
      var = if (RUBY_VERSION >= "STRING") then
        Regexp.new(var.force_encoding(var.encoding), Regexp::FIXEDENCODING)
      else
        Regexp.new(var);Fi[	I"require("strscan");F@¨3i[[	@œi I"2require("strscan")
module Haml
  class Parser;Fi [	@‰iI"Trequire("set")
require("stringio")
require("strscan")
module Haml
  module Util;Fi[	I"case var["LITERAL"];F@Ei[[	@œi¸I"t      var = {}
      while var do
        case var["LITERAL"]
        when "STRING" then
          break if var;Fi[	@LiÇI"©    # it is the lexeme.
    def function(var)
      case var["LITERAL"]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	I"var = block_keyword(var);FI"!check_push_script_stack(var);Fi[[	@œiI"      var = handle_ruby_multiline(var)
      var = @options["LITERAL"] if var.nil?
      var = block_keyword(var)
      check_push_script_stack(var)
      ParseNode.new("LITERAL", @index, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var));Fi[	@œi!I"≠      end
      var = handle_ruby_multiline(var)
      var = block_keyword(var)
      check_push_script_stack(var)
      if ["STRING", "STRING", "STRING"].include?(var) then;Fi[	@iE@º=i[[	@œiPI"£        var = true
        if (var["LITERAL"] == "STRING") then
          var = unescape_interpolation(var["LITERAL"].strip, var)
          var = false
        end;Fi[	@œiXI"∆          var = (var["LITERAL"] == "STRING")
          if (var["LITERAL"] == "STRING") then
            var = unescape_interpolation(var["LITERAL"].strip, var)
            var = false
          else;Fi[	@ÒF@'*i[[	@œi_I"ù        else
          if contains_interpolation?(var) then
            var = unescape_interpolation(var, var)
            var = true
            var = false;Fi[	@œifI"ì      else
        if contains_interpolation?(var) then
          var = unescape_interpolation(var, var)
          var = true
          var = false;Fi[	I"!var = StringScanner.new(var);FI",while var.skip_until(HIGH_BIT_RANGE) do;Fi[[	@ﬁ"i
I"Å  
  def self.valid?(var)
    var = StringScanner.new(var)
    while var.skip_until(HIGH_BIT_RANGE) do
      var.pos -= "LITERAL";Fi[	@ﬁ"iI"í  
  def self.clean!(var)
    var = StringScanner.new(var)
    while var.skip_until(HIGH_BIT_RANGE) do
      var = var.pos = (var.pos - "LITERAL");Fi[	I"+((var << "STRING") << @next_line.text);F@ı@i[[	@œi!I"Á      rescue SyntaxError => var
        if (var.strip["LITERAL"] == "STRING") and (var.message == Error.message("LITERAL")) then
          ((var << "STRING") << @next_line.text)
          var = (var + "LITERAL")
          next_line;Fi[	@œi<I"õ        var.scan("LITERAL")
        if var.eos? then
          ((var << "STRING") << @next_line.text)
          var = (var + "LITERAL")
          next_line;Fi[	I"var[var] = var;F@‚>i[[	@LiBI"„      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      var, var, var = pairparse(var)
      var[var] = var
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      loop do;Fi[	@LiGI"∏        var = eat("STRING", var)
        var, var, var = pairparse(var)
        var[var] = var
        return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      end;Fi[	I" break if (var == "LITERAL");FI"next if var.strip.empty?;Fi[[	@œiíI"º      var.text.slice!("LITERAL")
      while var = raw_next_line.first do
        break if (var == "LITERAL")
        next if var.strip.empty?
        break unless is_multiline?(var.strip);Fi[	@œi•I"õ      begin
        var = raw_next_line.first
        break if (var == "LITERAL")
        next if var.strip.empty?
        ((var << "STRING") << var.strip);Fi[	@&$@i[[	@ÊiAI"ë      # @param value [Object] The value your object defaults to. Nil if not provided.
      #
      # @example
      #
      #   class MyStrategy;Fi[	@Êi>I"û    # evaluates to true when you would like to skip info.
    #
    # @example
    #
    #   use MyStrategy, :skip_info => lambda{|uid| User.find_by_uid(uid)};Fi[	I"var = Set.new;FI"3var.each { |var| (var << var.patch_filename) };Fi[[	@Íi3I"µ    var = Patches.new(var)
    assert_equal("LITERAL", var.patches.length)
    var = Set.new
    var.each { |var| (var << var.patch_filename) }
    assert_equal("LITERAL", var.size);Fi[	@Íi<I"µ    var = Patches.new(var)
    assert_equal("LITERAL", var.patches.length)
    var = Set.new
    var.each { |var| (var << var.patch_filename) }
    assert_equal("LITERAL", var.size);Fi[	I"E# @yield [msg] A block in which an encoding error can be raised.;FI"2#   Only yields if there is an encoding error;Fi[[	@‰icI"      #
      # @param str [String] The string of which to check the encoding
      # @yield [msg] A block in which an encoding error can be raised.
      #   Only yields if there is an encoding error
      # @yieldparam msg [String] The error message to be raised;Fi[	@‰iãI"      #
      # @param str [String] The Haml template of which to check the encoding
      # @yield [msg] A block in which an encoding error can be raised.
      #   Only yields if there is an encoding error
      # @yieldparam msg [String] The error message to be raised;Fi[	@ÏGI"># @yieldparam msg [String] The error message to be raised;Fi[[	@‰idI"T      # @param str [String] The string of which to check the encoding
      # @yield [msg] A block in which an encoding error can be raised.
      #   Only yields if there is an encoding error
      # @yieldparam msg [String] The error message to be raised
      # @return [String] `str`, potentially with encoding gotchas like BOMs removed;Fi[	@‰iåI"E      # @param str [String] The Haml template of which to check the encoding
      # @yield [msg] A block in which an encoding error can be raised.
      #   Only yields if there is an encoding error
      # @yieldparam msg [String] The error message to be raised
      # @return [String] The original string encoded properly;Fi[	I"%if var.include?("STRING").! then;F@ni[[	@‰i#I"±    # @return [String] The name of the indentation (e.g. `"12 spaces"`, `"1 tab"`)
    def function(var)
      if var.include?("STRING").! then
        var = "STRING"
      else;Fi[	@‰i&I"u        var = "STRING"
      else
        if var.include?("STRING").! then
          var = "STRING"
        else;Fi[	@ˇ@	i[[	@tiI"R    "STRING"
  when "STRING" then
    "STRING".undent
  else
    # do nothing;Fi[	@óizI"_      "STRING".undent
    when "LITERAL" then
      "STRING".undent
    else
      @reason;Fi[	@ˇ@@i[[	@tiI"d    "STRING".undent
  when "STRING" then
    "STRING".undent
  when "LITERAL" then
    "STRING";Fi[	@óixI"q    case @reason
    when "LITERAL" then
      "STRING".undent
    when "LITERAL" then
      "STRING".undent;Fi[	I"def (model).persisted?;F@i[[	@2&iI"Ñ      def function
        assert(model.respond_to?("LITERAL"), "STRING")
        def (model).persisted?
          false
        end;Fi[	@2&i%I"a          ["LITERAL"]
        end
        def (model).persisted?
          false
        end;Fi[	@ˇ@¬,i[[	@tiI"Ö  case var.downcase
  when "LITERAL", "STRING", "LITERAL" then
    "STRING".undent
  when "STRING", "STRING" then
    "STRING".undent;Fi[	@tiI"t    "STRING".undent
  when "STRING" then
    "STRING".undent
  when "STRING", "STRING" then
    "STRING".undent;Fi[	I"require("hardware");F@5.i[[	@iI"u    raise($!) if $!
    trap("STRING", STD_TRAP)
    require("hardware")
    require("keg")
    system("STRING");Fi[	@≈%iI"Mrequire("extend/ENV")
require("hardware")
require("keg")
module Homebrew;Fi[	@H@§i[[	@ﬁi I"7require("hardware")
module Homebrew
  extend(self);Fi [	@ôiI"Krequire("superenv")
require("hardware")
module Homebrew
  extend(self);Fi[	@æI"when File then;Fi[[	@^iëI"      
      def function(var)
        case var
        when File then
          YAML.load(ERB.new(File.read(var.path)).result);Fi[	@äi˜I"      
      def function(var)
        case var
        when File then
          YAML.load(ERB.new(File.read(var.path)).result);Fi[	@5.@£i[[	@÷i I"6require("keg")
require("formula")
module Homebrew;Fi [	@›iI"    begin
      (var = nil
      require("keg")
      require("formula")
      @var ||= downcased_unique_named.collect do |var|;Fi[	I"Marshal.dump(var, var);F@>i[[	@i$I"}    else
      var.continuation = nil if ARGV.debug?
      Marshal.dump(var, var)
      var.close
      exit!("LITERAL");Fi[	@îi∞I"ˆ          exec("STRING", "STRING", "STRING", "STRING", Pathname.new("STRING").dirname, "STRING", "STRING", f.path, *var.options_only))
        rescue Exception => var
          Marshal.dump(var, var)
          var.close
          exit!("LITERAL");Fi[	@æI""when Sass::Script::Color then;Fi[[	@bi¶I"¢      var = var = nil
      var = Sass::Script::Parser.parse(var.value, "LITERAL", "LITERAL")
      case var
      when Sass::Script::Color then
        var = var;Fi[	@\i√I"É  
  def function(var)
    case var
    when Sass::Script::Color then
      Sass::Script::String.new(reversed_color_names[var.rgb]);Fi[	@æI"when TrueClass then;Fi[[	@ÄiñI"]      
      def function(var)
        case var
        when TrueClass then
          {};Fi[	@Õi7I"å    (NO_INPUT << var) if var["LITERAL"]
    if var = var["LITERAL"] then
      case var
      when TrueClass then
        var, var = var, [];Fi[	@æI"when Symbol then;Fi[[	@7igI"†    def function(var, var, var)
      var ||= "LITERAL"
      case var
      when Symbol then
        generate_message(var, var, var.except(*CALLBACKS_OPTIONS));Fi[	@Ïi8I"˝    #   evaluate_method(person, lambda {|person, age| "#{person.name} is #{age}"}, 21, 'male')  # => ArgumentError: wrong number of arguments (3 for 2)
    def function(var, var, var, var)
      case var
      when Symbol then
        var = class << var;Fi[	@G0I"0assert_equal(case MacOS.clang_build_version;Fi[[	@¡	iI"Ø    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    var.select_compiler
    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then;Fi[	@¡	iWI"ã      var.fails_with?("LITERAL").!
    end)
    var.select_compiler
    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then;Fi[	@.@ i[[	@i]I"l    end
    if ARGV.flag?("STRING") then
      ohai("STRING")
      puts("STRING")
      puts("STRING");Fi[	@CiI"\      puts("STRING")
    else
      ohai("STRING")
      puts("STRING")
      IRB.start;Fi[	I"Array(var).each do |var|;FI"%var = @base.send("LITERAL", var);Fi[[	@7i˛I"Õ    #   # => {:name=>["can't be empty"]}
    def function(var, var)
      Array(var).each do |var|
        var = @base.send("LITERAL", var)
        var = var.respond_to?("LITERAL") ? (var.empty?) : (false);Fi[	@7iI"∫    #   # => {:name=>["can't be blank"]}
    def function(var, var)
      Array(var).each do |var|
        var = @base.send("LITERAL", var)
        add(var, "LITERAL", var) if var.blank?;Fi[	I"!if var = var["LITERAL"] then;FI"(var = (var == true) ? (var) : (var);Fi[[	@Õi-I"»    (ALL << var)
    var.assert_valid_keys("LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL")
    if var = var["LITERAL"] then
      var = (var == true) ? (var) : (var)
      STRATEGIES[var] = var;Fi[	@Õi1I"ã      STRATEGIES[var] = var
    end
    if var = var["LITERAL"] then
      var = (var == true) ? (var) : (var)
      CONTROLLERS[var] = var;Fi[	I"if f.plist_startup then;F@Ái[[	@Ái4I"≤      var = (var / var)
      if var.file?.! and var.symlink?.! then
        if f.plist_startup then
          (var << "STRING")
          (var << "STRING") unless var.directory?;Fi[	@ÁiFI"°        if Kernel.system("STRING") then
          (var << "STRING")
          if f.plist_startup then
            (var << "STRING")
            (var << "STRING");Fi[	@<>@Ái[[	@Ái6I"ñ        if f.plist_startup then
          (var << "STRING")
          (var << "STRING") unless var.directory?
          (var << "STRING")
        else;Fi[	@Ái:I"Ç        else
          (var << "STRING")
          (var << "STRING") unless var.directory?
          (var << "STRING")
        end;Fi[	@™.@	i[[	@2iI"≤    var.sort.reverse_each { |var| var.rmdir_if_possible }
    if ($n == "LITERAL") and ($d == "LITERAL") then
      puts("STRING") if ARGV.verbose?
    else
      print("STRING");Fi[	@πiøI"≤  def function(var, var, var)
    if var.exist? and (var.realpath == var.realpath) then
      puts("STRING") if ARGV.verbose?
    else
      if var.dry_run and var.overwrite then;Fi[	I"*var.unlink unless @f.skip_clean?(var);F@	i[[	@gi8I"™        else
          if (var.extname == "STRING") then
            var.unlink unless @f.skip_clean?(var)
          else
            if (var == (@f.lib + "STRING")) then;Fi[	@gi;I"¿          else
            if (var == (@f.lib + "STRING")) then
              var.unlink unless @f.skip_clean?(var)
            else
              clean_file_permissions(var) if var.symlink?.!;Fi[	I"puts(hardware);F@ i[[	@ﬁikI"±    puts("STRING") if HOMEBREW_PREFIX.to_s.!=("STRING")
    puts("STRING") if HOMEBREW_CELLAR.to_s.!=("STRING")
    puts(hardware)
    puts("STRING")
    puts("STRING") if xcode;Fi[	@ﬁiÖI"l    puts("STRING")
    puts("STRING")
    puts(hardware)
    puts("STRING")
    puts("STRING") if xcode;Fi[	@=I"puts("STRING") if clt;Fi[[	@ﬁimI"ë    puts(hardware)
    puts("STRING")
    puts("STRING") if xcode
    puts("STRING") if clt
    puts("STRING") if RUBY_VERSION.to_f.!=("LITERAL");Fi[	@ﬁiáI"}    puts(hardware)
    puts("STRING")
    puts("STRING") if xcode
    puts("STRING") if clt
    puts("STRING") if gcc_40;Fi[	I"puts("STRING") if gcc_40;FI"puts("STRING") if gcc_42;Fi[[	@ﬁiqI"≤    puts("STRING") if RUBY_VERSION.to_f.!=("LITERAL")
    unless MacOS.compilers_standard? then
      puts("STRING") if gcc_40
      puts("STRING") if gcc_42
      puts("STRING");Fi[	@ﬁiâI"Ç    puts("STRING") if xcode
    puts("STRING") if clt
    puts("STRING") if gcc_40
    puts("STRING") if gcc_42
    puts("STRING");Fi[	@ñH@ i[[	@ﬁirI"ë    unless MacOS.compilers_standard? then
      puts("STRING") if gcc_40
      puts("STRING") if gcc_42
      puts("STRING")
      puts("STRING");Fi[	@ﬁiäI"~    puts("STRING") if clt
    puts("STRING") if gcc_40
    puts("STRING") if gcc_42
    puts("STRING")
    puts("STRING");Fi[	I"'puts("STRING") if macports_or_fink;F@ i[[	@ﬁivI"a      puts("STRING")
    end
    puts("STRING") if macports_or_fink
    puts("STRING")
  end;Fi[	@ﬁiçI"w    puts("STRING")
    puts("STRING")
    puts("STRING") if macports_or_fink
    puts("STRING")
    puts("STRING");Fi[	@Ÿ)I"synchronize do;Fi[[	@÷3i!I"{    # pop, a ThreadError is raised.
    def function(var)
      if var then
        synchronize do
          var = nil;Fi[	@ﬁiDI"ã    # pop, a ThreadError is raised.
    def function(var)
      if var then
        synchronize do
          var = @redis.lpop(@redis_name);Fi[	@Ÿ)@¨"i[[	@uinI"•        if is_haml? then
          var = (block_given? and block_is_haml?(var))
          if var then
            var = var
            var = haml_bind_proc do |var|;Fi[	@uiÄI"‘      def function(var, var, var)
        var = (block_given? and (is_haml? and block_is_haml?(var)))
        if var then
          var = var
          var = proc { |var| with_tabs("LITERAL") { var.call(*var) } };Fi[	@£@k2i[[	@Ìi I"<require("formula")
require("blacklist")
module Homebrew;Fi [	@πi I"<require("formula")
require("blacklist")
module Homebrew;Fi [	@£@ÿi[[	@ÙiI"Vrequire("testing_env")
require("formula")
require("test/testball")
require("keg");Fi[	@ËiI"Zrequire("testing_env")
require("formula")
require("test/testball")
require("version");Fi[	@Ÿ)@HAi[[	@A,iaI"         File.join(Compass.configuration.project_path, Compass.configuration.images_dir, var)
      end
      if var then
        var = "STRING" unless (var["LITERAL"] == "STRING")
        var = "STRING";Fi[	@A,iéI"‘        File.join(Compass.configuration.project_path, Compass.configuration.generated_images_dir, var)
      end
      if var then
        var = "STRING" unless (var["LITERAL"] == "STRING")
        var = "STRING";Fi[	I",# Returns the number of error messages.;F@i[[	@7itI"v    end
    
    # Returns the number of error messages.
    #
    #   person.errors.add(:name, "can't be blank");Fi[	@7iíI"v    end
    
    # Returns the number of error messages.
    #
    #   person.errors.add(:name, "can't be blank");Fi[	I"1#   person.errors.each do |attribute, error|;FI"2#     # Will yield :name and "can't be blank";Fi[[	@7igI"ß    #
    #   person.errors.add(:name, "can't be blank")
    #   person.errors.each do |attribute, error|
    #     # Will yield :name and "can't be blank"
    #   end;Fi[	@7ilI"”    #
    #   person.errors.add(:name, "must be specified")
    #   person.errors.each do |attribute, error|
    #     # Will yield :name and "can't be blank"
    #     # then yield :name and "must be specified";Fi[	@^(I"6#   person.errors.add(:name, "must be specified");Fi[[	@7iãI"    # Returns an array of error messages, with the attribute name included.
    #
    #   person.errors.add(:name, "can't be blank")
    #   person.errors.add(:name, "must be specified")
    #   person.errors.to_a # => ["name can't be blank", "name must be specified"];Fi[	@7i™I"Õ    # Returns an xml formatted representation of the Errors hash.
    #
    #   person.errors.add(:name, "can't be blank")
    #   person.errors.add(:name, "must be specified")
    #   person.errors.to_xml;Fi[	I"if ARGV.dry_run? then;F@ i[[	@Ri(I"£          if var.can_cleanup? then
            if Keg.new(var).linked?.! then
              if ARGV.dry_run? then
                puts("STRING")
              else;Fi[	@RiEI"Î        var = bottle_file_outdated?(var, var)
        if ((var and (var.version > var)) or ((ARGV.switch?("STRING") and (var and var.installed?.!)) or var)) then
          if ARGV.dry_run? then
            puts("STRING")
          else;Fi[	@≤I"5@var = @subject.new if (@subject.class == Class);Fi[[	@0i'I"€        
        def function(var)
          @var = var
          @var = @subject.new if (@subject.class == Class)
          @allowed_types and (@rejected_types and (allowed_types_allowed? and rejected_types_rejected?));Fi[	@<i+I"–        
        def function(var)
          @var = var
          @var = @subject.new if (@subject.class == Class)
          lower_than_low? and (higher_than_low? and (lower_than_high? and higher_than_high?));Fi[	@≤@¬*i[[	@<iI"W        
        def function(var)
          @var = var
          self
        end;Fi[	@<i!I"W        
        def function(var)
          @var = var
          self
        end;Fi[	@≤@%i[[	@liI"n      def function(var, var)
        @var = []
        @var = var
        @var = true
        @var = true;Fi[	@∆i/I"z      @var = var
      var = self.class.default_options.merge(var)
      @var = var
      @var = true
      @var = [];Fi[	@≤@7i[[	@≠iI"œ        var = var.last.is_a?(Hash) ? (var.pop) : ({})
        self.path = var = (var["LITERAL"] or var.shift)
        @var = var
        @var = var["LITERAL"]
        @var ||= File.join(var, "STRING") if var;Fi[	@ÁiI"å      assert_valid_keys(var, "LITERAL", "LITERAL")
      @var = var
      @var = var
      @var = var["LITERAL"]
      @var = var["LITERAL"];Fi[	I"*var = if ARGV.include?("STRING") then;FI"ARGV.next;Fi[[	@i
I"o  def function
    var = Pathname.getwd
    var = if ARGV.include?("STRING") then
      ARGV.next
    else;Fi[	@iI"å      var.version.to_s.empty? ? (raise("STRING")) : (var.version)
    end
    var = if ARGV.include?("STRING") then
      ARGV.next
    else;Fi[	@ I@	i[[	@iI"ù    var = Pathname.getwd
    var = if ARGV.include?("STRING") then
      ARGV.next
    else
      var.version.to_s.empty? ? (raise("STRING")) : (var.version);Fi[	@iI"z    end
    var = if ARGV.include?("STRING") then
      ARGV.next
    else
      var.basename.to_s =~ /(.*?)-?#{var}/;Fi[	I"Lif Process.uid.zero? and File.stat(HOMEBREW_BREW_FILE).uid.zero?.! then;F@Ri[[	@@iI"{      end
    end
    if Process.uid.zero? and File.stat(HOMEBREW_BREW_FILE).uid.zero?.! then
      raise("STRING")
    end;Fi[	@ÁiI"¨  def function
    raise(KegUnspecifiedError) if ARGV.named.empty?
    if Process.uid.zero? and File.stat(HOMEBREW_BREW_FILE).uid.zero?.! then
      raise("STRING")
    end;Fi[	@≤@ 7i[[	@7iI"O    #   end
    def function(var)
      @var = var
      @var = {}
    end;Fi[	@÷3iI"_    def function(var, var)
      super()
      @var = var
      @var = {}
      @var = var;Fi[	@-2I"4rescue FormulaInstallationAlreadyAttemptedError;Fi[[	@@iXI"|      var.install
      var.caveats
      var.finish)
    rescue FormulaInstallationAlreadyAttemptedError
      # do nothing;Fi[	@ºi?I"|      var.install
      var.caveats
      var.finish)
    rescue FormulaInstallationAlreadyAttemptedError
      # do nothing;Fi[	@I@wi[[	@@iYI"ñ      var.caveats
      var.finish)
    rescue FormulaInstallationAlreadyAttemptedError
      # do nothing
    rescue CannotInstallFormulaError => var;Fi[	@ºi@I"ñ      var.caveats
      var.finish)
    rescue FormulaInstallationAlreadyAttemptedError
      # do nothing
    rescue CannotInstallFormulaError => var;Fi[	I"class String;F@Ei[[	@CiI"D  end
end
class String
  def function
    Formula.factory(self);Fi[	@;i I"Zclass String
  def function
    gsub(/^.{#{slice("LITERAL").length}STRING/, "STRING");Fi [	I"var = OpenStruct.new;FI"var.overwrite = true;Fi[[	@Ái4I"û  def function
    FileUtils.touch((HOMEBREW_PREFIX / "STRING"))
    var = OpenStruct.new
    var.overwrite = true
    assert_equal("LITERAL", @keg.link(var));Fi[	@Ái;I"â  def function
    FileUtils.touch((HOMEBREW_PREFIX / "STRING"))
    var = OpenStruct.new
    var.overwrite = true
    var.dry_run = true;Fi[	I"&print("STRING") { var.link(var) };F@G=i[[	@ÁiI"|      end
      if var.dry_run and var.overwrite then
        print("STRING") { var.link(var) }
        next
      else;Fi[	@ÁiI"r      else
        if var.dry_run then
          print("STRING") { var.link(var) }
          next
        end;Fi[	@≤@ªi[[	@iI"f    # The object that failed
    def function(var, var)
      @var = var
      super(var)
    end;Fi[	@iI"X      
      def function(var, var)
        @var = var
        super(var)
      end;Fi[	@≤@7'i[[	@∫iI"Å      # * Called using super(model) from subclasses *
      def function(var)
        @var = var
        load_defaults!
      end;Fi[	@Ωi"I"ô      # Called with super(model) from subclasses
      def function(var)
        @var = var
        load_defaults!
        @var = true if on_success.nil?;Fi[	@≤I"@var = var.to_s;Fi[[	@∑iI"ù    # Takes the name of the archive and the configuration block
    def function(var, var, var)
      @var = var
      @var = var.to_s
      @var = Array.new;Fi[	@˚
iI"I  
  def function(var, var)
    @var = var
    @var = var.to_s
  end;Fi[	I"when nil then;F@Fi[[	@πiI"y        var = ARGV.first
        var = case var
        when nil then
          "STRING"
        when "LITERAL" then;Fi[	@LirI"[      when false then
        "STRING"
      when nil then
        "STRING"
      else;Fi[	@PII"var.fails_with?("LITERAL");Fi[[	@¡	i/I"è    assert(var.fails_with?("LITERAL").!)
    assert(case MacOS.gcc_42_build_version
    when nil then
      var.fails_with?("LITERAL")
    else;Fi[	@¡	iRI"ç    assert(var.fails_with?("LITERAL"))
    assert(case MacOS.gcc_42_build_version
    when nil then
      var.fails_with?("LITERAL")
    else;Fi[	@ÑI"#post_retweet(var, var.options);Fi[[	@˘iëI"≈        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin
            post_retweet(var, var.options)
          rescue Twitter::Error::Forbidden => var;Fi[	@˘i¨I"≈        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin
            post_retweet(var, var.options)
          rescue Twitter::Error::Forbidden => var;Fi[	I"require("open-uri");F@√ i[[	@Õ iI"crequire("rss/1.0")
require("rss/2.0")
require("open-uri")
require("fileutils")
require("yaml");Fi[	@ÃiI"Urequire("rubygems")
require("open-uri")
require("fileutils")
require("nokogiri");Fi[	I"ENV["STRING"] = "STRING";F@lIi[[	@≠iI"Ω      ENV["STRING"] = ENV["STRING"].split("STRING").insert("LITERAL", "STRING").join("STRING")
    end
    ENV["STRING"] = "STRING"
    ENV["STRING"] = "STRING"
    ENV["STRING"] = "STRING";Fi[	@≠iI"≥    end
    ENV["STRING"] = "STRING"
    ENV["STRING"] = "STRING"
    ENV["STRING"] = "STRING"
    puts("STRING".undent_________________________________________________________72);Fi[	I"+when /^#{HOMEBREW_LIBRARY}STRING/ then;F@Fi[[	@Ji`I"Ü  def function
    case self.to_s
    when /^#{HOMEBREW_LIBRARY}STRING/ then
      "STRING"
    when /^#{HOMEBREW_LIBRARY}STRING/ then;Fi[	@JibI"|    when /^#{HOMEBREW_LIBRARY}STRING/ then
      "STRING"
    when /^#{HOMEBREW_LIBRARY}STRING/ then
      "STRING"
    else;Fi[	I"ofail("STRING");F@G=i[[	@≈%iI"t    ARGV.formulae.each do |var|
      unless var.installed? then
        ofail("STRING")
        next
      end;Fi[	@≈%iI"a      end
      unless var.test_defined? then
        ofail("STRING")
        next
      end;Fi[	I"var.unlink;FI"var.uninstall;Fi[[	@÷iI"Ü        ARGV.kegs.each do |var|
          puts("STRING")
          var.unlink
          var.uninstall
          rm_opt_link(var.fname);Fi[	@Ùi#I"f    yield
    var = Keg.new(var.prefix)
    var.unlink
    var.uninstall
    assert(var.exist?.!);Fi[	@ÑI"eobject_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)));Fi[[	@viYI"        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)))
          rescue Twitter::Error::Forbidden => var;Fi[	@vi{I"        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |var|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)))
          rescue Twitter::Error::Forbidden => var;Fi[	@ÑI"(var = nil;Fi[[	@›iI"F  
  def function
    begin
      (var = nil
      require("keg");Fi[	@ÂiI"R  
  def function
    begin
      (var = nil
      unless writable_real? then;Fi[	@ÑI"(@var = true;Fi[[	@»i0I"Å      # @see Haml::Util#rails_xss_safe?
      def function
        begin
          (@var = true
          var = @_haml_concat_raw;Fi[	@“igI"ó      attr_reader :function
      def function(var, var)
        begin
          (@var = true
          erb(var.to_sym, { "LITERAL" => (false) }, var));Fi[	@Ñ@≠>i[[	@≥i I"w    
    def function
      begin
        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL"));Fi[	@≥i+I"w    
    def function
      begin
        ($stderr.write(color("LITERAL"))
        $stdout.write(color("LITERAL"));Fi[	@Ñ@OAi[[	@i I"-begin
  require("sass")
rescue LoadError;Fi [	@i	I"Zrescue LoadError
  require("rubygems")
  begin
    require("sass")
  rescue LoadError;Fi[	I" fetch(var, []).map do |var|;F@æi[[	@wi}I"d  
  def function(var)
    fetch(var, []).map do |var|
      case var
      when "LITERAL" then;Fi[	@wiãI"d  
  def function(var)
    fetch(var, []).map do |var|
      case var
      when "LITERAL" then;Fi[	@Ñ@õ@i[[	@¢i I"π        
        def function
          begin
            (var, Compass.configuration.project_path = Compass.configuration.project_path, nil
            Compass.configuration.serialize);Fi[	@∞iI"Ø      
      def function
        begin
          (var, Compass.configuration.project_path = Compass.configuration.project_path, nil
          Compass.configuration.serialize);Fi[	I"oh1("STRING");FI"var.unlink if var;Fi[[	@ºi;I"©      var.show_header = false
      var.install_bottle = (install_bottle?(var) and var.used_options.empty?)
      oh1("STRING")
      var.unlink if var
      var.install;Fi[	@îiqI"}      var.ignore_deps = true
      var.show_header = false
      oh1("STRING")
      var.unlink if var
      var.install;Fi[	I"6var = Keg.new(var.linked_keg.realpath) rescue nil;FI")var = FormulaInstaller.new(var, var);Fi[[	@ºi7I"•        Tab.dummy_tab(var)
      end
      var = Keg.new(var.linked_keg.realpath) rescue nil
      var = FormulaInstaller.new(var, var)
      var.show_header = false;Fi[	@îimI"´    begin
      (var = Tab.for_formula(var)
      var = Keg.new(var.linked_keg.realpath) rescue nil
      var = FormulaInstaller.new(var, var)
      var.ignore_deps = true;Fi[	@∏I@∫2i[[	@ºi<I"ù      var.install_bottle = (install_bottle?(var) and var.used_options.empty?)
      oh1("STRING")
      var.unlink if var
      var.install
      var.caveats;Fi[	@îirI"r      var.show_header = false
      oh1("STRING")
      var.unlink if var
      var.install
      var.caveats;Fi[	@ÑI"(write_password_file!;Fi[[	@ùiI"ã        # debug options: -vhP
        def function
          begin
            (write_password_file!
            @directories.each do |var|;Fi[	@li/I"©        # debug options: -vhP
        def function
          begin
            (write_password_file!
            Logger.message(("STRING" + @directories.join("STRING")));Fi[	@Ñ@º=i[[	@ÄiBI"r          fast_fit
          var = []
          begin
            var = false
            catch("LITERAL") do;Fi[	@Si_I"R  puts("STRING")
  puts("STRING")
  begin
    var = false
    choose do |var|;Fi[	@‡@@Ü	i[[	@ioI"ò      end
    when "LITERAL" then
      if @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL"
      else;Fi[	@iyI"ò      end
    when "LITERAL" then
      if @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL"
      else;Fi[	@∞@i[[	@.iI"í    # the object is persisted or not. If there no key attributes, returns +nil+.
    #
    #   class Person < ActiveRecord::Base
    #   end
    #;Fi[	@.i+I"x    # or +nil+ if <tt>persisted?</tt> is +false+.
    #
    #   class Person < ActiveRecord::Base
    #   end
    #;Fi[	I"*#     include ActiveModel::Conversion;F@i[[	@.iI"[    #
    #   class Person
    #     include ActiveModel::Conversion
    #   end
    #;Fi[	@.i8I"[    #
    #   class Person
    #     include ActiveModel::Conversion
    #   end
    #;Fi[	I"&var = (HOMEBREW_CACHE / "STRING");FI"(assert_equal("STRING", var.extname);Fi[[	@›iáI"Ñ  
  def function
    var = (HOMEBREW_CACHE / "STRING")
    assert_equal("STRING", var.extname)
    assert_equal("STRING", var.stem);Fi[	@›iãI"«    assert_equal("STRING", var.stem)
    assert_version_equal("STRING", var.version)
    var = (HOMEBREW_CACHE / "STRING")
    assert_equal("STRING", var.extname)
    assert_equal("STRING", var.stem);Fi[	I"!(var << var) if var.exist?.!;F@ï*i[[	@ziﬂI"|      (var << "STRING")
    end
    (var << var) if var.exist?.!
    (var << var)
    ((var << "STRING") << var) if var;Fi[	@zi˘I"ª    var = var.exist? ? ("STRING") : ("STRING")
    var = [@@svn, var, "STRING", "STRING", "STRING"]
    (var << var) if var.exist?.!
    (var << var)
    ((var << "STRING") << var) if var;Fi[	@È>@a=i[[	@zi·I"ê    (var << var) if var.exist?.!
    (var << var)
    ((var << "STRING") << var) if var
    (var << "STRING") if var
    quiet_safe_system(*var);Fi[	@zi˚I"ê    (var << var) if var.exist?.!
    (var << var)
    ((var << "STRING") << var) if var
    (var << "STRING") if var
    quiet_safe_system(*var);Fi[	@=1@∂@i[[	@7iI"¥    # waiting for a new compass release.
    def function(var, var)
      var.each do |var|
        unless ASPECTS.include?(var) then
          Compass::Util.compass_warn("STRING");Fi[	@7i/I"≈    # a prefix without waiting for a new compass release.
    def function(var, var)
      var.each do |var|
        unless ASPECTS.include?(var) then
          Compass::Util.compass_warn("STRING");Fi[	@È<@F1i[[	@zi<I"t  def function
    var = Dir.getwd
    Dir.chdir(@clone) do
      if @spec and @ref then
        ohai("STRING");Fi[	@zi°I"t  def function
    var = Dir.getwd
    Dir.chdir(@clone) do
      if @spec and @ref then
        ohai("STRING");Fi[	I"var = Dir.getwd;F@È<i[[	@zi;I"`  
  def function
    var = Dir.getwd
    Dir.chdir(@clone) do
      if @spec and @ref then;Fi[	@zi†I"`  
  def function
    var = Dir.getwd
    Dir.chdir(@clone) do
      if @spec and @ref then;Fi[	@=1I"var = var.new(var, &var);Fi[[	@âiZI"¥      def function(var, var)
        var = var.extract_options!
        var.each do |var|
          var = var.new(var, &var)
          var.setup(self) if var.respond_to?("LITERAL");Fi[	@âiàI"è    def function(var, var)
      var = var.extract_options!
      var.each do |var|
        var = var.new(var, &var)
        var.validate(self);Fi[	I"nostdout do;FI"assert_nothing_raised do;Fi[[	@›iBI"Ö    require("cmd/prune")
    require("cleaner")
    nostdout do
      assert_nothing_raised do
        var = TestBallWithRealPath.new;Fi[	@›inI"x  
  def function
    nostdout do
      assert_nothing_raised do
        assert(Pathname.getwd.rmdir_if_possible.!);Fi[	I"Find.prune;F@@i[[	@πi‹I"¥        case yield(var.relative_path_from(var))
        when "LITERAL", nil then
          Find.prune
        when "LITERAL" then
          next if (File.basename(var) == "STRING");Fi[	@πiÍI"Ω          case yield(var.relative_path_from(var))
          when "LITERAL" then
            Find.prune
          when "LITERAL" then
            var.mkpath unless resolve_any_conflicts(var);Fi[	@”@@@i[[	@zi¯I"x    case var
    when "LITERAL" then
      CVSDownloadStrategy
    when "LITERAL" then
      BazaarDownloadStrategy;Fi[	@zi!I"~      CurlDownloadStrategy
    when "LITERAL" then
      CVSDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy;Fi[	@Ã@@@i[[	@zi˙I"Ä      CVSDownloadStrategy
    when "LITERAL" then
      BazaarDownloadStrategy
    when "LITERAL" then
      GitDownloadStrategy;Fi[	@ziI"y    case var
    when "LITERAL" then
      BazaarDownloadStrategy
    when "LITERAL" then
      CurlDownloadStrategy;Fi[	@¨#@T!i[[	@æiFI"ñ      #
      def function(var, var)
        var = var.extract_options!
        var = Devise::Mapping.find_scope!(var)
        var = (var.last or var);Fi[	@æi∏I"∏      # parameters as the sign_in method.
      def function(var, var)
        var = var.extract_options!
        var = Devise::Mapping.find_scope!(var)
        var = (var.last or var);Fi[	@¨#I"var["LITERAL"] = true;Fi[[	@jiNI"∏        #   person.status # => true
        def function(var, var)
          var = var.extract_options!
          var["LITERAL"] = true
          var["LITERAL"] = Array(var["LITERAL"]);Fi[	@ÄiáI"¡      #   # => ActiveModel::StrictValidationFailed: Name can't be blank
      def function(var)
        var = var.extract_options!
        var["LITERAL"] = true
        validates(*(var << var));Fi[	@¨#@=1i[[	@âiYI"ä      #   end
      def function(var, var)
        var = var.extract_options!
        var.each do |var|
          var = var.new(var, &var);Fi[	@âiáI"≠    # class version of this method for more information.
    def function(var, var)
      var = var.extract_options!
      var.each do |var|
        var = var.new(var, &var);Fi[	I"## Request a 32-bit only build.;FI"L# This is needed for some use-cases though we prefer to build Universal;Fi[[	@›iI"ò  end
  
  # Request a 32-bit only build.
  # This is needed for some use-cases though we prefer to build Universal
  # when a 32-bit version is needed.;Fi[	@ói»I"ò  end
  
  # Request a 32-bit only build.
  # This is needed for some use-cases though we prefer to build Universal
  # when a 32-bit version is needed.;Fi[	@KJI"'# when a 32-bit version is needed.;Fi[[	@›i{I"°  
  # Request a 32-bit only build.
  # This is needed for some use-cases though we prefer to build Universal
  # when a 32-bit version is needed.
  def function;Fi[	@ói…I"°  
  # Request a 32-bit only build.
  # This is needed for some use-cases though we prefer to build Universal
  # when a 32-bit version is needed.
  def function;Fi[	@RJ@Ei[[	@›i|I"µ  # Request a 32-bit only build.
  # This is needed for some use-cases though we prefer to build Universal
  # when a 32-bit version is needed.
  def function
    include?("STRING");Fi[	@ói I"ª  # Request a 32-bit only build.
  # This is needed for some use-cases though we prefer to build Universal
  # when a 32-bit version is needed.
  def function
    @args.include?("STRING");Fi[	I"if super then;F@i[[	@ivI"o    # which will all return +true+.
    def function(var, var)
      if super then
        true
      else;Fi[	@i≥I"_        
        def function(var)
          if super then
            true
          else;Fi[	I"raise("STRING".undent);F@	i[[	@Âi I"ê      if $?.success?.! then
        if self.exist? then
          raise("STRING".undent)
        else
          if dirname.writable_real?.! then;Fi[	@ÂiI"å        else
          if dirname.writable_real?.! then
            raise("STRING".undent)
          else
            raise("STRING".undent);Fi[	I"+var = [var] unless var.kind_of?(Array);F@=1i[[	@;i;I"∫  # Removes variable assignments completely.
  def function(var)
    var = [var] unless var.kind_of?(Array)
    var.each do |var|
      var = gsub!(Regexp.new("STRING"), "STRING", false);Fi[	@úiI"¬    var = "LITERAL"
    normalize_patches(var).each do |var, var|
      var = [var] unless var.kind_of?(Array)
      var.each do |var|
        (@patches << Patch.new(var, ("STRING" % var), var));Fi[	@eI"@var = var.strip;Fi[[	@ƒiI"p  class IncludeTag < Liquid::Tag
    def function(var, var, var)
      super
      @var = var.strip
    end;Fi[	@∞'iI"ä  class PostUrl < Liquid::Tag
    def function(var, var, var)
      super
      @var = var.strip
      @var = PostComparer.new(@orig_post);Fi[	I"-if (f.prefix + "STRING").directory? then;F@‡i[[	@îiI"m  
  def function
    if (f.prefix + "STRING").directory? then
      opoo("STRING")
      puts("STRING");Fi[	@îi!I"m  
  def function
    if (f.prefix + "STRING").directory? then
      opoo("STRING")
      puts("STRING");Fi[	@'!@≤i[[	@ói)I"h    @var = var
    unless var.nil? then
      @var = var.delete("LITERAL")
      @var = var
    end;Fi[	@ŒiI"å        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var.delete("LITERAL")
        @var = var
      else;Fi[	@e@¨i[[	@ÓiI"ã      # sets the password attribute to what was provided
      def function(var)
        super
        @var ||= false
        @var ||= true;Fi[	@ui(I"ô        # any block provided in the user's configuration file.
        def function
          super
          @var ||= false
          @var ||= "LITERAL";Fi[	I";var = (HOMEBREW_PREFIX + var.relative_path_from(self));FI"*var.extend(ObserverPathnameExtension);Fi[[	@πi0I"Ú      var.find do |var|
        next if (var == self)
        var = (HOMEBREW_PREFIX + var.relative_path_from(self))
        var.extend(ObserverPathnameExtension)
        next if (var.symlink?.! or (var.exist?.! or var.!=(var.resolved_path)));Fi[	@πi÷I"±    var.find do |var|
      next if (var == var)
      var = (HOMEBREW_PREFIX + var.relative_path_from(self))
      var.extend(ObserverPathnameExtension)
      if var.file? then;Fi[	@e@O>i[[	@ki7I"å      # data to the specified path based on the 'trigger'
      def function
        super
        var = Pipeline.new
        var = "STRING";Fi[	@ni7I"å      # data to the specified path based on the 'trigger'
      def function
        super
        var = Pipeline.new
        var = "STRING";Fi[	I"%link_dir("STRING", var) do |var|;FI"case var.to_s;Fi[[	@πipI"Ø      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) do |var|
        case var.to_s
        when "STRING" then;Fi[	@πi{I"r        end
      end
      link_dir("STRING", var) do |var|
        case var.to_s
        when "STRING" then;Fi[	@ùJ@@i[[	@ΩiêI"≤        def function(var, var, var)
          var = var.last.is_a?(Hash) ? (var.pop) : ({})
          case var.to_s
          when "LITERAL" then
            @node["STRING"] = $1;Fi[	@äiI"º        var = var.call(instance) if var.respond_to?("LITERAL")
        var.inject({}) do |var, var|
          case var.to_s
          when "LITERAL" then
            var[$1.downcase] = var;Fi[	@ùJ@Ei[[	@πiqI"ó      link_dir("STRING", var) { "LITERAL" }
      link_dir("STRING", var) do |var|
        case var.to_s
        when "STRING" then
          "LITERAL";Fi[	@πi|I"z      end
      link_dir("STRING", var) do |var|
        case var.to_s
        when "STRING" then
          "LITERAL";Fi[	I"Asystem(MacOS.locate("STRING"), "STRING", var, "STRING", var);F@	i[[	@yiI"          var.each do |var|
            if (var.dylib? or var.mach_o_bundle?) and (var.parent + var).exist? then
              system(MacOS.locate("STRING"), "STRING", var, "STRING", var)
            else
              if var.mach_o_executable? and (lib / var).exist? then;Fi[	@yiI"Ò            else
              if var.mach_o_executable? and (lib / var).exist? then
                system(MacOS.locate("STRING"), "STRING", var, "STRING", var)
              else
                var = find_dylib(Pathname.new(var).basename);Fi[	@e@˙i[[	@}iI"@  end
    def function
      super
      @var = nil
    end;Fi[	@Ái I"D    
    def function(var)
      super
      @var = nil
    end;Fi[	I"case MacOS.version;F@@i[[	@ÜiI"T  
  def function
    case MacOS.version
    when "LITERAL" then
      "STRING";Fi[	@ÁiI"    else
      if (prefix.to_s == "STRING") then
        case MacOS.version
        when "LITERAL" then
          "STRING";Fi[	@“I"return self unless var;Fi[[	@EiI"j      end
      
      def function(var, var, var)
        return self unless var
        if var then;Fi[	@iI"≤      #  subtree created, e.g., namespaces will be resolved relative
      #  to +ctx+.
      def function(var, var, var)
        return self unless var
        var = if var then;Fi[	@“I"&var = [var.first, var["LITERAL"]];Fi[[	@=iEI"m      end
      
      def function(var, var, var)
        var = [var.first, var["LITERAL"]]
        var;Fi[	@=iJI"m      end
      
      def function(var, var, var)
        var = [var.first, var["LITERAL"]]
        var;Fi[	@“I"Kvar = Node.new("LITERAL", ([var["LITERAL"]] + (var["LITERAL"] or [])));Fi[[	@=i¶I"ù      
      # reduce 27 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", ([var["LITERAL"]] + (var["LITERAL"] or [])))
        var;Fi[	@=i´I"ç      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", ([var["LITERAL"]] + (var["LITERAL"] or [])))
        var;Fi[	I"class Patch;FI"attr_reader("LITERAL");Fi[[	@úi8I"6  end
end
class Patch
  attr_reader("LITERAL")
  ;Fi[	@ÍiI"I  attr_reader("LITERAL")
end
class Patch
  attr_reader("LITERAL")
  ;Fi[	@Å@I"8FileUtils.mv(@patch_filename, @compressed_filename);Fi[[	@úiTI"©    case @compression
    when "LITERAL" then
      @var = (@patch_filename + "STRING")
      FileUtils.mv(@patch_filename, @compressed_filename)
    when "LITERAL" then;Fi[	@úiWI"æ      FileUtils.mv(@patch_filename, @compressed_filename)
    when "LITERAL" then
      @var = (@patch_filename + "STRING")
      FileUtils.mv(@patch_filename, @compressed_filename)
    else;Fi[	I"case @language;F@@i[[	@±iI"z  
  def function
    case @language
    when "LITERAL" then
      ["STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	@±i.I"P  
  def function
    case @language
    when "LITERAL" then
      "STRING";Fi[	@“I"Nvar = Node.new("LITERAL", [[var.first, var.last].compact.join("STRING")]);Fi[[	@=iïI"ê      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [[var.first, var.last].compact.join("STRING")])
        var;Fi[	@=iµI"ê      end
      
      def function(var, var, var)
        var = Node.new("LITERAL", [[var.first, var.last].compact.join("STRING")])
        var;Fi[	@“I"var = var.flatten;Fi[[	@=i4I"]      end
      
      def function(var, var, var)
        var = var.flatten
        var;Fi[	@=i9I"]      end
      
      def function(var, var, var)
        var = var.flatten
        var;Fi[	@◊@Hi[[	I"-projects//homebrew_proj/test/test_ENV.rb;Ti I"]require("testing_env")
require("hardware")
class EnvironmentTests < Test::Unit::TestCase;Fi [	I"2projects//homebrew_proj/test/test_hardware.rb;Ti I"Zrequire("testing_env")
require("hardware")
class HardwareTests < Test::Unit::TestCase;Fi [	@“@@Ai[[	@Ê*iI"|      end
      
      def function(var, var, var)
        var = "STRING".to_sym
        var = var.send("LITERAL", var);Fi[	@miI"|      end
      
      def function(var, var, var)
        var = "STRING".to_sym
        var = var.send("LITERAL", var);Fi[	@“@=Ji[[	@kiÜI"Ω      # it's configured to bind to the object as this is the convention for
      # DataMapper/Extlib callbacks
      def function(var, var, var)
        var["LITERAL"] = true
        super;Fi[	@õiõI"Ê      # it's configured to bind to the object as this is the convention for
      # Sequel callbacks
      def function(var, var, var)
        var["LITERAL"] = true
        var["LITERAL"] = @var ||= lambda { |var| (var == false) };Fi[	@“I"+var = normalize_message(var, var, var);Fi[[	@7iÓI"ú    #
    #   person.errors.messages # => {}
    def function(var, var, var)
      var = normalize_message(var, var, var)
      if var = var["LITERAL"] then;Fi[	@7iI"«    #   person.errors.add :name, :blank
    #   person.errors.added? :name, :blank # => true
    def function(var, var, var)
      var = normalize_message(var, var, var)
      self[var].include?(var);Fi[	@◊I"require("extend/string");Fi[[	@Öi I"_require("testing_env")
require("extend/string")
class InreplaceTest < Test::Unit::TestCase;Fi [	I"0projects//homebrew_proj/test/test_string.rb;Ti I"\require("testing_env")
require("extend/string")
class StringTest < Test::Unit::TestCase;Fi [	I"ARGV.unshift("STRING");F@ Ki[[	@i"I"g  
  def function
    ARGV.unshift("STRING")
    ARGV.unshift("STRING")
    ARGV.unshift("STRING");Fi[	@i#I"Ç  def function
    ARGV.unshift("STRING")
    ARGV.unshift("STRING")
    ARGV.unshift("STRING")
    assert(ARGV.switch?("STRING"));Fi[	I"#assert(ARGV.switch?("STRING"));F@'Ki[[	@i%I"û    ARGV.unshift("STRING")
    ARGV.unshift("STRING")
    assert(ARGV.switch?("STRING"))
    assert(ARGV.switch?("STRING"))
    assert(ARGV.switch?("STRING"));Fi[	@i&I"®    ARGV.unshift("STRING")
    assert(ARGV.switch?("STRING"))
    assert(ARGV.switch?("STRING"))
    assert(ARGV.switch?("STRING"))
    assert(ARGV.switch?("STRING").!);Fi[	I"*def function(var, var, var, var, var);FI",var = [var, var].compact.join("STRING");Fi[[	@
i2I"F        # +uri+ is the associated namespace URI
        # +ns+ is a hash of namespace prefix:urls associated with the element
        def function(var, var, var, var, var)
          var = [var, var].compact.join("STRING")
          var = (var.map { |var, var| [["STRING", var].compact.join("STRING"), var] } + var.map do |var|;Fi[	@
i0I"”      end
      
      def function(var, var, var, var, var)
        var = [var, var].compact.join("STRING")
        var = (var.map { |var, var| [["STRING", var].compact.join("STRING"), var] } + var.map do |var|;Fi[	@ÿ@5.i[[	@ÙiI"Årequire("testing_env")
require("formula")
require("test/testball")
require("keg")
class TestScriptFileFormula < ScriptFileFormula;Fi[	@ÁiI"Wrequire("testing_env")
require("test/testball")
require("keg")
require("stringio");Fi[	@.K@≤i[[	@ri#I"q        end
        
        def function(var, var, var, var, var)
          @var = var
          @var = var;Fi[	@{i%I"S  end
  
  def function(var, var, var, var, var)
    @var = var
    @var = var;Fi[	@z@@	i[[	@+iI"q      assert_equal(case MacOS.cat
      when "LITERAL" then
        var.bottle
      else
        var.stable;Fi[	@+i"I"q      assert_equal(case MacOS.cat
      when "LITERAL" then
        var.bottle
      else
        var.stable;Fi[	I"var.stable;FI"end, var.active_spec);Fi[[	@+iI"x        var.bottle
      else
        var.stable
      end, var.active_spec)
      var = LionBottleSpecTestBall.new;Fi[	@+i$I"{        var.bottle
      else
        var.stable
      end, var.active_spec)
      var = AllCatsBottleSpecTestBall.new;Fi[	I"&@var = SoftwareSpec.new("STRING");F@i[[	@›iI"Æ    var = (HOMEBREW_CACHE.parent + "STRING")
    Kernel.system("STRING", "STRING", "STRING", var, ABS__FILE__)
    @var = SoftwareSpec.new("STRING")
    super("STRING")
  end;Fi[	@i5I"}class TestCompilerFailures < Formula
  def function(var)
    @var = SoftwareSpec.new("STRING")
    super("STRING")
  end;Fi[	@EI".return unless @output.has_key?("LITERAL");Fi[[	@biI"ü      protected
      
      def function
        return unless @output.has_key?("LITERAL")
        @output["LITERAL"].nil? ? ("STRING") : (@output["LITERAL"]);Fi[	@bi!I"ô      end
      
      def function
        return unless @output.has_key?("LITERAL")
        @output["LITERAL"].nil? ? ("STRING") : (@output["LITERAL"]);Fi[	I"
# end;F@Ei[[	@›i=I"y  #   ARGV.named.each{|f| n+=1 if f == 'foo'}
  #   assert_equal 1, n
  # end
  def function
    require("cmd/info");Fi[	@Ëi˚I".  #   assert_version_detected '7.0.4', 'http://www.haskell.org/ghc/dist/7.0.4/ghc-7.0.4-x86_64-apple-darwin.tar.bz2'
  #   assert_version_detected '7.0.4', 'http://www.haskell.org/ghc/dist/7.0.4/ghc-7.0.4-i386-apple-darwin.tar.bz2'
  # end
  def function
    assert_version_detected("STRING", "STRING");Fi[	@EI"var = @attrs["LITERAL"];Fi[[	@îi#I"f    
    # @return [Integer]
    def function
      var = @attrs["LITERAL"]
      var.to_i if var;Fi[	@îi^I"f    
    # @return [Integer]
    def function
      var = @attrs["LITERAL"]
      var.to_i if var;Fi[	@ÂI"/var.stable.instance_eval { md5("STRING") };Fi[[	@‡iI"s  
  def function
    var = TestBall.new
    var.stable.instance_eval { md5("STRING") }
    good_checksum(var);Fi[	@‡iI"r  
  def function
    var = TestBall.new
    var.stable.instance_eval { md5("STRING") }
    bad_checksum(var);Fi[	@ÂI"0var.stable.instance_eval { sha1("STRING") };Fi[[	@‡iI"t  
  def function
    var = TestBall.new
    var.stable.instance_eval { sha1("STRING") }
    good_checksum(var);Fi[	@‡i#I"s  
  def function
    var = TestBall.new
    var.stable.instance_eval { sha1("STRING") }
    bad_checksum(var);Fi[	@ÂI"2var.stable.instance_eval { sha256("STRING") };Fi[[	@‡i)I"v  
  def function
    var = TestBall.new
    var.stable.instance_eval { sha256("STRING") }
    good_checksum(var);Fi[	@‡i/I"u  
  def function
    var = TestBall.new
    var.stable.instance_eval { sha256("STRING") }
    bad_checksum(var);Fi[	@EI"/if owner.is_a?(StateMachine::Machine) then;Fi[[	@ÆiI"ë        handles(method_call("LITERAL"))
        
        def function
          if owner.is_a?(StateMachine::Machine) then
            var = self;Fi[	@≥iI"ë        handles(method_call("LITERAL"))
        
        def function
          if owner.is_a?(StateMachine::Machine) then
            var = self;Fi[	@Ø/@Âi[[	@›iOI"ﬁ    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") }
    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") };Fi[	@›iRI"ﬁ    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") }
    var.active_spec.instance_eval { @var = Version.new("STRING") }
    var = TestBall.new
    var.instance_eval { @var = Version.new("STRING") };Fi[	I"var.brew { var.install };F@éKi[[	@›iWI"Ø    var.active_spec.instance_eval { @var = Version.new("STRING") }
    nostdout do
      var.brew { var.install }
      var.brew { var.install }
      var.brew { var.install };Fi[	@›iXI"y    nostdout do
      var.brew { var.install }
      var.brew { var.install }
      var.brew { var.install }
    end;Fi[	I"assert(var.installed?);F@ïKi[[	@›i[I"|      var.brew { var.install }
    end
    assert(var.installed?)
    assert(var.installed?)
    assert(var.installed?);Fi[	@›i\I"á    end
    assert(var.installed?)
    assert(var.installed?)
    assert(var.installed?)
    nostdout { Homebrew.cleanup_formula(var) };Fi[	@EI"var = self.name;Fi[[	@èiãI"•      
      # Skips defining reader/writer methods since this is done automatically
      def function
        var = self.name
        if supports_validations? then;Fi[	@õiNI"¿      
      # Skips defining reader/writer methods since this is done automatically
      def function
        var = self.name
        owner_class.validates_each(attribute) do |var, var, var|;Fi[	@ÓII"%assert_equal("STRING", var.stem);Fi[[	@›iàI"±  def function
    var = (HOMEBREW_CACHE / "STRING")
    assert_equal("STRING", var.extname)
    assert_equal("STRING", var.stem)
    assert_version_equal("STRING", var.version);Fi[	@›iåI"“    assert_version_equal("STRING", var.version)
    var = (HOMEBREW_CACHE / "STRING")
    assert_equal("STRING", var.extname)
    assert_equal("STRING", var.stem)
    assert_version_equal("STRING", var.version);Fi[	@£K@/i[[	@›iâI"»    var = (HOMEBREW_CACHE / "STRING")
    assert_equal("STRING", var.extname)
    assert_equal("STRING", var.stem)
    assert_version_equal("STRING", var.version)
    var = (HOMEBREW_CACHE / "STRING");Fi[	@›içI"®    var = (HOMEBREW_CACHE / "STRING")
    assert_equal("STRING", var.extname)
    assert_equal("STRING", var.stem)
    assert_version_equal("STRING", var.version)
  end;Fi[	@/@/i[[	@ƒi}I"Ÿ    var = SpecTestBall.new
    assert_equal(var.devel, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_equal("STRING", var.url)
    assert_equal(CurlDownloadStrategy, var.download_strategy);Fi[	@ƒiÉI"◊    var = SpecTestBall.new
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy);Fi[	@EI"(Stat << "STRING");Fi[[	@Ci≠I"t    
    # Tell Redis we've processed a job.
    def function
      (Stat << "STRING")
      (Stat << "STRING");Fi[	@Ci∏I"r    
    # Tells Redis we've failed a job.
    def function
      (Stat << "STRING")
      (Stat << "STRING");Fi[	I"cp("STRING", lib);F@ΩKi[[	I"1projects//homebrew_proj/test/test_cleaner.rb;TiI"u      lib.mkpath
      cp("STRING", bin)
      cp("STRING", lib)
      cp("STRING", lib)
      cp("STRING", lib);Fi[	@¿KiI"l      cp("STRING", bin)
      cp("STRING", lib)
      cp("STRING", lib)
      cp("STRING", lib)
    end;Fi[	I"<assert_equal("LITERAL", (var.lib / "STRING").stat.mode);F@≈Ki[[	@¿KiI"    assert_nothing_raised { Cleaner.new(var) }
    assert_equal("LITERAL", (var.bin / "STRING").stat.mode)
    assert_equal("LITERAL", (var.lib / "STRING").stat.mode)
    assert_equal("LITERAL", (var.lib / "STRING").stat.mode)
    assert_equal("LITERAL", (var.lib / "STRING").stat.mode);Fi[	@¿KiI"ı    assert_equal("LITERAL", (var.bin / "STRING").stat.mode)
    assert_equal("LITERAL", (var.lib / "STRING").stat.mode)
    assert_equal("LITERAL", (var.lib / "STRING").stat.mode)
    assert_equal("LITERAL", (var.lib / "STRING").stat.mode)
  end;Fi[	@∞2I"(assert_equal(@set.count, "LITERAL");Fi[[	@≥2iI"î  def function
    (@set << X11Dependency.new)
    (@set << X11Dependency.new)
    assert_equal(@set.count, "LITERAL")
    (@set << Requirement.new);Fi[	@≥2iI"ª  def function
    (@set << X11Dependency.new("STRING"))
    (@set << X11Dependency.new)
    assert_equal(@set.count, "LITERAL")
    assert_equal(@set.to_a, [X11Dependency.new("STRING")]);Fi[	@0@G0i[[	@¡	iI"¿    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    var.select_compiler
    assert_equal(case MacOS.clang_build_version;Fi[	@¡	ieI"«    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL").!)
    var.select_compiler
    assert_equal(MacOS.default_compiler, ENV.compiler);Fi[	@0@0i[[	@¡	i,I"≈    var = TestNoCompilerFailures.new
    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL").!)
    assert(case MacOS.gcc_42_build_version;Fi[	@¡	idI"¥    var = CompilerSelector.new(var)
    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL").!)
    var.select_compiler;Fi[	@EI"!Resque.logger.info("STRING");Fi[[	@Ci%I"ú    # Schedule this worker for shutdown. Will finish processing the
    # current job.
    def function
      Resque.logger.info("STRING")
      @var = true;Fi[	@Ci^I"¨    # Stop processing jobs after the current one has completed (if we're
    # currently running one).
    def function
      Resque.logger.info("STRING")
      @var = true;Fi[	@EI"%@queued_for_delete.each do |var|;Fi[[	@ıi$I"f      
      #:nodoc:
      def function
        @queued_for_delete.each do |var|
          begin;Fi[	@äi€I"f      
      #:nodoc:
      def function
        @queued_for_delete.each do |var|
          begin;Fi[	@EI"G@var = @target.original_filename if @target.respond_to?("LITERAL");Fi[[	@#iI"ï    private
    
    def function
      @var = @target.original_filename if @target.respond_to?("LITERAL")
      @var ||= File.basename(@target.path);Fi[	@&iI"Ç    private
    
    def function
      @var = @target.original_filename if @target.respond_to?("LITERAL")
      @var ||= "STRING";Fi[	@EI"%@var = @target.original_filename;Fi[[	@œiI"o    private
    
    def function
      @var = @target.original_filename
      @var = @target.content_type;Fi[	@)iI"q    private
    
    def function
      @var = @target.original_filename
      @var = determine_content_type;Fi[	@PH@@i[[	@¡	iI"ò    assert(var.fails_with?("LITERAL").!)
    var.select_compiler
    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then
      "LITERAL";Fi[	@¡	iXI"}    end)
    var.select_compiler
    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then
      "LITERAL";Fi[	I"+assert(case MacOS.gcc_42_build_version;F@PIi[[	@¡	i.I"Ø    assert(var.fails_with?("LITERAL").!)
    assert(var.fails_with?("LITERAL").!)
    assert(case MacOS.gcc_42_build_version
    when nil then
      var.fails_with?("LITERAL");Fi[	@¡	iQI"´    assert(var.fails_with?("LITERAL"))
    assert(var.fails_with?("LITERAL"))
    assert(case MacOS.gcc_42_build_version
    when nil then
      var.fails_with?("LITERAL");Fi[	@WI@	i[[	@¡	i0I"â    assert(case MacOS.gcc_42_build_version
    when nil then
      var.fails_with?("LITERAL")
    else
      var.fails_with?("LITERAL").!;Fi[	@¡	iSI"â    assert(case MacOS.gcc_42_build_version
    when nil then
      var.fails_with?("LITERAL")
    else
      var.fails_with?("LITERAL").!;Fi[	I"!var.fails_with?("LITERAL").!;F@Î"i[[	@¡	i2I"r      var.fails_with?("LITERAL")
    else
      var.fails_with?("LITERAL").!
    end)
    var.select_compiler;Fi[	@¡	iUI"r      var.fails_with?("LITERAL")
    else
      var.fails_with?("LITERAL").!
    end)
    var.select_compiler;Fi[	I".(@deps << Dependency.new(var["LITERAL"]));F@Li[[	@o/iI"Í  def function
    var = { "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => "STRING" }
    (@deps << Dependency.new(var["LITERAL"]))
    (@deps << Dependency.new(var["LITERAL"]))
    (@deps << Dependency.new(var["LITERAL"]));Fi[	@o/iI"%    var = { "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => "STRING" }
    (@deps << Dependency.new(var["LITERAL"]))
    (@deps << Dependency.new(var["LITERAL"]))
    (@deps << Dependency.new(var["LITERAL"]))
    @deps.each_with_index { |var, var| assert_equal(var[var], var.name) };Fi[	I"#var = Dependency.new("STRING");F@Li[[	@r/i-I"  
  def function
    var = Dependency.new("STRING")
    var = Dependency.new("STRING")
    var = Dependency.new("STRING");Fi[	@r/i.I"í  def function
    var = Dependency.new("STRING")
    var = Dependency.new("STRING")
    var = Dependency.new("STRING")
    assert_equal(var, var);Fi[	I""var = DependencyCollector.new;FI"2var.each { |var, var| var.add(var => (var)) };Fi[[	@u/iTI"«class ExternalDepsTests < Test::Unit::TestCase
  def function(var)
    var = DependencyCollector.new
    var.each { |var, var| var.add(var => (var)) }
    assert((var.requirements.size == "LITERAL"));Fi[	@u/i[I"õ  
  def function(var)
    var = DependencyCollector.new
    var.each { |var, var| var.add(var => (var)) }
    assert((var.requirements.size == "LITERAL"));Fi[	@$LI"1assert((var.requirements.size == "LITERAL"));Fi[[	@u/iUI"–  def function(var)
    var = DependencyCollector.new
    var.each { |var, var| var.add(var => (var)) }
    assert((var.requirements.size == "LITERAL"))
    var.requirements { |var| assert(var.satisfied?.!) };Fi[	@u/i\I"Œ  def function(var)
    var = DependencyCollector.new
    var.each { |var, var| var.add(var => (var)) }
    assert((var.requirements.size == "LITERAL"))
    var.requirements { |var| assert(var.satisfied?) };Fi[	@E@¬*i[[	@.iI"ß    # define <tt>:to_model</tt> yourself returning a proxy object that wraps
    # your object with Active Model compliant methods.
    def function
      self
    end;Fi[	@˛iWI"S      
      # A reference to +self+
      def function
        self
      end;Fi[	@EI"footer;Fi[[	@iNI";    end
    
    def function
      footer
      @html;Fi[	@iSI"V    end
    
    def function
      footer
      Rack::Response.new(@html).finish;Fi[	I">assert_equal(CurlDownloadStrategy, var.download_strategy);FI"=assert_instance_of(CurlDownloadStrategy, var.downloader);Fi[[	@ƒi=I"	    assert_version_equal("STRING", var.version)
    assert_equal(var.stable, var.active_spec)
    assert_equal(CurlDownloadStrategy, var.download_strategy)
    assert_instance_of(CurlDownloadStrategy, var.downloader)
    assert_instance_of(SoftwareSpec, var.stable);Fi[	@ƒiI"Ë    assert_version_equal("STRING", var.version)
    assert_equal("STRING", var.url)
    assert_equal(CurlDownloadStrategy, var.download_strategy)
    assert_instance_of(CurlDownloadStrategy, var.downloader)
    ARGV.delete("STRING");Fi[	@EI")return "STRING" unless env["STRING"];Fi[[	@i I"\    end
    
    def function
      return "STRING" unless env["STRING"]
      "STRING";Fi[	@i%I"\    end
    
    def function
      return "STRING" unless env["STRING"]
      "STRING";Fi[	I"assert_nil(var.bottle.md5);FI""assert_nil(var.bottle.sha256);Fi[[	@ƒigI"ü    assert_nil(var.stable.md5)
    assert_nil(var.stable.sha256)
    assert_nil(var.bottle.md5)
    assert_nil(var.bottle.sha256)
    assert_nil(var.devel.md5);Fi[	@ƒi†I"€      assert(var.bottle.checksum.empty?.!)
      assert_equal("STRING", var.bottle.sha1.hexdigest)
      assert_nil(var.bottle.md5)
      assert_nil(var.bottle.sha256)
      assert(var.bottle.version.detected_from_url?);Fi[	I"ARGV.push("STRING");FI"var = SpecTestBall.new;Fi[[	@ƒizI"v  
  def function
    ARGV.push("STRING")
    var = SpecTestBall.new
    assert_equal(var.devel, var.active_spec);Fi[	@ƒiÄI"u  
  def function
    ARGV.push("STRING")
    var = SpecTestBall.new
    assert_equal(var.head, var.active_spec);Fi[	@EI"(return nil if (length == "LITERAL");Fi[[	@iI"≤      # Removes the last element from set and returns it, or +nil+ if
      # the set is empty
      def function
        return nil if (length == "LITERAL")
        delete(last);Fi[	@iI"¡      # Returns the first element of the NodeSet and removes it.  Returns
      # +nil+ if the set is empty.
      def function
        return nil if (length == "LITERAL")
        delete(first);Fi[	@EI"("STRING" + "STRING");Fi[[	@Ii`I"Ñ      ##
      # Builds the full mongodump string based on all attributes
      def function
        ("STRING" + "STRING")
      end;Fi[	@kiNI"Ñ      ##
      # Builds the full mysqldump string based on all attributes
      def function
        ("STRING" + "STRING")
      end;Fi[	@EI"&var = self.site.posts.index(self);Fi[[	@i„I"à    end
    
    def function
      var = self.site.posts.index(self)
      if var and (var < (self.site.posts.length - "LITERAL")) then;Fi[	@iÏI"î    end
    
    def function
      var = self.site.posts.index(self)
      var and (var > "LITERAL") ? (self.site.posts[(var - "LITERAL")]) : (nil);Fi[	@EI"return @url if @url;Fi[[	@ÌiKI"q    #
    # Returns the String url.
    def function
      return @url if @url
      var = if permalink then;Fi[	@iÑI"q    #
    # Returns the String URL.
    def function
      return @url if @url
      var = if permalink then;Fi[	@EI"var = fixture("STRING");Fi[[	@fiAI"V  end
  
  def function
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do;Fi[	@fiUI"V  end
  
  def function
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do;Fi[	@EI"0ENV.expects("LITERAL").yields.returns(true);Fi[[	@x/i/I"g  end
  
  def function
    ENV.expects("LITERAL").yields.returns(true)
    ENV.expects("LITERAL");Fi[	@x/i9I"g  end
  
  def function
    ENV.expects("LITERAL").yields.returns(true)
    ENV.expects("LITERAL");Fi[	@EI"-var = Patches.new("LITERAL" => "STRING");Fi[[	@Íi!I"y  end
  
  def function
    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length);Fi[	@Íi(I"y  end
  
  def function
    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length);Fi[	I"+var = IncompleteStableSpecTestBall.new;F@ 0i[[	@ƒiøI"y  
  def function
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable);Fi[	@ƒiŒI"y  
  def function
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable);Fi[	@EI"@keg.link;Fi[[	@ÁiI"S  end
  
  def function
    @keg.link
    assert_equal("LITERAL", @keg.unlink);Fi[	@Ái(I"a  end
  
  def function
    @keg.link
    assert_raise(RuntimeError, "STRING") { @keg.link };Fi[	@E@èLi[[	@ƒiæI"d  end
  
  def function
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head);Fi[	@ƒiÕI"d  end
  
  def function
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head);Fi[	I"var.dry_run = true;FI",assert_equal("LITERAL", @keg.link(var));Fi[[	@ÁiI"Ö  def function
    var = OpenStruct.new
    var.dry_run = true
    assert_equal("LITERAL", @keg.link(var))
    assert(@keg.linked?.!);Fi[	@Ái=I"è    var = OpenStruct.new
    var.overwrite = true
    var.dry_run = true
    assert_equal("LITERAL", @keg.link(var))
    assert(@keg.linked?.!);Fi[	@§LI"assert(@keg.linked?.!);Fi[[	@Ái I"ß    var = OpenStruct.new
    var.dry_run = true
    assert_equal("LITERAL", @keg.link(var))
    assert(@keg.linked?.!)
    ["STRING", "STRING", "STRING"].each do |var|;Fi[	@Ái>I"°    var.overwrite = true
    var.dry_run = true
    assert_equal("LITERAL", @keg.link(var))
    assert(@keg.linked?.!)
    assert_equal("STRING", $stdout.string);Fi[	@è1@.Ii[[	@Ái3I"z  
  def function
    FileUtils.touch((HOMEBREW_PREFIX / "STRING"))
    var = OpenStruct.new
    var.overwrite = true;Fi[	@Ái:I"z  
  def function
    FileUtils.touch((HOMEBREW_PREFIX / "STRING"))
    var = OpenStruct.new
    var.overwrite = true;Fi[	@E@VLi[[	@ƒiyI"O  end
  
  def function
    ARGV.push("STRING")
    var = SpecTestBall.new;Fi[	@ƒiI"O  end
  
  def function
    ARGV.push("STRING")
    var = SpecTestBall.new;Fi[	@EI""@d.add("LITERAL" => "STRING");Fi[[	@u/i5I"a  end
  
  def function
    @d.add("LITERAL" => "STRING")
    @d.add("LITERAL" => "LITERAL");Fi[	@u/iAI"Ñ  end
  
  def function
    @d.add("LITERAL" => "STRING")
    assert_equal("STRING", @d.find_requirement(X11Dependency).min_version);Fi[	@EI"@d.add("LITERAL");Fi[[	@u/i+I"i  end
  
  def function
    @d.add("LITERAL")
    assert_not_nil(@d.find_requirement(X11Dependency));Fi[	@u/i<I"l  end
  
  def function
    @d.add("LITERAL")
    assert_empty(@d.find_requirement(X11Dependency).tags);Fi[	@EI"((@deps << Dependency.new("STRING"));Fi[[	@o/iI"w  end
  
  def function
    (@deps << Dependency.new("STRING"))
    (@deps << Dependency.new("STRING", "LITERAL"));Fi[	@o/iI"l  end
  
  def function
    (@deps << Dependency.new("STRING"))
    (@deps << Dependency.new("STRING"));Fi[	@I"assert(var.x86_64?);Fi[[	@ßi)I"à    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!);Fi[	@ßiaI"à    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!);Fi[	@EI"var = mock("STRING");Fi[[	@œ2i&I"a  end
  
  def function
    var = mock("STRING")
    (@env << Proc.new { var.some_message });Fi[	@œ2i-I"g  end
  
  def function
    var = mock("STRING")
    (@env << Proc.new { |var| var.some_message });Fi[	@E@ËJi[[	@±iI"G  end
  
  def function
    case @language
    when "LITERAL" then;Fi[	@±i-I"G  end
  
  def function
    case @language
    when "LITERAL" then;Fi[	@EI"#return unless f.lib.directory?;Fi[[	@îi)I"  end
  
  def function
    return unless f.lib.directory?
    var = f.lib.children.select { |var| var.to_s =~ "LITERAL" };Fi[	@îi8I"≥  end
  
  def function
    return unless f.lib.directory?
    var = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	@E@{Ji[[	@îiI"^  end
  
  def function
    if (f.prefix + "STRING").directory? then
      opoo("STRING");Fi[	@îi I"^  end
  
  def function
    if (f.prefix + "STRING").directory? then
      opoo("STRING");Fi[	@EI")raise("STRING") unless self.symlink?;Fi[[	@ÂiI"ä  end
  
  def function
    raise("STRING") unless self.symlink?
    system("STRING", "STRING", self.to_s, (self.dirname + "STRING").to_s);Fi[	@Âi"I"î  end
  
  def function
    raise("STRING") unless self.symlink?
    system("STRING", "STRING", "STRING", self.to_s, (self.dirname + "STRING").to_s);Fi[	@E@Ji[[	@›imI"K  end
  
  def function
    nostdout do
      assert_nothing_raised do;Fi[	@ƒiI"d  include(VersionAssertions)
  
  def function
    nostdout do
      TestBall.new.brew do |var|;Fi[	@I"!assert(var.text_executable?);Fi[[	@ßiìI"ó    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?)
    assert_equal([], var.archs);Fi[	@ßi£I"ó    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?)
    assert_equal([], var.archs);Fi[	@E@Ji[[	@zi:I"I  end
  
  def function
    var = Dir.getwd
    Dir.chdir(@clone) do;Fi[	@ziüI"I  end
  
  def function
    var = Dir.getwd
    Dir.chdir(@clone) do;Fi[	@E@Ö1i[[	@vi.I"ä  private
  
  def function
    HOMEBREW_REPOSITORY.cd do
      `git rev-list --abbrev-commit HEAD -- Library/Formula/#{name}STRING`.split;Fi[	@fi0I"V  end
  
  def function
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new;Fi[	@£3I"*assert_no_match("LITERAL", file(var));Fi[[	@ßiwI"ª    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert((var.arch == "LITERAL"))
    assert_no_match("LITERAL", file(var))
    assert_no_match("LITERAL", file(var));Fi[	@ßi∂I"ñ    assert(var.text_executable?.!)
    assert_equal([], var.archs)
    assert((var.arch == "LITERAL"))
    assert_no_match("LITERAL", file(var))
  end;Fi[	@E@7i[[	@vi	I"í  extend(self)
  
  def function
    raise("STRING") unless which("STRING")
    raise("STRING") unless (HOMEBREW_REPOSITORY / "STRING").directory?;Fi[	@ziI"Z  end
  
  def function
    raise("STRING") unless which("STRING")
    ohai("STRING");Fi[	@Î#I"assert(var.i386?);Fi[[	@ßiI"|  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!);Fi[	@ßiRI"|  def function
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!);Fi[	@!M@ói[[	@ßiI"à    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ßiSI"à    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@”L@£i[[	@ßi*I"Ä    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ßibI"Ä    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@EI"4raise(KegUnspecifiedError) if ARGV.named.empty?;Fi[[	@Ái	I"†  extend(self)
  
  def function
    raise(KegUnspecifiedError) if ARGV.named.empty?
    if Process.uid.zero? and File.stat(HOMEBREW_BREW_FILE).uid.zero?.! then;Fi[	I"*projects//homebrew_proj/cmd/unlink.rb;TiI"u  extend(self)
  
  def function
    raise(KegUnspecifiedError) if ARGV.named.empty?
    ARGV.kegs.each do |var|;Fi[	@EI"2if instance_variable_defined?("LITERAL") then;Fi[[	@ﬁi!I"[  end
  
  def function
    if instance_variable_defined?("LITERAL") then
      @xcode;Fi[	@ﬁi-I"Y  end
  
  def function
    if instance_variable_defined?("LITERAL") then
      @clt;Fi[	@EI"if superenv? then;Fi[[	@ôi
I"~  extend(self)
  
  def function
    if superenv? then
      ENV.deps = ARGV.formulae.map(&"LITERAL") unless ARGV.named.empty?;Fi[	@≠i
I"P  extend(self)
  
  def function
    if superenv? then
      ENV.x11 = true;Fi[	@M@¢3i[[	@ßiîI"¢    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?)
    assert_equal([], var.archs)
    assert((var.arch == "LITERAL"));Fi[	@ßi§I"¢    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?)
    assert_equal([], var.archs)
    assert((var.arch == "LITERAL"));Fi[	@EI"system("STRING");Fi[[	@RiPI"7  end
  
  def function
    system("STRING")
  end;Fi[	@i/I"7  end
  
  def function
    system("STRING")
  end;Fi[	@;-@„Gi[[	@Íi2I"     var = { "LITERAL" => "STRING", "LITERAL" => "STRING" }
    var = Patches.new(var)
    assert_equal("LITERAL", var.patches.length)
    var = Set.new
    var.each { |var| (var << var.patch_filename) };Fi[	@Íi;I"Ê    var = { "LITERAL" => (["STRING", "STRING"]), "LITERAL" => (["STRING", "STRING"]) }
    var = Patches.new(var)
    assert_equal("LITERAL", var.patches.length)
    var = Set.new
    var.each { |var| (var << var.patch_filename) };Fi[	@EI"var = @options["LITERAL"];Fi[[	@∆iöI"}    end
    
    def function
      var = @options["LITERAL"]
      var.respond_to?("LITERAL") ? (var.call(instance)) : (var);Fi[	@äiRI"z      end
      
      def function
        var = @options["LITERAL"]
        var = var.call(self) if var.is_a?(Proc);Fi[	@EI"manipulate! do |var|;Fi[[	@…i(I"E  end
  
  def function
    manipulate! do |var|
      var.strip;Fi[	@ÃiI"Z  process("LITERAL")
  
  def function
    manipulate! do |var|
      var.auto_orient;Fi[	@àL@;-i[[	@Íi"I"è  
  def function
    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"];Fi[	@Íi)I"è  
  def function
    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"];Fi[	I"var = Patches.new(var);F@;-i[[	@Íi1I"¶  def function
    var = { "LITERAL" => "STRING", "LITERAL" => "STRING" }
    var = Patches.new(var)
    assert_equal("LITERAL", var.patches.length)
    var = Set.new;Fi[	@Íi:I"¬  def function
    var = { "LITERAL" => (["STRING", "STRING"]), "LITERAL" => (["STRING", "STRING"]) }
    var = Patches.new(var)
    assert_equal("LITERAL", var.patches.length)
    var = Set.new;Fi[	@E@å7i[[	I".projects//diaspora_proj/models/reshare.rb;TiHI"K  end
  
  def function
    var = self
    while var.is_a?(Reshare) do;Fi[	@œiÜI"m      
      # @private
      def function
        var = self
        @var ||= compiler.instance_eval do;Fi[	@:@*i[[	@=i3I"g  
  def function
    with_temp_folder do
      FileUtils.mkdir_p("STRING")
      system("STRING");Fi[	@=iPI"g  
  def function
    with_temp_folder do
      FileUtils.mkdir_p("STRING")
      system("STRING");Fi[	I"$TARGET_FOLDER.install("STRING");F@z%i[[	@=iI"¬  def function
    with_temp_folder do
      TARGET_FOLDER.install("STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING");Fi[	@=i6I"“      FileUtils.mkdir_p("STRING")
      system("STRING")
      TARGET_FOLDER.install("STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING");Fi[	@E@®Ei[[	@êiYI"X  
  # @return [String]
  def function
    case self.service
    when "STRING" then;Fi[	@êieI"X  
  # @return [String]
  def function
    case self.service
    when "STRING" then;Fi[	@EI"self.person.lock_access!;Fi[[	I"6projects//diaspora_proj/models/account_deleter.rb;TiUI"X  end
  
  def function
    self.person.lock_access!
    self.person.clear_profile!;Fi[	@√iØI"O  end
  
  def function
    self.person.lock_access!
    self.lock_access!;Fi[	@*@:i[[	I"2projects//jekyll_proj/jekyll/migrators/csv.rb;TiI"Ñ  module CSV
    def self.process(var)
      FileUtils.mkdir_p("STRING")
      var = "LITERAL"
      FasterCSV.foreach(var) do |var|;Fi[	@2:iI"¥    def self.process(var)
      raise(ArgumentError, "STRING") unless File.directory?(var)
      FileUtils.mkdir_p("STRING")
      var = "LITERAL"
      Dir["STRING"].each do |var|;Fi[	@*@PMi[[	@=i4I"Ö  def function
    with_temp_folder do
      FileUtils.mkdir_p("STRING")
      system("STRING")
      TARGET_FOLDER.install("STRING");Fi[	@=iQI"ë  def function
    with_temp_folder do
      FileUtils.mkdir_p("STRING")
      system("STRING")
      TARGET_FOLDER.install("STRING" => "STRING");Fi[	@*@*i[[	@ìiI"›    
    def self.process(var, var, var, var)
      FileUtils.mkdir_p("STRING")
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      var[SQL].each do |var|;Fi[	@‘iI"√        end
      end
      FileUtils.mkdir_p("STRING")
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      var = var["LITERAL"];Fi[	@EI".find_current_user_post(params["LITERAL"]);Fi[[	@˚iII"j  end
  
  def function
    find_current_user_post(params["LITERAL"])
    current_user.retract(@post);Fi[	@˚iSI"p  end
  
  def function
    find_current_user_post(params["LITERAL"])
    @post.favorite = @post.favorite.!;Fi[	@4@4i[[	@=i@I"Î      TARGET_FOLDER.install("STRING" => "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING")
    end;Fi[	@=iJI"Û      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING")
      assert((TARGET_FOLDER + "STRING").exist?.!, "STRING")
    end;Fi[	@ÅLI"ENV.expects("LITERAL");Fi[[	@x/i0I"Ä  
  def function
    ENV.expects("LITERAL").yields.returns(true)
    ENV.expects("LITERAL")
    var = Class.new(Requirement) do;Fi[	@x/i:I"Ä  
  def function
    ENV.expects("LITERAL").yields.returns(true)
    ENV.expects("LITERAL")
    var = Class.new(Requirement) do;Fi[	@∫MI"$var = Class.new(Requirement) do;Fi[[	@x/i1I"í  def function
    ENV.expects("LITERAL").yields.returns(true)
    ENV.expects("LITERAL")
    var = Class.new(Requirement) do
      env("LITERAL");Fi[	@x/i;I"æ  def function
    ENV.expects("LITERAL").yields.returns(true)
    ENV.expects("LITERAL")
    var = Class.new(Requirement) do
      satisfy("LITERAL" => (true), "LITERAL" => (true)) { true };Fi[	@E@Ei[[	@∏iNI"x  end
  
  def function
    var = current_user.photos.where("LITERAL" => (params["LITERAL"])).first
    if var then;Fi[	@∏ijI"x  end
  
  def function
    var = current_user.photos.where("LITERAL" => (params["LITERAL"])).first
    if var then;Fi[	@E@Ei[[	@˙iÑI"b  end
  
  def function
    @var = Person.find_by_guid(params["LITERAL"])
    if @person then;Fi[	@˙iìI"{  end
  
  def function
    @var = Person.find_by_guid(params["LITERAL"])
    if (@person == current_user.person) then;Fi[	@EI"5@var = Person.find_from_guid_or_username(params);Fi[[	@˙iII"Ø  
  # renders the persons user profile page
  def function
    @var = Person.find_from_guid_or_username(params)
    authenticate_user! if remote_profile_with_no_user_session?;Fi[	@˙izI"ú  end
  
  def function
    @var = Person.find_from_guid_or_username(params)
    var = Post.visible_from_author(@person, current_user).order("STRING").first;Fi[	@E@å&i[[	@i1I"_  end
  
  def function
    Rails.logger.info("STRING")
    flash["LITERAL"] = t("STRING");Fi[	I".projects//diaspora_proj/models/mention.rb;TiI"õ  after_destroy("LITERAL")
  
  def function
    Rails.logger.info("STRING")
    Notification.notify(person.owner, self, post.author) unless person.remote?;Fi[	@ê$I"&var.in_repo_expect("STRING", var);Fi[[	@fiII"™      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!;Fi[	@fi]I"™      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!;Fi[	@zL@Ö1i[[	@fiBI"l  
  def function
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new;Fi[	@fiVI"l  
  def function
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do
      var = UpdaterMock.new;Fi[	@‚M@…1i[[	@fiJI"û      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!
      var = Report.new;Fi[	@fi^I"û      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!
      var = Report.new;Fi[	I"1assert(var.select_formula("LITERAL").empty?);F@ıMi[[	@fiOI"Ÿ      var.merge!(var.report)
      assert(var.expectations_met?)
      assert(var.select_formula("LITERAL").empty?)
      assert(var.select_formula("LITERAL").empty?)
      assert(var.select_formula("LITERAL").empty?);Fi[	@fiPI"ƒ      assert(var.expectations_met?)
      assert(var.select_formula("LITERAL").empty?)
      assert(var.select_formula("LITERAL").empty?)
      assert(var.select_formula("LITERAL").empty?)
    end;Fi[	@ê3@	i[[	@ì3iI"ˆ    if `sw_vers -productVersion` =~ "LITERAL" and ($1.to_i >= "LITERAL") then
      assert_equal("LITERAL", var.length)
      assert(var.include?("LITERAL"))
    else
      if `sw_vers -productVersion` =~ "LITERAL" and ($1.to_i == "LITERAL") then;Fi[	@ì3iI"≤        assert_equal("LITERAL", var.length)
        assert(var.include?("LITERAL"))
        assert(var.include?("LITERAL"))
      else
        assert_equal("LITERAL", var.length);Fi[	@E@Q#i[[	@%iI"l  before_filter("LITERAL")
  
  def function
    respond_to do |var|
      var.html { set_up_contacts };Fi[	@i.I"~  end
  
  def function
    respond_to do |var|
      var.json { render("LITERAL" => (tags.to_json), "LITERAL" => "LITERAL") };Fi[	I" var = Version.new("STRING");FI"assert(var.devel?);Fi[[	@Ëi6I"É    var = Version.new("STRING")
    assert(var.alpha?)
    var = Version.new("STRING")
    assert(var.devel?)
    assert(var.beta?);Fi[	@Ëi9I"|    assert(var.devel?)
    assert(var.beta?)
    var = Version.new("STRING")
    assert(var.devel?)
    assert(var.rc?);Fi[	@EI"if model_exists? then;Fi[[	@ìiI"è      end
      
      def function
        if model_exists? then
          inject_into_file(model_path, migration_data, "LITERAL" => "STRING");Fi[	@ìiI"è      end
      
      def function
        if model_exists? then
          inject_into_file(model_path, model_contents, "LITERAL" => "STRING");Fi[	I"8# name parameter required for some Formula::factory;F@±i[[	@iI"ârequire("formula")
class TestBall < Formula
  # name parameter required for some Formula::factory
  def function(var)
    @var = "STRING";Fi[	@i*I"u  md5("STRING")
  
  # name parameter required for some Formula::factory
  def function(var)
    super("STRING");Fi[	I"devel do;F@~5i[[	@imI"a  head("STRING", "LITERAL" => "STRING")
  
  devel do
    url("STRING")
    mirror("STRING");Fi[	@iÅI"K  version("STRING")
  
  devel do
    url("STRING")
    sha1("STRING");Fi[	@E@Ri[[	@Åi+I"t      
      # The install method override this to install
      def function
        raise("STRING")
      end;Fi[	@¸i§I":  private
  
  def function
    raise("STRING")
  end;Fi[	I"bottle do;F@º$i[[	@isI"Y  end
  
  bottle do
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL");Fi[	@i˝I"d  sha1("STRING")
  
  bottle do
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL");Fi[	@EI"Cgenerate_reset_password_token! if should_generate_reset_token?;Fi[[	@+iI"ﬁ      
      # Resets reset password token and send reset password instructions by email
      def function
        generate_reset_password_token! if should_generate_reset_token?
        send_devise_notification("LITERAL");Fi[	@√i£I"ã  end
  
  def function
    generate_reset_password_token! if should_generate_reset_token?
    Resque.enqueue(Jobs::ResetPassword, self.id);Fi[	@EI" pending_any_confirmation do;Fi[[	@ÄiI"       # is already confirmed, add an error to email field. If the user is invalid
      # add errors
      def function
        pending_any_confirmation do
          if confirmation_period_expired? then;Fi[	@ÄiBI"€      
      # Resend confirmation token. This method does not need to generate a new token.
      def function
        pending_any_confirmation do
          self.confirmation_token = nil if confirmation_period_expired?;Fi[	I"/require("multi_json/adapters/json_common");F@B i[[	@I iI"yrequire("json") unless defined? ::JSON
require("multi_json/adapters/json_common")
module MultiJson
  module Adapters;Fi[	@L iI"~require("json/pure") unless defined? ::JSON
require("multi_json/adapters/json_common")
module MultiJson
  module Adapters;Fi[	I"def self.load(var, var);FI"1var = var.read if var.respond_to?("LITERAL");Fi[[	@|iI"¡      ParseError = ::MultiJson::OkJson::Error
      
      def self.load(var, var)
        var = var.read if var.respond_to?("LITERAL")
        var = var.dataUsingEncoding(NSUTF8StringEncoding);Fi[	@fiI"¿      ParseError = ::MultiJson::OkJson::Error
      
      def self.load(var, var)
        var = var.read if var.respond_to?("LITERAL")
        var = ::MultiJson::OkJson.decode("STRING").first;Fi[	@EI"%self.file_size = File.size(path);Fi[[	@7iEI"~      end
      
      def function
        self.file_size = File.size(path)
        css.each_selector do |var, var, var|;Fi[	@7ikI"e      end
      
      def function
        self.file_size = File.size(path)
        visit_tree!;Fi[	I"7raise(Error, "STRING") if (var.length < "LITERAL");FI"#var, var, var = var["LITERAL"];Fi[[	@LiI"∂    # except that it does not accept atomic values.
    def function(var)
      raise(Error, "STRING") if (var.length < "LITERAL")
      var, var, var = var["LITERAL"]
      case var;Fi[	@Li-I"∫    # Returns the parsed value and any trailing tokens.
    def function(var)
      raise(Error, "STRING") if (var.length < "LITERAL")
      var, var, var = var["LITERAL"]
      case var;Fi[	@WN@æi[[	@LiI"õ    def function(var)
      raise(Error, "STRING") if (var.length < "LITERAL")
      var, var, var = var["LITERAL"]
      case var
      when "STRING" then;Fi[	@Li.I"õ    def function(var)
      raise(Error, "STRING") if (var.length < "LITERAL")
      var, var, var = var["LITERAL"]
      case var
      when "STRING" then;Fi[	@ã=@Ei[[	@Li"I"q      case var
      when "STRING" then
        objparse(var)
      when "STRING" then
        arrparse(var);Fi[	@Li1I"q      case var
      when "STRING" then
        objparse(var)
      when "STRING" then
        arrparse(var);Fi[	@OCI"var, var = valparse(var);Fi[[	@LiQI"¡      (var, var, var), var = var["LITERAL"], var["LITERAL"]
      raise(Error, "STRING") if var.!=("LITERAL")
      var = eat("STRING", var)
      var, var = valparse(var)
      [var, var, var];Fi[	@Li`I"≤      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      loop do
        var = eat("STRING", var)
        var, var = valparse(var)
        (var << var);Fi[	@‚>@NCi[[	@LiCI"∂      var, var, var = pairparse(var)
      var[var] = var
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      loop do
        var = eat("STRING", var);Fi[	@Li^I"Æ      var, var = valparse(var)
      (var << var)
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      loop do
        var = eat("STRING", var);Fi[	I"#var, var, var = pairparse(var);F@ŒGi[[	@LiAI"‰      var = {}
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      var, var, var = pairparse(var)
      var[var] = var
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING");Fi[	@LiFI"º      loop do
        var = eat("STRING", var)
        var, var, var = pairparse(var)
        var[var] = var
        return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING");Fi[	@jN@ï*i[[	@Li\I"‹      var = []
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING")
      var, var = valparse(var)
      (var << var)
      return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING");Fi[	@LiaI"¥      loop do
        var = eat("STRING", var)
        var, var = valparse(var)
        (var << var)
        return [var, var["LITERAL"]] if (var["LITERAL"]["LITERAL"] == "STRING");Fi[	@EI"*@images.each_with_index do |var, var|;Fi[[	@}i~I"õ        end
        
        def function
          @images.each_with_index do |var, var|
            var.top = if (var.position.unit_str == "STRING") then;Fi[	@}iÜI"ù        end
        
        def function
          @images.each_with_index do |var, var|
            var.left = (if (var.position.unit_str == "STRING") then;Fi[	@E@µ'i[[	I"5projects//activemodel_proj/active_model/dirty.rb;Ti6I"Ç    #   person.name = 'robert'
    #   person.changed_attributes # => {"name" => "bob"}
    def function
      @var ||= {}
    end;Fi[	@UiI"P        end
        
        def function
          @var ||= {}
        end;Fi[	@E@Ω@i[[	@u7iI"ì      include(Compass::Installers)
      
      def function
        add_project_configuration
        Compass.add_configuration(options, "STRING");Fi[	@ziI"Ä      protected
      
      def function
        add_project_configuration
        Compass.add_configuration(options, "STRING");Fi[	I"8var[(var + "LITERAL")] = Utagx.|(var.&(Umaskx)).chr;F@Ü	i[[	@Li#I"·      when (var <= Uchar2max) then
        var[(var + "LITERAL")] = Utag2.|((var >> "LITERAL").&("LITERAL")).chr
        var[(var + "LITERAL")] = Utagx.|(var.&(Umaskx)).chr
        "LITERAL"
      when (var <= Uchar3max) then;Fi[	@Li(I"Ò        var[(var + "LITERAL")] = Utag3.|((var >> "LITERAL").&("LITERAL")).chr
        var[(var + "LITERAL")] = Utagx.|((var >> "LITERAL").&(Umaskx)).chr
        var[(var + "LITERAL")] = Utagx.|(var.&(Umaskx)).chr
        "LITERAL"
      else;Fi[	I"Gvar[(var + "LITERAL")] = Utagx.|((var >> "LITERAL").&(Umaskx)).chr;F@òNi[[	@Li'I"	      when (var <= Uchar3max) then
        var[(var + "LITERAL")] = Utag3.|((var >> "LITERAL").&("LITERAL")).chr
        var[(var + "LITERAL")] = Utagx.|((var >> "LITERAL").&(Umaskx)).chr
        var[(var + "LITERAL")] = Utagx.|(var.&(Umaskx)).chr
        "LITERAL";Fi[	@Li-I"3        (var[(var + "LITERAL")] = Utag4.|((var >> "LITERAL").&("LITERAL")).chr
        var[(var + "LITERAL")] = Utagx.|((var >> "LITERAL").&(Umaskx)).chr
        var[(var + "LITERAL")] = Utagx.|((var >> "LITERAL").&(Umaskx)).chr
        var[(var + "LITERAL")] = Utagx.|(var.&(Umaskx)).chr
        "LITERAL");Fi[	I"8when (("STRING" <= var) and (var <= "STRING")) then;FI"+((var.ord - "STRING".ord) + "LITERAL");Fi[[	@LiGI"˝      when (("STRING" <= var) and (var <= "STRING")) then
        (var.ord - "STRING".ord)
      when (("STRING" <= var) and (var <= "STRING")) then
        ((var.ord - "STRING".ord) + "LITERAL")
      when (("STRING" <= var) and (var <= "STRING")) then;Fi[	@LiII"‹      when (("STRING" <= var) and (var <= "STRING")) then
        ((var.ord - "STRING".ord) + "LITERAL")
      when (("STRING" <= var) and (var <= "STRING")) then
        ((var.ord - "STRING".ord) + "LITERAL")
      else;Fi[	@L@@Î&i[[	@Li\I"f      case var
      when Hash then
        objenc(var)
      when Array then
        arrenc(var);Fi[	@LigI"f      case var
      when Hash then
        objenc(var)
      when Array then
        arrenc(var);Fi[	@EI"#directory(targetize("STRING"));Fi[[	@¢iI"¢    module StandAlone
      class Installer < Compass::Installers::ManifestInstaller
        def function
          directory(targetize("STRING"))
          super;Fi[	@∞iI"á      end
      
      def function
        directory(targetize("STRING"))
        directory(targetize(Compass.configuration.sass_dir));Fi[	@E@P'i[[	@lilI"M      protected
      
      def function
        @var = false
      end;Fi[	@lipI"G      end
      
      def function
        @var = false
      end;Fi[	@E@∏?i[[	@[ilI"º      # Removes the previously created @password_file
      # (temporary file containing the password)
      def function
        @password_file.delete if @password_file
        @var = nil;Fi[	@ligI"∆        # Removes the previously created @password_file
        # (temporary file containing the password)
        def function
          @password_file.delete if @password_file
          @var = nil;Fi[	@E@î?i[[	@[i2I"¬      ##
      # Establishes a connection to the remote server
      def function
        Net::SSH.start(ip, username, "LITERAL" => (password), "LITERAL" => (port)) do |var|
          yield(var);Fi[	@pi&I"Ì      # and yields the Net::SSH connection.
      # Net::SCP will use this connection to transfer backups
      def function
        Net::SSH.start(ip, username, "LITERAL" => (password), "LITERAL" => (port)) do |var|
          yield(var);Fi[	@EI"@var = @model.package;Fi[[	@di#I"Â    # final @package.basename, plus a '-' separator. This `prefix` will then
    # be suffixed using 'aa', 'ab', and so on... for each file.
    def function
      @var = @model.package
      Logger.message(("STRING" + "STRING"));Fi[	@gi!I"u      ##
      # Performs the backup transfer
      def function
        @var = @model.package
        transfer!;Fi[	@EI"return unless @orig_err;Fi[[	@»i8I"{      end
      
      def function
        return unless @orig_err
        @var ||= if @orig_err.is_a?(Errors::Error) then;Fi[	@»iAI"      end
      
      def function
        return unless @orig_err
        return @orig_err_msg unless @orig_err_msg.nil?;Fi[	@E@º=i[[	@ñiBI"{      ##
      # Attempt to load a cached session
      def function
        var = false
        if cache_exists? then;Fi[	@iI"D  end
  
  def function
    var = false
    @var = current_user;Fi[	@E@q!i[[	@êi%I"L      end
      
      def function
        @var ||= "STRING"
      end;Fi[	@CiÌI"¶    # The string representation is the same as the id for this worker
    # instance. Can be used with `Worker.find`.
    def function
      @var ||= "STRING"
    end;Fi[	I"case @config["STRING"];F@Ei[[	@∆iI"p    def function
      return if @setup
      case @config["STRING"]
      when "STRING" then
        begin;Fi[	@∆i`I"•    def function(var)
      setup
      case @config["STRING"]
      when "STRING" then
        @redcarpet_extensions["LITERAL"] = @redcarpet_extensions["LITERAL"].!;Fi[	@EI"-var = "STRING".gsub("LITERAL", "STRING");Fi[[	@Ii∞I"´      # and ensure no 'write operations' are performed during the
      # dump process
      def function
        var = "STRING".gsub("LITERAL", "STRING")
        run(var);Fi[	@Ii∑I"É      ##
      # Unlocks the (locked) database
      def function
        var = "STRING".gsub("LITERAL", "STRING")
        run(var);Fi[	I"=MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"];F@ıNi[[	@∆iDI".            MaRuKu::Globals["LITERAL"] = "STRING"
            MaRuKu::Globals["LITERAL"] = true
            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"]
            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"]
            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"];Fi[	@∆iEI"            MaRuKu::Globals["LITERAL"] = true
            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"]
            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"]
            MaRuKu::Globals["LITERAL"] = @config["STRING"]["STRING"]
          end);Fi[	@E@J<i[[	@∂iI"¡      ##
      # Yields to the block the compressor command and filename extension.
      def function
        Backup::Logger.warn(((("STRING" + "STRING") + "STRING") + "STRING"))
        super;Fi[	@πi%I"¡      ##
      # Yields to the block the compressor command and filename extension.
      def function
        Backup::Logger.warn(((("STRING" + "STRING") + "STRING") + "STRING"))
        super;Fi[	@E@7'i[[	@˛*iI"m      include(Backup::Configuration::Helpers)
      
      def function
        load_defaults!
      end;Fi[	@ŸiI"}      ##
      # Flag for mirroring the files/directories
      def function
        load_defaults!
        @var ||= "STRING";Fi[	@EI"	log!;Fi[[	@Œ$iI"ç      ##
      # Yields to the block the compressor command and filename extension.
      def function
        log!
        yield(@cmd, @ext);Fi[	@Ói*I"¡      # Once the packaging procedure is complete, it will return
      # so that any clean-up may be performed after the yield.
      def function
        log!
        yield("STRING", "STRING");Fi[	@s8@$i[[	@ÌiI"Õ    # base - The String path to the source.
    # dir  - The String path between the source and the file.
    # name - The String filename of the file.
    def function(var, var, var, var)
      @var = var;Fi[	@∞iI"Õ    # base - The String path to the <source>.
    # dir  - The String path between <source> and the file.
    # name - The String filename of the file.
    def function(var, var, var, var)
      @var = var;Fi[	@E@Î!i[[	@›iI"pend
class TestZip < Formula
  def function
    @var = "STRING"
    var = (HOMEBREW_CACHE.parent + "STRING");Fi[	@ÙiI"R  version("STRING")
  
  def function
    @var = "STRING"
    @var = "STRING";Fi[	@	I""job_type("LITERAL", "STRING");Fi[[	I".projects//whenever_proj/whenever/setup.rb;TiI"Ñ  job_type("LITERAL", "STRING")
  job_type("LITERAL", "STRING")
else
  job_type("LITERAL", "STRING")
  job_type("LITERAL", "STRING");Fi[	@OiI"fif Whenever.rails3? then
  job_type("LITERAL", "STRING")
else
  job_type("LITERAL", "STRING")
end;Fi[	@	@Ì7i[[	@ﬁ"i#I"à        var.pos -= "LITERAL"
      end
    else
      if ((var >> "LITERAL") == "LITERAL") then
        if check_next_sequence(var) then;Fi[	@ﬁ"i.I"í          var.pos -= "LITERAL"
        end
      else
        if ((var >> "LITERAL") == "LITERAL") then
          if check_next_sequence(var) then;Fi[	I")# Returns the HTML formatted String.;F@±i[[	@—iI"õ    # input - The Textile String to convert.
    #
    # Returns the HTML formatted String.
    def function(var)
      var = @context.registers["LITERAL"];Fi[	@—iI"ú    # input - The Markdown String to convert.
    #
    # Returns the HTML formatted String.
    def function(var)
      var = @context.registers["LITERAL"];Fi[	I"!# date - The Time to format.;F@i[[	@—i)I"ã    # Format a date in long format e.g. "27 January 2011".
    #
    # date - The Time to format.
    #
    # Returns the formatted String.;Fi[	@—i2I"d    # Format a date for use in XML.
    #
    # date - The Time to format.
    #
    # Examples;Fi[	@	@ﬂKi[[	@Ci´I"]        end
        failed!
      else
        Resque.logger.info("STRING")
      ensure;Fi[	@CiœI"m          sleep(var)
          retry
        else
          Resque.logger.info("STRING")
          raise;Fi[	@	@™Hi[[	@ﬁi5I"€      if (var == "LITERAL") then
        synchronize { decode(@redis.lindex(@redis_name, var)) }
      else
        synchronize do
          Array(@redis.lrange(@redis_name, var, ((var + var) - "LITERAL"))).map do |var|;Fi[	@ﬁiJI"_          decode(var)
        end
      else
        synchronize do
          until var do;Fi[	I"$# input - The String to escape.;F@i[[	@—iAI"o    # appropriate HTML entity replacements.
    #
    # input - The String to escape.
    #
    # Examples;Fi[	@—iPI"l    # with appropriate %XX replacements.
    #
    # input - The String to escape.
    #
    # Examples;Fi[	I""# Returns the escaped String.;F@±i[[	@—iHI"Ü    #   # => "foo &quot;bar&quot; &lt;baz&gt;"
    #
    # Returns the escaped String.
    def function(var)
      CGI.escapeHTML(var);Fi[	@—iWI"z    #   # => "foo%2Cbar%3Bbaz%3F"
    #
    # Returns the escaped String.
    def function(var)
      CGI.escape(var);Fi[	@À@i[[	@úMiI""        var = (var + "LITERAL")
        var = (((var["LITERAL"].split("STRING")["LITERAL"] + "STRING") + var["LITERAL"]) + (var["LITERAL"] =~ "LITERAL" ? ("STRING") : ("STRING")))
        File.open("STRING", "STRING") do |var|
          var.puts("STRING")
          var.puts(var["LITERAL"]);Fi[	@≤i-I"æ          var.each do |var|
            FileUtils.mkdir_p(var["LITERAL"])
            File.open("STRING", "STRING") do |var|
              var.puts("STRING")
              var.puts("STRING");Fi[	@	I"Mif env["STRING"] and env["STRING"].match(/#{request_path}STRING/).! then;Fi[[	@Êi≤I"          if request.params["STRING"] then
            env["STRING"]["STRING"] = request.params["STRING"]
          else
            if env["STRING"] and env["STRING"].match(/#{request_path}STRING/).! then
              env["STRING"]["STRING"] = env["STRING"];Fi[	@ÊiÚI"Ò      if request.params["STRING"] then
        @env["STRING"]["STRING"] = request.params["STRING"]
      else
        if env["STRING"] and env["STRING"].match(/#{request_path}STRING/).! then
          @env["STRING"]["STRING"] = env["STRING"];Fi[	@	I"var.to_s;Fi[[	@¬#iGI"∞      if var.is_a?(Symbol) then
        I18n.t(:"#{scope}STRING#{var}", "LITERAL" => (scope), "LITERAL" => "STRING", "LITERAL" => ([var]))
      else
        var.to_s
      end;Fi[	@¸i≥I"N    when "LITERAL" then
      "LITERAL"
    else
      var.to_s
    end));Fi[	@	@Li[[	@¡	i1I"l    when nil then
      var.fails_with?("LITERAL")
    else
      var.fails_with?("LITERAL").!
    end);Fi[	@¡	iTI"l    when nil then
      var.fails_with?("LITERAL")
    else
      var.fails_with?("LITERAL").!
    end);Fi[	@	@HKi[[	@+iI"k      when "LITERAL" then
        var.bottle
      else
        var.stable
      end, var.active_spec);Fi[	@+i#I"k      when "LITERAL" then
        var.bottle
      else
        var.stable
      end, var.active_spec);Fi[	@	@¶0i[[	@º	iI"w    if (version == "LITERAL") then
      "LITERAL"
    else
      if (version == "LITERAL") then
        "LITERAL";Fi[	@º	iI"|      if (version == "LITERAL") then
        "LITERAL"
      else
        if (version == "LITERAL") then
          "LITERAL";Fi[	@	@|1i[[	@iqI"π      if @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL"
      else
        if @compilers.include?("LITERAL") then
          "LITERAL";Fi[	@i{I"π      if @compilers.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL"
      else
        if @compilers.include?("LITERAL") then
          "LITERAL";Fi[	@	I"if var.dry_run then;Fi[[	@ÁiI"â        print("STRING") { var.link(var) }
        next
      else
        if var.dry_run then
          print("STRING") { var.link(var) };Fi[	@πiƒI"n        puts(var) if var.exist?
        return
      else
        if var.dry_run then
          puts(var);Fi[	I"fvar = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |var, var|;F@∏i[[	@≤i I"û        var = var.strip.downcase.gsub("LITERAL", "STRING").gsub("LITERAL", "STRING").gsub("LITERAL", "STRING").gsub("LITERAL", "STRING").gsub("LITERAL", "STRING").gsub("LITERAL", "STRING")
        var = ((var.strftime("STRING") + var) + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |var, var|
          (var.nil? or (var == "STRING"))
        end.to_yaml;Fi[	@ƒi,I"          var = var["STRING"].!
          var = ("STRING" % [var.year, var.month, var.day, var])
          var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |var, var|
            (var.nil? or (var == "STRING"))
          end.to_yaml;Fi[	@	@ª%i[[	@piI"÷          puts
        end
      else
        raise(FormulaUnspecifiedError) if ARGV.named.empty?
        var = ARGV.formulae.map { |var| ARGV.one? ? (var.deps) : (var.recursive_deps) }.intersection.map(&"LITERAL");Fi[	@&iI"ﬂ      var = Homebrew.outdated_brews.collect { |var| var.name }
      Formula.select { |var| (var.installed? or var.include?(var.name)) }
    else
      raise(FormulaUnspecifiedError) if ARGV.named.empty?
      ARGV.formulae;Fi[	@∏I"end.to_yaml);Fi[[	@àiI"1        File.open("STRING", "STRING") do |var|
          var.puts({ "STRING" => "STRING", "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"]) }.delete_if do |var, var|
            (var.nil? or (var == "STRING"))
          end.to_yaml)
          var.puts("STRING");Fi[	@ìiI"        File.open("STRING", "STRING") do |var|
          var.puts({ "STRING" => "STRING", "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"]) }.delete_if do |var, var|
            (var.nil? or (var == "STRING"))
          end.to_yaml)
          var.puts("STRING");Fi[	@	I"if var.directory? then;Fi[[	@ViAI"»          ((var.extname == "STRING") or (var.extname == "STRING")) and var.symlink?.!
        end
      else
        if var.directory? then
          var.symlink? ? (puts("STRING")) : (print_dir(var));Fi[	@πi‰I"ò          make_relative_symlink(var, var, var)
        end
      else
        if var.directory? then
          next if var.directory? and var.symlink?.!;Fi[	@	@Fi[[	@œi]I"£            var = var["LITERAL"].strip
          end
        else
          if contains_interpolation?(var) then
            var = unescape_interpolation(var, var);Fi[	@œidI"Ç          end
        end
      else
        if contains_interpolation?(var) then
          var = unescape_interpolation(var, var);Fi[	@%;@*i[[	@àiI"Â    SQL = "STRING"
    
    def self.process(var, var, var, var)
      FileUtils.mkdir_p("STRING")
      var = Sequel.postgres("LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING");Fi[	@ìiI"”    SQL = "STRING"
    
    def self.process(var, var, var, var)
      FileUtils.mkdir_p("STRING")
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING");Fi[	@	@å7i[[	@Âi*I"}      var = (self + var)
      var = Pathname.new(var)
    else
      var = self
      var = (self + File.basename(var));Fi[	@„i8I"å            var = Nokogiri::XML::Node.new("STRING", document)
            send(var, var)
          else
            var = self
          end;Fi[	@ëO@i[[	@àiI"6          var.puts({ "STRING" => "STRING", "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"]) }.delete_if do |var, var|
            (var.nil? or (var == "STRING"))
          end.to_yaml)
          var.puts("STRING")
          var.puts(var["LITERAL"].delete("STRING"));Fi[	@ìiI"          var.puts({ "STRING" => "STRING", "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"]) }.delete_if do |var, var|
            (var.nil? or (var == "STRING"))
          end.to_yaml)
          var.puts("STRING")
          var.puts(var["LITERAL"].delete("STRING"));Fi[	@	@V/i[[	@=iÌI"ÿ          var = ["STRING", "STRING", "STRING", "STRING"]
          var = Node.new("LITERAL", var)
        else
          if (var["LITERAL"] == "STRING") then
            var = ["STRING", "STRING", "STRING", "STRING"];Fi[	@=iI"™          var.unshift("STRING")
          var = Node.new("LITERAL", var)
        else
          if (var["LITERAL"] == "STRING") then
            var["LITERAL"] = "STRING";Fi[	I"B(var << ("STRING" + var["STRING"])) unless var["STRING"].nil?;F@Ei[[	@Ãi;I"¿        var = (var["STRING"] or var["STRING"])
        var = "STRING"
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?
      when "STRING" then
        var = var["STRING"];Fi[	@ÃiPI"≠        var = var["STRING"]
        var = "STRING"
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?
      when "STRING" then
        var = var["STRING"];Fi[	@pE@Ûi[[	@=iÎI"Ω      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          var = ["STRING", "STRING", "STRING", "STRING"]
          var = Node.new("LITERAL", var)
        else;Fi[	@=iÔI"∞        else
          if (var["LITERAL"] == "STRING") then
            var = ["STRING", "STRING", "STRING", "STRING"]
            var = Node.new("LITERAL", var)
          else;Fi[	I"0var = clean_entities(var) if var["LITERAL"];FI"var = var["LITERAL"].to_s;Fi[[	@‘i*I"œ      var = ("STRING" % [var.year, var.month, var.day, var])
      var = var["LITERAL"].to_s
      var = clean_entities(var) if var["LITERAL"]
      var = var["LITERAL"].to_s
      var = var.index("LITERAL");Fi[	@‘iSI"¯          var = var["LITERAL"].to_s
          var.force_encoding("STRING") if var.respond_to?("LITERAL")
          var = clean_entities(var) if var["LITERAL"]
          var = var["LITERAL"].to_s
          var = clean_entities(var) if var["LITERAL"];Fi[	@ÀO@ Oi[[	@‘i)I"◊      var = (var["LITERAL"] or Time.now)
      var = ("STRING" % [var.year, var.month, var.day, var])
      var = var["LITERAL"].to_s
      var = clean_entities(var) if var["LITERAL"]
      var = var["LITERAL"].to_s;Fi[	@‘iTI"ø          var.force_encoding("STRING") if var.respond_to?("LITERAL")
          var = clean_entities(var) if var["LITERAL"]
          var = var["LITERAL"].to_s
          var = clean_entities(var) if var["LITERAL"]
          (var << { "STRING" => (var["LITERAL"].to_i), "STRING" => (var), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var) });Fi[	I"<if var["LITERAL"] and (var["LITERAL"] == "STRING") then;F@9i[[	@‘i<I"–        var = "STRING"
        var[var].each do |var|
          if var["LITERAL"] and (var["LITERAL"] == "STRING") then
            if var["LITERAL"] then
              (var << clean_entities(var["LITERAL"]));Fi[	@‘iCI"ø            end
          else
            if var["LITERAL"] and (var["LITERAL"] == "STRING") then
              if var["LITERAL"] then
                (var << clean_entities(var["LITERAL"]));Fi[	@£B@	i[[	@‘i>I"—          if var["LITERAL"] and (var["LITERAL"] == "STRING") then
            if var["LITERAL"] then
              (var << clean_entities(var["LITERAL"]))
            else
              (var << var["LITERAL"]);Fi[	@‘iEI"€            if var["LITERAL"] and (var["LITERAL"] == "STRING") then
              if var["LITERAL"] then
                (var << clean_entities(var["LITERAL"]))
              else
                (var << var["LITERAL"]);Fi[	@	I"if var.is_a?(Reshare) then;Fi[[	@,i	I"›    if var.is_a?(Photo) then
      I18n.t("STRING", "LITERAL" => "LITERAL", "LITERAL" => (var.status_message_author_name))
    else
      if var.is_a?(Reshare) then
        I18n.t("STRING", "LITERAL" => (var.author_name));Fi[	@niI"Û        if (var.is_a?(Comment) or var.is_a?(Like)) then
          var = var.concatenate_or_create(var, var.parent, var, var)
        else
          if var.is_a?(Reshare) then
            var = var.concatenate_or_create(var, var.root, var, var);Fi[	I"require("time");F@¨ i[[	@∫ i I"3require("time")
module Resque
  module Failure;Fi [	@Ci I"1require("time")
module Resque
  class Worker;Fi [	@sLI"var = if permalink then;Fi[[	@ÌiLI"}    # Returns the String url.
    def function
      return @url if @url
      var = if permalink then
        permalink;Fi[	@iÖI"}    # Returns the String URL.
    def function
      return @url if @url
      var = if permalink then
        permalink;Fi[	@ÛOI"permalink;Fi[[	@ÌiMI"j    def function
      return @url if @url
      var = if permalink then
        permalink
      else;Fi[	@iÜI"j    def function
      return @url if @url
      var = if permalink then
        permalink
      else;Fi[	@˙O@	i[[	@ÌiNI"∫      return @url if @url
      var = if permalink then
        permalink
      else
        { "STRING" => (self.basename), "STRING" => (self.output_ext) }.inject(template) do |var, var|;Fi[	@iáI"€      return @url if @url
      var = if permalink then
        permalink
      else
        { "STRING" => (date.strftime("STRING")), "STRING" => (date.strftime("STRING")), "STRING" => (date.strftime("STRING")), "STRING" => (CGI.escape(slug)), "STRING" => (date.strftime("STRING").to_i.to_s), "STRING" => (date.strftime("STRING").to_i.to_s), "STRING" => (categories.map { |var| URI.escape(var) }.join("STRING")), "STRING" => (self.output_ext) }.inject(template) do |var, var|;Fi[	I"P@var = var.split("STRING").reject { |var| var =~ "LITERAL" }.join("STRING");FI"1@var = (@url + "STRING") if var =~ "LITERAL";Fi[[	@ÌiTI"ø        end.gsub("LITERAL", "STRING")
      end
      @var = var.split("STRING").reject { |var| var =~ "LITERAL" }.join("STRING")
      @var = (@url + "STRING") if var =~ "LITERAL"
      @url;Fi[	@içI"ø        end.gsub("LITERAL", "STRING")
      end
      @var = var.split("STRING").reject { |var| var =~ "LITERAL" }.join("STRING")
      @var = (@url + "STRING") if var =~ "LITERAL"
      @url;Fi[	@	@,Ei[[	@u;iI"í      var = User.find_by_invitation_token(params["LITERAL"])
      var.ugly_accept_invitation_code if var
    else
      params["LITERAL"]
    end;Fi[	@"(iJI"•    if (params["LITERAL"]["LITERAL"] or (params["LITERAL"]["LITERAL"].first == "STRING")) then
      current_user.aspect_ids
    else
      params["LITERAL"]
    end;Fi[	@	@ŸDi[[	@u;i#I"ú    if @invitation_code.present? then
      render("STRING", "LITERAL" => (false))
    else
      flash["LITERAL"] = t("STRING")
      redirect_to(root_url);Fi[	@icI"µ      if params["LITERAL"].present? and params["LITERAL"]["LITERAL"].present? then
        flash["LITERAL"] = t("STRING")
      else
        flash["LITERAL"] = t("STRING")
      end;Fi[	@î0I")FileUtils.mkdir_p(File.dirname(var));Fi[[	@ÌiÅI"¥    # Returns nothing.
    def function(var)
      var = destination(var)
      FileUtils.mkdir_p(File.dirname(var))
      File.open(var, "STRING") { |var| var.write(self.output) };Fi[	@i“I"¥    # Returns nothing.
    def function(var)
      var = destination(var)
      FileUtils.mkdir_p(File.dirname(var))
      File.open(var, "STRING") { |var| var.write(self.output) };Fi[	I"$stdout.print("STRING");FI"$stdout.flush;Fi[[	@i£I"©          (puts("STRING")
          var = Classifier::LSI.new("LITERAL" => (false))
          $stdout.print("STRING")
          $stdout.flush
          var.each do |var|;Fi[	@i¶I"è          $stdout.flush
          var.each do |var|
            $stdout.print("STRING")
            $stdout.flush
            var.add_item(var);Fi[	I" rescue Errno::ENOENT => var;F@wi[[	@ıi∞I"„        self.categories.values.map { |var| var.sort! { |var, var| (var <=> var) } }
        self.tags.values.map { |var| var.sort! { |var, var| (var <=> var) } })
      rescue Errno::ENOENT => var
        # do nothing
      end;Fi[	@ıi)I"ö            (log("STRING")
            FileUtils.rm(var) if File.exist?(var))
          rescue Errno::ENOENT => var
            # do nothing
          end;Fi[	@	@æDi[[	@gDiI"é      disconnect_if_contact(var.person)
      var = { "LITERAL" => (t("STRING")) }
    else
      var = { "LITERAL" => (t("STRING")) }
    end;Fi[	@gDiI"•    if current_user.blocks.find(params["LITERAL"]).delete then
      var = { "LITERAL" => (t("STRING")) }
    else
      var = { "LITERAL" => (t("STRING")) }
    end;Fi[	@	@‡4i[[	@%i&I"ó    when "STRING" then
      current_user.contacts
    else
      if params["LITERAL"] then
        @var = current_user.aspects.find(params["LITERAL"]);Fi[	@ÙiGI"Ì    if params["LITERAL"] then
      @var = current_user.contacts.find(params["LITERAL"]).id
    else
      if params["LITERAL"] then
        @var = current_user.aspects.find(params["LITERAL"]).contacts.map { |var| var.id }.join("STRING");Fi[	@	@~&i[[	@îiôI"ï      if entities? then
        Array(@attrs["LITERAL"][var.to_sym]).map { |var| var.fetch_or_new(var) }
      else
        warn("STRING")
        [];Fi[	@[iPI"d        var.close!
        exit("LITERAL")
      else
        warn("STRING")
        var.close!;Fi[	@	@]Ci[[	@ÄiñI"ñ        if (confirmed?.! or pending_reconfirmation?) then
          yield
        else
          self.errors.add("LITERAL", "LITERAL")
          false;Fi[	@ai{I"{        if access_locked? then
          yield
        else
          self.errors.add("LITERAL", "LITERAL")
          false;Fi[	@ó4I"## Parse a file with +filename+;Fi[[	@OiI"k        end
        
        ###
        # Parse a file with +filename+
        def function(var, var);Fi[	@¿iII"f        end
        
        ###
        # Parse a file with +filename+
        def function(var);Fi[	@ó4I"2# Add +node_or_tags+ as a child of this Node.;Fi[[	@„iÓI"≈      end
      
      ###
      # Add +node_or_tags+ as a child of this Node.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.;Fi[	@„iˇI"≈      end
      
      ###
      # Add +node_or_tags+ as a child of this Node.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.;Fi[	@ó4I",# Called at the beginning of an element;Fi[[	@
iI"        end
        
        ###
        # Called at the beginning of an element
        # * +name+ is the name of the tag;Fi[	@
i+I"z        end
        
        ###
        # Called at the beginning of an element
        # +name+ is the element name;Fi[	@ó4I"&# Called at the end of an element;Fi[[	@
i$I"p        end
        
        ###
        # Called at the end of an element
        # +name+ is the tag name;Fi[	@
i:I"v        end
        
        ###
        # Called at the end of an element
        # +name+ is the element's name;Fi[	@	I"return false;Fi[[	@›iEI"∆      if self.post.comments.where("LITERAL" => (var.person.id)).!=([]) and self.author_id.!=(var.person.id) then
        return Notifications::AlsoCommented
      else
        return false
      end;Fi[	@√iI"c      if self.like_for(var) then
        return true
      else
        return false
      end;Fi[	@Î;I"xvar.value["LITERAL"] = Node.new("LITERAL", [Node.new("LITERAL", ["STRING"]), Node.new("LITERAL", ["STRING", var])]);Fi[[	@∑i4I"B            var = var.value["LITERAL"].value.first.gsub("LITERAL", "STRING")
            var = var.value["LITERAL"].value.first
            var.value["LITERAL"].value = ["STRING"]
            var.value["LITERAL"] = Node.new("LITERAL", [Node.new("LITERAL", ["STRING"]), Node.new("LITERAL", ["STRING", var])])
          else;Fi[	@∑i9I"?            if ("STRING" == var.value["LITERAL"].value.first) then
              var = var.value["LITERAL"].value.first
              var.value["LITERAL"].value = ["STRING"]
              var.value["LITERAL"] = Node.new("LITERAL", [Node.new("LITERAL", ["STRING"]), Node.new("LITERAL", ["STRING", var])])
            end;Fi[	@ˆJ@Ri[[	@=i5I"]      
      def function(var, var, var)
        var = var.flatten
        var
      end;Fi[	@=i:I"]      
      def function(var, var, var)
        var = var.flatten
        var
      end;Fi[	@	I"var.position.value;Fi[[	@}i}I"Õ            var.top = if (var.position.unit_str == "STRING") then
              ((@height - var.height) * (var.position.value / "LITERAL"))
            else
              var.position.value
            end;Fi[	@}iäI"”            var.left = (if (var.position.unit_str == "STRING") then
              ((@width - var.width) * (var.position.value / "LITERAL"))
            else
              var.position.value
            end).to_i;Fi[	@	I"Ereturn Sass::Script::String.new("STRING") if absolute_path?(var);Fi[[	@A,iRI"≈      if var =~ /^#{Regexp.escape(Compass.configuration.http_images_path)}STRING/ then
        var = $1
      else
        return Sass::Script::String.new("STRING") if absolute_path?(var)
      end;Fi[	@A,iI"œ      if var =~ /^#{Regexp.escape(Compass.configuration.http_generated_images_path)}STRING/ then
        var = $1
      else
        return Sass::Script::String.new("STRING") if absolute_path?(var)
      end;Fi[	@	@rAi[[	I"3projects//compass_proj/compass/exec/helpers.rb;TiI"ó      if var["LITERAL"] then
        var.backtrace["LITERAL"].each { |var| $stderr.puts("STRING") }
      else
        $stderr.puts("STRING")
      end;Fi[	@A,iŸI"r    if File.readable?(var) then
      File.mtime(var).to_i.to_s
    else
      $stderr.puts("STRING")
    end;Fi[	@ÔJ@Ri[[	@=iñI"ê      
      def function(var, var, var)
        var = Node.new("LITERAL", [[var.first, var.last].compact.join("STRING")])
        var
      end;Fi[	@=i∂I"ê      
      def function(var, var, var)
        var = Node.new("LITERAL", [[var.first, var.last].compact.join("STRING")])
        var
      end;Fi[	@“J@Ri[[	@=ißI"†      # reduce 27 omitted
      def function(var, var, var)
        var = Node.new("LITERAL", ([var["LITERAL"]] + (var["LITERAL"] or [])))
        var
      end;Fi[	@=i¨I"ç      
      def function(var, var, var)
        var = Node.new("LITERAL", ([var["LITERAL"]] + (var["LITERAL"] or [])))
        var
      end;Fi[	@	@ı@i[[	@biàI"Ó              var[var].stop = var[(var - "LITERAL")].stop.plus(var[var].stop.minus(var[(var - "LITERAL")].stop).div(Sass::Script::Number.new(var)))
              break
            else
              var = (var + "LITERAL")
            end;Fi[	@¿ iCI"á        if (var["STRING"] == var) then
          Resque::Failure.remove(var)
        else
          var = (var + "LITERAL")
        end;Fi[	@	@N7i[[	@i+I"˚            if (var.numerator_units == ["STRING"]) and (var.denominator_units == []) then
              Sass::Script::Number.new(("LITERAL" - var.value), ["STRING"])
            else
              Compass::Util.compass_warn("STRING")
              var;Fi[	@i/I"v              var
            end
          else
            Compass::Util.compass_warn("STRING")
            var;Fi[	I"var.unshift("STRING");F@Ûi[[	@=iI"§      def function(var, var, var)
        if (var["LITERAL"] == "STRING") then
          var.unshift("STRING")
          var = Node.new("LITERAL", var)
        else;Fi[	@=iI"∞          if (var["LITERAL"] == "STRING") then
            var["LITERAL"] = "STRING"
            var.unshift("STRING")
            var = Node.new("LITERAL", var)
          else;Fi[	@ÀJ@Ri[[	@=iFI"m      
      def function(var, var, var)
        var = [var.first, var["LITERAL"]]
        var
      end;Fi[	@=iKI"m      
      def function(var, var, var)
        var = [var.first, var["LITERAL"]]
        var
      end;Fi[	@	@•i[[	@∏i~I"™    if request.params["LITERAL"].is_a?(String).! then
      var["LITERAL"]
    else
      var = var["LITERAL"]
      var = if (request.content_type.to_s == "STRING") then;Fi[	@“iÉI"n        var = {}
        var = false
      else
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@	I"if var.is_a?(Hash) then;Fi[[	@k iI"ì      if var.is_a?(Binding) then
        @var = var
      else
        if var.is_a?(Hash) then
          @var = Backup::Binder.new(var).get_binding;Fi[	@]i&I"˙              var ||= var.to_s if var.is_a?(Pathname)
              Compass::Configuration::FileData.new_from_string(var.read, var, var)
            else
              if var.is_a?(Hash) then
                Compass::Configuration::Data.new(var, var);Fi[	I"8return self.send(var, var) if self.respond_to?(var);FI"case var.value.first;Fi[[	@‹i
I"Ÿ      def function(var)
        var = :"visit_function_#{var.value.first.gsub("LITERAL", "STRING")}"
        return self.send(var, var) if self.respond_to?(var)
        case var.value.first
        when "LITERAL" then;Fi[	@‹iaI"„        else
          var = :"visit_pseudo_class_#{var.value.first.gsub("LITERAL", "STRING")}"
          return self.send(var, var) if self.respond_to?(var)
          case var.value.first
          when "STRING", "STRING" then;Fi[	@l@@@i[[	@‹iJI"©        case var.value["LITERAL"]
        when "LITERAL" then
          ((var + "STRING") + "STRING")
        when "LITERAL" then
          ((var + "STRING") + "STRING");Fi[	@‹iLI"ö          ((var + "STRING") + "STRING")
        when "LITERAL" then
          ((var + "STRING") + "STRING")
        when "LITERAL" then
          "STRING";Fi[	@=I"class ElementDescription;Fi[[	@ÛiI"Imodule Nokogiri
  module HTML
    class ElementDescription
      ###;Fi[	@ÿiI"ˆmodule Nokogiri
  module HTML
    class ElementDescription
      Desc = Struct.new("STRING", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL");Fi[	@	I"3MUTEX.synchronize { Logger.message("STRING") };Fi[[	@uiàI"˚              if var and (var.etag == var.md5) then
                MUTEX.synchronize { Logger.message("STRING") }
              else
                MUTEX.synchronize { Logger.message("STRING") }
                File.open(var.path, "STRING") do |var|;Fi[	@uiìI"»                  MUTEX.synchronize { Logger.message("STRING") }
                  var.destroy
                else
                  MUTEX.synchronize { Logger.message("STRING") }
                end;Fi[	I"	####;FI";# Create a Nokogiri::XML::DocumentFragment from +tags+;Fi[[	@‡iDI"u      end
      
      ####
      # Create a Nokogiri::XML::DocumentFragment from +tags+
      def function(var);Fi[	@iPI"Ä      
      class << self
        ####
        # Create a Nokogiri::XML::DocumentFragment from +tags+
        def function(var);Fi[	I"L# Serialize Node using +options+.  Save options can also be set using a;FI"# block. See SaveOptions.;Fi[[	@‡i2I"á      
      ####
      # Serialize Node using +options+.  Save options can also be set using a
      # block. See SaveOptions.
      #;Fi[	@„iôI"Ü      
      ###
      # Serialize Node using +options+.  Save options can also be set using a
      # block. See SaveOptions.
      #;Fi[	@ÂP@i[[	@‡i3I"≠      ####
      # Serialize Node using +options+.  Save options can also be set using a
      # block. See SaveOptions.
      #
      # These two statements are equivalent:;Fi[	@„iöI"¨      ###
      # Serialize Node using +options+.  Save options can also be set using a
      # block. See SaveOptions.
      #
      # These two statements are equivalent:;Fi[	I"+# These two statements are equivalent:;F@i[[	@‡i5I"©      # block. See SaveOptions.
      #
      # These two statements are equivalent:
      #
      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML);Fi[	@„iúI"©      # block. See SaveOptions.
      #
      # These two statements are equivalent:
      #
      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML);Fi[	I"K#  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML);F@i[[	@‡i7I"î      # These two statements are equivalent:
      #
      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML)
      #
      # or;Fi[	@„iûI"î      # These two statements are equivalent:
      #
      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML)
      #
      # or;Fi[	I"	# or;F@i[[	@‡i9I"¢      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML)
      #
      # or
      #
      #   node.serialize(:encoding => 'UTF-8') do |config|;Fi[	@„i†I"¢      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML)
      #
      # or
      #
      #   node.serialize(:encoding => 'UTF-8') do |config|;Fi[	I"9#   node.serialize(:encoding => 'UTF-8') do |config|;FI"#     config.format.as_xml;Fi[[	@‡i;I"|      # or
      #
      #   node.serialize(:encoding => 'UTF-8') do |config|
      #     config.format.as_xml
      #   end;Fi[	@„i¢I"|      # or
      #
      #   node.serialize(:encoding => 'UTF-8') do |config|
      #     config.format.as_xml
      #   end;Fi[	@Q@i[[	@‡i<I"~      #
      #   node.serialize(:encoding => 'UTF-8') do |config|
      #     config.format.as_xml
      #   end
      #;Fi[	@„i£I"~      #
      #   node.serialize(:encoding => 'UTF-8') do |config|
      #     config.format.as_xml
      #   end
      #;Fi[	@›P@±i[[	@‡iEI"ô      
      ####
      # Create a Nokogiri::XML::DocumentFragment from +tags+
      def function(var)
        DocumentFragment.new(self, var, self.root);Fi[	@iQI"§      class << self
        ####
        # Create a Nokogiri::XML::DocumentFragment from +tags+
        def function(var)
          self.new(XML::Document.new, var);Fi[	@	@\i[[	@7iRI"‹          [:"#{@base.class.i18n_scope}STRING#{var.model_name.i18n_key}STRING#{var}STRING#{var}", :"#{@base.class.i18n_scope}STRING#{var.model_name.i18n_key}STRING#{var}"]
        end
      else
        var = []
      end;Fi[	@ki#I"ß        if var.errors.empty? then
          "STRING"
        else
          var = []
          var.errors.each_pair { |var, var| var.each { |var| (var << "STRING") } };Fi[	@	@å:i[[	@≠iÂI"        if var and File.exist?(var) then
          "STRING"
        else
          Logger.warn("STRING")
          # do nothing;Fi[	@≠i!I"ä            if var then
              import_key(var, var)
            else
              Logger.warn("STRING")
              # do nothing;Fi[	I";(var = var.match("LITERAL") and return var["LITERAL"]);FI"catch("LITERAL") do;Fi[[	@‡iìI"2          var = var.match("LITERAL") and return Nokogiri.XML(var["LITERAL"]).encoding
          if Nokogiri.jruby? then
            (var = var.match("LITERAL") and return var["LITERAL"])
            catch("LITERAL") do
              Nokogiri::HTML::SAX::Parser.new(JumpSAXHandler.new("LITERAL")).parse(var);Fi[	@‡ißI"*          begin
            ((var = var.match("LITERAL") and return Nokogiri.XML(var["LITERAL"]).encoding)
            (var = var.match("LITERAL") and return var["LITERAL"])
            catch("LITERAL") do
              Nokogiri::HTML::SAX::Parser.new(JumpSAXHandler.new("LITERAL".to_s)).parse(var);Fi[	I",var["LITERAL"] = var["LITERAL"].flatten;F@/Qi[[	@ÿi+I"√        begin
          (var = Desc.new(*var)
          var["LITERAL"] = var["LITERAL"].flatten
          var["LITERAL"] = var["LITERAL"].flatten
          var["LITERAL"] = var["LITERAL"].flatten;Fi[	@ÿi,I"Ë          (var = Desc.new(*var)
          var["LITERAL"] = var["LITERAL"].flatten
          var["LITERAL"] = var["LITERAL"].flatten
          var["LITERAL"] = var["LITERAL"].flatten
          var["LITERAL"] = var["LITERAL"].flatten);Fi[	@Y)I"class PushParser;Fi[[	@∫iI"lmodule Nokogiri
  module HTML
    module SAX
      class PushParser
        def function(var, var, var);Fi[	@√iI"hmodule Nokogiri
  module XML
    module SAX
      class PushParser
        attr_accessor("LITERAL");Fi[	I"$raise(ArgumentError) unless var;FI"2raise(Errno::ENOENT) unless File.exists?(var);Fi[[	@OiI"ﬁ        # Parse a file with +filename+
        def function(var, var)
          raise(ArgumentError) unless var
          raise(Errno::ENOENT) unless File.exists?(var)
          raise(Errno::EISDIR) if File.directory?(var);Fi[	@¿iLI"Ÿ        # Parse a file with +filename+
        def function(var)
          raise(ArgumentError) unless var
          raise(Errno::ENOENT) unless File.exists?(var)
          raise(Errno::EISDIR) if File.directory?(var);Fi[	@>QI"1raise(Errno::EISDIR) if File.directory?(var);Fi[[	@OiI"‰        def function(var, var)
          raise(ArgumentError) unless var
          raise(Errno::ENOENT) unless File.exists?(var)
          raise(Errno::EISDIR) if File.directory?(var)
          var = ParserContext.file(var, var);Fi[	@¿iMI"⁄        def function(var)
          raise(ArgumentError) unless var
          raise(Errno::ENOENT) unless File.exists?(var)
          raise(Errno::EISDIR) if File.directory?(var)
          var = ParserContext.file(var);Fi[	I"def self.new(var, var);FI"Gif ["LITERAL", "LITERAL"].all? { |var| var.respond_to?(var) } then;Fi[[	@Ri	I"     module SAX
      class ParserContext < Nokogiri::XML::SAX::ParserContext
        def self.new(var, var)
          if ["LITERAL", "LITERAL"].all? { |var| var.respond_to?(var) } then
            super;Fi[	@
i	I"¿    module SAX
      class ParserContext
        def self.new(var, var)
          if ["LITERAL", "LITERAL"].all? { |var| var.respond_to?(var) } then
            io(var, Parser::ENCODINGS[var]);Fi[	@œ	@◊,i[[	@
iI"=module Nokogiri
  module XML
    class << self
      ###;Fi[	@
iI"=module Nokogiri
  module XML
    class << self
      ###;Fi[	@œ	I"class Node;Fi[[	@iI"Hmodule Nokogiri
  module XML
    class Node
      class SaveOptions;Fi[	@„iI"|require("nokogiri/xml/node/save_options")
module Nokogiri
  module XML
    class Node
      include(Nokogiri::XML::PP::Node);Fi[	@	@:i[[	@‰ioI"∫          if var.encoding.name =~ "LITERAL" then
            return var.gsub(Regexp.new("STRING".encode(var.encoding.name)), "STRING")
          else
            return var
          end;Fi[	@#i\I"∫            if (@at.is_a?(Time) or (@at.is_a?(Numeric) and (@at > "LITERAL"))) then
              raise(ArgumentError, "STRING")
            else
              return var
            end;Fi[	@œ	I"module PP;Fi[[	@iI"Jmodule Nokogiri
  module XML
    module PP
      module CharacterData;Fi[	@¸	iI"Amodule Nokogiri
  module XML
    module PP
      module Node;Fi[	@œ	I"class XPath;Fi[[	@
iI"\module Nokogiri
  module XML
    class XPath
      class SyntaxError < XML::SyntaxError;Fi[	@
iI"{require("nokogiri/xml/xpath/syntax_error")
module Nokogiri
  module XML
    class XPath
      attr_accessor("LITERAL");Fi[	@	I"if var.include?(var) then;Fi[[	@ÖimI"{      if var and var["LITERAL"] then
        var["LITERAL"].to_s
      else
        if var.include?(var) then
          var;Fi[	@~iôI"ú      if var.include?(var) then
        WhitelistMatcher.new(var[var])
      else
        if var.include?(var) then
          BlacklistMatcher.new(var[var]);Fi[	I"(# For example, given this document:;F@i[[	@˛i_I"~      # return them as a hash.
      #
      # For example, given this document:
      #
      #   <root xmlns:foo="bar">;Fi[	@˛ijI"°      #
      # WARNING: this method will clobber duplicate names in the keys.
      # For example, given this document:
      #
      #   <root xmlns:foo="bar">;Fi[	I"#   </root>;F@i[[	@˛icI"É      #   <root xmlns:foo="bar">
      #     <bar xmlns:hello="world" />
      #   </root>
      #
      # This method will return:;Fi[	@˛inI"¶      #   <root xmlns:foo="bar">
      #     <bar xmlns:foo="baz" />
      #   </root>
      #
      # The hash returned will look like this: { 'xmlns:foo' => 'bar' };Fi[	@	@eHi[[	@[i&I"µ      if var = var["LITERAL"] then
        var = var.&(Array(var).map(&"LITERAL"))
      else
        if var = var["LITERAL"] then
          var = (var - Array(var).map(&"LITERAL"));Fi[	I",projects//devise_proj/devise/mapping.rb;Ti}I"®      if (var["LITERAL"] == true) then
        @var = @used_routes
      else
        if var = var["LITERAL"] then
          @var = (self.routes - Array(var).map(&var));Fi[	@Œ)I"+var.each { |var| add_child_node(var) };Fi[[	@„i˜I"ó      def function(var)
        var = coerce(var)
        if var.is_a?(XML::NodeSet) then
          var.each { |var| add_child_node(var) }
        else;Fi[	@„iSI"ó        var = coerce(var)
        children.unlink
        if var.is_a?(XML::NodeSet) then
          var.each { |var| add_child_node(var) }
        else;Fi[	I"# Entity node type;FI"# PI node type;Fi[[	@„i=I"ƒ      # CDATA node type, see Nokogiri::XML::Node#cdata?
      # Entity reference node type
      # Entity node type
      # PI node type
      # Comment node type, see Nokogiri::XML::Node#comment?;Fi[	@
i;I"Ç      # CDATA node type
      # Entity Reference node type
      # Entity node type
      # PI node type
      # Comment node type;Fi[	I"A# A hash of namespace bindings may be appended. For example:;F@i[[	@„ivI"π      #   node.xpath('.//title')
      #
      # A hash of namespace bindings may be appended. For example:
      #
      #   node.xpath('.//foo:name', {'foo' => 'http://example.org/'});Fi[	@„i°I"ƒ      #   node.css('div + p.green', 'div#one')
      #
      # A hash of namespace bindings may be appended. For example:
      #
      #   node.css('bike|tire', {'bike' => 'http://schwinn.com/'});Fi[	I"$#     def regex node_set, regex;FI"N#       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ };Fi[[	@„iÇI"À      #
      #   node.xpath('.//title[regex(., "\w+")]', Class.new {
      #     def regex node_set, regex
      #       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }
      #     end;Fi[	@„i¨I"¬      #
      #   node.css('title:regex("\w+")', Class.new {
      #     def regex node_set, regex
      #       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }
      #     end;Fi[	@®Q@&i[[	@„iÉI"‘      #   node.xpath('.//title[regex(., "\w+")]', Class.new {
      #     def regex node_set, regex
      #       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }
      #     end
      #   }.new);Fi[	@„i≠I"À      #   node.css('title:regex("\w+")', Class.new {
      #     def regex node_set, regex
      #       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }
      #     end
      #   }.new);Fi[	I"#   }.new);F@i[[	@„iÖI"ê      #       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }
      #     end
      #   }.new)
      #
      def function(var);Fi[	@„iØI"æ      #       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }
      #     end
      #   }.new)
      #
      # Note that the CSS query string is case-sensitive with regards;Fi[	@PP@Li[[	@„iÔI"√      
      ###
      # Add +node_or_tags+ as a child of this Node.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #;Fi[	@„i I"√      
      ###
      # Add +node_or_tags+ as a child of this Node.
      # +node_or_tags+ can be a Nokogiri::XML::Node, a ::DocumentFragment, a ::NodeSet, or a string containing markup.
      #;Fi[	I"send(var, var);F@	i[[	@i‡I"‡            var = "STRING"
            if respond_to?(var, true) then
              send(var, var)
            else
              define_proxy_call(true, generated_attribute_methods, var, var.method_missing_target, var.to_s);Fi[	@„i7I"ñ          if text? then
            var = Nokogiri::XML::Node.new("STRING", document)
            send(var, var)
          else
            var = self;Fi[	@n@ΩOi[[	@Ãi:I"Ω      when "STRING" then
        var = (var["STRING"] or var["STRING"])
        var = "STRING"
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?
      when "STRING" then;Fi[	@ÃiOI"™      when "STRING" then
        var = var["STRING"]
        var = "STRING"
        (var << ("STRING" + var["STRING"])) unless var["STRING"].nil?
      when "STRING" then;Fi[	@ëQ@	i[[	@„i¯I"ù        var = coerce(var)
        if var.is_a?(XML::NodeSet) then
          var.each { |var| add_child_node(var) }
        else
          add_child_node(var);Fi[	@„iTI"õ        children.unlink
        if var.is_a?(XML::NodeSet) then
          var.each { |var| add_child_node(var) }
        else
          add_child_node(var);Fi[	@n@èGi[[	@’i˝I"—    # @return [String] The sanitized string
    def function(var)
      var = "STRING"
      var = if (RUBY_VERSION >= "STRING") then
        Regexp.new(var.force_encoding(var.encoding), Regexp::FIXEDENCODING);Fi[	@’iI"—    # @return [String] The sanitized string
    def function(var)
      var = "STRING"
      var = if (RUBY_VERSION >= "STRING") then
        Regexp.new(var.force_encoding(var.encoding), Regexp::FIXEDENCODING);Fi[	@nI"Ovar = (var + "STRING") unless ["STRING", "STRING"].include?(var.port.to_s);Fi[[	@∏iΩI"ª    begin
      (var = URI.parse(@attributes["STRING"])
      var = "STRING"
      var = (var + "STRING") unless ["STRING", "STRING"].include?(var.port.to_s)
      var = (var + "STRING"));Fi[	@∏i#I"©  def function(var)
    var = URI.parse(var)
    var = "STRING"
    var = (var + "STRING") unless ["STRING", "STRING"].include?(var.port.to_s)
    var = (var + "STRING");Fi[	I"if text? then;FI"6var = Nokogiri::XML::Node.new("STRING", document);Fi[[	@„icI"∫      # Also see related method +swap+.
      def function(var)
        if text? then
          var = Nokogiri::XML::Node.new("STRING", document)
          add_previous_sibling_node(var);Fi[	@„i5I"≤        var = coerce(var)
        if var.is_a?(XML::NodeSet) then
          if text? then
            var = Nokogiri::XML::Node.new("STRING", document)
            send(var, var);Fi[	@+@±i[[	@„i«I"æ      #   doc.to_xml(:indent => 5, :encoding => 'UTF-8')
      #
      # See Node#write_to for a list of +options+
      def function(var)
        var["LITERAL"] ||= SaveOptions::DEFAULT_XML;Fi[	@„i“I"ø      #   doc.to_xhtml(:indent => 5, :encoding => 'UTF-8')
      #
      # See Node#write_to for a list of +options+
      def function(var)
        to_format(SaveOptions::DEFAULT_XHTML, var);Fi[	@+@„
i[[	@„i˚I"≈      # Write Node as HTML to +io+ with +options+
      #
      # See Node#write_to for a list of +options+
      def function(var, var)
        write_format_to(SaveOptions::DEFAULT_HTML, var, var);Fi[	@„iI"«      # Write Node as XHTML to +io+ with +options+
      #
      # See Node#write_to for a list of +options+
      def function(var, var)
        write_format_to(SaveOptions::DEFAULT_XHTML, var, var);Fi[	@n@'6i[[	@A,i#I"{        end
      end
      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var));Fi[	@A,i<I"ò        Compass.configuration.http_fonts_path
      end
      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var));Fi[	@nI"0raise(Compass::FilesystemConflict.new(var));Fi[[	@<iI"∫      unless File.exists?(var) and File.directory?(var) then
        if File.exists?(var) then
          var = "STRING"
          raise(Compass::FilesystemConflict.new(var))
        else;Fi[	@<i1I"•            log_action("LITERAL", basename(var), var)
          else
            var = "STRING"
            raise(Compass::FilesystemConflict.new(var))
          end;Fi[	@n@Fi[[	@“iFI"{      (var.map do |var|
        var = "STRING"
        var = "STRING"
        "STRING"
      end.join("STRING") + "STRING");Fi[	@¢iI"odef function(var)
  var = File.dirname(serializer.serialized_path(object))
  var = "STRING"
  "STRING"
end;Fi[	I"0var.group("LITERAL", "STRING", "STRING") do;FI"var.breakable;Fi[[	@¸	iI"        def function(var)
          var = self.class.name.split("STRING").last
          var.group("LITERAL", "STRING", "STRING") do
            var.breakable
            var = inspect_attributes.map { |var| [var, send(var)] if respond_to?(var) }.compact.find_all do |var|;Fi[	@¸	i#I"             var.seplist(var) do |var|
              if ["LITERAL", "LITERAL"].include?(var.first) then
                var.group("LITERAL", "STRING", "STRING") do
                  var.breakable
                  var.seplist(var.last) { |var| var.pp(var) };Fi[	@/KI"cvar = (var.map { |var, var| [["STRING", var].compact.join("STRING"), var] } + var.map do |var|;Fi[[	@
i3I"b        # +ns+ is a hash of namespace prefix:urls associated with the element
        def function(var, var, var, var, var)
          var = [var, var].compact.join("STRING")
          var = (var.map { |var, var| [["STRING", var].compact.join("STRING"), var] } + var.map do |var|
            [[var.prefix, var.localname].compact.join("STRING"), var.value];Fi[	@
i1I"      
      def function(var, var, var, var, var)
        var = [var, var].compact.join("STRING")
        var = (var.map { |var, var| [["STRING", var].compact.join("STRING"), var] } + var.map do |var|
          [[var.prefix, var.localname].compact.join("STRING"), var.value];Fi[	@RI"D[[var.prefix, var.localname].compact.join("STRING"), var.value];Fi[[	@
i4I"#        def function(var, var, var, var, var)
          var = [var, var].compact.join("STRING")
          var = (var.map { |var, var| [["STRING", var].compact.join("STRING"), var] } + var.map do |var|
            [[var.prefix, var.localname].compact.join("STRING"), var.value]
          end);Fi[	@
i2I"!      def function(var, var, var, var, var)
        var = [var, var].compact.join("STRING")
        var = (var.map { |var, var| [["STRING", var].compact.join("STRING"), var] } + var.map do |var|
          [[var.prefix, var.localname].compact.join("STRING"), var.value]
        end.flatten);Fi[	I"check_encoding(var);F@≤i[[	@¿i.I"û        # Create a new Parser with +doc+ and +encoding+
        def function(var, var)
          check_encoding(var)
          @var = var
          @var = var;Fi[	@¿iBI"¢        # Parse given +io+
        def function(var, var)
          check_encoding(var)
          @var = var
          var = ParserContext.io(var, ENCODINGS[var]);Fi[	I"require("hashie/mash");F@Z5i[[	I".projects//omni_proj/omniauth/auth_hash.rb;Ti I"Krequire("hashie/mash")
module OmniAuth
  class AuthHash < Hashie::Mash;Fi [	@ÊiI"frequire("omniauth")
require("hashie/mash")
module OmniAuth
  class NoSessionError < StandardError;Fi[	@n@N)i[[	@•iõI"ﬂ        var = var["LITERAL"] ? ("STRING") : ("STRING")
        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING")
        var = "STRING"
        (var << "STRING") if var["LITERAL"]
        (var << "STRING");Fi[	@•i´I"ﬂ        var = var["LITERAL"] ? ("STRING") : ("STRING")
        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING")
        var = "STRING"
        (var << "STRING") if var["LITERAL"]
        (var << "STRING");Fi[	@GL@Fi[[	@i!I"\    
    def function
      return "STRING" unless env["STRING"]
      "STRING"
    end;Fi[	@i&I"\    
    def function
      return "STRING" unless env["STRING"]
      "STRING"
    end;Fi[	@n@Ái[[	@Íi'I"¨      link_to("STRING", post_comments_path(var, "LITERAL" => "STRING"), "LITERAL" => "STRING")
    else
      var = "STRING"
      (var << "STRING")
      (var << "STRING");Fi[	@îigI"}class Formula
  def function
    var = "STRING"
    (var << "STRING")
    if (lib.directory? or include.directory?) then;Fi[	I"label_field(var, var);FI"input_field("STRING", var);Fi[[	@i&I"l    
    def function(var, var)
      label_field(var, var)
      input_field("STRING", var)
      self;Fi[	@i,I"l    
    def function(var, var)
      label_field(var, var)
      input_field("STRING", var)
      self;Fi[	@AR@¬*i[[	@i'I"o    def function(var, var)
      label_field(var, var)
      input_field("STRING", var)
      self
    end;Fi[	@i-I"o    def function(var, var)
      label_field(var, var)
      input_field("STRING", var)
      self
    end;Fi[	@n@Ÿ)i[[	@wi!I"ó      var = var.pop
      var = var.join("STRING") unless var.empty?
      var = "STRING"
      if var then
        var = lookup_ancestors.map do |var|;Fi[	@œi«I"[        var.id
      end
      var = "STRING"
      if var then
        var = "STRING";Fi[	@⁄8@i[[	@Êi(I"s      #
      #   class MyStrategy
      #     include OmniAuth::Strategy
      #
      #     configure do |c|;Fi[	@ÊiDI"u      #
      #   class MyStrategy
      #     include OmniAuth::Strategy
      #
      #     option :foo, 'bar';Fi[	@"/I"log("LITERAL", "STRING");Fi[[	@Êi•I"µ    # Performs the steps necessary to run the request phase of a strategy.
    def function
      setup_phase
      log("LITERAL", "STRING")
      session["STRING"] = request.params;Fi[	@ÊiæI"Ω    # Performs the steps necessary to run the callback phase of a strategy.
    def function
      setup_phase
      log("LITERAL", "STRING")
      @env["STRING"] = session.delete("STRING");Fi[	I".@env["STRING"] = session.delete("STRING");FI"8@env["STRING"] = nil if (env["STRING"] == "STRING");Fi[[	@Êi¿I"“      setup_phase
      log("LITERAL", "STRING")
      @env["STRING"] = session.delete("STRING")
      @env["STRING"] = nil if (env["STRING"] == "STRING")
      @env["STRING"] = (session.delete("STRING") or {});Fi[	@ÊiI"÷        @env["STRING"] = var
        @env["STRING"] = (session.delete("STRING") or {})
        @env["STRING"] = session.delete("STRING")
        @env["STRING"] = nil if (env["STRING"] == "STRING")
        call_app!;Fi[	@nI"#if respond_to?(var, true) then;Fi[[	@iﬁI"«          var = var.method_name(var)
          unless instance_method_already_implemented?(var) then
            var = "STRING"
            if respond_to?(var, true) then
              send(var, var);Fi[	@æiÉI"ò      def function(var)
        var = Devise::Mapping.find_scope!(var)
        var = "STRING"
        if respond_to?(var, true) then
          send(var);Fi[	@Ÿ#I"module Interpolations;Fi[[	@œ7i I"Cmodule Paperclip
  module Interpolations
    class PluralCache;Fi [	@Öi I">module Paperclip
  module Interpolations
    extend(self);Fi [	I"(#     define_attribute_method :name;F@i[[	@iÕI"∂      #     # attribute_method_prefix, attribute_method_suffix or
      #     # attribute_method_affix declares.
      #     define_attribute_method :name
      #
      #     private;Fi[	@iI"ì      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #     define_attribute_method :name
      #
      #     private;Fi[	I"@#     # attribute_method_prefix, attribute_method_suffix or;FI"-#     # attribute_method_affix declares.;Fi[[	@iØI"¯      #
      #     # Call to define_attribute_methods must appear after the
      #     # attribute_method_prefix, attribute_method_suffix or
      #     # attribute_method_affix declares.
      #     define_attribute_methods :name, :age, :address;Fi[	@iÀI"Ê      #
      #     # Call to define_attribute_method must appear after the
      #     # attribute_method_prefix, attribute_method_suffix or
      #     # attribute_method_affix declares.
      #     define_attribute_method :name;Fi[	I"# Options include:;F@i[[	@∆iI"√    # +options+ is the same as the hash passed to +has_attached_file+.
    #
    # Options include:
    #
    # +url+ - a relative URL of the attachment. This is interpolated using +interpolator+;Fi[	@˝iI"≈    # set, the options will be appended to the convert command upon image conversion
    #
    # Options include:
    #
    #   +geometry+ - the desired width and height of the thumbnail (required);Fi[	I"7if @options["LITERAL"].respond_to?("LITERAL") then;F@∏8i[[	@∆i4I"Ä    
    def function
      if @options["LITERAL"].respond_to?("LITERAL") then
        @options["LITERAL"].call(self)
      else;Fi[	@^i}I"è      
      def function(var)
        if @options["LITERAL"].respond_to?("LITERAL") then
          @options["LITERAL"].call(self)
        else;Fi[	I"%# ActiveModel::AttributeMethods.;F@i[[	@i¢I"Œ      
      # Declares the attributes that should be prefixed and suffixed by
      # ActiveModel::AttributeMethods.
      #
      # To use, pass attribute names (as strings or symbols), be sure to declare;Fi[	@iæI"Ã      
      # Declares an attribute that should be prefixed and suffixed by
      # ActiveModel::AttributeMethods.
      #
      # To use, pass an attribute name (as string or symbol), be sure to declare;Fi[	I")var = @options["LITERAL"]["LITERAL"];FI";var = var.call(instance) if var.respond_to?("LITERAL");Fi[[	@∆i[I"ß    
    def function(var)
      var = @options["LITERAL"]["LITERAL"]
      var = var.call(instance) if var.respond_to?("LITERAL")
      var = @options["LITERAL"][var];Fi[	@∆icI"ß    
    def function(var)
      var = @options["LITERAL"]["LITERAL"]
      var = var.call(instance) if var.respond_to?("LITERAL")
      var = @options["LITERAL"][var];Fi[	@úRI"#var = @options["LITERAL"][var];Fi[[	@∆i\I"ﬂ    def function(var)
      var = @options["LITERAL"]["LITERAL"]
      var = var.call(instance) if var.respond_to?("LITERAL")
      var = @options["LITERAL"][var]
      var = var.call(instance) if var.respond_to?("LITERAL");Fi[	@∆idI"ﬂ    def function(var)
      var = @options["LITERAL"]["LITERAL"]
      var = var.call(instance) if var.respond_to?("LITERAL")
      var = @options["LITERAL"][var]
      var = var.call(instance) if var.respond_to?("LITERAL");Fi[	@£R@úRi[[	@∆i]I"Ò      var = @options["LITERAL"]["LITERAL"]
      var = var.call(instance) if var.respond_to?("LITERAL")
      var = @options["LITERAL"][var]
      var = var.call(instance) if var.respond_to?("LITERAL")
      [var, var].compact.join("STRING");Fi[	@∆ieI"Ò      var = @options["LITERAL"]["LITERAL"]
      var = var.call(instance) if var.respond_to?("LITERAL")
      var = @options["LITERAL"][var]
      var = var.call(instance) if var.respond_to?("LITERAL")
      [var, var].compact.join("STRING");Fi[	@„
I"<assert_valid_keys(var, "LITERAL", "LITERAL", "LITERAL");Fi[[	@·iÇI"    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.
    def function(var, var)
      assert_valid_keys(var, "LITERAL", "LITERAL", "LITERAL")
      unless var = var.include?("LITERAL") then;Fi[	@iI"3    # * <tt>:to</tt> - A hash to write the initialized state to instead of
    #   writing to the object.  Default is to write directly to the object.
    def function(var, var)
      assert_valid_keys(var, "LITERAL", "LITERAL", "LITERAL")
      var = { "LITERAL" => (true), "LITERAL" => (true) }.merge(var);Fi[	@¬*@	i[[	@îitI"ñ      when "STRING" then
        if (var.width >= self.width) and (var.height >= self.height) then
          self
        else
          scale_to(var);Fi[	@îizI"ó      when "STRING" then
        if ((var.width <= self.width) or (var.height <= self.height)) then
          self
        else
          scale_to(var);Fi[	I" require("paperclip/schema");F@Ÿ#i[[	@Ê&iI"~require("paperclip/callbacks")
require("paperclip/validators")
require("paperclip/schema")
module Paperclip
  module Glue;Fi[	I"2projects//paperclip_proj/paperclip/railtie.rb;TiI"Yrequire("paperclip")
require("paperclip/schema")
module Paperclip
  require("rails");Fi[	@„
I":var = self.name.gsub("LITERAL", "STRING").constantize;Fi[[	@Ë#iI"‰    # strings should be a list of content types which will pass and fail
    # validation, respectively.
    def function(var, var)
      var = self.name.gsub("LITERAL", "STRING").constantize
      var = [var["LITERAL"]].flatten;Fi[	@Ë#i,I"G    # checks that a file is more than a certain size, and :in takes a Range or
    # Array which specifies the lower and upper limits of the file size.
    def function(var, var)
      var = self.name.gsub("LITERAL", "STRING").constantize
      var = (var["LITERAL"] or ((var["LITERAL"] and var["LITERAL"].first) or "LITERAL"));Fi[	I"@var = var.flatten;F@¬*i[[	@0iI"_        
        def function(var)
          @var = var.flatten
          self
        end;Fi[	@0i"I"_        
        def function(var)
          @var = var.flatten
          self
        end;Fi[	I"3# See Paperclip.run for the available options.;F@„
i[[	@…iI"»    
    # The convert method runs the convert binary with the provided arguments.
    # See Paperclip.run for the available options.
    def function(var, var)
      Paperclip.run("STRING", var, var);Fi[	@…iI"     
    # The identify method runs the identify binary with the provided arguments.
    # See Paperclip.run for the available options.
    def function(var, var)
      Paperclip.run("STRING", var, var);Fi[	@„
@@Ri[[	@i%I"i    end
    
    def function(var, var)
      label_field(var, var)
      input_field("STRING", var);Fi[	@i+I"i    end
    
    def function(var, var)
      label_field(var, var)
      input_field("STRING", var);Fi[	@ÊK@Ñi[[	@ıi%I"z      #:nodoc:
      def function
        @queued_for_delete.each do |var|
          begin
            (log("STRING");Fi[	@äi‹I"z      #:nodoc:
      def function
        @queued_for_delete.each do |var|
          begin
            (log("STRING");Fi[	I"m@options["LITERAL"] = @options["LITERAL"].gsub("LITERAL", @options["LITERAL"]).gsub("LITERAL", "STRING");FI"#@options["LITERAL"] = "STRING";Fi[[	@^iI"
        var.instance_eval do
          unless @options["LITERAL"].to_s.match("LITERAL") then
            @options["LITERAL"] = @options["LITERAL"].gsub("LITERAL", @options["LITERAL"]).gsub("LITERAL", "STRING")
            @options["LITERAL"] = "STRING"
          end;Fi[	@äi1I"c          @var = @options["LITERAL"].to_s.upcase if @s3_server_side_encryption
          unless (@options["LITERAL"].to_s.match("LITERAL") or (@options["LITERAL"] == "STRING")) then
            @options["LITERAL"] = @options["LITERAL"].gsub("LITERAL", @options["LITERAL"]).gsub("LITERAL", "STRING")
            @options["LITERAL"] = "STRING"
          end;Fi[	I"
retry;F@5i[[	@^iCI"p            var = true
            directory.save
            retry
          ensure
            var.rewind;Fi[	@äi—I"â          rescue AWS::S3::Errors::NoSuchBucket => var
            create_bucket
            retry
          ensure
            var.rewind;Fi[	I"/var = find_credentials(var).stringify_keys;FI"Avar = Object.const_defined?("LITERAL") ? (Rails.env) : (nil);Fi[[	@^imI"ø      
      def function(var)
        var = find_credentials(var).stringify_keys
        var = Object.const_defined?("LITERAL") ? (Rails.env) : (nil)
        (var[var] or var).symbolize_keys;Fi[	@äiüI"˚      def function(var)
        var = var.respond_to?("STRING") ? (var.call(self)) : (var)
        var = find_credentials(var).stringify_keys
        var = Object.const_defined?("LITERAL") ? (Rails.env) : (nil)
        (var[var] or var).symbolize_keys;Fi[	@'HI"3YAML.load(ERB.new(File.read(var.path)).result);Fi[[	@^iíI"õ      def function(var)
        case var
        when File then
          YAML.load(ERB.new(File.read(var.path)).result)
        when String, Pathname then;Fi[	@äi¯I"õ      def function(var)
        case var
        when File then
          YAML.load(ERB.new(File.read(var.path)).result)
        when String, Pathname then;Fi[	@˝RI"when String, Pathname then;Fi[[	@^iìI"∑        case var
        when File then
          YAML.load(ERB.new(File.read(var.path)).result)
        when String, Pathname then
          YAML.load(ERB.new(File.read(var)).result);Fi[	@äi˘I"∑        case var
        when File then
          YAML.load(ERB.new(File.read(var.path)).result)
        when String, Pathname then
          YAML.load(ERB.new(File.read(var)).result);Fi[	@SI".YAML.load(ERB.new(File.read(var)).result);Fi[[	@^iîI"Ω        when File then
          YAML.load(ERB.new(File.read(var.path)).result)
        when String, Pathname then
          YAML.load(ERB.new(File.read(var)).result)
        when Hash then;Fi[	@äi˙I"Ω        when File then
          YAML.load(ERB.new(File.read(var.path)).result)
        when String, Pathname then
          YAML.load(ERB.new(File.read(var)).result)
        when Hash then;Fi[	@S@Á2i[[	@^iïI"¥          YAML.load(ERB.new(File.read(var.path)).result)
        when String, Pathname then
          YAML.load(ERB.new(File.read(var)).result)
        when Hash then
          var;Fi[	@äi˚I"¥          YAML.load(ERB.new(File.read(var.path)).result)
        when String, Pathname then
          YAML.load(ERB.new(File.read(var)).result)
        when Hash then
          var;Fi[	I"?var = (@s3_permissions[var] or @s3_permissions["LITERAL"]);FI"<var = var.call(self, var) if var.respond_to?("LITERAL");Fi[[	@äi≠I"≠      
      def function(var)
        var = (@s3_permissions[var] or @s3_permissions["LITERAL"])
        var = var.call(self, var) if var.respond_to?("LITERAL")
        var;Fi[	@äi¡I"ˇ          begin
            (log("STRING")
            var = (@s3_permissions[var] or @s3_permissions["LITERAL"])
            var = var.call(self, var) if var.respond_to?("LITERAL")
            var = { "LITERAL" => (var.content_type), "LITERAL" => (var) };Fi[	I"3# if a proc has been supplied, we call it here;F@Ei[[	@Œi'I"     # There is an important change of interface here: a style rule can set its own processors
    # by default we behave as before, though.
    # if a proc has been supplied, we call it here
    def function
      if @processors.respond_to?("LITERAL") then;Fi[	@ŒiKI"®    
    # returns the geometry string for this style
    # if a proc has been supplied, we call it here
    def function
      if @geometry.respond_to?("LITERAL") then;Fi[	I"+rescue Cocaine::ExitStatusError => var;FI"0raise(Paperclip::Error, "STRING") if @whiny;Fi[[	@˝iMI"9        var = var.flatten.compact.join("STRING").strip.squeeze("STRING")
        var = convert(var, "LITERAL" => "STRING", "LITERAL" => (File.expand_path(var.path))))
      rescue Cocaine::ExitStatusError => var
        raise(Paperclip::Error, "STRING") if @whiny
      rescue Cocaine::CommandNotFoundError => var;Fi[	@˝ilI"ˇ      begin
        ANIMATED_FORMATS.include?(identify("STRING", "LITERAL" => "STRING").to_s.downcase.strip)
      rescue Cocaine::ExitStatusError => var
        raise(Paperclip::Error, "STRING") if @whiny
      rescue Cocaine::CommandNotFoundError => var;Fi[	@(SI"0rescue Cocaine::CommandNotFoundError => var;Fi[[	@˝iNI"5        var = convert(var, "LITERAL" => "STRING", "LITERAL" => (File.expand_path(var.path))))
      rescue Cocaine::ExitStatusError => var
        raise(Paperclip::Error, "STRING") if @whiny
      rescue Cocaine::CommandNotFoundError => var
        raise(Paperclip::Errors::CommandNotFoundError.new("STRING"));Fi[	@˝imI"8        ANIMATED_FORMATS.include?(identify("STRING", "LITERAL" => "STRING").to_s.downcase.strip)
      rescue Cocaine::ExitStatusError => var
        raise(Paperclip::Error, "STRING") if @whiny
      rescue Cocaine::CommandNotFoundError => var
        raise(Paperclip::Errors::CommandNotFoundError.new("STRING"));Fi[	I"K# * +if+: A lambda or name of an instance method. Validation will only;FI"6#   be run if this lambda or method returns true.;Fi[[	@È*iI"0      # Places ActiveRecord-style validations on the presence of a file.
      # Options:
      # * +if+: A lambda or name of an instance method. Validation will only
      #   be run if this lambda or method returns true.
      # * +unless+: Same as +if+ but validates if lambda or method returns false.;Fi[	@miWI"w      # * +greater_than+: equivalent to :in => options[:greater_than]..Infinity
      # * +message+: error message to display, use :min and :max as replacements
      # * +if+: A lambda or name of an instance method. Validation will only
      #   be run if this lambda or method returns true.
      # * +unless+: Same as +if+ but validates if lambda or method returns false.;Fi[	I"P# * +unless+: Same as +if+ but validates if lambda or method returns false.;F@±i[[	@È*iI":      # * +if+: A lambda or name of an instance method. Validation will only
      #   be run if this lambda or method returns true.
      # * +unless+: Same as +if+ but validates if lambda or method returns false.
      def function(var)
        validates_with(AttachmentPresenceValidator, _merge_attributes(var));Fi[	@miYI"6      # * +if+: A lambda or name of an instance method. Validation will only
      #   be run if this lambda or method returns true.
      # * +unless+: Same as +if+ but validates if lambda or method returns false.
      def function(var)
        validates_with(AttachmentSizeValidator, _merge_attributes(var));Fi[	@7S@>Si[[	@È*iI"ˇ      # Options:
      # * +if+: A lambda or name of an instance method. Validation will only
      #   be run if this lambda or method returns true.
      # * +unless+: Same as +if+ but validates if lambda or method returns false.
      def function(var);Fi[	@miXI"?      # * +message+: error message to display, use :min and :max as replacements
      # * +if+: A lambda or name of an instance method. Validation will only
      #   be run if this lambda or method returns true.
      # * +unless+: Same as +if+ but validates if lambda or method returns false.
      def function(var);Fi[	I"5var = (options["LITERAL"] or options["LITERAL"]);FI"6var = var.call(var) if var.respond_to?("LITERAL");Fi[[	@miBI"≈      
      def function(var)
        var = (options["LITERAL"] or options["LITERAL"])
        var = var.call(var) if var.respond_to?("LITERAL")
        var = var.min if var.respond_to?("LITERAL");Fi[	@miII"≈      
      def function(var)
        var = (options["LITERAL"] or options["LITERAL"])
        var = var.call(var) if var.respond_to?("LITERAL")
        var = var.max if var.respond_to?("LITERAL");Fi[	@„
@Ri[[	@¿i-I"ø        # The encoding beings used for this document.
        # Create a new Parser with +doc+ and +encoding+
        def function(var, var)
          check_encoding(var)
          @var = var;Fi[	@¿iAI"}        ###
        # Parse given +io+
        def function(var, var)
          check_encoding(var)
          @var = var;Fi[	I")require("resque/failure/thoughtbot");F@¨ i[[	@∞ i
I"^  raise("STRING")
end
require("resque/failure/thoughtbot")
module Resque
  module Failure;Fi[	@µ i
I"^  raise("STRING")
end
require("resque/failure/thoughtbot")
module Resque
  module Failure;Fi[	I"rescue Object => var;F@ﬂKi[[	@Ci£I"É        var.perform
        run_hook("LITERAL", var))
      rescue Object => var
        Resque.logger.info("STRING")
        begin;Fi[	@CißI"z        begin
          var.fail(var)
        rescue Object => var
          Resque.logger.info("STRING")
        end;Fi[	I"require("redis");FI"require("redis-namespace");Fi[[	@÷3i I"Brequire("redis")
require("redis-namespace")
require("thread");Fi [	@ﬁi I"Brequire("redis")
require("redis-namespace")
require("thread");Fi [	@hSI"require("thread");Fi[[	@÷3iI"Urequire("redis")
require("redis-namespace")
require("thread")
require("mutex_m");Fi[	@ﬁiI"Urequire("redis")
require("redis-namespace")
require("thread")
require("mutex_m");Fi[	@oSI"require("mutex_m");Fi[[	@÷3iI"crequire("redis")
require("redis-namespace")
require("thread")
require("mutex_m")
module Resque;Fi[	@ﬁiI"crequire("redis")
require("redis-namespace")
require("thread")
require("mutex_m")
module Resque;Fi[	@vS@¨ i[[	@÷3iI"erequire("redis-namespace")
require("thread")
require("mutex_m")
module Resque
  class MultiQueue;Fi[	@ﬁiI"xrequire("redis-namespace")
require("thread")
require("mutex_m")
module Resque
  class QueueDestroyed < RuntimeError;Fi[	I"super();F@≤i[[	@÷3iI"ñ    # Create a new MultiQueue using the +queues+ from the +redis+ connection
    def function(var, var)
      super()
      @var = var
      @var = {};Fi[	@ﬁiI"¢    # the +coder+ for encoding and decoding objects that are stored in redis.
    def function(var, var, var)
      super()
      @var = var
      @var = "STRING";Fi[	I"P# Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking;FI"$# pop, a ThreadError is raised.;Fi[[	@÷3iI"‹    # is available. This method returns a tuple of the queue object and job.
    #
    # Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking
    # pop, a ThreadError is raised.
    def function(var);Fi[	@ﬁiAI"†    # available.
    #
    # Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking
    # pop, a ThreadError is raised.
    def function(var);Fi[	@ãS@±i[[	@÷3iI"°    #
    # Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking
    # pop, a ThreadError is raised.
    def function(var)
      if var then;Fi[	@ﬁiBI"°    #
    # Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking
    # pop, a ThreadError is raised.
    def function(var)
      if var then;Fi[	@™HI"until var do;Fi[[	@÷3i0I"¥        var = @queues.map { |var| var.redis_name }
        if var.any? then
          synchronize do
            until var do
              var = @redis.blpop(*(var + ["LITERAL"]));Fi[	@ﬁiKI"{        end
      else
        synchronize do
          until var do
            var = @redis.blpop(@redis_name, "LITERAL");Fi[	I"/var = @queues.map { |var| var.redis_name };FI"if var.any? then;Fi[[	@÷3i.I"{        end
      else
        var = @queues.map { |var| var.redis_name }
        if var.any? then
          synchronize do;Fi[	@÷3iCI"®    # the timeout expires.
    def function(var)
      var = @queues.map { |var| var.redis_name }
      if var.any? then
        var, var = @redis.blpop(*(var + [var]));Fi[	@„
@=Qi[[	@OiI"º        ###
        # Parse html stored in +data+ using +encoding+
        def function(var, var)
          raise(ArgumentError) unless var
          return unless (var.length > "LITERAL");Fi[	@OiI"≥        ###
        # Parse a file with +filename+
        def function(var, var)
          raise(ArgumentError) unless var
          raise(Errno::ENOENT) unless File.exists?(var);Fi[	I"'alias_method("LITERAL", "LITERAL");F@Ei[[	@“iI"≈    helpers do
      include(Rack::Utils)
      alias_method("LITERAL", "LITERAL")
      def function
        url_path(request.path_info.sub("STRING", "STRING").split("STRING")["LITERAL"].downcase);Fi[	@“i$I"ü        [path_prefix, var].join("STRING").squeeze("STRING")
      end
      alias_method("LITERAL", "LITERAL")
      def function
        request.env["STRING"];Fi[	I" case Resque.redis.type(var);F@Ei[[	@“i4I"r      end
      def function(var)
        case Resque.redis.type(var)
        when "STRING" then
          [];Fi[	@“iFI"w      end
      def function(var, var)
        case Resque.redis.type(var)
        when "STRING" then
          [];Fi[	@~@	i[[	@FiÛI"ê    var = queue(var).slice(var, var)
    if var.nil? then
      []
    else
      var.respond_to?("LITERAL") ? ((var.to_ary or [var])) : ([var]);Fi[	@ÁiwI"≤    def function
      @var ||= if empty? then
        []
      else
        machine.events.transitions_for(object, "LITERAL" => (to_name), "LITERAL" => (@guard)).select do |var|;Fi[	@~@Ei[[	@“i6I"á        case Resque.redis.type(var)
        when "STRING" then
          []
        when "STRING" then
          Resque.redis.llen(var);Fi[	@“iHI"°        case Resque.redis.type(var)
        when "STRING" then
          []
        when "STRING" then
          Resque.redis.lrange(var, var, (var + "LITERAL"));Fi[	I"namespace("LITERAL") do;F@s+i[[	@z+i I"Bnamespace("LITERAL") do
  desc("STRING")
  task("LITERAL") do;Fi [	@}+iI"É  _cset("LITERAL") { "STRING" }
  _cset("LITERAL") { "STRING" }
  namespace("LITERAL") do
    desc("STRING")
    task("LITERAL") do;Fi[	@„
I"<var = var.sub("LITERAL", (("STRING" + var) + "STRING"));Fi[[	@∆iI"'              var = add_code_tags(Pygments.highlight(var, "LITERAL" => (var), "LITERAL" => ({ "LITERAL" => "STRING" })), var)
            end
            def function(var, var)
              var = var.sub("LITERAL", (("STRING" + var) + "STRING"))
              var = var.sub("LITERAL", "STRING");Fi[	@´%i6I"é    end
    
    def function(var, var)
      var = var.sub("LITERAL", (("STRING" + var) + "STRING"))
      var = var.sub("LITERAL", "STRING");Fi[	@ﬂK@%i[[	@Ci&I"e    # current job.
    def function
      Resque.logger.info("STRING")
      @var = true
    end;Fi[	@Ci_I"p    # currently running one).
    def function
      Resque.logger.info("STRING")
      @var = true
    end;Fi[	@„
I"%return if var.options["LITERAL"];Fi[[	@•iÃI"É      
      # @see Base#compile
      def function(var, var)
        return if var.options["LITERAL"]
        var.instance_eval do;Fi[	@•i˙I"Ñ      end
      
      def function(var, var)
        return if var.options["LITERAL"]
        var.send("LITERAL", precompiled(var));Fi[	@„
@Gi[[	@•iòI"Ã      
      # @see Base#render_with_options
      def function(var, var)
        var = var["LITERAL"] ? ("STRING") : ("STRING")
        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING");Fi[	@•i®I"Ã      
      # @see Base#render_with_options
      def function(var, var)
        var = var["LITERAL"] ? ("STRING") : ("STRING")
        (var["LITERAL"] == "LITERAL") ? (var = "STRING") : (var = "STRING");Fi[	@„
I"'find_or_create_participation!(var);Fi[[	I":projects//diaspora_proj/models/user/social_actions.rb;TiI"}  end
  
  def function(var, var)
    find_or_create_participation!(var)
    Like::Generator.new(self, var).create!(var);Fi[	@ÎSiI"Å  end
  
  def function(var, var)
    find_or_create_participation!(var)
    var = build_post("LITERAL", "LITERAL" => (var.guid));Fi[	@„
@"Fi[[	@#i-I"e  end
  
  def function(var, var)
    if self.target.nil? then
      Rails.logger.info("STRING");Fi[	@–iSI"e  end
  
  def function(var, var)
    if self.target.nil? then
      Rails.logger.info("STRING");Fi[	I"var.worker = self;FI"working_on(var);Fi[[	@CioI"´          if var = reserve(var) then
            Resque.logger.info("STRING")
            var.worker = self
            working_on(var)
            if (@var = fork(var) do;Fi[	@CiîI"o          return
        end
        var.worker = self
        working_on(var)
        perform(var, &var));Fi[	I"procline("STRING");FI"reconnect;Fi[[	@CisI"¶            if (@var = fork(var) do
              unregister_signal_handlers
              procline("STRING")
              reconnect
              perform(var, &var);Fi[	@Ci{I"©              var.fail(DirtyExit.new($?.to_s)) if $?.signaled?
            else
              procline("STRING")
              reconnect
              perform(var, &var);Fi[	@ˇSI"perform(var, &var);Fi[[	@CitI"ò              unregister_signal_handlers
              procline("STRING")
              reconnect
              perform(var, &var)
            end) then;Fi[	@Ci|I"            else
              procline("STRING")
              reconnect
              perform(var, &var)
            end;Fi[	I""Resque.logger.debug("STRING");FI"#Process.kill("STRING", @child);Fi[[	@Ci;I"Œ            Resque.logger.debug("STRING")
          else
            Resque.logger.debug("STRING")
            Process.kill("STRING", @child)
            (term_timeout.to_f * "LITERAL").round.times do |var|;Fi[	@CiAI"¥              return if Process.waitpid(@child, Process::WNOHANG)
            end
            Resque.logger.debug("STRING")
            Process.kill("STRING", @child)
          end;Fi[	@∂K@∂Ki[[	@CiÆI"w    # Tell Redis we've processed a job.
    def function
      (Stat << "STRING")
      (Stat << "STRING")
    end;Fi[	@CiπI"u    # Tells Redis we've failed a job.
    def function
      (Stat << "STRING")
      (Stat << "STRING")
    end;Fi[	@„
I" var["LITERAL"] ||= "STRING";Fi[[	@¨iI"V  end
  
  def function(var, var)
    var["LITERAL"] ||= "STRING"
    if var then;Fi[	I"5projects//diaspora_proj/helpers/people_helper.rb;Ti"I"ù  end
  
  def function(var, var)
    var["LITERAL"] ||= "STRING"
    if defined? user_signed_in? and (user_signed_in? and (current_user.person == var)) then;Fi[	@‘6@Ei[[	@Ci˝I"¡    
    # Returns an Array of string pids of all the other workers on this
    # machine. Useful when pruning dead workers on startup.
    def function
      if RUBY_PLATFORM =~ "LITERAL" then;Fi[	@Ci	I"Ï    #
    # Returns an Array of string pids of all the other workers on this
    # machine. Useful when pruning dead workers on startup.
    def function
      `tasklist  /FI \"IMAGENAME eq ruby.exe\" /FO list`.split($/).select do |var|;Fi[	@„
I"#var = var.map { |var| var.id };Fi[[	@˙i™I"Z  private
  
  def function(var, var)
    var = var.map { |var| var.id }
    var = {};Fi[	@√i˜I"m  end
  
  def function(var, var)
    var = var.map { |var| var.id }
    var.each { |var| (var << var) };Fi[	@„
@å&i[[	@¢iOI"ö  end
  
  def function(var, var)
    Rails.logger.info("STRING")
    var.profile.update_attributes(self.attributes.merge("LITERAL" => (self.tag_string)));Fi[	@iMI"ı  # @note A [Contact] may already exist if the [Request]'s recipient is sharing with the sender
  # @return [Request]
  def function(var, var)
    Rails.logger.info("STRING")
    var = var.contacts.find_or_initialize_by_person_id(self.sender.id);Fi[	I"G# It assumes the class you're passing it is a real Ruby class (not;FI"+# a string or reference) which either:;Fi[[	@FiI"∑  #
  # This method can be used to conveniently add a job to a queue.
  # It assumes the class you're passing it is a real Ruby class (not
  # a string or reference) which either:
  #;Fi[	@Fi?I"ª  
  # This method can be used to conveniently remove a job from a queue.
  # It assumes the class you're passing it is a real Ruby class (not
  # a string or reference) which either:
  #;Fi[	@7T@i[[	@FiI"“  # This method can be used to conveniently add a job to a queue.
  # It assumes the class you're passing it is a real Ruby class (not
  # a string or reference) which either:
  #
  #   a) has a @queue ivar set;Fi[	@Fi@I"◊  # This method can be used to conveniently remove a job from a queue.
  # It assumes the class you're passing it is a real Ruby class (not
  # a string or reference) which either:
  #
  #   a) has a @queue ivar set;Fi[	I"!#   a) has a @queue ivar set;FI"#   b) responds to `queue`;Fi[[	@FiI"q  # a string or reference) which either:
  #
  #   a) has a @queue ivar set
  #   b) responds to `queue`
  #;Fi[	@FiBI"q  # a string or reference) which either:
  #
  #   a) has a @queue ivar set
  #   b) responds to `queue`
  #;Fi[	@ET@i[[	@FiI"ç  #
  #   a) has a @queue ivar set
  #   b) responds to `queue`
  #
  # If either of those conditions are met, it will use the value obtained;Fi[	@FiCI"ç  #
  #   a) has a @queue ivar set
  #   b) responds to `queue`
  #
  # If either of those conditions are met, it will use the value obtained;Fi[	I"L# If either of those conditions are met, it will use the value obtained;FI"J# from performing one of the above operations to determine the queue.;Fi[[	@FiI"∂  #   b) responds to `queue`
  #
  # If either of those conditions are met, it will use the value obtained
  # from performing one of the above operations to determine the queue.
  #;Fi[	@FiEI"∂  #   b) responds to `queue`
  #
  # If either of those conditions are met, it will use the value obtained
  # from performing one of the above operations to determine the queue.
  #;Fi[	@ST@i[[	@Fi I"È  #
  # If either of those conditions are met, it will use the value obtained
  # from performing one of the above operations to determine the queue.
  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`;Fi[	@FiFI"È  #
  # If either of those conditions are met, it will use the value obtained
  # from performing one of the above operations to determine the queue.
  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`;Fi[	@„
@¡0i[[	@æiI"É  end
  
  def function(var, var)
    Rails.logger.debug("STRING")
    post_to_facebook("STRING", create_post_params(var).to_param);Fi[	@∆iI"j  end
  
  def function(var, var)
    Rails.logger.debug("STRING")
    var = public_message(var, var);Fi[	I"K# Returns true if the job was queued, nil if the job was rejected by a;FI"# before_enqueue hook.;Fi[[	@Fi$I"π  # If no queue can be inferred this method will raise a `Resque::NoQueueError`
  #
  # Returns true if the job was queued, nil if the job was rejected by a
  # before_enqueue hook.
  #;Fi[	@Fi1I"Æ  # `queue` should be the String name of the queue you're targeting.
  #
  # Returns true if the job was queued, nil if the job was rejected by a
  # before_enqueue hook.
  #;Fi[	@gT@i[[	@Fi%I"°  #
  # Returns true if the job was queued, nil if the job was rejected by a
  # before_enqueue hook.
  #
  # This method is considered part of the `stable` API.;Fi[	@Fi2I"°  #
  # Returns true if the job was queued, nil if the job was rejected by a
  # before_enqueue hook.
  #
  # This method is considered part of the `stable` API.;Fi[	@≈+@„
i[[	@Fi'I"û  # before_enqueue hook.
  #
  # This method is considered part of the `stable` API.
  def function(var, var)
    enqueue_to(queue_from_class(var), var, *var);Fi[	@FiXI"Î  #   Resque.dequeue(GitHub::Jobs::UpdateNetworkGraph, 'repo:135325')
  #
  # This method is considered part of the `stable` API.
  def function(var, var)
    var = Plugin.before_dequeue_hooks(var).collect { |var| var.send(var, *var) };Fi[	@„
I"var = lambda do |var|;Fi[[	@…iÎI"º    #   end
    #
    def function(var, var)
      var = lambda do |var|
        var.env["STRING"].authenticate!("LITERAL" => (var)) and (var.nil? or var.call(var.env["STRING"].user(var)));Fi[	@…iI"”    #   root :to => 'landing#show'
    #
    def function(var, var)
      var = lambda do |var|
        var.env["STRING"].authenticate?("LITERAL" => (var)) and (var.nil? or var.call(var.env["STRING"].user(var)));Fi[	@„
I"var = to_adapter.get(var);Fi[[	@√i{I"í        end
        
        def function(var, var)
          var = to_adapter.get(var)
          var if var and (var.authenticatable_salt == var);Fi[	@eiSI"⁄        
        # Recreate the user based on the stored cookie
        def function(var, var)
          var = to_adapter.get(var)
          if var and ((var.rememberable_value == var) and var.remember_expired?.!) then;Fi[	@„
@T!i[[	@»5iI"~      end
      
      def function(var, var)
        var = Devise::Mapping.find_scope!(var)
        send("STRING", *var);Fi[	@»5iI"~      end
      
      def function(var, var)
        var = Devise::Mapping.find_scope!(var)
        send("STRING", *var);Fi[	@„
@96i[[	@\i\I"Ø  
  # Returns the path to the original image file for the sprite with the given name
  def function(var, var)
    var = convert_sprite_name(var)
    verify_map(var, "STRING");Fi[	@\ijI"}  
  # Returns boolean if sprite has a parent
  def function(var, var)
    var = convert_sprite_name(var)
    verify_map(var);Fi[	@„
I"&var, var = *grad_point(var).value;Fi[[	@bieI"ä    end
    
    def function(var, var)
      var, var = *grad_point(var).value
      var, var = *grad_point(opposite_position(var)).value;Fi[	@bimI"ê    end
    
    def function(var, var)
      var, var = *grad_point(var).value
      var = grad_end_position(var, Sass::Script::Bool.new(true));Fi[	I"R# configured for this branch.  In addition to matching the event, from state,;FI"L# and to state, this will also check whether the configured :if/:unless;Fi[[	@~i8I"    
    # Determines whether the given object / query matches the requirements
    # configured for this branch.  In addition to matching the event, from state,
    # and to state, this will also check whether the configured :if/:unless
    # conditions pass on the given object.;Fi[	@~iSI"    
    # Attempts to match the given object / query against the set of requirements
    # configured for this branch.  In addition to matching the event, from state,
    # and to state, this will also check whether the configured :if/:unless
    # conditions pass on the given object.;Fi[	@úTI"+# conditions pass on the given object.;Fi[[	@~i9I"    # Determines whether the given object / query matches the requirements
    # configured for this branch.  In addition to matching the event, from state,
    # and to state, this will also check whether the configured :if/:unless
    # conditions pass on the given object.
    # ;Fi[	@~iTI"     # Attempts to match the given object / query against the set of requirements
    # configured for this branch.  In addition to matching the event, from state,
    # and to state, this will also check whether the configured :if/:unless
    # conditions pass on the given object.
    # ;Fi[	@£T@i[[	@~i:I"·    # configured for this branch.  In addition to matching the event, from state,
    # and to state, this will also check whether the configured :if/:unless
    # conditions pass on the given object.
    # 
    # == Examples;Fi[	@~iUI"    # configured for this branch.  In addition to matching the event, from state,
    # and to state, this will also check whether the configured :if/:unless
    # conditions pass on the given object.
    # 
    # If a match is found, then the event/state requirements that the query;Fi[	I"N#   branch = StateMachine::Branch.new(:parked => :idling, :on => :ignite);F@i[[	@~i>I"Ñ    # == Examples
    # 
    #   branch = StateMachine::Branch.new(:parked => :idling, :on => :ignite)
    #   
    #   # Successful;Fi[	@~igI"…    # == Examples
    # 
    #   branch = StateMachine::Branch.new(:parked => :idling, :on => :ignite)
    #   
    #   branch.match(object, :on => :ignite)  # => {:to => ..., :from => ..., :on => ...};Fi[	@„
I"'var ||= configuration.project_path;Fi[[	@]i}I"≈      
      # Returns a full path to the relative path to the project directory
      def function(var, var)
        var ||= configuration.project_path
        File.join(var, *var.split("STRING"));Fi[	@]i}I"ö      end
      
      def function(var, var)
        var ||= configuration.project_path
        if (var[("LITERAL"..(var.size - "LITERAL"))] == var) then;Fi[	@„
I"if var.nil? then;Fi[[	@ÂiJI"c  end
  
  def function(var, var)
    if var.nil? then
      var = (self + File.basename(var));Fi[	@óiïI"J  end
  
  def function(var, var)
    if var.nil? then
      case var;Fi[	I"# transition.;F@i[[	@~i{I"∂    # 
    # Each edge will be labeled with the name of the event that would cause the
    # transition.
    # 
    # The collection of edges generated on the graph will be returned.;Fi[	@ iEI"        # Creates a callback that will be invoked *after* a transition is
        # performed so long as the given configuration options match the
        # transition.
        # 
        # See +before_transition+ for a description of the possible configurations;Fi[	I"*#   person = Person.new('John Smith');F@i[[	@Ïi"I"ô    #   end
    # 
    #   person = Person.new('John Smith')
    #   
    #   evaluate_method(person, :name)                            # => "John Smith";Fi[	@Ïi2I"æ    # For example,
    # 
    #   person = Person.new('John Smith')
    #   
    #   evaluate_method(person, lambda {|person| person.name}, 21)                              # => "John Smith";Fi[	@„
I"return if var.nil?;Fi[[	@]iI"w      end
      
      def function(var, var)
        return if var.nil?
        var = configuration_for(var, var);Fi[	@·iéI"ê      private
      
      def function(var, var)
        return if var.nil?
        var = "STRING" if @options["LITERAL"] and (var == "STRING");Fi[	I"# example:;F@i[[	@·i\I"«    # Since this transition is being defined within an event context, you do
    # *not* need to specify the <tt>:on</tt> option for the transition.  For
    # example:
    # 
    #  state_machine do;Fi[	@;i!I"…    # Since this transition is being defined within a state context, you do
    # *not* need to specify the <tt>:from</tt> option for the transition.  For
    # example:
    # 
    #   state_machine do;Fi[	I"M# See StateMachine::Machine#transition for a description of the possible;FI"/# configurations for defining transitions.;Fi[[	@·ieI"£    #  end
    # 
    # See StateMachine::Machine#transition for a description of the possible
    # configurations for defining transitions.
    def function(var);Fi[	@;i*I"§    #   end
    # 
    # See StateMachine::Machine#transition for a description of the possible
    # configurations for defining transitions.
    def function(var);Fi[	@‚T@±i[[	@·ifI"À    # 
    # See StateMachine::Machine#transition for a description of the possible
    # configurations for defining transitions.
    def function(var)
      raise(ArgumentError, "STRING") if var.empty?;Fi[	@;i+I"Ï    # 
    # See StateMachine::Machine#transition for a description of the possible
    # configurations for defining transitions.
    def function(var)
      assert_valid_keys(var, "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL");Fi[	@„
@:i[[	I"7projects//diaspora_proj/helpers/contacts_helper.rb;TiI"u  end
  
  def function(var, var)
    var = "LITERAL"
    var = { "LITERAL" => "STRING", "LITERAL" => "STRING" };Fi[	@∆iI"É  end
  
  def function(var, var)
    var = "LITERAL"
    URI.extract(var.text("LITERAL" => (true)), ["STRING", "STRING"]) do |var|;Fi[	@„
@V?i[[	@≈iZI"Ÿ      # Net::FTP raises an exception when the directory it's trying to create
      # already exists, so we have rescue it
      def function(var, var)
        var = Array.new
        var.split("STRING").each do |var|;Fi[	@siNI"⁄      # Net::SFTP raises an exception when the directory it's trying to create
      # already exists, so we have rescue it
      def function(var, var)
        var = Array.new
        var.split("STRING").each do |var|;Fi[	@à5I"M# * <tt>:on</tt> - One or more events that fire the transition.  If none;Fi[[	@ÒiI"L    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.;Fi[	@Òi6I"L    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.;Fi[	@„
@IIi[[	@ói~I"w  attr_reader("LITERAL", "LITERAL", "LITERAL")
  
  def function(var, var)
    @var = var.to_s
    @var = var.to_s;Fi[	@¸i0I"Y  include(Comparable)
  
  def function(var, var)
    @var = var.to_s
    @var = var;Fi[	@f-I"*#   conditionals defined for each one;Fi[[	@ÁiI"Ô    # Configuration options:
    # * <tt>:target</tt> - The target state to end the path on
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one
    def function(var, var, var);Fi[	@ÍiI"    # * <tt>:to</tt> - The target end state
    # * <tt>:deep</tt> - Whether to enable deep searches for the target state.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one
    def function(var, var, var);Fi[	@„
@Æ6i[[	@≥6iI"Ü    
    module Statements
      def function(var, var)
        raise(ArgumentError, "STRING") if var.empty?
        var.each do |var|;Fi[	@≥6iI"|      end
      
      def function(var, var)
        raise(ArgumentError, "STRING") if var.empty?
        var.each do |var|;Fi[	I"2#   node's label that gets drawn on the graph;F@„
i[[	@·i∫I"Ù    # Configuration options:
    # * <tt>:human_name</tt> - Whether to use the event's human name for the
    #   node's label that gets drawn on the graph
    def function(var, var)
      var = machine.states.by_priority.map { |var| var.name };Fi[	@Ìi—I"r    # Configuration options:
    # * <tt>:human_name</tt> - Whether to use the state's human name for the
    #   node's label that gets drawn on the graph
    def function(var, var)
      var = var.add_node((name ? (name.to_s) : ("STRING")), "LITERAL" => (description(var)), "LITERAL" => "STRING", "LITERAL" => "STRING", "LITERAL" => (final? ? ("STRING") : ("STRING")));Fi[	@¸TI"7#   are specified, then this will match any event.;Fi[[	@ÒiI"Q    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless;Fi[	@Òi7I"Q    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless;Fi[	@U@f-i[[	@ÒiI"@    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.;Fi[	@Òi8I"@    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.;Fi[	@„
@9i[[	@ziKI"í      private
      
      def function(var, var)
        if var["LITERAL"] then
          File.basename(strip_trailing_separator(var["LITERAL"]));Fi[	@ziSI"}      end
      
      def function(var, var)
        if var["LITERAL"] then
          if absolute_path?(var["LITERAL"]) then;Fi[	@„
@ACi[[	@ii@I"˜      # @example Return the direct message with the id 1825786345
      #   Twitter.direct_message(1825786345)
      def function(var, var)
        var["LITERAL"] = var
        object_from_response(Twitter::DirectMessage, "LITERAL", "STRING", var);Fi[	@ÚiI"¡      # @example Return the top 10 trending topics for San Francisco
      #   Twitter.trends(2487956)
      def function(var, var)
        var["LITERAL"] = var
        var = get("STRING", var);Fi[	@„
@]Hi[[	@7i˝I"™    #   person.errors.messages
    #   # => {:name=>["can't be empty"]}
    def function(var, var)
      Array(var).each do |var|
        var = @base.send("LITERAL", var);Fi[	@7iI"™    #   person.errors.messages
    #   # => {:name=>["can't be blank"]}
    def function(var, var)
      Array(var).each do |var|
        var = @base.send("LITERAL", var);Fi[	@„
@=1i[[	@7iI"“    # file in order to add support for new, simple browser functions without
    # waiting for a new compass release.
    def function(var, var)
      var.each do |var|
        unless ASPECTS.include?(var) then;Fi[	@7i.I"Ë    # file in order to remove support for simple functions that no longer need to
    # a prefix without waiting for a new compass release.
    def function(var, var)
      var.each do |var|
        unless ASPECTS.include?(var) then;Fi[	@¿@®&i[[	@ÒiI"í    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :park do
    #         transition :idling => :parked;Fi[	@Òi?I"í    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :park do
    #         transition :idling => :parked;Fi[	@¢,@≠,i[[	@iLI"à      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #     define_attribute_methods :name
      #;Fi[	@iÜI"à      #
      #     attr_accessor :name
      #     attribute_method_suffix '_short?'
      #     define_attribute_methods :name
      #;Fi[	@±I"@attrs.update(var);Fi[[	@QiQI"v    # @param attrs [Hash]
    # @return [Twitter::Base]
    def function(var)
      @attrs.update(var)
      self;Fi[	@Ti-I"{    # @param attrs [Hash]
    # @return [Twitter::RateLimit]
    def function(var)
      @attrs.update(var)
      self;Fi[	@±I"case var.type;Fi[[	@†iI"†        
        # Extracts the value from the node as either a string or symbol
        def function(var)
          case var.type
          when "LITERAL" then;Fi[	@◊iI"Ø        
        # Extracts the statement requirement from the given node
        def function(var)
          case var.type
          when "LITERAL", "LITERAL", "LITERAL" then;Fi[	@±I"super.each do |var|;Fi[[	@èi∑I"œ      
      # Configures new states with the built-in humanize scheme
      def function(var)
        super.each do |var|
          var.human_name = lambda { |var, var| translate(var, "LITERAL", var.name) };Fi[	@èiæI"Œ      
      # Configures new event with the built-in humanize scheme
      def function(var)
        super.each do |var|
          var.human_name = lambda { |var, var| translate(var, "LITERAL", var.name) };Fi[	@±I"@var = [true, false].include?(var.last) ? (var.pop) : (true);Fi[[	@¯iáI"U    #   
    #   vehicle.fire_events!(:ignite, :disable_alarm) # => StateMachine::InvalidTranstion: Cannot run events in parallel: ignite, disable_alarm
    def function(var)
      var = [true, false].include?(var.last) ? (var.pop) : (true)
      (fire_events(*(var + [var])) or raise(StateMachine::InvalidParallelTransition.new(self, var)));Fi[	@>iΩI"J    #   transition.perform(Time.now)        # => Passes in additional arguments and runs the +save+ action
    #   transition.perform(Time.now, false) # => Passes in additional arguments and only sets the state attribute
    def function(var)
      var = [true, false].include?(var.last) ? (var.pop) : (true)
      self.args = var;Fi[	@±@≈Ri[[	@Ë#iI"‘    # checking for all the required fields exist after the definition of the
    # attachment.
    def function(var)
      var = self.name.gsub("LITERAL", "STRING").constantize
      var = have_attached_file(var);Fi[	@Ë#iI"√    
    # Tests for validations on the presence of the attachment.
    def function(var)
      var = self.name.gsub("LITERAL", "STRING").constantize
      var = validate_attachment_presence(var);Fi[	I".#   events = Vehicle.state_machine.events;F@i[[	@ÒiJI"∞    #   end
    #   
    #   events = Vehicle.state_machine.events
    #   
    #   vehicle = Vehicle.new                             # => #<Vehicle:0xb7c464b0 @state="parked">;Fi[	@ÒikI"æ    #   
    #   vehicle = Vehicle.new                       # => #<Vehicle id: nil, state: "parked">
    #   events = Vehicle.state_machine.events
    #   
    #   vehicle.state_event = nil;Fi[	@±@KSi[[	@miAI"õ      end
      
      def function(var)
        var = (options["LITERAL"] or options["LITERAL"])
        var = var.call(var) if var.respond_to?("LITERAL");Fi[	@miHI"õ      end
      
      def function(var)
        var = (options["LITERAL"] or options["LITERAL"])
        var = var.call(var) if var.respond_to?("LITERAL");Fi[	I"#       event :enable do;F@√2i[[	@¯iLI"Ø    #     
    #     state_machine :alarm_state, :namespace => 'alarm', :initial => :on do
    #       event :enable do
    #         transition all => :active
    #       end;Fi[	@¯i~I"≥    #     
    #     state_machine :alarm_state, :namespace => 'alarm', :initial => :active do
    #       event :enable do
    #         transition all => :active
    #       end;Fi[	@±@ÃRi[[	@0iI"_        end
        
        def function(var)
          @var = var.flatten
          self;Fi[	@0i!I"_        end
        
        def function(var)
          @var = var.flatten
          self;Fi[	@±I"5while var = var.read(("LITERAL" * "LITERAL")) do;Fi[[	@&iI"}    end
    
    def function(var)
      while var = var.read(("LITERAL" * "LITERAL")) do
        destination.write(var);Fi[	@,i I"}    end
    
    def function(var)
      while var = var.read(("LITERAL" * "LITERAL")) do
        destination.write(var);Fi[	@±@õRi[[	@∆iZI"ä    end
    
    def function(var)
      var = @options["LITERAL"]["LITERAL"]
      var = var.call(instance) if var.respond_to?("LITERAL");Fi[	@∆ibI"ä    end
    
    def function(var)
      var = @options["LITERAL"]["LITERAL"]
      var = var.call(instance) if var.respond_to?("LITERAL");Fi[	@±I"/var = self.class.name.split("STRING").last;Fi[[	@i	I"ª    module PP
      module CharacterData
        def function(var)
          var = self.class.name.split("STRING").last
          var.group("LITERAL", "STRING", "STRING") { var.pp(text) };Fi[	@¸	iI"ô        end
        
        def function(var)
          var = self.class.name.split("STRING").last
          var.group("LITERAL", "STRING", "STRING") do;Fi[	@¨1@i[[	@¯i\I"    #   vehicle.fire_events(:ignite, :disable_alarm)  # => true
    #   vehicle.state                                 # => "idling"
    #   vehicle.alarm_state                           # => "off"
    #   
    #   # If any event fails, the entire event chain fails;Fi[	@¯iaI"˙    #   vehicle.fire_events(:ignite, :enable_alarm)   # => false
    #   vehicle.state                                 # => "idling"
    #   vehicle.alarm_state                           # => "off"
    #   
    #   # Exception raised on invalid event;Fi[	@±I"each do |var|;Fi[[	@iöI"π      ###
      # Append the class attribute +name+ to all Node objects in the NodeSet.
      def function(var)
        each do |var|
          var = var["STRING"].to_s.split("LITERAL");Fi[	@i¶I"ü      # If +name+ is nil, remove the class attribute from all Nodes in the
      # NodeSet.
      def function(var)
        each do |var|
          if var then;Fi[	@‡I"module ActiveRecord;Fi[[	@îiI"amodule StateMachine
  module Integrations
    module ActiveRecord
      version("STRING") do;Fi[	@ÔiI"àrequire("state_machine/integrations/active_model")
module StateMachine
  module Integrations
    module ActiveRecord
      include(Base);Fi[	@‡I"module Mongoid;Fi[[	@8iI"\module StateMachine
  module Integrations
    module Mongoid
      version("STRING") do;Fi[	@iI"Umodule StateMachine
  module Integrations
    module Mongoid
      include(Base);Fi[	@±I"#var = document.root.namespaces;Fi[[	@„i¡I"Á      ###
      # Search this node's immediate children using CSS selector +selector+
      def function(var)
        var = document.root.namespaces
        xpath(CSS.xpath_for(var, "LITERAL" => "STRING", "LITERAL" => (var)).first);Fi[	@ivI"Ò      ###
      # Search this NodeSet's nodes' immediate children using CSS selector +selector+
      def function(var)
        var = document.root.namespaces
        xpath(CSS.xpath_for(var, "LITERAL" => "STRING", "LITERAL" => (var)).first);Fi[	@‡I"module MongoMapper;Fi[[	@IiI"`module StateMachine
  module Integrations
    module MongoMapper
      version("STRING") do;Fi[	@¸iI"árequire("state_machine/integrations/active_model")
module StateMachine
  module Integrations
    module MongoMapper
      include(Base);Fi[	@‡I"module Sequel;Fi[[	@IiI"[module StateMachine
  module Integrations
    module Sequel
      version("STRING") do;Fi[	@õiI"Tmodule StateMachine
  module Integrations
    module Sequel
      include(Base);Fi[	@±@Õ)i[[	@„iıI"á      #
      # Also see related method +<<+.
      def function(var)
        var = coerce(var)
        if var.is_a?(XML::NodeSet) then;Fi[	@„iPI"      #
      # Also see related method +inner_html=+
      def function(var)
        var = coerce(var)
        children.unlink;Fi[	@±I"!self.ext = File.extname(var);Fi[[	@•i(I"b    #
    # Returns nothing.
    def function(var)
      self.ext = File.extname(var)
    end;Fi[	@Ìi^I"ú    #
    # Returns nothing.
    def function(var)
      self.ext = File.extname(var)
      self.basename = var[("LITERAL"..(-self.ext.length - "LITERAL"))];Fi[	@±I"(var = @context.registers["LITERAL"];Fi[[	@—iI"©    #
    # Returns the HTML formatted String.
    def function(var)
      var = @context.registers["LITERAL"]
      var = var.getConverterImpl(Jekyll::TextileConverter);Fi[	@—iI"™    #
    # Returns the HTML formatted String.
    def function(var)
      var = @context.registers["LITERAL"]
      var = var.getConverterImpl(Jekyll::MarkdownConverter);Fi[	@±I"
setup;Fi[[	@∆i^I"P    end
    
    def function(var)
      setup
      case @config["STRING"];Fi[	@Úi"I"t    end
    
    def function(var)
      setup
      return RedCloth.new(var).to_html if @config["STRING"].nil?;Fi[	@±I"Ovar = (("STRING" + @config["STRING"].gsub("STRING", "STRING")) + "STRING");Fi[[	@∆iUI"•    end
    
    def function(var)
      var = (("STRING" + @config["STRING"].gsub("STRING", "STRING")) + "STRING")
      var.=~(Regexp.new(var, Regexp::IGNORECASE));Fi[	@ÚiI"•    end
    
    def function(var)
      var = (("STRING" + @config["STRING"].gsub("STRING", "STRING")) + "STRING")
      var.=~(Regexp.new(var, Regexp::IGNORECASE));Fi[	I"G# Initializes class-level extensions and defaults for this machine;F@Ei[[	@èiqI"      end
      
      # Initializes class-level extensions and defaults for this machine
      def function
        super;Fi[	@ki1I"Ä      protected
      
      # Initializes class-level extensions and defaults for this machine
      def function
        super;Fi[	I"a(callbacks["LITERAL"] << Callback.new("LITERAL") { |var, var| notify("LITERAL", var, var) });F@˜Ui[[	@èiÑI"k      def function
        if supports_observers? then
          (callbacks["LITERAL"] << Callback.new("LITERAL") { |var, var| notify("LITERAL", var, var) })
          (callbacks["LITERAL"] << Callback.new("LITERAL") { |var, var| notify("LITERAL", var, var) })
          (callbacks["LITERAL"] << Callback.new("LITERAL") { |var, var| notify("LITERAL", var, var) });Fi[	@èiÖI"d        if supports_observers? then
          (callbacks["LITERAL"] << Callback.new("LITERAL") { |var, var| notify("LITERAL", var, var) })
          (callbacks["LITERAL"] << Callback.new("LITERAL") { |var, var| notify("LITERAL", var, var) })
          (callbacks["LITERAL"] << Callback.new("LITERAL") { |var, var| notify("LITERAL", var, var) })
        end;Fi[	@±I"var = var.to_s.downcase;Fi[[	@¸iI"a  include(Comparable)
  
  def function(var)
    var = var.to_s.downcase
    @var = case var;Fi[	@“i+I"°        "STRING" if [current_section, current_subtab].include?(var)
      end
      def function(var)
        var = var.to_s.downcase
        var = url_path(var);Fi[	I"=owner_class.validates_each(attribute) do |var, var, var|;FI"'var = var.class.state_machine(var);Fi[[	@èiéI"        var = self.name
        if supports_validations? then
          owner_class.validates_each(attribute) do |var, var, var|
            var = var.class.state_machine(var)
            var.invalidate(var, "LITERAL", "LITERAL") unless var.states.match(var);Fi[	@õiPI"È      def function
        var = self.name
        owner_class.validates_each(attribute) do |var, var, var|
          var = var.class.state_machine(var)
          var.invalidate(var, "LITERAL", "LITERAL") unless var.states.match(var);Fi[	@±@éi[[	@LiºI"}    end
    
    def function(var)
      var = "LITERAL".match(var)
      if var and (var.begin("LITERAL") == "LITERAL") then;Fi[	@LiÕI"n    end
    
    def function(var)
      var = "LITERAL".match(var)
      raise(Error, "STRING") if var.!;Fi[	@±@OCi[[	@Li=I"Æ    # Parses an "object" in the sense of RFC 4627.
    # Returns the parsed value and any trailing tokens.
    def function(var)
      var = eat("STRING", var)
      var = {};Fi[	@LiXI"≠    # Parses an "array" in the sense of RFC 4627.
    # Returns the parsed value and any trailing tokens.
    def function(var)
      var = eat("STRING", var)
      var = [];Fi[	@0@Ri[[	@0iI"{var = "STRING"
var = eval(IO.read(var), binding, var)
var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL")
var;Fi[	@"0iI"{var = "STRING"
var = eval(IO.read(var), binding, var)
var["LITERAL"]["LITERAL"] = var["LITERAL"].delete("LITERAL")
var;Fi[	@±@VNi[[	@LiI"ÿ    # Note: this is almost the same as valparse,
    # except that it does not accept atomic values.
    def function(var)
      raise(Error, "STRING") if (var.length < "LITERAL")
      var, var, var = var["LITERAL"];Fi[	@Li,I"‹    # Parses a "value" in the sense of RFC 4627.
    # Returns the parsed value and any trailing tokens.
    def function(var)
      raise(Error, "STRING") if (var.length < "LITERAL")
      var, var, var = var["LITERAL"];Fi[	@±@#Li[[	@u/iSI"öend
class ExternalDepsTests < Test::Unit::TestCase
  def function(var)
    var = DependencyCollector.new
    var.each { |var, var| var.add(var => (var)) };Fi[	@u/iZI"u  end
  
  def function(var)
    var = DependencyCollector.new
    var.each { |var, var| var.add(var => (var)) };Fi[	I"7require("state_machine/integrations/active_model");F@ﬂi[[	@Ôi I"arequire("state_machine/integrations/active_model")
module StateMachine
  module Integrations;Fi [	@¸i I"arequire("state_machine/integrations/active_model")
module StateMachine
  module Integrations;Fi [	@±I"%(@var ||= {}).fetch(var.to_s) do;Fi[[	@º	iI"~  end
  
  def function(var)
    (@var ||= {}).fetch(var.to_s) do
      @locate[var.to_s] = if File.executable?("STRING") then;Fi[	@º	i>I"l  end
  
  def function(var)
    (@var ||= {}).fetch(var.to_s) do
      @sdk_path[var.to_s] = (var = [];Fi[	@±@™Ii[[	@wi|I"P  end
  
  def function(var)
    fetch(var, []).map do |var|
      case var;Fi[	@wiäI"P  end
  
  def function(var)
    fetch(var, []).map do |var|
      case var;Fi[	@±I"if var.likes.loaded? then;Fi[[	@√i
I"ñ  # Check whether the user has liked a post.
  # @param [Post] post
  def function(var)
    if var.likes.loaded? then
      if self.like_for(var) then;Fi[	@√iI"•  # @param [Post] post
  # @return [Like]
  def function(var)
    if var.likes.loaded? then
      return var.likes.detect { |var| (var.author_id == self.person.id) };Fi[	@±I".ActiveSupport::Deprecation.warn("STRING");Fi[[	@≥6i"I"      end
      
      def function(var)
        ActiveSupport::Deprecation.warn("STRING")
        remove_attachment(*var);Fi[	@≥6i-I"x      end
      
      def function(var)
        ActiveSupport::Deprecation.warn("STRING")
        attachment(*var);Fi[	@±I";var = find_or_initialize_with_error_by("LITERAL", var);Fi[[	@ÄiŒI"ˇ        # If the user is already confirmed, create an error for the user
        # Options must have the confirmation_token
        def function(var)
          var = find_or_initialize_with_error_by("LITERAL", var)
          var.confirm! if var.persisted?;Fi[	@aiêI"˘        # If the user is not locked, creates an error for the user
        # Options must have the unlock_token
        def function(var)
          var = find_or_initialize_with_error_by("LITERAL", var)
          var.unlock_access! if var.persisted?;Fi[	@±I"7var = lambda { |var| var.to_s.singularize.to_sym };Fi[[	@éQiqI"Å    end
    
    def function(var)
      var = lambda { |var| var.to_s.singularize.to_sym }
      if var.has_key?("LITERAL") then;Fi[	@éQi~I"Ç    end
    
    def function(var)
      var = lambda { |var| var.to_s.singularize.to_sym }
      if (var["LITERAL"] == true) then;Fi[	@±I"@var = Hash.new;Fi[[	@éQigI"y    end
    
    def function(var)
      @var = Hash.new
      @constraints.merge!(var["LITERAL"]) if var["LITERAL"];Fi[	@éQilI"v    end
    
    def function(var)
      @var = Hash.new
      @defaults.merge!(var["LITERAL"]) if var["LITERAL"];Fi[	@±I"var.visit(self);Fi[[	I"Oprojects//compass_proj/compass/sass_extensions/monkey_patches/traversal.rb;Ti	I"∏    class Node
      unless method_defined?("LITERAL") then
        def function(var)
          var.visit(self)
          var.down(self) if children.any? and var.respond_to?("LITERAL");Fi[	@„iåI"ê      ###
      # Accept a visitor.  This method calls "visit" on +visitor+ with self.
      def function(var)
        var.visit(self)
      end;Fi[	@±I"*if var.is_a?(Sass::Script::List) then;Fi[[	@Yi0I"˘  # This can be used to unpack a space separated list that got turned
  # into a string by sass before it was passed to a mixin.
  def function(var)
    if var.is_a?(Sass::Script::List) then
      Sass::Script::List.new(var.value.dup, var.separator);Fi[	@Yi:I"  # If the argument is a list, it will return a new list that is space delimited
  # Otherwise it returns a new, single element, space-delimited list.
  def function(var)
    if var.is_a?(Sass::Script::List) then
      Sass::Script::List.new(var.value.dup, "LITERAL");Fi[	@±@Bi[[	@i7I"¥      (var.value.size == "LITERAL") ? (var.value.first) : (var)
    end
    def function(var)
      if var.is_a?(Sass::Script::String) then
        var = var.value =~ "LITERAL".!.!;Fi[	@YiXI"∫  
  # returns the first value of a space delimited list.
  def function(var)
    if var.is_a?(Sass::Script::String) then
      Sass::Script::String.new(var.value.split("LITERAL").first);Fi[	@±@	i[[	@i6I"¬  # returns an IE hex string for a color with an alpha channel
  # suitable for passing to IE filters.
  def function(var)
    assert_type(var, "LITERAL")
    var = (var.alpha * "LITERAL").round;Fi[	@bi"I"j    end
    
    def function(var)
      assert_type(var, "LITERAL")
      var = normalize_stops(var);Fi[	I"L# Generates the fully-qualifed column name for this machine's attribute;F@Ei[[	@ÔiTI"ñ      end
      
      # Generates the fully-qualifed column name for this machine's attribute
      def function
        var = owner_class.connection;Fi[	@õiçI"√      end
      
      # Generates the fully-qualifed column name for this machine's attribute
      def function
        ::Sequel::SQL::QualifiedIdentifier.new(owner_class.table_name, attribute);Fi[	@±I"/var, var = var.split("LITERAL", "LITERAL");Fi[[	@≠iYI"o    end
    
    def function(var)
      var, var = var.split("LITERAL", "LITERAL")
      var ||= "STRING";Fi[	@≠ibI"n    end
    
    def function(var)
      var, var = var.split("LITERAL", "LITERAL")
      var = self[var];Fi[	@±I"self.args = var;Fi[[	@•iI"Z    attr_accessor("LITERAL")
    
    def function(var)
      self.args = var
    end;Fi[	@™iI"{    attr_accessor("LITERAL", "LITERAL", "LITERAL")
    
    def function(var)
      self.args = var
      self.options = {};Fi[	@±@+Ai[[	@i I"u        end
        
        def function(var)
          inherited_reader(*var)
          inherited_writer(*var);Fi[	@iOI"u        end
        
        def function(var)
          inherited_reader(*var)
          inherited_writer(*var);Fi[	@6I"'#     include DataMapper::Observer;Fi[[	@ i"I"}        #   end
        #   
        #   class VehicleObserver
        #     include DataMapper::Observer
        #     ;Fi[	@ i_I"}        #   end
        #   
        #   class VehicleObserver
        #     include DataMapper::Observer
        #     ;Fi[	@òV@i[[	@ i#I"Ü        #   
        #   class VehicleObserver
        #     include DataMapper::Observer
        #     
        #     observe Vehicle;Fi[	@ i`I"Ü        #   
        #   class VehicleObserver
        #     include DataMapper::Observer
        #     
        #     observe Vehicle;Fi[	I"#     observe Vehicle;F@i[[	@ i%I"Ñ        #     include DataMapper::Observer
        #     
        #     observe Vehicle
        #     
        #     before :save do;Fi[	@ ibI"ù        #     include DataMapper::Observer
        #     
        #     observe Vehicle
        #     
        #     around_transition do |transition, block|;Fi[	I"#       # log message;F@&i[[	@ i(I"p        #     
        #     before :save do
        #       # log message
        #     end
        #     ;Fi[	@ i7I"Æ        #     # Target all state machines without requirements
        #     before_transition do |transition|
        #       # log message
        #     end
        #   end;Fi[	I"#       # put on seatbelt;F@&i[[	@ i-I"≤        #     # Target all state machines
        #     before_transition :parked => :idling, :on => :ignite do
        #       # put on seatbelt
        #     end
        #     ;Fi[	@ i2I"¨        #     # Target a specific state machine
        #     before_transition :state, any => :idling do
        #       # put on seatbelt
        #     end
        #     ;Fi[	@•6I"# for defining callbacks.;Fi[[	@ iGI"¥        # transition.
        # 
        # See +before_transition+ for a description of the possible configurations
        # for defining callbacks.
        def function(var, var);Fi[	@ ikI"Æ        #   end
        # 
        # See +before_transition+ for a description of the possible configurations
        # for defining callbacks.
        def function(var, var);Fi[	@∫V@„
i[[	@ iHI"◊        # 
        # See +before_transition+ for a description of the possible configurations
        # for defining callbacks.
        def function(var, var)
          add_transition_callback("LITERAL", *var, &var);Fi[	@ ilI"◊        # 
        # See +before_transition+ for a description of the possible configurations
        # for defining callbacks.
        def function(var, var)
          add_transition_callback("LITERAL", *var, &var);Fi[	I"#       # log failure;F@&i[[	@ iÄI"ó        #   class VehicleObserver
        #     after_transition_failure do |transition|
        #       # log failure
        #     end
        #     ;Fi[	@ iÑI"á        #     
        #     after_transition_failure :on => :ignite do
        #       # log failure
        #     end
        #   end;Fi[	I"7# Pluralizes the name using the built-in inflector;F@±i[[	@kiMI"ï      end
      
      # Pluralizes the name using the built-in inflector
      def function(var)
        ::DataMapper::Inflector.pluralize(var.to_s);Fi[	@õi-I"}      end
      
      # Pluralizes the name using the built-in inflector
      def function(var)
        load_inflector;Fi[	I"9# Uses internal save hooks if using the :save action;F@Ei[[	@kiqI"î      end
      
      # Uses internal save hooks if using the :save action
      def function
        (action == "LITERAL") ? ("LITERAL") : (super);Fi[	@õiaI"î      end
      
      # Uses internal save hooks if using the :save action
      def function
        (action == "LITERAL") ? ("LITERAL") : (super);Fi[	I"G# Runs a new database transaction, rolling back any changes if the;FI"0# yielded block fails (i.e. returns false).;Fi[[	@ki}I"£      end
      
      # Runs a new database transaction, rolling back any changes if the
      # yielded block fails (i.e. returns false).
      def function(var);Fi[	@õiíI"£      end
      
      # Runs a new database transaction, rolling back any changes if the
      # yielded block fails (i.e. returns false).
      def function(var);Fi[	@›V@±i[[	@ki~I"€      
      # Runs a new database transaction, rolling back any changes if the
      # yielded block fails (i.e. returns false).
      def function(var)
        var.class.transaction { |var| var.rollback unless yield };Fi[	@õiìI"Ê      
      # Runs a new database transaction, rolling back any changes if the
      # yielded block fails (i.e. returns false).
      def function(var)
        var.db.transaction { raise(::Sequel::Error::Rollback) unless yield };Fi[	I"I# Creates a new callback in the callback chain, always ensuring that;FI"J# it's configured to bind to the object as this is the convention for;Fi[[	@kiÉI"À      end
      
      # Creates a new callback in the callback chain, always ensuring that
      # it's configured to bind to the object as this is the convention for
      # DataMapper/Extlib callbacks;Fi[	@õiòI"¿      end
      
      # Creates a new callback in the callback chain, always ensuring that
      # it's configured to bind to the object as this is the convention for
      # Sequel callbacks;Fi[	I".# Defines a new scope with the given name;F@„
i[[	@¸iMI"•      end
      
      # Defines a new scope with the given name
      def function(var, var)
        lambda { |var, var| var.query.merge(var.query(var.call(var))) };Fi[	@iQI"ù      end
      
      # Defines a new scope with the given name
      def function(var, var)
        lambda { |var, var| var.criteria.where(var.call(var)) };Fi[	I"L# Forces the change in state to be recognized regardless of whether the;FI"## state value actually changed;Fi[[	@8iI"’          ::Mongoid::VERSION =~ "LITERAL"
        end
        # Forces the change in state to be recognized regardless of whether the
        # state value actually changed
        def function(var, var, var, var);Fi[	@õiI"™      end
      
      # Forces the change in state to be recognized regardless of whether the
      # state value actually changed
      def function(var, var, var, var);Fi[	@˙V@$i[[	@8iI"¡        end
        # Forces the change in state to be recognized regardless of whether the
        # state value actually changed
        def function(var, var, var, var)
          var = super;Fi[	@õiI"¥      
      # Forces the change in state to be recognized regardless of whether the
      # state value actually changed
      def function(var, var, var, var)
        var = super;Fi[	I"#         ...;F@e
i[[	@i=I"j    #     state_machine do
    #       event :park do
    #         ...
    #       end
    #     end;Fi[	@i)I"â    #       @state = 'idling'
    #       initialize_state_machines(:static => :force) do
    #         ...
    #       end
    #     end;Fi[	I"N# state machine based on the *name* of the machine.  Any existing methods;FI"# will not be overwritten.;Fi[[	@iaI"    # 
    # The following class methods will be automatically generated by the
    # state machine based on the *name* of the machine.  Any existing methods
    # will not be overwritten.
    # * <tt>human_state_name(state)</tt> - Gets the humanized value for the;Fi[	@i{I"    # 
    # The following instance methods will be automatically generated by the
    # state machine based on the *name* of the machine.  Any existing methods
    # will not be overwritten.
    # * <tt>state</tt> - Gets the current value for the attribute;Fi[	@±I"#var = /^#{Regexp.escape(var)}/;Fi[[	@G!iI"Ñ    end
    
    def function(var)
      var = /^#{Regexp.escape(var)}/
      var = @commands.keys.select { |var| var.to_s.=~(var) };Fi[	@G!i$I"~    end
    
    def function(var)
      var = /^#{Regexp.escape(var)}/
      @commands.keys.detect { |var| var.to_s.=~(var) };Fi[	@Á @ i[[	@imI"ú    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling;Fi[	@iûI"ú    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling;Fi[	I"™#                                             #     [#<StateMachine::Transition attribute=:state event=:park from="idling" from_name=:idling to="parked" to_name=:parked>,;FI"¨#                                             #      #<StateMachine::Transition attribute=:state event=:ignite from="parked" from_name=:parked to="idling" to_name=:idling>];Fi[[	@iƒI"¸    #   # Getting current path availability
    #   vehicle.state_paths                       # => [
    #                                             #     [#<StateMachine::Transition attribute=:state event=:park from="idling" from_name=:idling to="parked" to_name=:parked>,
    #                                             #      #<StateMachine::Transition attribute=:state event=:ignite from="parked" from_name=:parked to="idling" to_name=:idling>]
    #                                             #   ];Fi[	@i»I"    #                                             #   ]
    #   vehicle.state_paths(:guard => false)      # => 
    #                                             #     [#<StateMachine::Transition attribute=:state event=:park from="idling" from_name=:idling to="parked" to_name=:parked>,
    #                                             #      #<StateMachine::Transition attribute=:state event=:ignite from="parked" from_name=:parked to="idling" to_name=:idling>]
    #                                             #   ];Fi[	@$WI"8#                                             #   ];Fi[[	@i≈I"    #   vehicle.state_paths                       # => [
    #                                             #     [#<StateMachine::Transition attribute=:state event=:park from="idling" from_name=:idling to="parked" to_name=:parked>,
    #                                             #      #<StateMachine::Transition attribute=:state event=:ignite from="parked" from_name=:parked to="idling" to_name=:idling>]
    #                                             #   ]
    #   vehicle.state_paths(:guard => false)      # => ;Fi[	@i…I"ÿ    #   vehicle.state_paths(:guard => false)      # => 
    #                                             #     [#<StateMachine::Transition attribute=:state event=:park from="idling" from_name=:idling to="parked" to_name=:parked>,
    #                                             #      #<StateMachine::Transition attribute=:state event=:ignite from="parked" from_name=:parked to="idling" to_name=:idling>]
    #                                             #   ]
    #   ;Fi[	@±I"@var ||= Hash.new;Fi[[	@G!i)I"    end
    
    def function(var)
      @var ||= Hash.new
      var and (@commands.has_key?(var.to_sym) or abbreviation?(var));Fi[	@˛i~I"á      
      # Get the list of decorators given +key+
      def function(var)
        @var ||= Hash.new
        @decorators[var] ||= [];Fi[	@±@•i[[	@œi∏I"À    # The second object, if present, is used as a prefix,
    # just like you can do with `dom_id()` and `dom_class()` in Rails
    def function(var)
      var = var["LITERAL"]
      var = var["LITERAL"];Fi[	@LiﬁI"Ã    # The rules are different than for Ruby, so we cannot use eval.
    # Unquote will raise an error if q contains control characters.
    def function(var)
      var = var["LITERAL"]
      var = var.dup;Fi[	@^6@äi[[	@i¸I"k    #     end
    #     
    #     def initialize(attributes = {})
    #       ...
    #       super();Fi[	@iI"}    #     end
    #     
    #     def initialize(attributes = {})
    #       ...
    #       initialize_state_machines;Fi[	I"#       event :turn_off do;F@¯&i[[	@i≈I"u    #       end
    #       
    #       event :turn_off do
    #         transition all => :off
    #       end;Fi[	@iœI"u    #       end
    #       
    #       event :turn_off do
    #         transition all => :off
    #       end;Fi[	I"3#   matcher.matches?(:parked)       # => false;FI"2#   matcher.matches?(:first_gear)   # => true;Fi[[	@RiI"     # 
    #   matcher = StateMachine::AllMatcher.instance - [:parked, :idling]
    #   matcher.matches?(:parked)       # => false
    #   matcher.matches?(:first_gear)   # => true
    def function(var);Fi[	@RiOI"œ    # 
    #   matcher = StateMachine::BlacklistMatcher.new([:parked, :idling])
    #   matcher.matches?(:parked)       # => false
    #   matcher.matches?(:first_gear)   # => true
    def function(var, var);Fi[	I"# for this matcher.;F@i[[	@Ri7I"ü  class WhitelistMatcher < Matcher
    # Checks whether the given value exists within the whitelist configured
    # for this matcher.
    # 
    # == Examples;Fi[	@RiJI"†  class BlacklistMatcher < Matcher
    # Checks whether the given value exists outside the blacklist configured
    # for this matcher.
    # 
    # == Examples;Fi[	I"3# A human-readable description of this matcher;F@Ei[[	@RiBI"ü    end
    
    # A human-readable description of this matcher
    def function
      (values.length == "LITERAL") ? (values.first.inspect) : (values.inspect);Fi[	@Ri[I"d    end
    
    # A human-readable description of this matcher
    def function
      "STRING";Fi[	I"2#   states = StateMachine::NodeCollection.new;FI"<#   states << StateMachine::State.new(machine, :parked);Fi[[	@LijI"¡    # parameter.
    # 
    #   states = StateMachine::NodeCollection.new
    #   states << StateMachine::State.new(machine, :parked)
    #   states << StateMachine::State.new(machine, :idling);Fi[	@LiyI"ÿ    # Gets the node at the given index.
    # 
    #   states = StateMachine::NodeCollection.new
    #   states << StateMachine::State.new(machine, :parked)
    #   states << StateMachine::State.new(machine, :idling);Fi[	@cWI"<#   states << StateMachine::State.new(machine, :idling);Fi[[	@LikI"Ê    # 
    #   states = StateMachine::NodeCollection.new
    #   states << StateMachine::State.new(machine, :parked)
    #   states << StateMachine::State.new(machine, :idling)
    #   states.each {|state| puts state.name, ' -- '};Fi[	@LizI"π    # 
    #   states = StateMachine::NodeCollection.new
    #   states << StateMachine::State.new(machine, :parked)
    #   states << StateMachine::State.new(machine, :idling)
    #   ;Fi[	I"Q# Gets the node indexed by the given key.  By default, this will look up the;FI"P# key in the first index configured for the collection.  A custom index can;Fi[[	@Li~I"…    end
    
    # Gets the node indexed by the given key.  By default, this will look up the
    # key in the first index configured for the collection.  A custom index can
    # be specified like so:;Fi[	@LiåI"…    end
    
    # Gets the node indexed by the given key.  By default, this will look up the
    # key in the first index configured for the collection.  A custom index can
    # be specified like so:;Fi[	@rWI"# be specified like so:;Fi[[	@LiI"»    
    # Gets the node indexed by the given key.  By default, this will look up the
    # key in the first index configured for the collection.  A custom index can
    # be specified like so:
    # ;Fi[	@LiçI"»    
    # Gets the node indexed by the given key.  By default, this will look up the
    # key in the first index configured for the collection.  A custom index can
    # be specified like so:
    # ;Fi[	@yW@i[[	@LiÄI"Ë    # Gets the node indexed by the given key.  By default, this will look up the
    # key in the first index configured for the collection.  A custom index can
    # be specified like so:
    # 
    #   collection['parked', :value];Fi[	@LiéI"Ë    # Gets the node indexed by the given key.  By default, this will look up the
    # key in the first index configured for the collection.  A custom index can
    # be specified like so:
    # 
    #   collection['parked', :value];Fi[	I"%#   collection['parked', :value];F@i[[	@LiÇI"ù    # be specified like so:
    # 
    #   collection['parked', :value]
    # 
    # The above will look up the "parked" key in a hash indexed by each node's;Fi[	@LiêI"ù    # be specified like so:
    # 
    #   collection['parked', :value]
    # 
    # The above will look up the "parked" key in a hash indexed by each node's;Fi[	I"O# The above will look up the "parked" key in a hash indexed by each node's;FI"# +value+ attribute.;Fi[[	@LiÑI"ö    #   collection['parked', :value]
    # 
    # The above will look up the "parked" key in a hash indexed by each node's
    # +value+ attribute.
    # ;Fi[	@LiíI"ö    #   collection['parked', :value]
    # 
    # The above will look up the "parked" key in a hash indexed by each node's
    # +value+ attribute.
    # ;Fi[	@éW@i[[	@LiÖI"≤    # 
    # The above will look up the "parked" key in a hash indexed by each node's
    # +value+ attribute.
    # 
    # If the key cannot be found, then nil will be returned.;Fi[	@LiìI"ƒ    # 
    # The above will look up the "parked" key in a hash indexed by each node's
    # +value+ attribute.
    # 
    # If the key cannot be found, then an IndexError exception will be raised:;Fi[	I"9# Gets the value for the given attribute on the node;F@„
i[[	@Li•I"y    end
    
    # Gets the value for the given attribute on the node
    def function(var, var)
      var.send(var);Fi[	@4ilI"ú    private
    
    # Gets the value for the given attribute on the node
    def function(var, var)
      (var == "LITERAL") ? (var.value(false)) : (super);Fi[	I"# versions of the index;F@„
i[[	@Li≥I"£    
    # Removes the given key from an index, including the string and symbol
    # versions of the index
    def function(var, var)
      index(var).delete(var);Fi[	@LiªI"£    
    # Updates the node for the given index, including the string and symbol
    # versions of the index
    def function(var, var)
      var = self.index(var);Fi[	@	U@“i[[	@ÁiI"    # * <tt>:target</tt> - The target state to end the path on
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one
    def function(var, var, var)
      assert_valid_keys(var, "LITERAL", "LITERAL");Fi[	@ÍiI">    # * <tt>:deep</tt> - Whether to enable deep searches for the target state.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one
    def function(var, var, var)
      var = { "LITERAL" => (false), "LITERAL" => (var.states.match!(var).name) }.merge(var);Fi[	I"B#   path.to_states  # => [:parked, :idling, :first_gear, ...];F@Ei[[	@Ái-I"ì    # For example,
    # 
    #   path.to_states  # => [:parked, :idling, :first_gear, ...]
    def function
      map { |var| var.from_name }.uniq;Fi[	@Ái<I"ë    # For example,
    # 
    #   path.to_states  # => [:parked, :idling, :first_gear, ...]
    def function
      map { |var| var.to_name }.uniq;Fi[	I"# this collection.;F@i[[	@Íi+I"Ü    
    # Lists all of the states that can be transitioned from through the paths in
    # this collection.
    # 
    # For example,;Fi[	@Íi5I"Ñ    
    # Lists all of the states that can be transitioned to through the paths in
    # this collection.
    # 
    # For example,;Fi[	@±@]>i[[	@|iGI"§      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var, var = case var
        when "LITERAL" then;Fi[	@iÅI"§      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(var)
        var, var = case var
        when "LITERAL" then;Fi[	@È5@i[[	@4i/I"ú    #   end
    #   
    #   states = Vehicle.state_machine.states
    #   
    #   vehicle = Vehicle.new         # => #<Vehicle:0xb7c464b0 @state="parked">;Fi[	@4iJI"ú    #   end
    #   
    #   states = Vehicle.state_machine.states
    #   
    #   vehicle = Vehicle.new         # => #<Vehicle:0xb7c464b0 @state="parked">;Fi[	@<9@≤i[[	@>iQI"¬    # Whether the transition is only existing temporarily for the object
    # Creates a new, specific transition
    def function(var, var, var, var, var, var)
      @var = var
      @var = var;Fi[	@ÚiI"ì    # @param method_options [Hash]
    # @return [Twitter::Cursor]
    def function(var, var, var, var, var, var)
      @var = var
      @var = var;Fi[	@‡5I"c#   transition = StateMachine::Transition.new(Vehicle.new, machine, :ignite, :parked, :idling);Fi[[	@>i§I";    # == Example
    # 
    #   machine = StateMachine.new(Vehicle)
    #   transition = StateMachine::Transition.new(Vehicle.new, machine, :ignite, :parked, :idling)
    #   transition.attributes   # => {:object => #<Vehicle:0xb7d60ea4>, :attribute => :state, :event => :ignite, :from => 'parked', :to => 'idling'};Fi[	@>iôI"¸    # == Example
    # 
    #   machine = StateMachine.new(Vehicle)
    #   transition = StateMachine::Transition.new(Vehicle.new, machine, :ignite, :parked, :idling)
    #   transition.context    # => {:on => :ignite, :from => :parked, :to => :idling};Fi[	I"K# callbacks that are configured to match the event, from state, and to;FI"# state will be invoked.;Fi[[	@>i^I"∫    
    # Runs the machine's +before+ callbacks for this transition.  Only
    # callbacks that are configured to match the event, from state, and to
    # state will be invoked.
    # ;Fi[	@>i|I"π    
    # Runs the machine's +after+ callbacks for this transition.  Only
    # callbacks that are configured to match the event, from state, and to
    # state will be invoked.
    # ;Fi[	@◊W@i[[	@>i_I"    # Runs the machine's +before+ callbacks for this transition.  Only
    # callbacks that are configured to match the event, from state, and to
    # state will be invoked.
    # 
    # Once the callbacks are run, they cannot be run again until this transition;Fi[	@>i}I"    # Runs the machine's +after+ callbacks for this transition.  Only
    # callbacks that are configured to match the event, from state, and to
    # state will be invoked.
    # 
    # Once the callbacks are run, they cannot be run again until this transition;Fi[	I"Q# Once the callbacks are run, they cannot be run again until this transition;FI"# is reset.;Fi[[	@>iaI"§    # state will be invoked.
    # 
    # Once the callbacks are run, they cannot be run again until this transition
    # is reset.
    def function(var, var, var);Fi[	@>iI"ã    # state will be invoked.
    # 
    # Once the callbacks are run, they cannot be run again until this transition
    # is reset.
    # ;Fi[	@±I"var = var.dup;Fi[[	@œiI"N    end
    
    def function(var)
      var = var.dup
      var = @index;Fi[	@œi,I"^    end
    
    def function(var)
      var = var.dup
      var = StringScanner.new(var);Fi[	@ÅK@å7i[[	@ÆiI"ä        
        def function
          if owner.is_a?(StateMachine::Machine) then
            var = self
            var = self.statement;Fi[	@≥iI"ä        
        def function
          if owner.is_a?(StateMachine::Machine) then
            var = self
            var = self.statement;Fi[	@7FI"4var = extract_node_names(var.parameters(false));Fi[[	@ÆiI"∆          if owner.is_a?(StateMachine::Machine) then
            var = self
            var = self.statement
            var = extract_node_names(var.parameters(false))
            var.each do |var|;Fi[	@≥iI"∆          if owner.is_a?(StateMachine::Machine) then
            var = self
            var = self.statement
            var = extract_node_names(var.parameters(false))
            var.each do |var|;Fi[	@˘W@=1i[[	@ÆiI"Ë            var = self
            var = self.statement
            var = extract_node_names(var.parameters(false))
            var.each do |var|
              owner.event(var) { var.parse_block(var.last.last, "LITERAL" => (self)) };Fi[	@≥iI"Ë            var = self
            var = self.statement
            var = extract_node_names(var.parameters(false))
            var.each do |var|
              owner.state(var) { var.parse_block(var.last.last, "LITERAL" => (self)) };Fi[	I"\register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING", "LITERAL")));F@3i[[	@—iI"˚        def function
          return if inherited_machine
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING", "LITERAL")))
          var.docstring = ["STRING", "STRING", "STRING"]
          var.parameters = ["STRING"];Fi[	@—i}I"          var.docstring = ["STRING", "STRING", "STRING"]
          var.parameters = ["STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING", "LITERAL")))
          var.docstring = ["STRING", "STRING", "STRING"]
          var.parameters = ["STRING"];Fi[	@±I"var.each do |var, var|;Fi[[	@siDI"à      end
      
      def function(var)
        var.each do |var, var|
          self.send("STRING", var) if self.respond_to?("STRING");Fi[	@!
i
I"ü      ###
      # Register namespaces in +namespaces+
      def function(var)
        var.each do |var, var|
          var = var.to_s.gsub("LITERAL", "STRING");Fi[	I".namespace.attributes["LITERAL"][var] = {};FI"Lregister((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)));Fi[[	@—iÇI"M          unless (integration or instance_attributes.include?(machine.attribute.to_sym)) then
            var = machine.attribute
            namespace.attributes["LITERAL"][var] = {}
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var;Fi[	@—içI"f          if ((integration and (integration.defaults["LITERAL"] and options.include?("LITERAL").!)) or options["LITERAL"]) then
            var = "STRING"
            namespace.attributes["LITERAL"][var] = {}
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var;Fi[	@X@ß-i[[	@—iÉI"             var = machine.attribute
            namespace.attributes["LITERAL"][var] = {}
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"];Fi[	@—iéI"            var = "STRING"
            namespace.attributes["LITERAL"][var] = {}
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var)))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"];Fi[	@±@„,i[[	@bi∑I"†    end
    
    def function(var)
      if var.respond_to?("LITERAL") then
        if var.value.is_a?(Array) and var.value.all? { |var| color_stop?(var) } then;Fi[	@œiI"Ñ    end
    
    def function(var)
      if var.respond_to?("LITERAL") then
        var.copy_to_local_file(@style, destination.path);Fi[	@®-@3i[[	@—iàI"            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            var.parameters = ["STRING"]
          end;Fi[	@—iìI"            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            var.parameters = ["STRING"]
          end;Fi[	@±@Î!i[[	@’iI"e  module Helpers
    class ErrorReturn
      def function(var)
        @var = "STRING"
      end;Fi[	@iI"îclass TestBall < Formula
  # name parameter required for some Formula::factory
  def function(var)
    @var = "STRING"
    @var ||= SoftwareSpec.new;Fi[	@Ì3@ß-i[[	@—iÜI">            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"];Fi[	@—iëI">            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            namespace.attributes["LITERAL"][var]["LITERAL"] = var
            var.docstring = ["STRING", "STRING"];Fi[	@Ì3@®-i[[	@—iõI"ä          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
          var.docstring = ["STRING", "STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))));Fi[	@—iƒI"∫              next
            end
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING"]
          end;Fi[	@±I"hself.attribute_method_matchers += var.map! { |var| AttributeMethodMatcher.new("LITERAL" => (var)) };Fi[[	@i7I"Í      #   person.clear_name
      #   person.name          # => nil
      def function(var)
        self.attribute_method_matchers += var.map! { |var| AttributeMethodMatcher.new("LITERAL" => (var)) }
        undefine_attribute_methods;Fi[	@iZI"˘      #   person.name          # => "Bob"
      #   person.name_short?   # => true
      def function(var)
        self.attribute_method_matchers += var.map! { |var| AttributeMethodMatcher.new("LITERAL" => (var)) }
        undefine_attribute_methods;Fi[	@Ì3I"Qvar.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"];Fi[[	@—iØI"Y          machine.events.each do |var|
            next if inherited_machine and inherited_machine.events[var.name]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
            var.parameters = [["STRING", "STRING"]];Fi[	@—i≤I"r            var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
            var.parameters = [["STRING", "STRING"]]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
            var.parameters = [["STRING", "STRING"]];Fi[	@+4@3i[[	@—ióI"8          end
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
          var.docstring = ["STRING", "STRING", "STRING", "STRING"]
          var.parameters = ["STRING"]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))));Fi[	@—iπI"˚            var.parameters = ["STRING"]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING", "STRING", "STRING"]
            var.parameters = ["STRING"]
          end;Fi[	@õ&I"(#   person.name          # => "Bob";Fi[[	@i3I"â      #
      #   person = Person.new
      #   person.name = 'Bob'
      #   person.name          # => "Bob"
      #   person.clear_name;Fi[	@iWI"ñ      #
      #   person = Person.new
      #   person.name = 'Bob'
      #   person.name          # => "Bob"
      #   person.name_short?   # => true;Fi[	@p@éCi[[	@^iwI"ˆ      #
      #   json = { name: 'bob', age: 22, awesome:true }.to_json
      #   person = Person.new
      #   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">
      #   person.name            # => "bob";Fi[	@^i|I"      #
      #   json = { person: { name: 'bob', age: 22, awesome:true } }.to_json
      #   person = Person.new
      #   person.from_json(json) # => #<Person:0x007fec5e7a0088 @age=22, @awesome=true, @name="bob">
      #   person.name            # => "bob";Fi[	@a4@Ì3i[[	@—i•I"ó          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
          var.docstring = ["STRING", "STRING", "STRING", "STRING"];Fi[	@—i±I"ó            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
            var.parameters = [["STRING", "STRING"]]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	@a4@=4i[[	@—iüI"…          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	@—i¢I"…          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
          var.parameters = [["STRING", "STRING"]]
          register((var = ::YARD::CodeObjects::MethodObject.new(namespace, machine.attribute("LITERAL"))))
          var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"];Fi[	@GX@a4i[[	@—i∞I"ã            next if inherited_machine and inherited_machine.events[var.name]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
            var.parameters = [["STRING", "STRING"]]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")));Fi[	@—i≥I"|            var.parameters = [["STRING", "STRING"]]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, "STRING")))
            var.docstring = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
            var.parameters = [["STRING", "STRING"]]
            register((var = ::YARD::CodeObjects::MethodObject.new(namespace, var.qualified_name)));Fi[	@@“i[[	@ΩiI"ó      #   Nokogiri::XML::Builder.new(:encoding => 'UTF-8') do |xml|
      #     ...
      #   end
      def function(var, var, var)
        if var then;Fi[	@Ë#iPI"Í    #   Factory.define :band_with_demo_tape, :parent => :band do |band|
    #     band.demo_tape { band.paperclip_fixture("band", "demo_tape", "png") }
    #   end
    def function(var, var, var)
      stub_paperclip_s3(var, var, var);Fi[	I",puts("STRING") if var.delete("LITERAL");FI" Rake::Task["STRING"].invoke;Fi[[	@z+iI"µ    var["LITERAL"] = (ENV["STRING"] == "STRING") if ENV["STRING"]
    if defined? Rails then
      puts("STRING") if var.delete("LITERAL")
      Rake::Task["STRING"].invoke
    else;Fi[	@z+iI"é    else
      if defined? Merb then
        puts("STRING") if var.delete("LITERAL")
        Rake::Task["STRING"].invoke
        $0 = "STRING";Fi[	@@Ei[[	@7ioI"Œ    #     # Will yield :name and "can't be blank"
    #     # then yield :name and "must be specified"
    #   end
    def function
      messages.each_key { |var| self[var].each { |var| yield(var, var) } };Fi[	@ñi#I"e    #       @data[key]
    #     end
    #   end
    def function
      run_callbacks("LITERAL");Fi[	@&@µQi[[	@„iÑI"û      #     def regex node_set, regex
      #       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }
      #     end
      #   }.new)
      #;Fi[	@„iÆI"û      #     def regex node_set, regex
      #       node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }
      #     end
      #   }.new)
      #;Fi[	@∂@Õ>i[[	@ñiﬁI"ä    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name, on: :new
    #   end;Fi[	@ñiI"ä    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name, on: :new
    #   end;Fi[	@A	@ÊIi[[	@.iI"k    # returns +self+.
    #
    #   class Person
    #     include ActiveModel::Conversion
    #   end;Fi[	@.i7I"ü    # ActionPack uses this to find a suitable partial to represent the object.
    #
    #   class Person
    #     include ActiveModel::Conversion
    #   end;Fi[	@I"s# @param size [String, Symbol] The size of the image. Must be one of: 'mini', 'normal', 'bigger' or 'original';Fi[[	@•)iGI"≈    
    # Return the URL to the user's profile image
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mini', 'normal', 'bigger' or 'original'
    # @return [String];Fi[	@•)iOI"Ã    
    # Return the secure URL to the user's profile image
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mini', 'normal', 'bigger' or 'original'
    # @return [String];Fi[	@ôI"class Geo;Fi[[	@{iI"Urequire("twitter/geo")
module Twitter
  class Geo
    class Point < Twitter::Geo;Fi[	I"2projects//twitter_proj/twitter/geo/polygon.rb;TiI"Wrequire("twitter/geo")
module Twitter
  class Geo
    class Polygon < Twitter::Geo;Fi[	@ôI"module Response;Fi[[	@›iI"}require("faraday")
require("multi_json")
module Twitter
  module Response
    class ParseJson < Faraday::Response::Middleware;Fi[	@iI"©require("twitter/error/unauthorized")
require("twitter/error/unprocessable_entity")
module Twitter
  module Response
    class RaiseError < Faraday::Response::Middleware;Fi[	@I"é# @param size [String, Symbol] The size of the image. Must be one of: 'mobile', 'mobile_retina', 'web', 'web_retina', 'ipad', or 'ipad_retina';Fi[[	@•)i/I"Ï    
    # Return the URL to the user's profile banner image
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mobile', 'mobile_retina', 'web', 'web_retina', 'ipad', or 'ipad_retina'
    # @return [String];Fi[	@•)i9I"Û    
    # Return the secure URL to the user's profile banner image
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mobile', 'mobile_retina', 'web', 'web_retina', 'ipad', or 'ipad_retina'
    # @return [String];Fi[	@I"?# @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids;Fi[[	@iúI"∫      
      # Returns an array of numeric user ids the authenticating user is blocking
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids
      # @rate_limited Yes;Fi[	@i≠I"≥      
      # Returns true if the authenticating user is blocking a target user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids
      # @rate_limited Yes;Fi[	@I"D# @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed;Fi[[	@˘iÃI"ë      
      # Returns oEmbed for a Tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed
      # @rate_limited Yes;Fi[	@˘i‚I"ë      
      # Returns oEmbeds for Tweets
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed
      # @rate_limited Yes;Fi[	@I"J# @see https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id;Fi[[	@˘iÄI"µ      
      # Retweets the specified Tweets as the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id
      # @rate_limited Yes;Fi[	@˘iöI"Î      
      # Retweets the specified Tweets as the authenticating user and raises an error if one has already been retweeted
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id
      # @rate_limited Yes;Fi[	@I"F# @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id;Fi[[	@˘i6I"à      
      # Returns a Tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id
      # @rate_limited Yes;Fi[	@˘iFI"á      
      # Returns Tweets
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id
      # @rate_limited Yes;Fi[	@I"J# @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id;Fi[[	@˘iI"µ      
      # Returns up to 100 of the first retweets of a given tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes;Fi[	@˘i"I"©      
      # Show up to 100 users who retweeted the Tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes;Fi[	@x,I""require("twitter/exceptable");Fi[[	@îiI"rrequire("forwardable")
require("twitter/creatable")
require("twitter/exceptable")
require("twitter/identity");Fi[	@•)iI"lrequire("twitter/basic_user")
require("twitter/creatable")
require("twitter/exceptable")
module Twitter;Fi[	@I"K# @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline;Fi[[	@„ilI"4      
      # Returns the 20 most recent Tweets, including retweets if they exist, posted by the authenticating user and the users they follow
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.;Fi[	@„i~I"      
      # Returns the 20 most recent retweets posted by users the authenticating user follow.
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.;Fi[	@I"N#   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id;Fi[[	@—iI"      # @overload saved_search(*ids)
      #   Retrieve the data for saved searches owned by the authenticating user
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;Fi[	@—i!I"       # @overload saved_search(*ids, options)
      #   Retrieve the data for saved searches owned by the authenticating user
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;Fi[	@I"H# @see https://dev.twitter.com/docs/api/1.1/post/friendships/create;Fi[[	@}iwI"ÿ      
      # Allows the authenticating user to follow the specified users, unless they are already followed
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/create
      # @rate_limited No;Fi[	@}iãI"∂      
      # Allows the authenticating user to follow the specified users
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/create
      # @rate_limited No;Fi[	@I"F# @see https://dev.twitter.com/docs/api/1.1/post/favorites/create;Fi[[	@viII"±      
      # Favorites the specified Tweets as the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/create
      # @rate_limited No;Fi[	@vijI"Á      
      # Favorites the specified Tweets as the authenticating user and raises an error if one has already been favorited
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/create
      # @rate_limited No;Fi[	@I"require("twitter/cursor");Fi[[	@}iI"require("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/cursor")
require("twitter/error/forbidden");Fi[	@iI"írequire("twitter/action_factory")
require("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/cursor")
require("twitter/tweet");Fi[	@I"+require("twitter/core_ext/enumerable");Fi[[	@£iI"~require("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/core_ext/enumerable")
require("twitter/cursor");Fi[	@iI"árequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/core_ext/enumerable")
require("twitter/error/not_found");Fi[	@I"require("twitter/place");Fi[[	@∆i I"Irequire("twitter/api/utils")
require("twitter/place")
module Twitter;Fi [	@Úi I"Srequire("twitter/api/utils")
require("twitter/place")
require("twitter/trend");Fi [	@I"K#   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show;Fi[[	@iiWI"È      # @overload direct_messages(*ids)
      #   Returns direct messages
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;Fi[	@ii^I"Ú      # @overload direct_messages(*ids, options)
      #   Returns direct messages
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;Fi[	@@‰Wi[[	@>i`I"œ    # callbacks that are configured to match the event, from state, and to
    # state will be invoked.
    # 
    # Once the callbacks are run, they cannot be run again until this transition
    # is reset.;Fi[	@>i~I"œ    # callbacks that are configured to match the event, from state, and to
    # state will be invoked.
    # 
    # Once the callbacks are run, they cannot be run again until this transition
    # is reset.;Fi[	@I""#   vehicle.state = 'invalid';Fi[[	@4i6I"Â    #   vehicle.state = 'idling'
    #   states.match(vehicle)         # => #<StateMachine::State name=:idling value="idling" initial=true>
    #   
    #   vehicle.state = 'invalid'
    #   states.match(vehicle)         # => nil;Fi[	@4iNI"E    #   vehicle = Vehicle.new         # => #<Vehicle:0xb7c464b0 @state="parked">
    #   states.match!(vehicle)        # => #<StateMachine::State name=:parked value="parked" initial=true>
    #   
    #   vehicle.state = 'invalid'
    #   states.match!(vehicle)        # => ArgumentError: "invalid" is not a known state value;Fi[	@I"Q#   vehicle = Vehicle.new         # => #<Vehicle:0xb7c464b0 @state="parked">;Fi[[	@4i0I"˚    #   
    #   states = Vehicle.state_machine.states
    #   
    #   vehicle = Vehicle.new         # => #<Vehicle:0xb7c464b0 @state="parked">
    #   states.match(vehicle)         # => #<StateMachine::State name=:parked value="parked" initial=true>;Fi[	@4iKI"˚    #   
    #   states = Vehicle.state_machine.states
    #   
    #   vehicle = Vehicle.new         # => #<Vehicle:0xb7c464b0 @state="parked">
    #   states.match!(vehicle)        # => #<StateMachine::State name=:parked value="parked" initial=true>;Fi[	@f@i[[	@öi,I"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [String]
      # @example Return {https://twitter.com/privacy Twitter's Privacy Policy};Fi[	@öi9I"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [String]
      # @example Return {https://twitter.com/tos Twitter's Terms of Service};Fi[	@@ØWi[[	@Ái,I"x    # 
    # For example,
    # 
    #   path.to_states  # => [:parked, :idling, :first_gear, ...]
    def function;Fi[	@Ái;I"x    # 
    # For example,
    # 
    #   path.to_states  # => [:parked, :idling, :first_gear, ...]
    def function;Fi[	@@çWi[[	@LiÉI"ö    # 
    #   collection['parked', :value]
    # 
    # The above will look up the "parked" key in a hash indexed by each node's
    # +value+ attribute.;Fi[	@LiëI"ö    # 
    #   collection['parked', :value]
    # 
    # The above will look up the "parked" key in a hash indexed by each node's
    # +value+ attribute.;Fi[	@@ÜWi[[	@LiÅI"û    # key in the first index configured for the collection.  A custom index can
    # be specified like so:
    # 
    #   collection['parked', :value]
    # ;Fi[	@LièI"û    # key in the first index configured for the collection.  A custom index can
    # be specified like so:
    # 
    #   collection['parked', :value]
    # ;Fi[	@fI"<# @return [Array<Twitter::Tweet>] The favorited Tweets.;Fi[[	@viMI"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The favorited Tweets.
      # @overload favorite(*ids);Fi[	@vioI"[      # @authentication Requires user context
      # @raise [Twitter::Error::AlreadyFavorited] Error raised when tweet has already been favorited.
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The favorited Tweets.
      # @overload favorite(*ids);Fi[	@@bWi[[	@LiiI"‘    # Calls the block once for each element in self, passing that element as a
    # parameter.
    # 
    #   states = StateMachine::NodeCollection.new
    #   states << StateMachine::State.new(machine, :parked);Fi[	@LixI"°    
    # Gets the node at the given index.
    # 
    #   states = StateMachine::NodeCollection.new
    #   states << StateMachine::State.new(machine, :parked);Fi[	@fI":# @return [Array<Twitter::User>] The requested users.;Fi[[	@}iGI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The requested users.
      # @overload friendships(*users);Fi[	@iÛI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The requested users.
      # @overload users(*users);Fi[	@fI"9# @return [Array<Twitter::User>] The followed users.;Fi[[	@}i{I"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The followed users.
      # @overload follow(*users);Fi[	@}ièI"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>] The followed users.
      # @overload follow!(*users);Fi[	@fI"&# @return [Twitter::Relationship];Fi[[	@}i¿I"7      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Relationship]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@}i“I"O      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Relationship]
      # @param source [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the source user.;Fi[	@@EWi[[	@iƒI"Ñ    #         transition all => :on
    #       end
    #       
    #       event :turn_off do
    #         transition all => :off;Fi[	@iŒI"à    #         transition all => :active
    #       end
    #       
    #       event :turn_off do
    #         transition all => :off;Fi[	@@•Vi[[	@ i$I"à        #   class VehicleObserver
        #     include DataMapper::Observer
        #     
        #     observe Vehicle
        #     ;Fi[	@ iaI"à        #   class VehicleObserver
        #     include DataMapper::Observer
        #     
        #     observe Vehicle
        #     ;Fi[	@fI"0# @return [Twitter::List] The created list.;Fi[[	@£iÇI"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The created list.
      # @overload list_update(list, options={});Fi[	@£i°I"      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The created list.
      # @param name [String] The name for the list.;Fi[	@fI"4# @return [Twitter::Tweet] The requested Tweet.;Fi[[	@˘i:I"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.
      # @param id [Integer] A Tweet ID.;Fi[	@iQI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.
      # @param id [Integer] A Tweet ID.;Fi[	@fI"<# @return [Array<Twitter::Tweet>] The requested Tweets.;Fi[[	@˘iJI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The requested Tweets.
      # @overload statuses(*ids);Fi[	@idI"      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The requested Tweets.
      # @overload statuses_activity(*ids);Fi[	@fI"2# @return [Twitter::Tweet] The created Tweet.;Fi[[	@˘itI"8      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The created Tweet.
      # @param status [String] The text of your status update, up to 140 characters.;Fi[	@˘i∫I"8      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The created Tweet.
      # @param status [String] The text of your status update, up to 140 characters.;Fi[	@fI"Y# @return [Array<Twitter::Tweet>] The original tweets with retweet details embedded.;Fi[[	@˘iÑI"+      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The original tweets with retweet details embedded.
      # @overload retweet(*ids);Fi[	@˘iüI"x      # @authentication Requires user context
      # @raise [Twitter::Error::AlreadyRetweeted] Error raised when tweet has already been retweeted.
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The original tweets with retweet details embedded.
      # @overload retweet!(*ids);Fi[	@I"x#   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">;Fi[[	@¯iUI"ﬁ    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">
    #   vehicle.state                                 # => "parked";Fi[	@¯iÇI"⁄    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">
    #   vehicle.fire_events(:ignite, :disable_alarm)  # => true;Fi[	@@ü2i[[	@¯iOI"á    #         transition all => :active
    #       end
    #       
    #       event :disable do
    #         transition all => :off;Fi[	@¯i|I"á    #         transition all => :active
    #       end
    #       
    #       event :disable do
    #         transition all => :off;Fi[	@‘I"À# @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[[	@}i_I"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      # @example Return an array of numeric IDs for every user who has a pending request to follow the authenticating user;Fi[	@}inI"       # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      # @example Return an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request;Fi[	@@ i[[	@ÒiI"ë    #         transition :idling => :parked
    #       end
    #       
    #       event :ignite do
    #         transition :parked => :idling;Fi[	@ÒiCI"ë    #         transition :idling => :parked
    #       end
    #       
    #       event :ignite do
    #         transition :parked => :idling;Fi[	@@·Ti[[	@·idI"ö    #    end
    #  end
    # 
    # See StateMachine::Machine#transition for a description of the possible
    # configurations for defining transitions.;Fi[	@;i)I"ú    #     end
    #   end
    # 
    # See StateMachine::Machine#transition for a description of the possible
    # configurations for defining transitions.;Fi[	@@ÃTi[[	@Ïi!I"X    #     end
    #   end
    # 
    #   person = Person.new('John Smith')
    #   ;Fi[	@Ïi1I"X    # 
    # For example,
    # 
    #   person = Person.new('John Smith')
    #   ;Fi[	@@∞Ti[[	@~i=I"{    # 
    # == Examples
    # 
    #   branch = StateMachine::Branch.new(:parked => :idling, :on => :ignite)
    #   ;Fi[	@~ifI"{    # 
    # == Examples
    # 
    #   branch = StateMachine::Branch.new(:parked => :idling, :on => :ignite)
    #   ;Fi[	@õ I"Q# @option options [Integer] :page Specifies the page of results to retrieve.;Fi[[	@iiI"+      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Integer] :page Specifies the page of results to retrieve.
      # @example Return the 20 most recent direct messages sent to the authenticating user;Fi[	@ii,I"+      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Integer] :page Specifies the page of results to retrieve.
      # @example Return the 20 most recent direct messages sent by the authenticating user;Fi[	@@fTi[[	@Fi#I"π  #
  # If no queue can be inferred this method will raise a `Resque::NoQueueError`
  #
  # Returns true if the job was queued, nil if the job was rejected by a
  # before_enqueue hook.;Fi[	@Fi0I"Æ  #
  # `queue` should be the String name of the queue you're targeting.
  #
  # Returns true if the job was queued, nil if the job was rejected by a
  # before_enqueue hook.;Fi[	I"'# @param id [Integer] A Tweet IDs.;F@‘i[[	@ii<I"Q      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::DirectMessage] The requested messages.
      # @param id [Integer] A Tweet IDs.
      # @param options [Hash] A customizable set of options.
      # @example Return the direct message with the id 1825786345;Fi[	@—i5I"u      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::SavedSearch] The saved searches.
      # @param id [Integer] A Tweet IDs.
      # @param options [Hash] A customizable set of options.
      # @example Retrieve the data for a saved search owned by the authenticating user with the ID 16129012;Fi[	@@RTi[[	@FiI"—  #   a) has a @queue ivar set
  #   b) responds to `queue`
  #
  # If either of those conditions are met, it will use the value obtained
  # from performing one of the above operations to determine the queue.;Fi[	@FiDI"—  #   a) has a @queue ivar set
  #   b) responds to `queue`
  #
  # If either of those conditions are met, it will use the value obtained
  # from performing one of the above operations to determine the queue.;Fi[	@@DTi[[	@FiI"≠  # It assumes the class you're passing it is a real Ruby class (not
  # a string or reference) which either:
  #
  #   a) has a @queue ivar set
  #   b) responds to `queue`;Fi[	@FiAI"≠  # It assumes the class you're passing it is a real Ruby class (not
  # a string or reference) which either:
  #
  #   a) has a @queue ivar set
  #   b) responds to `queue`;Fi[	@SI"y#   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.;Fi[[	@viI"ñ      #   Returns the 20 most recent favorite Tweets for the authenticating user
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@vi!I"ß      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@@”6i[[	@CiI"∑    
    # Find Resque worker pids on Windows.
    #
    # Returns an Array of string pids of all the other workers on this
    # machine. Useful when pruning dead workers on startup.;Fi[	@CiI"ª    
    # Find worker pids - platform independent
    #
    # Returns an Array of string pids of all the other workers on this
    # machine. Useful when pruning dead workers on startup.;Fi[	@I"E# Can optionally accept a second int parameter. The stat is then;Fi[[	I")projects//rescue_proj/resque/stat.rb;TiI"´    
    # For a string stat name, increments the stat by one.
    #
    # Can optionally accept a second int parameter. The stat is then
    # incremented by that amount.;Fi[	@ÒYi#I"´    
    # For a string stat name, decrements the stat by one.
    #
    # Can optionally accept a second int parameter. The stat is then
    # decremented by that amount.;Fi[	@SI"\#   @option options [Boolean] :follow (false) Enable notifications for the target user.;Fi[[	@}i~I"z      # @overload follow(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean] :follow (false) Enable notifications for the target user.
      def function(var);Fi[	@}ióI"{      # @overload follow!(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean] :follow (false) Enable notifications for the target user.
      def function(var);Fi[	@@äSi[[	@÷3iI"    # Pop an item off one of the queues.  This method will block until an item
    # is available. This method returns a tuple of the queue object and job.
    #
    # Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking
    # pop, a ThreadError is raised.;Fi[	@ﬁi@I"‘    # Pop an item off the queue.  This method will block until an item is
    # available.
    #
    # Pass +true+ for a non-blocking pop.  If nothing is read on a non-blocking
    # pop, a ThreadError is raised.;Fi[	@SI"#   @option options [String] :mode ('public') Whether your list is public or private. Values can be 'public' or 'private'.;Fi[[	@£iÜI"ú      # @overload list_update(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [String] :mode ('public') Whether your list is public or private. Values can be 'public' or 'private'.
      #   @option options [String] :description The description to give the list.;Fi[	@£ièI"Œ      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [String] :mode ('public') Whether your list is public or private. Values can be 'public' or 'private'.
      #   @option options [String] :description The description to give the list.;Fi[	@@ÜRi[[	@∆iI"¥    # +instance+ is the ActiveRecord object instance it's attached to, and
    # +options+ is the same as the hash passed to +has_attached_file+.
    #
    # Options include:
    #;Fi[	@˝iI"ø    # +whiny+ is true (which it is, by default. If +convert_options+ is
    # set, the options will be appended to the convert command upon image conversion
    #
    # Options include:
    #;Fi[	@SI"œ#     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[[	@i8I"Ñ      #   Returns users following followers of the specified user
      #
      #   @param options [Hash] A customizable set of options.
      #     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #     @return [Twitter::Cursor];Fi[	@iBI"§      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #     @return [Twitter::Cursor];Fi[	@@†Qi[[	@„iuI"{      #
      #   node.xpath('.//title')
      #
      # A hash of namespace bindings may be appended. For example:
      #;Fi[	@„i†I"§      #   node.css('body h1.bold')
      #   node.css('div + p.green', 'div#one')
      #
      # A hash of namespace bindings may be appended. For example:
      #;Fi[	@+I"y#   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[[	@iiPI"      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      #   @option options [Integer] :page Specifies the page of results to retrieve.;Fi[	@„i2I"      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@+I"L#   @option options [Integer] :count The number of results to retrieve.;Fi[[	@£i7I"ˆ      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      #   @option options [Integer] :count The number of results to retrieve.
      #   @example Show tweet timeline for members of the authenticated user's "presidents" list;Fi[	@£iAI"Á      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      #   @option options [Integer] :count The number of results to retrieve.
      #   @example Show tweet timeline for members of @sferik's "presidents" list;Fi[	I" #   Returns direct messages;F@i[[	@iiVI"¬      #     Twitter.direct_messages
      # @overload direct_messages(*ids)
      #   Returns direct messages
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show;Fi[	@ii]I"◊      #     Twitter.direct_messages(1825786345)
      # @overload direct_messages(*ids, options)
      #   Returns direct messages
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show;Fi[	@Y@i[[	@iiXI"      #   Returns direct messages
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Return the direct message with the id 1825786345;Fi[	@ii_I"       #   Returns direct messages
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.;Fi[	@I"#   <root xmlns:foo="bar">;Fi[[	@˛i`I"Ç      #
      # For example, given this document:
      #
      #   <root xmlns:foo="bar">
      #     <bar xmlns:hello="world" />;Fi[	@˛ikI"Ω      # WARNING: this method will clobber duplicate names in the keys.
      # For example, given this document:
      #
      #   <root xmlns:foo="bar">
      #     <bar xmlns:foo="baz" />;Fi[	@I"<#   @example Favorite the Tweet with the ID 25938088801;Fi[[	@viPI"      # @return [Array<Twitter::Tweet>] The favorited Tweets.
      # @overload favorite(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801);Fi[	@virI"      # @return [Array<Twitter::Tweet>] The favorited Tweets.
      # @overload favorite(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801);Fi[	@I";#   @example Retweet the Tweet with the ID 28561922516;Fi[[	@˘iáI"+      # @return [Array<Twitter::Tweet>] The original tweets with retweet details embedded.
      # @overload retweet(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Retweet the Tweet with the ID 28561922516
      #     Twitter.retweet(28561922516);Fi[	@˘i¢I"-      # @return [Array<Twitter::Tweet>] The original tweets with retweet details embedded.
      # @overload retweet!(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Retweet the Tweet with the ID 28561922516
      #     Twitter.retweet!(28561922516);Fi[	@E@r;i[[	@iicI"–      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var.empty? then
          direct_messages_received(var.options);Fi[	@—i&I"¯      #   @param options [Hash] A customizable set of options.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var.empty? then
          objects_from_response(Twitter::SavedSearch, "LITERAL", "STRING", var.options);Fi[	@@Qi[[	@‡i:I"{      #
      # or
      #
      #   node.serialize(:encoding => 'UTF-8') do |config|
      #     config.format.as_xml;Fi[	@„i°I"{      #
      # or
      #
      #   node.serialize(:encoding => 'UTF-8') do |config|
      #     config.format.as_xml;Fi[	@@ Qi[[	@‡i8I"t      #
      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML)
      #
      # or
      #;Fi[	@„iüI"t      #
      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML)
      #
      # or
      #;Fi[	@EI"Gvar.options["LITERAL"] = true if var.options.delete("LITERAL").!.!;Fi[[	@}iÅI"      #   @option options [Boolean] :follow (false) Enable notifications for the target user.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.options["LITERAL"] = true if var.options.delete("LITERAL").!.!
        var = Thread.new { friend_ids.ids };Fi[	@}iöI"      #   @option options [Boolean] :follow (false) Enable notifications for the target user.
      def function(var)
        var = Twitter::API::Arguments.new(var)
        var.options["LITERAL"] = true if var.options.delete("LITERAL").!.!
        var.flatten.threaded_map do |var|;Fi[	@@˘Pi[[	@‡i6I"ë      #
      # These two statements are equivalent:
      #
      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML)
      #;Fi[	@„iùI"ë      #
      # These two statements are equivalent:
      #
      #  node.serialize(:encoding => 'UTF-8', :save_with => FORMAT | AS_XML)
      #;Fi[	@@ÚPi[[	@‡i4I"™      # Serialize Node using +options+.  Save options can also be set using a
      # block. See SaveOptions.
      #
      # These two statements are equivalent:
      #;Fi[	@„iõI"™      # Serialize Node using +options+.  Save options can also be set using a
      # block. See SaveOptions.
      #
      # These two statements are equivalent:
      #;Fi[	@I"# Returns nothing;Fi[[	@ıi.I"P    
    # Reset Site details.
    #
    # Returns nothing
    def function;Fi[	@Fi—I"Ä  #
  #   Resque.push('archive', 'class' => 'Archive', 'args' => [ 35, 'tar' ])
  #
  # Returns nothing
  def function(var, var);Fi[	@@JOi[[	@—iGI"í    #   xml_escape('foo "bar" <baz>')
    #   # => "foo &quot;bar&quot; &lt;baz&gt;"
    #
    # Returns the escaped String.
    def function(var);Fi[	@—iVI"Ç    #   cgi_escape('foo,bar;baz?')
    #   # => "foo%2Cbar%3Bbaz%3F"
    #
    # Returns the escaped String.
    def function(var);Fi[	@@COi[[	@—i@I"£    # XML escape a string for use. Replaces any special characters with
    # appropriate HTML entity replacements.
    #
    # input - The String to escape.
    #;Fi[	@—iOI"§    # CGI escape a string for use in a URL. Replaces any special characters
    # with appropriate %XX replacements.
    #
    # input - The String to escape.
    #;Fi[	I"'require("twitter/error/forbidden");F@ôi[[	@ùi I"Drequire("twitter/error/forbidden")
module Twitter
  class Error;Fi [	@†i I"Drequire("twitter/error/forbidden")
module Twitter
  class Error;Fi [	@@0Oi[[	@—i(I"q    
    # Format a date in long format e.g. "27 January 2011".
    #
    # date - The Time to format.
    #;Fi[	@—i1I"Z    
    # Format a date for use in XML.
    #
    # date - The Time to format.
    #;Fi[	@·Y@+i[[	@viI"û      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @example Return the 20 most recent favorite Tweets for the authenticating user;Fi[	@vi"I"Ë      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      #   @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      #   @example Return the 20 most recent favorite Tweets for @sferik;Fi[	@@)Oi[[	@—iI"|    #
    # input - The Textile String to convert.
    #
    # Returns the HTML formatted String.
    def function(var);Fi[	@—iI"}    #
    # input - The Markdown String to convert.
    #
    # Returns the HTML formatted String.
    def function(var);Fi[	@I"# Defaults to `false`.;Fi[[	@1"itI"”    # were present. Use with caution as this may cause whitespace-related
    # formatting errors.
    #
    # Defaults to `false`.
    # Whether or not attribute hashes and Ruby scripts designated by `=` or `~`;Fi[	@1"iyI"œ    # should be evaluated. If this is `true`, said scripts are rendered as empty
    # strings.
    #
    # Defaults to `false`.
    # If set to `true`, Haml makes no attempt to properly indent or format the;Fi[	@ß8I""merge_user!(var.options, var);Fi[[	@vi(I"ò      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var = var.pop then
          merge_user!(var.options, var)
        end;Fi[	@i I"‹      def function(var)
        var = Twitter::API::Arguments.new(var)
        if var = var.pop then
          merge_user!(var.options, var)
          object_from_response(Twitter::User, "LITERAL", "STRING", var.options);Fi[	@ıX@$
i[[	@viJI"ÿ      # Favorites the specified Tweets as the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/create
      # @rate_limited No
      # @authentication Requires user context;Fi[	@vikI"      # Favorites the specified Tweets as the authenticating user and raises an error if one has already been favorited
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/favorites/create
      # @rate_limited No
      # @authentication Requires user context;Fi[	@DYI"# @overload favorite(*ids);Fi[[	@viNI"@      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The favorited Tweets.
      # @overload favorite(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;Fi[	@vipI"x      # @raise [Twitter::Error::AlreadyFavorited] Error raised when tweet has already been favorited.
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The favorited Tweets.
      # @overload favorite(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;Fi[	@≤Z@i[[	@viOI"P      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The favorited Tweets.
      # @overload favorite(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Favorite the Tweet with the ID 25938088801;Fi[	@viqI"P      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The favorited Tweets.
      # @overload favorite(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Favorite the Tweet with the ID 25938088801;Fi[	@?ZI"(#     Twitter.favorite(25938088801);Fi[[	@viQI"˝      # @overload favorite(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options);Fi[	@visI"˝      # @overload favorite(*ids)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options);Fi[	@øZI"(# @overload favorite(*ids, options);Fi[[	@viRI"'      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;Fi[	@vitI"'      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;Fi[	@∆Z@i[[	@viSI"      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.;Fi[	@viuI"      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.;Fi[	@@ÅGi[[	@’i˘I"ﬂ    # (as is the default for Rails 3.0+, and optional for version 2.3.5+),
    # this won't escape text declared as "safe".
    #
    # @param text [String] The string to sanitize
    # @return [String] The sanitized string;Fi[	@’iI"›    # Escapes HTML entities in `text`, but without escaping an ampersand
    # that is already part of an escaped entity.
    #
    # @param text [String] The string to sanitize
    # @return [String] The sanitized string;Fi[	@âII",rescue Twitter::Error::Forbidden => var;Fi[[	@viZI",        var.flatten.threaded_map do |var|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)))
          rescue Twitter::Error::Forbidden => var
            raise unless (var.message == Twitter::Error::AlreadyFavorited::MESSAGE);Fi[	@vi|I""        var.flatten.threaded_map do |var|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)))
          rescue Twitter::Error::Forbidden => var
            handle_forbidden_error(Twitter::Error::AlreadyFavorited, var);Fi[	@¸X@ÖZi[[	@}iI"örequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/cursor")
require("twitter/error/forbidden")
require("twitter/relationship");Fi[	@£iI"£require("twitter/api/utils")
require("twitter/core_ext/enumerable")
require("twitter/cursor")
require("twitter/error/forbidden")
require("twitter/error/not_found");Fi[	@I"#     click;Fi[[	@’i?I"j    # with no whitespace between.
    # For example:
    #
    #     click
    #     = succeed '.' do;Fi[	@’iEI"T    #
    # Produces:
    #
    #     click
    #     <a href='thing'>here</a>.;Fi[	@È@‘i[[	@}i^I"«      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@}imI"«      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@I"#     <h1>foo</h1>;Fi[[	@’iﬁI"N    #
    # Produces:
    #
    #     <h1>foo</h1>
    #       <p>bar</p>;Fi[	@’i˝I"P    #
    # Produces:
    #
    #     <h1>foo</h1>
    #         <p>bar</p>;Fi[	@I"#     %h1 foo;Fi[[	@’i÷I"f    # to the lines of the template.
    # For example:
    #
    #     %h1 foo
    #     - tab_up;Fi[	@’iˆI"y    # but only for the duration of the block.
    # For example:
    #
    #     %h1 foo
    #     - with_tabs(2) do;Fi[	@I"9#   @yield The block within which to escape newlines;Fi[[	@’i]I"›    # @overload find_and_preserve(tags = haml_buffer.options[:preserve])
    #   Escapes newlines within a block of Haml code.
    #
    #   @yield The block within which to escape newlines
    def function(var, var, var);Fi[	@’irI"®    # @overload perserve
    #   Escapes newlines within a block of Haml code.
    #
    #   @yield The block within which to escape newlines
    def function(var, var);Fi[	@ñ+@h*i[[	@}iI"Ü      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.;Fi[	@}i#I"Ü      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.;Fi[	@@·Fi[[	@·iFI"¢      # This is meant to be overridden by subclasses
      # so they can add their own options.
      #
      # @param opts [OptionParser]
      def function(var);Fi[	@·i¶I"|      
      # Tells optparse how to parse the arguments.
      #
      # @param opts [OptionParser]
      def function(var);Fi[	@I"3# This is meant to be overridden by subclasses;Fi[[	@·iCI"¿      # Tells optparse how to parse the arguments
      # available for all executables.
      #
      # This is meant to be overridden by subclasses
      # so they can add their own options.;Fi[	@·i]I"Ÿ      # In particular, sets `@options[:input]` and `@options[:output]`
      # to appropriate IO streams.
      #
      # This is meant to be overridden by subclasses
      # so they can run their respective programs.;Fi[	@I"#     # This doesn't;Fi[[	@<iåI"‡    #     Haml::Engine.new("%p= foo").render_proc(Object.new, :foo).call :foo => "Hello!"
    #       #=> "<p>Hello!</p>"
    #
    #     # This doesn't
    #     Haml::Engine.new("%p= foo").render_proc.call :foo => "Hello!";Fi[	@<iºI"π    #     Haml::Engine.new("%p= foo").def_method(obj, :render, :foo)
    #     obj.render(:foo => "Hello!") #=> "<p>Hello!</p>"
    #
    #     # This doesn't
    #     obj = Object.new;Fi[	@I"#     # This works;Fi[[	@<iàI"Ω    # This is done with the `local_names` argument.
    # For example:
    #
    #     # This works
    #     Haml::Engine.new("%p= foo").render_proc(Object.new, :foo).call :foo => "Hello!";Fi[	@<i∑I"~    # This is done with the `local_names` argument.
    # For example:
    #
    #     # This works
    #     obj = Object.new;Fi[	@o@h*i[[	@}iI"Ä      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.;Fi[	@}i-I"Ä      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.;Fi[	@oI"◊#   @option options [Boolean, String, Integer] :filter_to_owned_lists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.;Fi[[	@£iwI"e      # @overload memberships(options={})
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :filter_to_owned_lists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.
      #   @example List the lists the authenticated user has been added to;Fi[	@£i~I"ì      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :filter_to_owned_lists When set to true, t or 1, will return just lists the authenticating user owns, and the user represented by user_id or screen_name is a member of.
      #   @example List the lists that @sferik has been added to;Fi[	@I"Z# @param scope [Binding, Proc, Object] The context in which the template is evaluated;Fi[[	@<i]I"    # but if you're relying on local variables defined in the context of `scope`,
    # they won't work.
    #
    # @param scope [Binding, Proc, Object] The context in which the template is evaluated
    # @param locals [{Symbol => Object}] Local variables that will be made available;Fi[	@<iíI"    #
    # The proc doesn't take a block; any yields in the template will fail.
    #
    # @param scope [Binding, Proc, Object] The context in which the template is evaluated
    # @param local_names [Array<Symbol>] The names of the locals that can be passed to the proc;Fi[	@TI"G#   @example Return extended information for @sferik and @pengwynn;Fi[[	@}iJI"|      # @return [Array<Twitter::User>] The requested users.
      # @overload friendships(*users)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @example Return extended information for @sferik and @pengwynn
      #     Twitter.friendships('sferik', 'pengwynn');Fi[	@iˆI"©      # @return [Array<Twitter::User>] The requested users.
      # @overload users(*users)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @example Return extended information for @sferik and @pengwynn
      #     Twitter.users('sferik', 'pengwynn')  # Retrieve users with a POST request using screen_names;Fi[	@TI" #   @example Follow @sferik;Fi[[	@}i~I">      # @return [Array<Twitter::User>] The followed users.
      # @overload follow(*users)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @example Follow @sferik
      #     Twitter.follow('sferik');Fi[	@}iíI"@      # @return [Array<Twitter::User>] The followed users.
      # @overload follow!(*users)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @example Follow @sferik
      #     Twitter.follow!('sferik');Fi[	@ÓX@$
i[[	@}ixI"ˇ      # Allows the authenticating user to follow the specified users, unless they are already followed
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/create
      # @rate_limited No
      # @authentication Requires user context;Fi[	@}iåI"›      # Allows the authenticating user to follow the specified users
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/friendships/create
      # @rate_limited No
      # @authentication Requires user context;Fi[	@ˆY@±i[[	@}iI"      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean] :follow (false) Enable notifications for the target user.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@}iòI"      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean] :follow (false) Enable notifications for the target user.
      def function(var)
        var = Twitter::API::Arguments.new(var);Fi[	@_Y@±i[[	@ÎiI"|    #
    # @param attrs [Hash]
    # @return [Twitter::Relationship]
    def function(var)
      @var = var["LITERAL"];Fi[	@ÎiI"ö    #
    # @param attrs [Hash]
    # @return [Twitter::Relationship]
    def function(var)
      @attrs.update(var["LITERAL"]) unless var["LITERAL"].nil?;Fi[	@@üFi[[	@<i@I"ˇ    # Haml uses it as the second argument to `Kernel#eval`;
    # otherwise, Haml just uses its `#instance_eval` context.
    #
    # Note that Haml modifies the evaluation context
    # (either the scope object or the `self` object of the scope binding).;Fi[	@<i¡I"#    #     Haml::Engine.new("%p= foo").def_method(obj, :render)
    #     obj.render(:foo => "Hello!") #=> NameError: undefined local variable or method `foo'
    #
    # Note that Haml modifies the evaluation context
    # (either the scope object or the `self` object of the scope binding).;Fi[	I"u# @param source [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the source user.;FI"u# @param target [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the target user.;Fi[[	@}i‘I"ª      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Relationship]
      # @param source [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the source user.
      # @param target [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the target user.
      # @param options [Hash] A customizable set of options.;Fi[	@}iÓI"›      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Boolean] true if user_a follows user_b, otherwise false.
      # @param source [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the source user.
      # @param target [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the target user.
      # @param options [Hash] A customizable set of options.;Fi[	@d[@‘i[[	@}i’I"ô      # @return [Twitter::Relationship]
      # @param source [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the source user.
      # @param target [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the target user.
      # @param options [Hash] A customizable set of options.
      # @example Return the relationship between @sferik and @pengwynn;Fi[	@}iÔI"Æ      # @return [Boolean] true if user_a follows user_b, otherwise false.
      # @param source [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the source user.
      # @param target [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the target user.
      # @param options [Hash] A customizable set of options.
      # @example Return true if @sferik follows @pengwynn;Fi[	@@‹i[[	@êi4I"m  
  # Determine if we want to skip emailing the recipient.
  #
  # @return [Boolean]
  # @return [void];Fi[	@‰iKI"±    # as is the default for Rails 3.0+, and optional for version 2.3.5+.
    # Overridden in haml/template.rb if this is the case.
    #
    # @return [Boolean]
    def function;Fi[	@I"@#   * Validating if the model allows params authentication;;Fi[[	@äi;I"“      
      # Check if this is strategy is valid for http authentication by:
      #
      #   * Validating if the model allows params authentication;
      #   * If any of the authorization headers were sent;;Fi[	@äiEI"ﬂ      
      # Check if this is strategy is valid for params authentication by:
      #
      #   * Validating if the model allows params authentication;
      #   * If the request hits the sessions controller through POST;;Fi[	@i*@Ç9i[[	@}iI"û      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids;Fi[	@}i%I"û      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids;Fi[	@@+Ci[[	@<iFI"£      # Setup a subject doing an I18n lookup. At first, it attemps to set a subject
      # based on the current mapping:
      #
      #   en:
      #     devise:;Fi[	@<iNI"{      #
      # If one does not exist, it fallbacks to ActionMailer default:
      #
      #   en:
      #     devise:;Fi[	@@Ci[[	@æiZI"Ç      #
      # Examples:
      #
      #   sign_out :user     # sign_out(scope)
      #   sign_out @user     # sign_out(resource);Fi[	@Ei0I"}    #
    # Examples:
    #
    #   sign_out :user     # sign_out(scope)
    #   sign_out @user     # sign_out(resource);Fi[	@RI"i#   @param user_to_remove [Integer, String] The user id or screen name of the list member to remove.;Fi[[	@£iYI"u      # @return [Twitter::List] The list.
      # @overload list_remove_member(list, user_to_remove, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_remove [Integer, String] The user id or screen name of the list member to remove.
      #   @param options [Hash] A customizable set of options.;Fi[	@£ibI"≥      # @overload list_remove_member(user, list, user_to_remove, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_remove [Integer, String] The user id or screen name of the list member to remove.
      #   @param options [Hash] A customizable set of options.;Fi[	@RI"i#   @param user_to_check [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[[	@£iæI"ß      # @return [Boolean] true if user is a subscriber of the specified list, otherwise false.
      # @overload list_subscriber?(list, user_to_check, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@£i«I"∞      # @overload list_subscriber?(user, list, user_to_check, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@RI"^#   @param user_to_check [Integer, String] The user ID or screen name of the list member.;Fi[[	@£iI"î      # @return [Boolean] true if user is a member of the specified list, otherwise false.
      # @overload list_member?(list, user_to_check, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String] The user ID or screen name of the list member.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iI"°      # @overload list_member?(user, list, user_to_check, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String] The user ID or screen name of the list member.
      #   @param options [Hash] A customizable set of options.;Fi[	@RI"\#   @param user_to_add [Integer, String] The user id or screen name to add to the list.;Fi[[	@£iNI"b      # @return [Twitter::List] The list.
      # @overload list_add_member(list, user_to_add, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_add [Integer, String] The user id or screen name to add to the list.
      #   @param options [Hash] A customizable set of options.;Fi[	@£iVI"†      # @overload list_add_member(user, list, user_to_add, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_add [Integer, String] The user id or screen name to add to the list.
      #   @param options [Hash] A customizable set of options.;Fi[	@I"O# This function can be called one or more times in a compass configuration;Fi[[	@7iI"-    #   Compass::BrowserSupport.add_support("image", "moz", "webkit")
    #   # => Adds support for moz and webkit to the image() function.
    #
    # This function can be called one or more times in a compass configuration
    # file in order to add support for new, simple browser functions without;Fi[	@7i*I"/    #   Compass::BrowserSupport.remove_support("image", "o", "ms")
    #   # => Adds support for moz and webkit to the image() function.
    #
    # This function can be called one or more times in a compass configuration
    # file in order to remove support for simple functions that no longer need to;Fi[	@ê[@Si[[	@£iZI"¢      # @overload list_remove_member(list, user_to_remove, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_remove [Integer, String] The user id or screen name of the list member to remove.
      #   @param options [Hash] A customizable set of options.
      #   @example Remove @BarackObama from the authenticated user's "presidents" list;Fi[	@£icI"Æ      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_remove [Integer, String] The user id or screen name of the list member to remove.
      #   @param options [Hash] A customizable set of options.
      #   @example Remove @BarackObama from @sferik's "presidents" list;Fi[	@ó[@Si[[	@£iøI"Ø      # @overload list_subscriber?(list, user_to_check, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Check if @BarackObama is a subscriber of the authenticated user's "presidents" list;Fi[	@£i»I"æ      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #   @example Check if @BarackObama is a subscriber of @sferik's "presidents" list;Fi[	@û[@Si[[	@£iI"ú      # @overload list_member?(list, user_to_check, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String] The user ID or screen name of the list member.
      #   @param options [Hash] A customizable set of options.
      #   @example Check if @BarackObama is a member of the authenticated user's "presidents" list;Fi[	@£iI"Ø      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_check [Integer, String] The user ID or screen name of the list member.
      #   @param options [Hash] A customizable set of options.
      #   @example Check if @BarackObama is a member of @sferik's "presidents" list;Fi[	@•[@Si[[	@£iOI"ä      # @overload list_add_member(list, user_to_add, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_add [Integer, String] The user id or screen name to add to the list.
      #   @param options [Hash] A customizable set of options.
      #   @example Add @BarackObama to the authenticated user's "presidents" list;Fi[	@£iWI"ú      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param user_to_add [Integer, String] The user id or screen name to add to the list.
      #   @param options [Hash] A customizable set of options.
      #   @example Add @BarackObama to @sferik's "presidents" list;Fi[	@ZI"P#   @option options [String] :description The description to give the list.;Fi[[	@£iáI"ˆ      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [String] :mode ('public') Whether your list is public or private. Values can be 'public' or 'private'.
      #   @option options [String] :description The description to give the list.
      #   @example Update the authenticated user's "presidents" list to have the description "Presidents of the United States of America";Fi[	@£iêI"Î      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.
      #   @param options [Hash] A customizable set of options.
      #   @option options [String] :mode ('public') Whether your list is public or private. Values can be 'public' or 'private'.
      #   @option options [String] :description The description to give the list.
      #   @example Update the @sferik's "presidents" list to have the description "Presidents of the United States of America";Fi[	@@@i[[	@ıiI"        # are set via a super() call to RSync::Base,
        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.;Fi[	@li!I"        # are set via a super() call to RSync::Base,
        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.;Fi[	@@¯?i[[	@ci%I"        # are set via a super() call to Cloud::Base,
        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.;Fi[	@fiI"        # are set via a super() call to Cloud::Base,
        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.;Fi[	@I"# @api private;Fi[[	@≠iHI"b      #     notify_by Mail
      #   end
      #
      # @api private
      def function(var);Fi[	@≠iXI"«      # Cleanup is also ensured, as temporary files may hold sensitive data.
      # If no options can be built, the packaging process will be aborted.
      #
      # @api private
      def function;Fi[	@I"6#   Backup::Model.new(:my_backup, 'My Backup') do;Fi[[	@≠i‹I"      # here is the same as that used in {#keys}. Also, all spaces will be stripped
      # from the identifier when used, so the following would be valid.
      #
      #   Backup::Model.new(:my_backup, 'My Backup') do
      #     encrypt_with GPG do |enc|;Fi[	@≠iI"ú      #     enc.passphrase = 'secret phrase'
      #   end
      #
      #   Backup::Model.new(:my_backup, 'My Backup') do
      #     # other directives...;Fi[	@]@I:i[[	@ﬁi)I"û      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array]
      def function(var, var, var, var);Fi[	@ﬁiEI"û      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array]
      def function(var, var, var, var);Fi[	@Î8@º"i[[	@£iI"‡        begin
          (var = Twitter::API::Arguments.new(var)
          merge_user!(var.options, var.pop)
          merge_list!(var.options, var.pop)
          unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[	@£i(I"Î      def function(var, var, var)
        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[	@òI"^# @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.;Fi[[	@ﬁi}I"›      # Take a user and merge it into the hash with the correct key
      #
      # @param hash [Hash]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.
      # @return [Hash];Fi[	@ﬁiÜI"›      # Take a user and merge it into the hash with the correct key
      #
      # @param hash [Hash]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.
      # @return [Hash];Fi[	@òI"ì# @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.;Fi[[	@ﬁiôI"$      # Take a multiple users and merge them into the hash with the correct keys
      #
      # @param hash [Hash]
      # @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.
      # @return [Hash];Fi[	@ﬁi¢I"$      # Take a multiple users and merge them into the hash with the correct keys
      #
      # @param hash [Hash]
      # @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.
      # @return [Hash];Fi[	@òI"# @param key [Symbol];Fi[[	@ßiI"é    # Return a hash that includes everything but the given keys.
    #
    # @param hash [Hash]
    # @param key [Symbol]
    # @return [Hash];Fi[	@ßi I"}    # Replaces the hash without the given keys.
    #
    # @param hash [Hash]
    # @param key [Symbol]
    # @return [Hash];Fi[	@@Œ<i[[	@∞iI"ª      ##
      # Specify the level of compression to use.
      #
      # Values should be a single digit from 1 to 9.
      # Note that setting the level to either extreme may or may not;Fi[	@≥iI"ª      ##
      # Specify the level of compression to use.
      #
      # Values should be a single digit from 1 to 9.
      # Note that setting the level to either extreme may or may not;Fi[	I"&# @return [Array<Twitter::Place>];FI"T# @example Return the locations that Twitter has trending topic information for;Fi[[	@Úi*I"F      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @return [Array<Twitter::Place>]
      # @example Return the locations that Twitter has trending topic information for
      #   Twitter.trends_available;Fi[	@Úi<I"ö      # @option options [Float] :lat If provided with a :long option the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for latitude are -90.0 to +90.0 (North is positive) inclusive.
      # @option options [Float] :long If provided with a :lat option the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude are -180.0 to +180.0 (East is positive) inclusive.
      # @return [Array<Twitter::Place>]
      # @example Return the locations that Twitter has trending topic information for
      #   Twitter.trends_closest;Fi[	I"«# @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.;FI"Ï# @option options [String] :"attribute:street_address" This option searches for places which have this given street address. There are other well-known and application-specific attributes available. Custom attributes are also permitted.;Fi[[	@∆i=I"°      # @option options [String] :accuracy ('0m') A hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).
      # @option options [Integer] :max_results A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many "nearby" results to return. Ideally, only pass in the number of places you intend to display to the user here.
      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.
      # @option options [String] :"attribute:street_address" This option searches for places which have this given street address. There are other well-known and application-specific attributes available. Custom attributes are also permitted.
      # @return [Array<Twitter::Place>];Fi[	@∆iSI"V      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :name The name a place is known as.
      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.
      # @option options [String] :"attribute:street_address" This option searches for places which have this given street address. There are other well-known and application-specific attributes available. Custom attributes are also permitted.
      # @return [Array<Twitter::Place>];Fi[	@\@\i[[	@∆i>I"r      # @option options [Integer] :max_results A hint as to the number of results to return. This does not guarantee that the number of results returned will equal max_results, but instead informs how many "nearby" results to return. Ideally, only pass in the number of places you intend to display to the user here.
      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.
      # @option options [String] :"attribute:street_address" This option searches for places which have this given street address. There are other well-known and application-specific attributes available. Custom attributes are also permitted.
      # @return [Array<Twitter::Place>]
      # @example Return an array of places near the IP address 74.125.19.104;Fi[	@∆iTI"n      # @option options [String] :name The name a place is known as.
      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.
      # @option options [String] :"attribute:street_address" This option searches for places which have this given street address. There are other well-known and application-specific attributes available. Custom attributes are also permitted.
      # @return [Array<Twitter::Place>]
      # @example Return an array of places similar to Twitter HQ;Fi[	I"C# @option options [String] :name The name a place is known as.;F@\i[[	@∆iRI"      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :name The name a place is known as.
      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.
      # @option options [String] :"attribute:street_address" This option searches for places which have this given street address. There are other well-known and application-specific attributes available. Custom attributes are also permitted.;Fi[	@∆ieI"2      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :name The name a place is known as.
      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.
      # @option options [String] :token The token found in the response from {Twitter::API::PlacesAndGeo#places_similar}.;Fi[	@@€>i[[	@ñi◊I"‹    #   person.name = 'david'
    #   person.valid? # => true
    #
    # Context can optionally be supplied to define which callbacks to test
    # against (the context is defined on the validations using <tt>:on</tt>).;Fi[	@ñi˛I"ﬂ    #   person.name = 'david'
    #   person.invalid? # => false
    #
    # Context can optionally be supplied to define which callbacks to test
    # against (the context is defined on the validations using <tt>:on</tt>).;Fi[	@I:@“i[[	@∆iwI"€      # @param path [String]
      # @param params [Hash]
      # @return [Array]
      def function(var, var, var)
        objects_from_array(Twitter::Place, send(var.to_sym, var, var)["LITERAL"]["LITERAL"]["LITERAL"]);Fi[	@„i´I"û      # @param collection [Array]
      # @param max_id [Integer, NilClass]
      # @return [Array]
      def function(var, var, var)
        var = yield(var);Fi[	@@?i[[	@ñi@I"¬      #
      #     validate :must_be_friends
      #
      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee);Fi[	@ñiNI"       #       comment.must_be_friends
      #     end
      #
      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee);Fi[	I"N#   Retrieve the data for saved searches owned by the authenticating user;F@i[[	@—iI"Ô      #     Twitter.saved_searches
      # @overload saved_search(*ids)
      #   Retrieve the data for saved searches owned by the authenticating user
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id;Fi[	@—i I"       #     Twitter.saved_search(16129012)
      # @overload saved_search(*ids, options)
      #   Retrieve the data for saved searches owned by the authenticating user
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id;Fi[	@ÁX@i[[	@—iI"`      #   Retrieve the data for saved searches owned by the authenticating user
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @example Retrieve the data for a saved search owned by the authenticating user with the ID 16129012;Fi[	@—i"I"1      #   Retrieve the data for saved searches owned by the authenticating user
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.;Fi[	@I"##     def instance_validations;Fi[[	@âinI"~    #
    #     validate :instance_validations
    #
    #     def instance_validations
    #       validates_with MyValidator;Fi[	@âi}I"ù    #
    #     validate :instance_validations, on: :create
    #
    #     def instance_validations
    #       validates_with MyValidator, MyOtherValidator;Fi[	@m%I"7# @example Update the authenticating user's status;Fi[[	@˘i}I"=      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.
      # @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @example Update the authenticating user's status
      #   Twitter.update("I'm tweeting with @gem!");Fi[	@˘iƒI"i      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.
      # @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @example Update the authenticating user's status
      #   Twitter.update_with_media("I'm tweeting with @gem!", File.new('my_awesome_pic.jpeg'));Fi[	@I"L# If you pass any additional configuration options, they will be passed;Fi[[	@âiJI""      # * <tt>:strict</tt> - Specifies whether validation should be strict.
      #   See <tt>ActiveModel::Validation#validates!</tt> for more information.
      #
      # If you pass any additional configuration options, they will be passed
      # to the class and available as +options+:;Fi[	@âiÇI"    # +validates_with+, should instead be placed on the +validates+ method
    # as these are applied and tested in the callback.
    #
    # If you pass any additional configuration options, they will be passed
    # to the class and available as +options+, please refer to the;Fi[	@@Ò?i[[	@âi2I"l      #       end
      #   end
      #
      # You may also pass it multiple classes, like so:
      #;Fi[	@âivI"∞    # Please consult the class method documentation for more information on
    # creating your own validator.
    #
    # You may also pass it multiple classes, like so:
    #;Fi[	@@ˇ?i[[	@âi%I"í      #     validates_with MyValidator
      #   end
      #
      #   class MyValidator < ActiveModel::Validator
      #     def validate(record);Fi[	@âiRI"¥      #     validates_with MyValidator, my_custom_key: 'my custom value'
      #   end
      #
      #   class MyValidator < ActiveModel::Validator
      #     def validate(record);Fi[	@@Û4i[[	@ji:I"w        #
        #     attr_accessor :name, :status
        #
        #     validates_presence_of :name
        #;Fi[	@ñiçI"ë      #
      #     attr_accessor :name , :age
      #
      #     validates_presence_of :name
      #     validates_inclusion_of :age, in: 0..99;Fi[	@¿:I"}# @option options [Boolean, String, Integer] :include_entities The tweet entities node will be disincluded when set to false.;Fi[[	@„izI"A      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :include_rts Specifies that the timeline should include native retweets in addition to regular tweets. Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will no longer contain a full user object.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @option options [Boolean, String, Integer] :include_entities The tweet entities node will be disincluded when set to false.
      # @example Return the 20 most recent Tweets, including retweets if they exist, posted by the authenticating user and the users they follow;Fi[	@„iãI"≤      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @option options [Boolean, String, Integer] :include_entities The tweet entities node will be disincluded when set to false.
      # @example Return the 20 most recent retweets posted by users followed by the authenticating user;Fi[	@‡XI"N# @note This method can only return up to 800 Tweets, including retweets.;Fi[[	@„imI"G      # Returns the 20 most recent Tweets, including retweets if they exist, posted by the authenticating user and the users they follow
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes;Fi[	@„iI"      # Returns the 20 most recent retweets posted by users the authenticating user follow.
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes;Fi[	@}\@˛i[[	@„inI"Ï      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@„iÄI"Ï      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@“X@˛i[[	@˘iI"‹      # Returns up to 100 of the first retweets of a given tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@˘i#I"–      # Show up to 100 users who retweeted the Tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	I"A# @param id [Integer] The numerical ID of the desired Tweet.;F@‘i[[	@˘iI"â      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param id [Integer] The numerical ID of the desired Tweet.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.;Fi[	@˘i(I"y      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array]
      # @param id [Integer] The numerical ID of the desired Tweet.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.;Fi[	@–+@Ôi[[	@iI"ç      # @return [Array] An array of actions
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @example Return activity about me;Fi[	@i(I"è      # @return [Array] An array of actions
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @example Return activity by friends;Fi[	@–+@m%i[[	@˘iI"      # @param id [Integer] The numerical ID of the desired Tweet.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @example Return up to 100 of the first retweets of the Tweet with the ID 28561922516;Fi[	@˘i*I"      # @param id [Integer] The numerical ID of the desired Tweet.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean] :ids_only ('false') Only return user ids instead of full user objects.;Fi[	@ÀX@˛i[[	@˘i7I"Ø      # Returns a Tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@˘iGI"Æ      # Returns Tweets
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/show/:id
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@yYI"&# @param id [Integer] A Tweet ID.;Fi[[	@˘i;I"1      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.
      # @param id [Integer] A Tweet ID.
      # @param options [Hash] A customizable set of options.;Fi[	@iRI"1      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.
      # @param id [Integer] A Tweet ID.
      # @param options [Hash] A customizable set of options.;Fi[	@©\@‘i[[	@˘i<I"æ      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.
      # @param id [Integer] A Tweet ID.
      # @param options [Hash] A customizable set of options.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@iSI"R      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.
      # @param id [Integer] A Tweet ID.
      # @param options [Hash] A customizable set of options.
      # @example Return activity summary for the Tweet with the ID 25938088801;Fi[	@áYI"S# @param status [String] The text of your status update, up to 140 characters.;Fi[[	@˘iuI"\      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The created Tweet.
      # @param status [String] The text of your status update, up to 140 characters.
      # @param options [Hash] A customizable set of options.;Fi[	@˘iªI"t      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The created Tweet.
      # @param status [String] The text of your status update, up to 140 characters.
      # @param media [File, Hash] A File object with your picture (PNG, JPEG or GIF);Fi[	I"˛# @option options [Float] :lat The latitude of the location this tweet refers to. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.;FI"7# @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi[[	@˘iyI"Ñ      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :in_reply_to_status_id The ID of an existing status that the update is in reply to.
      # @option options [Float] :lat The latitude of the location this tweet refers to. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.;Fi[	@˘i¿I"É      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :in_reply_to_status_id The ID of an existing Tweet that the update is in reply to.
      # @option options [Float] :lat The latitude of the location this tweet refers to. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.;Fi[	@æ\I"à# @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.;Fi[[	@˘izI"Œ      # @option options [Integer] :in_reply_to_status_id The ID of an existing status that the update is in reply to.
      # @option options [Float] :lat The latitude of the location this tweet refers to. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.
      # @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.;Fi[	@˘i¡I"Õ      # @option options [Integer] :in_reply_to_status_id The ID of an existing Tweet that the update is in reply to.
      # @option options [Float] :lat The latitude of the location this tweet refers to. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.
      # @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.;Fi[	@≈\I"Ä# @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.;Fi[[	@˘i{I"      # @option options [Float] :lat The latitude of the location this tweet refers to. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.
      # @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@˘i¬I"      # @option options [Float] :lat The latitude of the location this tweet refers to. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.
      # @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@Ã\@m%i[[	@˘i|I"G      # @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.
      # @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @example Update the authenticating user's status;Fi[	@˘i√I"G      # @option options [Float] :long The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :place_id A place in the world. These IDs can be retrieved from {Twitter::API::PlacesAndGeo#reverse_geocode}.
      # @option options [String] :display_coordinates Whether or not to put a pin on the exact coordinates a tweet has been sent from.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @example Update the authenticating user's status;Fi[	@ƒX@˛i[[	@˘iÅI"‹      # Retweets the specified Tweets as the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@˘iõI"      # Retweets the specified Tweets as the authenticating user and raises an error if one has already been retweeted
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/statuses/retweet/:id
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@^I@ŸZi[[	@˘iíI"Í        var.flatten.threaded_map do |var|
          begin
            post_retweet(var, var.options)
          rescue Twitter::Error::Forbidden => var
            raise unless (var.message == Twitter::Error::AlreadyRetweeted::MESSAGE);Fi[	@˘i≠I"‡        var.flatten.threaded_map do |var|
          begin
            post_retweet(var, var.options)
          rescue Twitter::Error::Forbidden => var
            handle_forbidden_error(Twitter::Error::AlreadyRetweeted, var);Fi[	@ΩX@˛i[[	@˘iÕI"∏      # Returns oEmbed for a Tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@˘i„I"∏      # Returns oEmbeds for Tweets
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/oembed
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@@ŒCi[[	@^ijI"â      #
      #     attr_accessor :name, :age, :awesome
      #
      #     def attributes=(hash)
      #       hash.each do |key, value|;Fi[	@ai∆I"â      #
      #     attr_accessor :name, :age, :awesome
      #
      #     def attributes=(hash)
      #       hash.each do |key, value|;Fi[	I"*# @return [Array] An array of actions;F@‘i[[	@iI"x      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array] An array of actions
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.;Fi[	@i&I"y      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid./
      # @return [Array] An array of actions
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 100.;Fi[	@ZI"$#     @return [Twitter::Cursor];Fi[[	@i9I"~      #
      #   @param options [Hash] A customizable set of options.
      #     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #     @return [Twitter::Cursor]
      #   @example Return users follow followers of @sferik;Fi[	@iCI"ÿ      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.
      #     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #     @return [Twitter::Cursor]
      #   @example Return users follow followers of @sferik;Fi[	@¯\I":#   @example Return users follow followers of @sferik;Fi[[	@i:I"°      #   @param options [Hash] A customizable set of options.
      #     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #     @return [Twitter::Cursor]
      #   @example Return users follow followers of @sferik
      #     Twitter.following_followers_of;Fi[	@iDI"´      #   @param options [Hash] A customizable set of options.
      #     @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.
      #     @return [Twitter::Cursor]
      #   @example Return users follow followers of @sferik
      #     Twitter.following_followers_of('sferik');Fi[	@@,Di[[	@^ihI"â      #   class Person
      #     include ActiveModel::Serializers::JSON
      #
      #     attr_accessor :name, :age, :awesome
      #;Fi[	@aiƒI"à      #   class Person
      #     include ActiveModel::Serializers::Xml
      #
      #     attr_accessor :name, :age, :awesome
      #;Fi[	@∂X@˛i[[	@iùI"·      # Returns an array of numeric user ids the authenticating user is blocking
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@iÆI"⁄      # Returns true if the authenticating user is blocking a target user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/blocks/ids
      # @rate_limited Yes
      # @authentication Requires user context;Fi[	@@ÊDi[[	@[iEI"É    #   class MyClass
    #     include ActiveModel::Validations
    #
    #     def initialize(data = {})
    #       @data = data;Fi[	@ñiI"É    #   class MyClass
    #     include ActiveModel::Validations
    #
    #     def initialize(data = {})
    #       @data = data;Fi[	I"&# @param collection_name [Symbol];F@ê!i[[	@ﬁiXI"|      end
      
      # @param collection_name [Symbol]
      # @param klass [Class]
      # @param request_method [Symbol];Fi[	@ﬁigI"|      end
      
      # @param collection_name [Symbol]
      # @param klass [Class]
      # @param request_method [Symbol];Fi[	I""# @param method_name [Symbol];F@Èi[[	@ﬁi]I"Ø      # @param path [String]
      # @param args [Array]
      # @param method_name [Symbol]
      # @return [Twitter::Cursor]
      def function(var, var, var, var, var, var);Fi[	@ﬁilI"±      # @param path [String]
      # @param options [Hash]
      # @param method_name [Symbol]
      # @return [Twitter::Cursor]
      def function(var, var, var, var, var, var);Fi[	I"B# Take a user and merge it into the hash with the correct key;F@i[[	@ﬁi{I"|      end
      
      # Take a user and merge it into the hash with the correct key
      #
      # @param hash [Hash];Fi[	@ﬁiÑI"|      end
      
      # Take a user and merge it into the hash with the correct key
      #
      # @param hash [Hash];Fi[	@¯[@ëi[[	@ﬁi~I"ª      #
      # @param hash [Hash]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.
      # @return [Hash]
      def function(var, var, var);Fi[	@ﬁiáI"ª      #
      # @param hash [Hash]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen_name, or object.
      # @return [Hash]
      def function(var, var, var);Fi[	I"O# Take a multiple users and merge them into the hash with the correct keys;F@i[[	@ﬁióI"Ñ      end
      
      # Take a multiple users and merge them into the hash with the correct keys
      #
      # @param hash [Hash];Fi[	@ﬁi†I"Ñ      end
      
      # Take a multiple users and merge them into the hash with the correct keys
      #
      # @param hash [Hash];Fi[	@ˇ[@ëi[[	@ﬁiöI"      #
      # @param hash [Hash]
      # @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.
      # @return [Hash]
      def function(var, var);Fi[	@ﬁi£I"      #
      # @param hash [Hash]
      # @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen_names, or objects.
      # @return [Hash]
      def function(var, var);Fi[	I"4require("twitter/error/identity_map_key_error");F@ôi[[	@Qi I"Prequire("twitter/error/identity_map_key_error")
module Twitter
  class Base;Fi [	@iI"|require("twitter/base")
require("twitter/error/identity_map_key_error")
module Twitter
  class Identity < Twitter::Base;Fi[	I"def self.fetch(var);FI"return unless identity_map;Fi[[	@QiI"    end
    
    def self.fetch(var)
      return unless identity_map
      if var = identity_map.fetch(Marshal.dump(var)) then;Fi[	@i	I"Émodule Twitter
  class Identity < Twitter::Base
    def self.fetch(var)
      return unless identity_map
      var = var["LITERAL"];Fi[	I"def self.store(var);FI"#return var unless identity_map;Fi[[	@Qi$I"Ä    end
    
    def self.store(var)
      return var unless identity_map
      identity_map.store(Marshal.dump(var.attrs), var);Fi[	@iI"t    end
    
    def self.store(var)
      return var unless identity_map
      identity_map.store(var.id, var);Fi[	@@Ei[[	@[iBI"Õ    # the attribute. Override this method in subclasses should you need to
    # retrieve the value for a given attribute differently:
    #
    #   class MyClass
    #     include ActiveModel::Validations;Fi[	@ñiI"∞    # method in subclasses should you need to retrieve the value for a given
    # attribute differently:
    #
    #   class MyClass
    #     include ActiveModel::Validations;Fi[	@ @_Yi[[	@Îi
I"    # Initializes a new object
    #
    # @param attrs [Hash]
    # @return [Twitter::Relationship]
    def function(var);Fi[	@ÎiI"â    # Update the attributes of a Relationship
    #
    # @param attrs [Hash]
    # @return [Twitter::Relationship]
    def function(var);Fi[	@ I"# @return [Twitter::Base];Fi[[	@Qi8I"w    # Initializes a new object
    #
    # @param attrs [Hash]
    # @return [Twitter::Base]
    def function(var);Fi[	@QiOI"|    # Update the attributes of an object
    #
    # @param attrs [Hash]
    # @return [Twitter::Base]
    def function(var);Fi[	@c]@±i[[	@Qi9I"i    #
    # @param attrs [Hash]
    # @return [Twitter::Base]
    def function(var)
      @var = var;Fi[	@QiPI"q    #
    # @param attrs [Hash]
    # @return [Twitter::Base]
    def function(var)
      @attrs.update(var);Fi[	@NU@¬*i[[	@QiRI"d    # @return [Twitter::Base]
    def function(var)
      @attrs.update(var)
      self
    end;Fi[	@Ti.I"i    # @return [Twitter::RateLimit]
    def function(var)
      @attrs.update(var)
      self
    end;Fi[	I"## @param other [Twitter::Base];F@‹i[[	@QiYI"z    
    # @param attr [Symbol]
    # @param other [Twitter::Base]
    # @return [Boolean]
    def function(var, var);Fi[	@Qi_I"b    end
    
    # @param other [Twitter::Base]
    # @return [Boolean]
    def function(var);Fi[	@@\Ei[[	@TiEI"—    module InstanceMethodsOnActivation
      # Returns +self+ if the password is correct, otherwise +false+.
      #
      #   class User < ActiveRecord::Base
      #     has_secure_password validations: false;Fi[	@TiTI"◊      # Encrypts the password into the +password_digest+ attribute, only if the
      # new password is not blank.
      #
      #   class User < ActiveRecord::Base
      #     has_secure_password validations: false;Fi[	I"require("faraday");FI"require("multi_json");Fi[[	I"-projects//twitter_proj/twitter/client.rb;Ti I"Trequire("faraday")
require("multi_json")
require("twitter/api/direct_messages");Fi [	@›i I"<require("faraday")
require("multi_json")
module Twitter;Fi [	@I"=# Specify +options+ with additional translating options.;Fi[[	@?iûI"ë    #
    #   BlogPost.model_name.human # => "Blog post"
    #
    # Specify +options+ with additional translating options.
    def function(var);Fi[	@wiI"ß    #
    #   Person.human_attribute_name("first_name") # => "First name"
    #
    # Specify +options+ with additional translating options.
    def function(var, var);Fi[	@I"#  class Person;Fi[[	@<iI"Å    
    # Indicates if the model is persisted. Default is +false+.
    #
    #  class Person
    #    include ActiveModel::Model;Fi[	@ñiúI"°      
      # Returns +true+ if +attribute+ is an attribute method, +false+ otherwise.
      #
      #  class Person
      #    include ActiveModel::Validations;Fi[	@I"U#   person.errors.messages # => {:name=>["can not be nil", "must be specified"]};Fi[[	@7iI"œ    
    # Returns all message values.
    #
    #   person.errors.messages # => {:name=>["can not be nil", "must be specified"]}
    #   person.errors.values   # => [["can not be nil", "must be specified"]];Fi[	@7iÇI"´    
    # Returns all message keys.
    #
    #   person.errors.messages # => {:name=>["can not be nil", "must be specified"]}
    #   person.errors.keys     # => [:name];Fi[	@I"A#   person.errors.full_messages # => ["name can not be nil"];Fi[[	@7i!I"á    
    # Clear the error messages.
    #
    #   person.errors.full_messages # => ["name can not be nil"]
    #   person.errors.clear;Fi[	@7iûI"Ì    # Returns +true+ if no errors are found, +false+ otherwise.
    # If the error message is a string it can be empty.
    #
    #   person.errors.full_messages # => ["name can not be nil"]
    #   person.errors.empty?        # => false;Fi[	@I"#   person = Person.create;Fi[[	@.i I"~    #   class Person < ActiveRecord::Base
    #   end
    #
    #   person = Person.create
    #   person.to_key # => [1];Fi[	@.i-I"{    #   class Person < ActiveRecord::Base
    #   end
    #
    #   person = Person.create
    #   person.to_param # => "1";Fi[	I"# @return [Time];F@Ei[[	I"0projects//twitter_proj/twitter/creatable.rb;Ti
I"ñ    # Time when the object was created on Twitter
    #
    # @return [Time]
    def function
      @var ||= Time.parse(@attrs["LITERAL"]) if created?;Fi[	@TiI"T    end
    
    # @return [Time]
    def function
      var = @attrs["STRING"];Fi[	@I"$#     def clear_attribute(attr);Fi[[	@i,I"r      #
      #     private
      #
      #     def clear_attribute(attr)
      #       send("#{attr}=", nil);Fi[	@i¥I"`      #
      #     private
      #
      #     def clear_attribute(attr)
      #       ...;Fi[	@@i[[	@ÄiaI"      #   validates :password, presence: true, confirmation: true, if: :password_required?
      #   validates :token, uniqueness: true, strict: TokenGenerationException
      #
      #
      # Finally, the options +:if+, +:unless+, +:on+, +:allow_blank+, +:allow_nil+, +:strict+;Fi[	@’iI"z    #         <p>bar</p>
    #     <strong>baz</strong>
    #
    #
    # @param i [Fixnum] The number of tabs to use;Fi[	I"L# Uses +method_missing+ and <tt>respond_to?</tt> to rewrite the method.;F@i[[	@iI"Â    module ClassMethods
      # Declares a method available for all attributes with the given prefix.
      # Uses +method_missing+ and <tt>respond_to?</tt> to rewrite the method.
      #
      #   #{prefix}#{attr}(*args, &block);Fi[	@i=I"‘      
      # Declares a method available for all attributes with the given suffix.
      # Uses +method_missing+ and <tt>respond_to?</tt> to rewrite the method.
      #
      #   #{attr}#{suffix}(*args, &block);Fi[	I"A# Return a hash that includes everything but the given keys.;F@i[[	@ßi	I"w    private
    
    # Return a hash that includes everything but the given keys.
    #
    # @param klass [Class];Fi[	@ßiI"q    end
    
    # Return a hash that includes everything but the given keys.
    #
    # @param hash [Hash];Fi[	@\@ëi[[	@ßiI"m    #
    # @param hash [Hash]
    # @param key [Symbol]
    # @return [Hash]
    def function(var, var);Fi[	@ßi!I"m    #
    # @param hash [Hash]
    # @param key [Symbol]
    # @return [Hash]
    def function(var, var);Fi[	I"require("twitter/geo");F@ôi[[	@{i I"6require("twitter/geo")
module Twitter
  class Geo;Fi [	@•Xi I"6require("twitter/geo")
module Twitter
  class Geo;Fi [	@¨(@Ei[[	@√i
I"•      extend(ActiveSupport::Concern)
      
      module ClassMethods
        def function
          defined? @scoped_views ? (@scoped_views) : (Devise.scoped_views);Fi[	@êiI"      end
      
      module ClassMethods
        def function
          Rails::Generators.hide_namespace(self.namespace);Fi[	I"# @return [Twitter::Geo];F@Ei[[	@ÇiI"ì    alias "LITERAL" "LITERAL"
    
    # @return [Twitter::Geo]
    def function
      @var ||= Twitter::GeoFactory.fetch_or_new(@attrs["LITERAL"]);Fi[	@îiBI"}    end
    
    # @return [Twitter::Geo]
    def function
      @var ||= Twitter::GeoFactory.fetch_or_new(@attrs["LITERAL"]);Fi[	I"## @return [Twitter::RateLimit];F@±i[[	@TiI"q    alias "LITERAL" "LITERAL"
    
    # @return [Twitter::RateLimit]
    def function(var)
      @var = var;Fi[	@Ti,I"v    #
    # @param attrs [Hash]
    # @return [Twitter::RateLimit]
    def function(var)
      @attrs.update(var);Fi[	I"# @return [Twitter::Place];F@Ei[[	@i
I"Ú    attr_reader("LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL", "LITERAL")
    
    # @return [Twitter::Place]
    def function
      @var ||= Twitter::Place.fetch_or_new(Array(@attrs["LITERAL"]).first);Fi[	@îiXI"    end
    
    # @return [Twitter::Place]
    def function
      @var ||= Twitter::Place.fetch_or_new(@attrs["LITERAL"]);Fi[	I"## @param other [Twitter::Size];F@‹i[[	@ÛiI"x    alias "LITERAL" "LITERAL"
    
    # @param other [Twitter::Size]
    # @return [Boolean]
    def function(var);Fi[	@ÛiI"h    protected
    
    # @param other [Twitter::Size]
    # @return [Boolean]
    def function(var);Fi[	I""require("twitter/basic_user");F@ôi[[	I"2projects//twitter_proj/twitter/source_user.rb;Ti I"Yrequire("twitter/basic_user")
module Twitter
  class SourceUser < Twitter::BasicUser;Fi [	I"2projects//twitter_proj/twitter/target_user.rb;Ti I"Yrequire("twitter/basic_user")
module Twitter
  class TargetUser < Twitter::BasicUser;Fi [	I"# @return [Twitter::Tweet];F@Ei[[	@îiqI"∑    # If this Tweet is a retweet, the original Tweet is available here.
    #
    # @return [Twitter::Tweet]
    def function
      @var ||= self.class.fetch_or_new(@attrs["LITERAL"]);Fi[	@•)i\I"©    alias "LITERAL" "LITERAL"
    
    # @return [Twitter::Tweet]
    def function
      @var ||= fetch_or_new_without_self(Twitter::Tweet, @attrs, "LITERAL", "LITERAL");Fi[	@ØX@i[[	@•)i0I"˝    # Return the URL to the user's profile banner image
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mobile', 'mobile_retina', 'web', 'web_retina', 'ipad', or 'ipad_retina'
    # @return [String]
    def function(var);Fi[	@•)i:I"    # Return the secure URL to the user's profile banner image
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mobile', 'mobile_retina', 'web', 'web_retina', 'ipad', or 'ipad_retina'
    # @return [String]
    def function(var);Fi[	@ôX@i[[	@•)iHI"÷    # Return the URL to the user's profile image
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mini', 'normal', 'bigger' or 'original'
    # @return [String]
    def function(var);Fi[	@•)iPI"›    # Return the secure URL to the user's profile image
    #
    # @param size [String, Symbol] The size of the image. Must be one of: 'mini', 'normal', 'bigger' or 'original'
    # @return [String]
    def function(var);Fi[	I""_cset("LITERAL") { "STRING" };F@^i[[	@}+iI"π  _cset("LITERAL") { fetch("LITERAL") }
  _cset("LITERAL") { fetch("LITERAL", "STRING") }
  _cset("LITERAL") { "STRING" }
  _cset("LITERAL") { "STRING" }
  _cset("LITERAL") { "STRING" };Fi[	@}+iI"´  _cset("LITERAL") { fetch("LITERAL", "STRING") }
  _cset("LITERAL") { "STRING" }
  _cset("LITERAL") { "STRING" }
  _cset("LITERAL") { "STRING" }
  namespace("LITERAL") do;Fi[	I"module Whenever;FI"module Output;Fi[[	@#iI"Frequire("chronic")
module Whenever
  module Output
    class Cron;Fi[	@bi I":module Whenever
  module Output
    class Redirection;Fi [	I"var.close!;F@&i[[	@[iNI"        var = "STRING" if @options["LITERAL"]
        puts("STRING")
        var.close!
        exit("LITERAL")
      else;Fi[	@[iRI"[      else
        warn("STRING")
        var.close!
        exit("LITERAL")
      end;Fi[	@&@	i[[	@[iOI"h        puts("STRING")
        var.close!
        exit("LITERAL")
      else
        warn("STRING");Fi[	@[iZI"      if read_crontab.=~(Regexp.new("STRING")) and read_crontab.=~(Regexp.new("STRING")).nil? then
        warn("STRING")
        exit("LITERAL")
      else
        if read_crontab.=~(Regexp.new("STRING")).nil? and read_crontab.=~(Regexp.new("STRING")) then;Fi[	I"?var["LITERAL"] = @at.is_a?(Time) ? (@at.min) : ("LITERAL");FI"@var["LITERAL"] = @at.is_a?(Time) ? (@at.hour) : ("LITERAL");Fi[[	@#ixI"G        when ("LITERAL".month.."LITERAL".months) then
          var = ((((@time / "LITERAL") / "LITERAL") / "LITERAL") / "LITERAL").round
          var["LITERAL"] = @at.is_a?(Time) ? (@at.min) : ("LITERAL")
          var["LITERAL"] = @at.is_a?(Time) ? (@at.hour) : ("LITERAL")
          var["LITERAL"] = if @at.is_a?(Time) then;Fi[	@#iÖI"        var = @time.to_s
        var = Array.new("LITERAL", "STRING")
        var["LITERAL"] = @at.is_a?(Time) ? (@at.min) : ("LITERAL")
        var["LITERAL"] = @at.is_a?(Time) ? (@at.hour) : ("LITERAL")
        return ((var << "STRING") * "STRING") if var.downcase.index("STRING");Fi[	@O@	i[[	@OiI"~if Whenever.bundler? then
  job_type("LITERAL", "STRING")
  job_type("LITERAL", "STRING")
else
  job_type("LITERAL", "STRING");Fi[	@OiI"fend
if Whenever.rails3? then
  job_type("LITERAL", "STRING")
else
  job_type("LITERAL", "STRING");Fi[	@O@Oi[[	@Oi
I"|job_type("LITERAL", "STRING")
if Whenever.bundler? then
  job_type("LITERAL", "STRING")
  job_type("LITERAL", "STRING")
else;Fi[	@OiI"m  job_type("LITERAL", "STRING")
else
  job_type("LITERAL", "STRING")
  job_type("LITERAL", "STRING")
end;Fi
