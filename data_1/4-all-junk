[{:lociüÕ:projects[I"activemodel_proj:ETI"activerecord_proj;TI"backup_proj;TI"bundler_proj;TI"cancan_proj;TI"capistrano_proj;TI"compass_proj;TI"cucumber_prok;TI"devise_proj;TI"diaspora_proj;TI"haml_proj;TI"homebrew_proj;TI"jekyll_proj;TI"mongoid_proj;TI"nokogiri_proj;TI"omni_proj;TI"paperclip_proj;TI"redmine_proj;TI"rescue_proj;TI"rspec_proj;TI"sinatra_proj;TI"SiriProxy_proj;TI"state_machine_proj;TI"twitter_proj;TI"whenever_proj;T:options[I"--all-ast;TI"--junk;TI"
--var;FI"
--str;FI"
--fun;FI"--fargs;FI"
--lit;F[∑[I"when "LITERAL" then;FI""STRING";FI"when "LITERAL" then;FI""STRING";FiX[X[	I"Xdata//activerecord_proj/active_record/connection_adapters/abstract_mysql_adapter.rb;TiﬁI"‘          end
        when "STRING" then
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING";Fi[	@1i‡I"Ó          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when nil, "LITERAL", "LITERAL" then
            "STRING";Fi[	@1iÒI"            "STRING"
          when nil, "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING");Fi[	I"Tdata//activerecord_proj/active_record/connection_adapters/postgresql/quoting.rb;TiCI"Û              "STRING"
            when "LITERAL" then
              case var
              when "LITERAL" then
                "STRING"
              when "LITERAL" then
                "STRING"
              else
                # do nothing;Fi[	I"^data//activerecord_proj/active_record/connection_adapters/postgresql/schema_statements.rb;TiI"&          var = var.reverse_merge("LITERAL" => "STRING")
          var = var.symbolize_keys.sum do |arglist|
            case var
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING";Fi[	@;iI"            case var
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING";Fi[	@;i I"Ú              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING";Fi[	@;i"I"Ú              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING";Fi[	@;i$I"Ú              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING";Fi[	@;i&I"„              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              "STRING";Fi[	@;iAI"          when "STRING" then
            return "STRING" unless var
            case var
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING");Fi[	I"2data//backup_proj/backup/notifier/campfire.rb;Ti1I"«      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Ji3I"«        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	I"/data//backup_proj/backup/notifier/prowl.rb;Ti/I"«      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Oi1I"«        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	I"2data//backup_proj/backup/notifier/pushover.rb;Ti9I"«      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Ti;I"«        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	I"1data//backup_proj/backup/notifier/twitter.rb;Ti-I"«      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Yi/I"«        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	I"-data//bundler_proj/bundler/definition.rb;TiI"Í      if var = ruby_version.diff(var) then
        var, var, var = var
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@^iI"«        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing;Fi[	I">data//bundler_proj/bundler/vendor/thor/parser/argument.rb;TiAI"À        nil
      when "LITERAL", "LITERAL" then
        human_name.upcase
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ciCI"∫        human_name.upcase
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else
        # do nothing;Fi[	I"?data//capistrano_proj/capistrano/recipes/deploy/scm/cvs.rb;TiGI"ﬁ        def function(arglist)
          logger.info("STRING")
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing;Fi[	I"Fdata//capistrano_proj/capistrano/recipes/deploy/scm/subversion.rb;TiJI"ı          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING")
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING";Fi[	@kiLI"¯          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            raise(Capistrano::Error, "STRING");Fi[	I"Idata//compass_proj/compass/sass_extensions/functions/inline_image.rb;Ti'I"Ø  def function(arglist)
    return var if var
    case var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@pi)I"®    case var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@pi+I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@pi-I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@pi/I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@pi1I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@pi3I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@pi5I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@pi7I"≤      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      raise(Compass::Error, "STRING");Fi[	I"-data//homebrew_proj/download_strategy.rb;Ti"I"      Dir.chdir(@var) do |arglist|
        safe_system(@@var, "STRING", "STRING", @var)
        safe_system(@@var, "STRING", "STRING", case @var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING";Fi[	I"$data//homebrew_proj/hardware.rb;Ti.I"º  
  def self.cores_as_words(arglist)
    case Hardware.processor_count
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@Åi0I"æ    case Hardware.processor_count
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      Hardware.processor_count;Fi[	I"'data//homebrew_proj/macos/xcode.rb;TiI"Ã  
  def function(arglist)
    case MacOS.version
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      (MacOS.version >= "LITERAL") ? ("STRING") : (raise("STRING"));Fi[	@ÜiPI"    `xcodebuild -version 2>/dev/null` =~ "LITERAL"
    raise if ($1.nil? or $?.success?.!)
    $1) rescue case MacOS.llvm_build_version.to_i
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ÜiRI"›    $1) rescue case MacOS.llvm_build_version.to_i
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ÜiTI"º        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ÜiVI"º        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ÜiXI"’        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else
        case (MacOS.clang_version.to_f * "LITERAL").to_i;Fi[	@Üi^I"·        "STRING"
      else
        case (MacOS.clang_version.to_f * "LITERAL").to_i
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Üi`I"Ù        case (MacOS.clang_version.to_f * "LITERAL").to_i
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜibI"Œ          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜidI"Œ          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜifI"Œ          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜihI"Œ          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜijI"Œ          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜilI"Œ          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ÜinI"ø          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING";Fi[	I")data//homebrew_proj/macos/xquartz.rb;TiI"ÿ    else
      if (prefix.to_s == "STRING") then
        case MacOS.version
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@•iI"»        case MacOS.version
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "LITERAL";Fi[	I"(data//homebrew_proj/requirements.rb;Ti/I"ù  
  def function(arglist)
    case @var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@™i1I"©    case @var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@™i3I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@™i5I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@™i7I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@™i9I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@™i;I"™      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@™i=I"ü      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing;Fi[	I"-data//homebrew_proj/test/test_formula.rb;TiZI"	    assert_equal("LITERAL", var.bottle.checksum.hash_type)
    assert_equal("LITERAL", var.devel.checksum.hash_type)
    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@ªi\I"∞    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing;Fi[	@ªiÒI"Ì    var = RevisedBottleSpecTestBall.new
    assert_equal("LITERAL", var.bottle.revision)
    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING";Fi[	@ªiÛI"∞    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing;Fi[	I"%data//jekyll_proj/jekyll/post.rb;TizI"ƒ    
    def function(arglist)
      case self.site.permalink_style
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING";Fi[	@ƒi|I"◊      case self.site.permalink_style
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else
        self.site.permalink_style.to_s;Fi[	I"6data//nokogiri_proj/nokogiri/css/xpath_visitor.rb;TiI"2        var = :"visit_function_#{var.value.first.gsub("LITERAL", "STRING")}"
        return self.send(var, var) if self.respond_to?(var)
        case var.value.first
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@…iI"4        case var.value.first
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          if var.value["LITERAL"].is_a?(Nokogiri::CSS::Node) and (var.value["LITERAL"].type == "LITERAL") then;Fi[	@…iI"            var = (var.value["LITERAL"].to_i - "LITERAL")
            (var == "LITERAL") ? ("STRING") : ("STRING")
          end
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@…i!I"…          end
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@…i#I"Œ          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@…i%I"Œ          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@…i'I"Á          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          var.value["LITERAL"].accept(self);Fi[	@…iMI"¯          ((var + "STRING") + "STRING")
        when "LITERAL" then
          ((var + "STRING") + "STRING")
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@…iOI"„          ((var + "STRING") + "STRING")
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@…iQI"€          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          ("STRING" + "STRING");Fi[	I"-data//rspec_proj/spec/matchers/pretty.rb;TiI"      def function(arglist)
        var = var.map { |arglist| var.inspect }
        case var.length
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@ﬁiI"ƒ        case var.length
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING";Fi[	I">data//twitter_proj/twitter/request/multipart_with_file.rb;TiI"¿      
      def function(arglist)
        case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@„iI"Ω        case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING";Fi[I""STRING";F@-I""STRING";FI"when "LITERAL" then;FiA[A[	@1iﬂI"Ù        when "STRING" then
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when nil, "LITERAL", "LITERAL" then;Fi[	@1iI"ﬂ          when "LITERAL" then
            "STRING"
          when nil, "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else;Fi[	@;iI"          var = var.symbolize_keys.sum do |arglist|
            case var
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then;Fi[	@;iI"˚            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then;Fi[	@;i!I"˚            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then;Fi[	@;i#I"˚            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then;Fi[	@;i%I"Ï            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else;Fi[	@Ji2I"Ã      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@Oi0I"Ã      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@Ti:I"Ã      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@Yi.I"Ã      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@^iI"Ã        var, var, var = var
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@ciBI"       when "LITERAL", "LITERAL" then
        human_name.upcase
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else;Fi[	I"?data//capistrano_proj/capistrano/recipes/deploy/scm/git.rb;TiI"A            unless var = variable("LITERAL") then
              var = Capistrano::CLI.password_prompt
            end
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            unless var = variable("LITERAL") then
              var = Capistrano::CLI.password_prompt;Fi[	@kiKI"È          logger.info("STRING")
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then;Fi[	@kiMI"          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then;Fi[	@pi(I"Ø    return var if var
    case var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@pi*I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@pi,I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@pi.I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@pi0I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@pi2I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@pi4I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@pi6I"§    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	@Åi/I"¬  def self.cores_as_words(arglist)
    case Hardware.processor_count
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	@ÜiQI"Ù    raise if ($1.nil? or $?.success?.!)
    $1) rescue case MacOS.llvm_build_version.to_i
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@ÜiSI"≈      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@ÜiUI"≈      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then;Fi[	@ÜiWI"∂      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else;Fi[	@Üi_I"Ï      else
        case (MacOS.clang_version.to_f * "LITERAL").to_i
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜiaI"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜicI"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜieI"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜigI"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜiiI"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜikI"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@ÜimI"»        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@•iI"‹      if (prefix.to_s == "STRING") then
        case MacOS.version
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@™i0I"≤  def function(arglist)
    case @var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@™i2I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@™i4I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@™i6I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@™i8I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@™i:I"≥    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@™i<I"§    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	@ªi[I"◊    assert_equal("LITERAL", var.devel.checksum.hash_type)
    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	@ªiÚI"Œ    assert_equal("LITERAL", var.bottle.revision)
    assert_equal(case MacOS.cat
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else;Fi[	@ƒi{I"     def function(arglist)
      case self.site.permalink_style
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else;Fi[	@…iI"        return self.send(var, var) if self.respond_to?(var)
        case var.value.first
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@…iI"C        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          if var.value["LITERAL"].is_a?(Nokogiri::CSS::Node) and (var.value["LITERAL"].type == "LITERAL") then
            an_plus_b(var.value["LITERAL"]);Fi[	@…i I"Ô            (var == "LITERAL") ? ("STRING") : ("STRING")
          end
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@…i"I"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@…i$I"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@…i&I"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@…i(I"·        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          var.value["LITERAL"].accept(self)
        else;Fi[	@…iNI"Ï        when "LITERAL" then
          ((var + "STRING") + "STRING")
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@…iPI"◊        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@…iRI"’        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          ("STRING" + "STRING")
        else;Fi[	@ﬁiI"·        var = var.map { |arglist| var.inspect }
        case var.length
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[	@„iI"∆      def function(arglist)
        case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else;Fi[I"when "STRING" then;FI"!var = ["LITERAL", "LITERAL"];FI"when "STRING" then;FI"!var = ["LITERAL", "LITERAL"];Fi5[5[	I"2data//redmine_proj/plugins/rfpdf/lib/tcpdf.rb;Ti˚I"ı    end
    if var.is_a?(String) then
      case var.upcase
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li˝I"      case var.upcase
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liˇI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li	I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li!I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li#I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li%I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li'I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li)I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li+I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li-I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li/I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li1I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li3I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li5I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li7I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li9I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li;I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li=I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@li?I"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liAI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liCI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liEI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liGI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liII"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liKI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liMI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liOI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liQI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liSI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liUI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liWI"        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"];Fi[	@liYI"˛        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      else
        # do nothing;Fi[I"out("STRING");FI"out("STRING");FI"out("STRING");FI"out("STRING");Fi4[4[	I"9data//redmine_proj/plugins/rfpdf/lib/fpdf/chinese.rb;Ti\I"¨    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@”i]I"≥    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@”i^I"≥    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@”i_I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@”i`I"ï    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end;Fi[	@”iaI"á    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end
end;Fi[	I":data//redmine_proj/plugins/rfpdf/lib/fpdf/japanese.rb;Ti]I"¨    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@‡i^I"≥    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@‡i_I"≥    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@‡i`I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@‡iaI"ï    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end;Fi[	@‡ibI"á    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end
end;Fi[	I"8data//redmine_proj/plugins/rfpdf/lib/fpdf/korean.rb;TiGI"¨    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@ÌiHI"≥    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@ÌiII"≥    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@ÌiJI"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@ÌiKI"ï    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end;Fi[	@ÌiLI"á    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end
end;Fi[	@li§I"¨    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li•I"≥    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li¶I"≥    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@lißI"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li®I"ï    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end;Fi[	@li©I"Ü    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end
  ;Fi[	@lio
I"ö    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@lip
I"ö    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liq
I"ö    newobj
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@lir
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@lis
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@lit
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liu
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liv
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liw
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@lix
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liy
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liz
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li{
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li|
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li}
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li~
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liÄ
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liÅ
I"°    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liÇ
I"ö    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    newobj;Fi[	@liÉ
I"ö    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    newobj
    out("STRING");Fi[	@lià
I"ì    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    newobj;Fi[	@liâ
I"ì    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    newobj
    out("STRING");Fi[I"!var = ["LITERAL", "LITERAL"];F@h@iI"when "STRING" then;Fi4[4[	@li¸I"    if var.is_a?(String) then
      case var.upcase
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li˛I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li
I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li"I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li$I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li&I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li(I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li*I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li,I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li.I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li0I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li2I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li4I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li6I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li8I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li:I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li<I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li>I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@li@I"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liBI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liDI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liFI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liHI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liJI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liLI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liNI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liPI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liRI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liTI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liVI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then;Fi[	@liXI"      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      when "STRING" then
        var = ["LITERAL", "LITERAL"]
      else;Fi[@Ë@-@ÈI"	else;Fi#[#[	@1i÷I"ﬁ          when "LITERAL" then
            "STRING"
          when nil then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end;Fi[	@1iÂI"Ù          when "LITERAL" then
            "STRING"
          when nil, "LITERAL", "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end;Fi[	@1iÚI"È          when nil, "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end;Fi[	@8iDI"Ó            when "LITERAL" then
              case var
              when "LITERAL" then
                "STRING"
              when "LITERAL" then
                "STRING"
              else
                # do nothing
              end;Fi[	@;i'I"‹            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              "STRING"
            end;Fi[	@;i0I"            when "LITERAL", "LITERAL" then
              "STRING"
            when "LITERAL", "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING")
            end;Fi[	@;iBI"˚            return "STRING" unless var
            case var
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING")
            end;Fi[	@Ji4I"º        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	@Oi2I"º        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	@Ti<I"º        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	@Yi0I"º        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	@^iI"º        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end;Fi[	@ciDI"™      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else
        # do nothing
      end;Fi[	@hiHI"Œ          logger.info("STRING")
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end;Fi[	@iÜI"Û            unless var = variable("LITERAL") then
              var = Capistrano::CLI.password_prompt
            end
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end;Fi[	I"Edata//capistrano_proj/capistrano/recipes/deploy/scm/mercurial.rb;TiFI"Ì            unless var = scm_password_or_prompt then
              raise(("STRING" + "STRING"))
            end
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end;Fi[	I"Ddata//capistrano_proj/capistrano/recipes/deploy/scm/perforce.rb;Ti}I"∑          end
          case var.to_s
          when "STRING" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            var
          end;Fi[	@pi8I"´    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      raise(Compass::Error, "STRING")
    end;Fi[	@~i#I"¯        safe_system(@@var, "STRING", "STRING", @var)
        safe_system(@@var, "STRING", "STRING", case @var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end);Fi[	@Åi1I"§    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      Hardware.processor_count
    end;Fi[	@ÜiI"—  def function(arglist)
    case MacOS.version
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      (MacOS.version >= "LITERAL") ? ("STRING") : (raise("STRING"))
    end;Fi[	@ÜiYI"‡      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else
        case (MacOS.clang_version.to_f * "LITERAL").to_i
        when "LITERAL" then;Fi[	@ÜioI"∏        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end;Fi[	@•iI"π        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "LITERAL"
        end;Fi[	@™i>I"ò    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end;Fi[	@ªi]I"∏    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end, var.bottle.checksum.hexdigest);Fi[	@ªiÙI"∏    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end, var.bottle.checksum.hexdigest);Fi[	@ƒi}I"º      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else
        self.site.permalink_style.to_s
      end;Fi[	@ﬁiI"∏        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end;Fi[	@„iI"∏        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end;Fi[@+I""LITERAL";FI"when "LITERAL" then;FI""LITERAL";Fi![![	@1i9I"⁄          case var
          when "LITERAL", "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          else
            super;Fi[	@1iFI"Ì          case var
          when "LITERAL" then
            case var
            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL";Fi[	@1iHI"·            case var
            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL"
            else
              super;Fi[	@1iOI"–            else
              super
            end
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL";Fi[	@1iQI"ﬂ            end
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL";Fi[	@1iSI"Â            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL";Fi[	@1iUI"#            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            $1.split("STRING").map { |arglist| (var.strip.length - "LITERAL") }.max;Fi[	I"%data//homebrew_proj/cmd/audit.rb;TièI"“      var = var.checksum
      next if var.nil?
      var = case var.hash_type
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL";Fi[	@ÍiëI"¬      var = case var.hash_type
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      else
        # do nothing;Fi[	I"+data//homebrew_proj/extend/pathname.rb;Ti§I"Œ    var = nil
    File.open(self) { |arglist| var = var.read("LITERAL") }
    case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@Ôi¶I"¨    case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@Ôi®I"Ø      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@Ôi™I"Ø      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@Ôi¨I"Ø      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ÔiÆI"£      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      case extname;Fi[	@Åi	I"Õ  def self.cpu_type(arglist)
    @@cpu_type ||= `/usr/sbin/sysctl -n hw.cputype`.to_i
    case @@var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL";Fi[	@ÅiI"Ê  def self.intel_family(arglist)
    @@intel_family ||= `/usr/sbin/sysctl -n hw.cpufamily`.to_i
    case @@var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ÅiI"Æ    case @@var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ÅiI"Ø      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ÅiI"Ø      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ÅiI"Ø      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@ÅiI"†      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL";Fi[	I"data//homebrew_proj/keg.rb;TiâI"—          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	I"!data//homebrew_proj/macos.rb;TiQI"•  
  def function(arglist)
    case default_cc
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "STRING" then
      "LITERAL";Fi[	I"#data//homebrew_proj/version.rb;Ti´I" class MacOSVersion < Version
  compare do |arglist|
    super(Version.new(case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@i≠I"æ    super(Version.new(case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL";Fi[	@iØI"ü      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      var.to_s;Fi[	I"7data//rspec_proj/spec/mocks/message_expectation.rb;Ti5I"√        @var = case var
        when Numeric then
          var
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        else
          # do nothing;Fi[I"def function(arglist);FI"@var = var;FI"@var = var;FI"@var = var;Fi[[	I"Pdata//activerecord_proj/active_record/associations/preloader/association.rb;TiI"      class Association
        attr_reader(:owners, :reflection, :preload_scope, :model, :klass)
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var = (var.first and var.first.class);Fi[	I"Bdata//activerecord_proj/active_record/attribute_assignment.rb;TidI"¬    class MultiparameterAttribute
      attr_reader(:object, :name, :values, :column)
      
      def function(arglist)
        @var = var
        @var = var
        @var = var
      end
      ;Fi[	I"8data//activerecord_proj/active_record/reflection.rb;TidI"      # <tt>composed_of :balance, class_name: 'Money'</tt> returns <tt>{ class_name: "Money" }</tt>
      # <tt>has_many :clients</tt> returns +{}+
      # :nodoc:
      def function(arglist)
        @var = var
        @var = var
        @var = var
        @var = var
        @var = var;Fi[	I"6data//activerecord_proj/active_record/relation.rb;TiI"ò    
    alias "LITERAL" "LITERAL"
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = nil
      @var = false;Ti[	@JiaI"        ##
        # Instantiates a new Campfire::Room object and sets all the
        # necessary arguments (@room_id, @subdomain, @api_token)
        def function(arglist)
          @var = var
          @var = var
          @var = var
        end
        ;Fi[	I"9data//bundler_proj/bundler/endpoint_specification.rb;TiI"ä    
    attr_accessor(:source)
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end;Fi[	I"(data//bundler_proj/bundler/graph.rb;Ti
I"ú  class Graph
    GRAPH_NAME = "LITERAL"
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var;Fi[	I"7data//bundler_proj/bundler/remote_specification.rb;TiI"ä    
    attr_accessor(:source)
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end;Fi[	I"7data//bundler_proj/bundler/source/git/git_proxy.rb;TiI"ÿ        
        attr_writer("LITERAL")
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var = (var or Proc.new { |arglist| true });Fi[	I"+data//cancan_proj/cancan/exceptions.rb;TiI"Ø    
    attr_writer("LITERAL")
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = I18n.t("LITERAL", "LITERAL" => "STRING")
    end;Fi[	I"0data//capistrano_proj/capistrano/command.rb;Ti<I"€        class Evaluator
          attr_reader(:configuration, :condition, :server)
          
          def function(arglist)
            @var = var
            @var = var
            @var = var
          end
          ;Fi[	I"1data//capistrano_proj/capistrano/transfer.rb;Ti"I"î    
    attr_reader(:transfers)
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var;Fi[	I"Edata//compass_proj/compass/sass_extensions/sprites/sprite_map.rb;Ti#I"Œ          end
        end
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var["STRING"] ||= Sass::Script::Bool.new(true);Fi[	I"-data//cucumber_prok/cucumber/cli/main.rb;TiI"é        end
      end
      
      def function(arglist)
        @var = var
        @var = var
        @var = var
        @var = nil
      end;Fi[	I".data//cucumber_prok/cucumber/rake/task.rb;Ti(I"Â      class ForkedCucumberRunner
        include(::Rake::DSL) if defined? ::Rake::DSL
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var = var;Fi[	I"7data//cucumber_prok/cucumber/rb_support/rb_hook.rb;Ti
I"°    class RbHook
      attr_reader(:tag_expressions)
      
      def function(arglist)
        @var = var
        @var = var
        @var = var
      end
      ;Fi[	I",data//diaspora_proj/mailers/notifier.rb;Ti%I"    end
  end
  
  def function(arglist)
    @var = var
    @var = var
    @var = var
    @var = var
    var = { "LITERAL" => (var), "LITERAL" => (AppConfig.mail.sender_address), "LITERAL" => (I18n.t("STRING", "LITERAL" => (@var.name))), "LITERAL" => (AppConfig.pod_uri.host) };Fi[	@™iòI"≥  fatal(ARGV.force?.!)
  
  # The user can chose to force installation even in the face of conflicts.
  def function(arglist)
    @var = var
    @var = var
    @var = var
  end
  ;Fi[	I"'data//jekyll_proj/jekyll/layout.rb;TiI"Ô    # site - The Site.
    # base - The String path to the source.
    # name - The String filename of the post file.
    def function(arglist)
      @var = var
      @var = var
      @var = var
      self.data = {}
      self.process(var);Fi[	I"%data//jekyll_proj/jekyll/page.rb;TiI"    # base - The String path to the source.
    # dir  - The String path between the source and the file.
    # name - The String filename of the file.
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      self.process(var);Fi[	I",data//jekyll_proj/jekyll/static_file.rb;TiI"˝    # base - The String path to the <source>.
    # dir  - The String path between <source> and the file.
    # name - The String filename of the file.
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end;Fi[	I"Adata//mongoid_proj/lib/mongoid/multi_parameter_attributes.rb;TiI"Ï      class AttributeAssignmentError < Mongoid::Errors::MongoidError
        attr_reader(:exception, :attribute)
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
        end
      end;Fi[	I"0data//paperclip_proj/paperclip/processor.rb;Ti	I"†  class Processor
    attr_accessor(:file, :options, :attachment)
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
    end
    ;Fi[	I"-data//rescue_proj/resque/failure/base.rb;TiI"(      # The worker object who detected the failure
      # The string name of the queue from which the failed job was pulled
      # The payload object associated with the failed job
      def function(arglist)
        @var = var
        @var = var
        @var = var
        @var = var
      end;Fi[	I")data//twitter_proj/twitter/cursor.rb;TiI"ˇ    # @param method_name [String, Symbol]
    # @param method_options [Hash]
    # @return [Twitter::Cursor]
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = Array(var[var.to_sym]).map do |arglist|;Fi[	I")data//whenever_proj/whenever/cron.rb;TiI"Ÿ      
      attr_accessor(:time, :task)
      
      def function(arglist)
        @var = var
        @var = var
        @var = var
        @var = if var.is_a?(String) then
          (Chronic.parse(var) or "LITERAL");Fi[I"var = "LITERAL";FI"var = "LITERAL";FI"var = "LITERAL";FI"var = "LITERAL";Fi[[	@”ipI"“        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@”iqI"œ      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[	@”i¥I"Ù    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@”iµI"˘    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[	@‡ieI"“        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@‡ifI"œ      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[	@‡iØI"Ù    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@‡i∞I"˘    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[	@Ìi_I"“        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@Ìi`I"œ      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[	@Ìi£I"Ù    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@Ìi§I"˘    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[	I"7data//redmine_proj/plugins/rfpdf/lib/rfpdf/fpdf.rb;TiOI"œ        var = var.index("STRING").nil?.! ? ((var + "STRING")) : (var)
      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@äiPI"¢      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@äiQI"≠    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var];Fi[	@äiöI"Ù    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@äiõI"Õ    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var];Fi[	@liJI"ï        end
      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@liKI"¢      end
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@liLI"≠    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var];Fi[	@li¥I"ª      @var = (@var + GetStringWidth(var))
      return
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do;Fi[	@liµI"¶      return
    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var];Fi[	I"-data//redmine_proj/redmine/export/pdf.rb;TiQI"        var.footer_date = format_date(Date.today)
        var.SetAutoPageBreak(false)
        var.AddPage("STRING")
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL";Fi[	@üiRI"˘        var.SetAutoPageBreak(false)
        var.AddPage("STRING")
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = ((var - var) - "LITERAL");Fi[	@üiSI"Ê        var.AddPage("STRING")
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = ((var - var) - "LITERAL")
        var = [];Fi[	I"/data//redmine_proj/redmine/helpers/diff.rb;TiI"Ò      
      def function(arglist)
        var = self.words.collect { |arglist| h(var) }
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        var = "LITERAL"
        diff.diffs.each do |arglist|
          var = nil;Fi[@ËI"	else;FI""STRING";FI"end;Fi[[	I"Rdata//activerecord_proj/active_record/connection_adapters/abstract/quoting.rb;Ti,I"ì        when Symbol then
          "STRING"
        when Class then
          "STRING"
        else
          "STRING"
        end
      end
      ;Fi[	@;i)I"œ            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              "STRING"
            end
          end
          execute("STRING");Fi[	I"2data//activerecord_proj/active_record/core.rb;Ti:I"›          else
            if table_exists? then
              var = (columns.map { |arglist| "STRING" } * "STRING")
              "STRING"
            else
              "STRING"
            end
          end
        end;Fi[	I"9data//activerecord_proj/active_record/integration.rb;Ti7I"Æ        "STRING"
      when var = self["LITERAL"] then
        var = var.utc.to_s(cache_timestamp_format)
        "STRING"
      else
        "STRING"
      end
    end
  end;Fi[	I"5data//bundler_proj/bundler/lazy_specification.rb;TiI"•    
    def function(arglist)
      if ((platform == Gem::Platform::RUBY) or platform.nil?) then
        "STRING"
      else
        "STRING"
      end
    end
    ;Fi[	@4iI"•    
    def function(arglist)
      if ((platform == Gem::Platform::RUBY) or platform.nil?) then
        "STRING"
      else
        "STRING"
      end
    end
    ;Fi[	I"=data//bundler_proj/bundler/vendor/thor/parser/options.rb;TiI"¶        when Hash then
          "STRING"
        when nil, false then
          "STRING"
        else
          "STRING"
        end
      end.join("STRING")
    end;Fi[	@∑icI"ù          when nil then
            nil
          when false then
            "STRING"
          else
            "STRING"
          end
        end
        ;Fi[	I"9data//compass_proj/compass/configuration/comments.rb;TiI"ƒ      
      def function(arglist)
        if (top_level.preferred_syntax == "LITERAL") and top_level.sass_dir then
          "STRING"
        else
          "STRING"
        end
      end
    end;Fi[	I"%data//haml_proj/haml/compiler.rb;Ti I"œ              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              else
                "STRING"
              end
            end
          end;Fi[	@∆iI"Ω            when "STRING" then
              "STRING"
            when "STRING" then
              "STRING"
            else
              "STRING"
            end
          end
        end;Fi[	@ÜiqI"ô        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end
      end
  end;Fi[	I"(data//jekyll_proj/jekyll/filters.rb;Ti|I"î      when "LITERAL" then
        var["LITERAL"].to_s
      when "LITERAL" then
        "STRING"
      else
        "STRING"
      end
    end
  end;Fi[	@WiBI"–    # Returns the template String.
    def function(arglist)
      if (self.site.permalink_style == "LITERAL") and (index?.! and html?) then
        "STRING"
      else
        "STRING"
      end
    end
    ;Fi[	I"@data//mongoid_proj/lib/mongoid/errors/document_not_found.rb;TiVI"î      def function(arglist)
        case var
        when Hash then
          "STRING"
        else
          "STRING"
        end
      end
    end;Fi[	@…i?I"#      
      def function(arglist)
        var = if ((var.value.first.type == "LITERAL") or var.value.first.value.first =~ "LITERAL") then
          "STRING"
        else
          "STRING"
        end
        var = (var + var.value.first.accept(self))
        var.gsub!("LITERAL", "STRING");Fi[	I"2data//paperclip_proj/paperclip/storage/fog.rb;TiäI"∆      
      def function(arglist)
        if @var["LITERAL"].to_s.=~(Fog::AWS_BUCKET_SUBDOMAIN_RESTRICTON_REGEX) then
          "STRING"
        else
          "STRING"
        end
      end
      ;Fi[	I"$data//redmine_proj/redcloth3.rb;Ti:I"s            end
          end
        end
        "STRING"
      else
        "STRING"
      end
    end
  end;Fi[	@ﬁiI"ö        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end
      end
      ;Fi[	I"6data//rspec_proj/spec/matchers/raise_exception.rb;TiLI"ç        when nil then
          @var
        when Regexp then
          "STRING"
        else
          "STRING"
        end
      end
      ;Fi[	I",data//rspec_proj/spec/runner/options.rb;TiœI"      
      def function(arglist)
        if (["LITERAL", "LITERAL"].detect { |arglist| var.=~(RUBY_PLATFORM) } or (Spec::Ruby.version.to_f == "LITERAL")) then
          "STRING"
        else
          "STRING"
        end
      end
      ;Fi[	I"1data//sinatra_proj/sinatra/showexceptions.rb;Ti3I"Õ        "STRING"
      else
        if ((defined? Gem and var.filename.include?(Gem.dir)) or var.filename =~ "LITERAL") then
          "STRING"
        else
          "STRING"
        end
      end
    end;Fi[	@„iI"õ        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end
      end
    end;Fi[	I"7data//whenever_proj/whenever/output_redirection.rb;TiI"û        when Hash then
          redirect_from_hash
        when NilClass then
          "STRING"
        else
          "STRING"
        end
      end
      ;Fi[	@Íi5I"¢        when (stdout == "STRING") then
          "STRING"
        when stdout then
          "STRING"
        else
          "STRING"
        end
      end
      ;Fi[I"*action { |arglist| ["LITERAL", var] };FI")when var = @var.scan("LITERAL") then;FI"*action { |arglist| ["LITERAL", var] };FI")when var = @var.scan("LITERAL") then;Fi[[	I"2data//nokogiri_proj/nokogiri/css/tokenizer.rb;Ti<I"v        when nil then
          case
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıi>I"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıi@I"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiBI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiDI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiFI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiHI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiJI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiLI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiNI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiPI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiRI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiTI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiVI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiXI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıiZI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıi\I"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıi^I"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıi`I"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıibI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıidI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıifI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıihI"≤          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then;Fi[	@ıijI"å          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| [var, var] }
          else;Fi[I")when var = @var.scan("LITERAL") then;F@Ô@@Òi[[	@ıi;I"_        var = case @var
        when nil then
          case
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıi=I"í          case
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıi?I"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiAI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiCI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiEI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiGI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiII"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiKI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiMI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiOI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiQI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiSI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiUI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiWI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiYI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıi[I"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıi]I"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıi_I"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiaI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıicI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıieI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıigI"µ            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] };Fi[	@ıiiI"Ø            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| ["LITERAL", var] }
          when var = @var.scan("LITERAL") then
            action { |arglist| [var, var] };Fi[@@@I"end;Fi[[	I"Zdata//activerecord_proj/active_record/connection_adapters/abstract/connection_pool.rb;Ti{I"Ω      class Reaper
        attr_reader(:pool, :frequency)
        
        def function(arglist)
          @var = var
          @var = var
        end
        
        def function(arglist);Fi[	I"]data//activerecord_proj/active_record/connection_adapters/abstract/schema_definitions.rb;TiI"ù    end
    
    class Table
      def function(arglist)
        @var = var
        @var = var
      end
      
      # Adds a new column to the named table.;Fi[	I"Zdata//activerecord_proj/active_record/connection_adapters/connection_specification.rb;TiI"Œ      class Resolver
        attr_reader(:config, :klass, :configurations)
        
        def function(arglist)
          @var = var
          @var = var
        end
        
        def function(arglist);Fi[	I"Pdata//activerecord_proj/active_record/connection_adapters/postgresql/oid.rb;Ti5I"`          # +delim+ corresponds to the `typdelim` column in the pg_types
          # table.  +subtype+ is derived from the `typelem` column in the
          # pg_types table.
          def function(arglist)
            @var = var
            @var = var
          end
          
          # FIXME: this should probably split on +delim+ and use +subtype+;Fi[	I"Pdata//activerecord_proj/active_record/connection_adapters/statement_pool.rb;Ti
I"ß    class StatementPool
      include(Enumerable)
      
      def function(arglist)
        @var = var
        @var = var
      end
      
      def function(arglist);Fi[	I"6data//activerecord_proj/active_record/fixtures.rb;Ti¸I"î    
    attr_reader(:model_class, :fixture)
    
    def function(arglist)
      @var = var
      @var = var
    end
    
    def function(arglist);Fi[	I")data//backup_proj/backup/splitter.rb;Ti	I"á  class Splitter
    include(Backup::CLI::Helpers)
    
    def function(arglist)
      @var = var
      @var = var
    end
    
    ##;Fi[	I"@data//cancan_proj/cancan/model_adapters/abstract_adapter.rb;Ti)I"ß        raise(NotImplemented, "STRING")
      end
      
      def function(arglist)
        @var = var
        @var = var
      end
      
      def function(arglist);Fi[	I"Cdata//capistrano_proj/capistrano/recipes/deploy/scm/accurev.rb;TitI"             InternalRevision.new(var, var)
          end
          
          def function(arglist)
            @var = var
            @var = var
          end
          
          def function(arglist);Fi[	I">data//compass_proj/compass/installers/template_context.rb;TiI"°        new(*var).send("LITERAL")
      end
      
      def function(arglist)
        @var = var
        @var = var
      end
      
      def function(arglist);Fi[	I".data//cucumber_prok/cucumber/ast/table.rb;Ti÷I"      #   table.hashes.keys
      #   # => ['phone number', 'ADDRESS']
      #
      def function(arglist)
        @var = var
        @var = var
      end
      
      # Returns a new Table where the headers are redefined. See #map_headers!;Fi[	I"Hdata//cucumber_prok/cucumber/formatter/gherkin_formatter_adapter.rb;Ti
I"≥module Cucumber
  module Formatter
    class GherkinFormatterAdapter
      def function(arglist)
        @var = var
        @var = var
      end
      
      def function(arglist);Fi[	I"=data//diaspora_proj/presenters/extreme_post_presenter.rb;TiI"vclass ExtremePostPresenter
  def function(arglist)
    @var = var
    @var = var
  end
  
  def function(arglist);Fi[	I"8data//diaspora_proj/presenters/o_embed_presenter.rb;TiI"á  
  include(ActionView::Helpers::TextHelper)
  
  def function(arglist)
    @var = var
    @var = var
  end
  
  def function(arglist);Fi[	I"7data//diaspora_proj/presenters/person_presenter.rb;TiI"qclass PersonPresenter
  def function(arglist)
    @var = var
    @var = var
  end
  
  def function(arglist);Fi[	I"5data//diaspora_proj/presenters/post_presenter.rb;Ti	I"üclass PostPresenter
  attr_accessor(:post, :current_user)
  
  def function(arglist)
    @var = var
    @var = var
  end
  
  def self.collection_json(arglist);Fi[	@âiDI"  end
end
class PostInteractionPresenter
  def function(arglist)
    @var = var
    @var = var
  end
  
  def function(arglist);Fi[	I"-data//nokogiri_proj/nokogiri/css/node.rb;TiI"‚      # Get the type of this node
      # Get the value of this node
      # Create a new Node with +type+ and +value+
      def function(arglist)
        @var = var
        @var = var
      end
      
      # Accept +visitor+;Fi[	I"0data//nokogiri_proj/nokogiri/xml/builder.rb;TiÅI"£      end
      
      class NodeBuilder
        def function(arglist)
          @var = var
          @var = var
        end
        
        def function(arglist);Fi[	I"4data//paperclip_proj/paperclip/url_generator.rb;TiI"órequire("uri")
module Paperclip
  class UrlGenerator
    def function(arglist)
      @var = var
      @var = var
    end
    
    def function(arglist);Fi[	I"5data//rspec_proj/spec/example/example_matcher.rb;TiI"§module Spec
  module Example
    class ExampleMatcher
      def function(arglist)
        @var = var
        @var = var
      end
      
      def function(arglist);Fi[	I"2data//rspec_proj/spec/runner/heckle_runner.rb;TiI"Ë  module Spec
    module Runner
      class HeckleRunner
        def function(arglist)
          @var = var
          @var = var
        end
        
        # Runs all the example groups held by +rspec_options+ once for each of the;Fi[	I"<data//state_machine_proj/state_machine/helper_module.rb;TiI"¥module StateMachine
  class HelperModule < Module
    def function(arglist)
      @var = var
      @var = var
    end
    
    # Provides a human-readable description of the module;Fi[I"#       end;FI"#     end;FI"#   end;FI"#;Fi[[	I":data//activerecord_proj/active_record/associations.rb;TiKI"í      #       create_table :developers_projects, id: false do |t|
      #         t.integer :developer_id
      #         t.integer :project_id
      #       end
      #     end
      #   end
      #
      # It's also a good idea to add indexes to each of those columns to speed up the joins process.
      # However, in MySQL it is advised to add a compound index for both of the columns as MySQL only;Fi[	I";data//activerecord_proj/active_record/scoping/named.rb;TisI"ˇ        #     scope :red, -> { where(color: 'red') } do
        #       def dom_id
        #         'red_shirts'
        #       end
        #     end
        #   end
        #
        # Scopes can also be used while creating/building a record.
        #;Fi[	I"7data//rspec_proj/spec/matchers/wrap_expectation.rb;TiI"    #       matcher.failure_message = "expected #{mouse} to eat cheese"
    #       wrap_expectation do |matcher|
    #         assert_eats_cheese(mouse)
    #       end
    #     end
    #   end
    #
    #   describe Mouse do
    #     it "eats cheese" do;Fi[	I"?data//state_machine_proj/state_machine/event_collection.rb;Ti!I"«    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   events = Vehicle.state_machine(:state).events
    #   ;Fi[	@ØiFI"ø    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   events = Vehicle.state_machine.events
    #   ;Fi[	@ØifI"5    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                       # => #<Vehicle id: nil, state: "parked">
    #   events = Vehicle.state_machine.events;Fi[	I"9data//state_machine_proj/state_machine/extensions.rb;TiRI">    #       
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">
    #   vehicle.state                                 # => "parked";Fi[	@∂iI":    #       
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">
    #   vehicle.fire_events(:ignite, :disable_alarm)  # => true;Fi[	I"@data//state_machine_proj/state_machine/integrations/base.rb;TiBI"+        #             # Override here...
        #           end
        #         end
        #       end
        #     end
        #   end
        # 
        # In the above example, a version override is defined for the ORMLibrary
        # integration when the version is between 0.2.x and 0.3.x.;Fi[	I"Pdata//state_machine_proj/state_machine/integrations/data_mapper/observer.rb;TiI"        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver
        #     include DataMapper::Observer;Fi[	@æi[I"        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver
        #     include DataMapper::Observer;Fi[	@æiI"        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver
        #     after_transition_failure do |transition|;Fi[	I"<data//state_machine_proj/state_machine/macro_methods.rb;Ti>I"    #     state_machine do
    #       event :park do
    #         ...
    #       end
    #     end
    #   end
    # 
    # The above example will define a state machine named "state" that will
    # store the value in the +state+ attribute.  Every vehicle will start;Fi[	@≈itI"    #       
    #       event :shift_up do
    #         transition :idling => :first_gear
    #       end
    #     end
    #   end
    #   
    #   Vehicle.human_state_name(:parked)         # => "parked"
    #   Vehicle.human_state_name(:first_gear)     # => "first gear";Fi[	@≈i•I"‰    #       
    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new
    #   vehicle.state                             # => "parked";Fi[	@≈i*I"    #       @state = 'idling'
    #       initialize_state_machines(:static => :force) do
    #         ...
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked";Fi[	@≈iGI"    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition all => :idling
    #       end
    #     end
    #   end
    # 
    # ...will generate the following instance methods (assuming they're not
    # already defined in the class):;Fi[	@≈iñI"6    #     state_machine :alarm_state, :initial => :active do
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   
    #   # Fire +ignite+ event directly
    #   vehicle = Vehicle.create    # => #<Vehicle id=1 state="parked" alarm_state="active">;Fi[	@≈i—I"%    #       
    #       event :turn_off do
    #         transition all => :off
    #       end
    #     end
    #   end
    # 
    # The above class defines two state machines: +heater_state+ and +alarm_state+.
    # For the +heater_state+ machine, the following methods are generated since;Fi[	I">data//state_machine_proj/state_machine/matcher_helpers.rb;TiI"Á    #       
    #       event :crash
    #         transition all - :parked => :stalled
    #       end
    #     end
    #   end
    # 
    # In the above example, +all+ will match the following states since they
    # are known:;Fi[	@‘i.I"=    #     state_machine do
    #       event :ignite
    #         transition [:idling, :first_gear] => same
    #       end
    #     end
    #   end
    # 
    # In the above example, +same+ will match whichever the from state is.  In
    # the case of the +ignite+ event, it is essential the same as the following:;Fi[	I"9data//state_machine_proj/state_machine/transition.rb;TiÁI"!    #     state_machine do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new
    #   transition = StateMachine::Transition.new(vehicle, Vehicle.state_machine, :ignite, :parked, :idling);Fi[	@Ÿi I"d    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new     # => #<Vehicle:0xb7b7f568 @state="parked">
    #   transition = StateMachine::Transition.new(vehicle, Vehicle.state_machine, :ignite, :parked, :idling);Fi[I";#   #       #<Pet id: 2, name: "Spook", person_id: 1>,;TI">#   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;TI"#   #    ];TI"#;Ti[[	I"Kdata//activerecord_proj/active_record/associations/collection_proxy.rb;Ti,I"4      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.select(:name)
      #   # => [;Ti[	@‰ieI"Ø      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.find(1) # => #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>
      #   person.pets.find(4) # => ActiveRecord::RecordNotFound: Couldn't find Pet with id=4;Ti[	@‰i~I"X      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.first # => #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>
      #;Ti[	@‰iúI"U      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.last # => #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #;Ti[	@‰iI"p      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.concat([Pet.new(name: 'Brain'), Pet.new(name: 'Benny')])
      #   person.pets.size # => 5;Ti[	@‰i@I"1      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [;Ti[	@‰iGI"O      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.size # => 0
      #   person.pets      # => [];Ti[	@‰iaI"1      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [;Ti[	@‰ihI"R      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   Pet.find(1, 2, 3)
      #   # => ActiveRecord::RecordNotFound;Ti[	@‰izI"1      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [;Ti[	@‰iÅI"R      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   Pet.find(1, 2, 3)
      #   # => ActiveRecord::RecordNotFound;Ti[	@‰ióI")      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy_all
      #;Ti[	@‰i∑I"j      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete(Pet.find(1))
      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>];Ti[	@‰i¡I"5      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   Pet.find(1)
      #   # => #<Pet id: 1, name: "Fancy-Fancy", person_id: nil>;Ti[	@‰i”I"G      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete(Pet.find(1), Pet.find(3))
      #   # => [;Ti[	@‰iÔI"j      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete(Pet.find(1))
      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>];Ti[	@‰i˘I"=      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   Pet.find(1)
      #   # => ActiveRecord::RecordNotFound: Couldn't find Pet with id=1;Ti[	@‰iI"b      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete("1")
      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>];Ti[	@‰i'I"k      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy(Pet.find(1))
      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>];Ti[	@‰i1I"'      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy(Pet.find(2), Pet.find(3))
      #   # => [;Ti[	@‰i7I"-      #
      #   person.pets.destroy(Pet.find(2), Pet.find(3))
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.size  # => 0
      #   person.pets       # => [];Ti[	@‰ióI"ó      #   person.pets # This will execute a SELECT * FROM query
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.size # => 3
      #   # Because the collection is already loaded, this will behave like;Ti[I"A#   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,;T@ﬁ@ﬂI"#   #    ];Ti[[	@‰i+I"+      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.select(:name);Ti[	@‰idI"Z      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.find(1) # => #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>;Ti[	@‰i}I"X      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.first # => #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>;Ti[	@‰iõI"U      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.last # => #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰i·I"H      #
      #   person.pets.find(1, 2, 3)
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.create(var, &var);Ti[	@‰i
I"i      #   person.id # => 1
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.concat([Pet.new(name: 'Brain'), Pet.new(name: 'Benny')]);Ti[	@‰i?I"B      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all;Ti[	@‰iFI"4      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.size # => 0;Ti[	@‰i`I"B      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all;Ti[	@‰igI".      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   Pet.find(1, 2, 3);Ti[	@‰iyI"B      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all;Ti[	@‰iÄI".      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   Pet.find(1, 2, 3);Ti[	@‰iñI"C      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy_all;Ti[	@‰i∂I"K      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete(Pet.find(1));Ti[	@‰i“I"X      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete(Pet.find(1), Pet.find(3));Ti[	@‰iÓI"K      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete(Pet.find(1));Ti[	@‰i
I"C      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete("1");Ti[	@‰i&I"L      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy(Pet.find(1));Ti[	@‰i~I"S      #   person.pets.count # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.count(var, var);Ti[	@‰iñI"S      #
      #   person.pets # This will execute a SELECT * FROM query
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.size # => 3;Ti[	@‰i≤I"c      #   # call the collection with no additional queries:
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.length;Ti[I"#   # => [;F@@ﬁ@ﬂi[[	@‰i*I"      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰icI"      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i|I"      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰iöI"      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i‡I"L      #   person.pets.count # => 3
      #
      #   person.pets.find(1, 2, 3)
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist);Ti[	@‰i	I""      #
      #   person.id # => 1
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i>I")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰iEI"#      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i_I")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰ifI"#      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰ixI")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰iI"#      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰iïI")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰iµI")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i—I")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰iÌI")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i	I")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i%I")      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i}I">      #
      #   person.pets.count # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist);Ti[	@‰iïI"é      #   # executes something like SELECT COUNT(*) FROM "pets" WHERE "pets"."person_id" = 1
      #
      #   person.pets # This will execute a SELECT * FROM query
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i±I"Ö      #   # Because the collection is loaded, you can
      #   # call the collection with no additional queries:
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist);Ti[I"+problem("STRING") if text =~ "LITERAL";FI"+problem("STRING") if text =~ "LITERAL";FI"+problem("STRING") if text =~ "LITERAL";FI"+problem("STRING") if text =~ "LITERAL";Fi[[	@ÍiπI"-        problem("STRING")
      end
    end
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi∫I">      end
    end
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiªI"_    end
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiºI"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiΩI"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiæI"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiøI"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi¿I"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi¡I"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi¬I"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi√I"ö    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL" and text =~ "LITERAL".!;Fi[	@ÍiƒI"ö    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL" and text =~ "LITERAL".!
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi…I"ö    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL" and text =~ "LITERAL".!
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@Íi I"ö    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL" and text =~ "LITERAL".!
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiÀI"ö    problem("STRING") if text =~ "LITERAL" and text =~ "LITERAL".!
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiÃI"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiÕI"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiŒI"Ç    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL";Fi[	@ÍiœI"]    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
  end;Fi[	@Íi–I"5    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
    problem("STRING") if text =~ "LITERAL"
  end
  ;Fi[I"%var.column("LITERAL", "LITERAL");FI"%var.column("LITERAL", "LITERAL");FI"%var.column("LITERAL", "LITERAL");FI"%var.column("LITERAL", "LITERAL");Fi[[	I">data//redmine_proj/plugins/acts_as_list/test/list_test.rb;TiI"+def function(arglist)
  ActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
    create_table("LITERAL") do |arglist|
      var.column("LITERAL", "LITERAL")
      var.column("LITERAL", "LITERAL")
      var.column("LITERAL", "LITERAL")
      var.column("LITERAL", "LITERAL")
    end
  end;Fi[	I"@data//redmine_proj/plugins/acts_as_versioned/test/schema.rb;Ti	I"s  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[	@£iI"\    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[	@£i4I"<    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[	@£i:I"%    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@£i;I"  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
end;Fi[	I"Ddata//redmine_proj/plugins/awesome_nested_set/spec/db/schema.rb;TiI";ActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@ÆiI"wActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[	@ÆiI"D    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@ÆiI"%  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@ÆiI"[  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[	@ÆiI"<    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[	@ÆiI"%    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@Æi I"<  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[	@Æi&I"    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
end;Fi[	I"Ddata//redmine_proj/plugins/awesome_nested_set/test/db/schema.rb;TiI";ActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@¡iI"wActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[	@¡iI"D    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@¡iI"%  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@¡iI"#  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
end;Fi[@fI""STRING";FI"when "STRING" then;FI""STRING";Fi[[	@8i=I"            "STRING"
          when String then
            case var.sql_type
            when "STRING" then
              "STRING"
            when "STRING" then
              "STRING"
            when "LITERAL" then
              case var;Fi[	I".data//capistrano_proj/capistrano/shell.rb;TiƒI"»    # then the scope is unrestricted.
    def function(arglist)
      var = case var
      when "STRING" then
        "STRING"
      when "STRING" then
        "STRING"
      else
        # do nothing;Fi[	I"Fdata//compass_proj/compass/sass_extensions/functions/constants.rb;TiI"      var.value.map! do |arglist|
        if var.is_a?(Sass::Script::String) then
          var = case var.value
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@÷iI"Ê          var = case var.value
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@÷iI"‹            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@÷iI"Î            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          else
            (Compass::Util.compass_warn("STRING");Fi[	@÷iDI"Ï    def function(arglist)
      var = var.value.split("LITERAL").map do |arglist|
        case var
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING";Fi[	@÷iFI"»        case var
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING";Fi[	@÷iHI"           "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING";Fi[	@÷iJI"∑          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        else
          var;Fi[	@∆i˜I"˛              "STRING"
            else
              case @var.value["LITERAL"]
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING";Fi[	@∆i˘I"              case @var.value["LITERAL"]
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING";Fi[	@∆i˚I"                 "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING";Fi[	@∆i˝I"Ú                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              else
                "STRING";Fi[	@∆i	I"Â        else
          if @var.html4? then
            case @var.value["LITERAL"]
            when "STRING" then
              "STRING"
            when "STRING" then
              "STRING"
            else
              "STRING";Fi[	@…igI"Ê            "STRING"
          when "STRING", "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@…iiI"‹            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@…ikI"‹            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@…imI"‹            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING";Fi[	@…ioI"‚            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          else
            (var.value.first + "STRING");Fi[I""LITERAL";FI"when "LITERAL" then;FI""LITERAL";F@ÿi[[	@1i8I"÷          end
          case var
          when "LITERAL", "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          else;Fi[	@1iGI"Î          when "LITERAL" then
            case var
            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL"
            else;Fi[	@1iPI"›              super
            end
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then;Fi[	@1iRI"Ì          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then;Fi[	@1iTI"Ì          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then;Fi[	@1iVI"          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            $1.split("STRING").map { |arglist| (var.strip.length - "LITERAL") }.max
          else;Fi[	@ÍiêI"ƒ      next if var.nil?
      var = case var.hash_type
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      else;Fi[	@Ôi•I"ÿ    File.open(self) { |arglist| var = var.read("LITERAL") }
    case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@ÔißI"∑    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@Ôi©I"∑    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@Ôi´I"∑    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@Ôi≠I"®    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else;Fi[	@ÅiI"›    @@intel_family ||= `/usr/sbin/sysctl -n hw.cpufamily`.to_i
    case @@var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@ÅiI"∑    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@ÅiI"∑    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@ÅiI"∑    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@ÅiI"®    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else;Fi[	@
iàI"ÿ        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then;Fi[	@i¨I"≈  compare do |arglist|
    super(Version.new(case var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then;Fi[	@iÆI"®    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else;Fi[I"*#   class Person < ActiveRecord::Base;FI"#     has_many :pets;TI"#   end;TI"#;Ti[[	@‰i%I"„      #
      # *First:* Specify a subset of fields to be selected from the result set.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [;Ti[	@‰i^I"      # rules as <tt>ActiveRecord::Base.find</tt>. Returns <tt>ActiveRecord::RecordNotFound</tt>
      # error if the object can not be found.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [;Ti[	@‰i|I"      # If the collection is empty, the first form returns +nil+, and the second
      # form returns an empty array.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [;Ti[	@‰iïI"      # If the collection is empty, the first form returns +nil+, and the second
      # form returns an empty array.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [;Ti[	@‰iI"H      # Replace this collection with +other_array+. This will perform a diff
      # and delete/add only records that have changed.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [#<Pet id: 1, name: "Gorby", group: "cats", person_id: 1>];Ti[	@‰ièI"Ù      # This will _always_ remove the records ignoring the +:dependent+
      # option.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets;Ti[	@‰iI"      # You can pass +Fixnum+ or +String+ values, it finds the records
      # responding to the +id+ and executes delete on them.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets;Ti[	@‰iI"3      # This method will _always_ remove record from the database ignoring
      # the +:dependent+ option. Returns an array with the removed records.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets;Ti[	@‰ieI"ﬂ      
      # Specifies whether the records should be unique or not.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.select(:name)
      #   # => [;Ti[	@‰iwI"…      
      # Count all records using SQL.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.count # => 3
      #   person.pets;Ti[	@‰içI"z      # equivalent. If not and you are going to need the records anyway
      # +length+ will take one less query. Otherwise +size+ is more efficient.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.size # => 3
      #   # executes something like SELECT COUNT(*) FROM "pets" WHERE "pets"."person_id" = 1;Ti[	@‰ißI"      # equivalent. If not and you are going to need the records anyway this
      # method will take one less query. Otherwise +size+ is more efficient.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.length # => 3
      #   # executes something like SELECT "pets".* FROM "pets" WHERE "pets"."person_id" = 1;Ti[	@‰i¡I">      # not already been loaded and you are going to fetch the records anyway it
      # is better to check <tt>collection.length.zero?</tt>.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.count  # => 1
      #   person.pets.empty? # => false;Ti[	@‰i“I"Ï      
      # Returns +true+ if the collection is not empty.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.count # => 0
      #   person.pets.any?  # => false;Ti[	@‰iÙI"!      # Returns true if the collection has more than one record.
      # Equivalent to <tt>collection.size > 1</tt>.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.count #=> 1
      #   person.pets.many? #=> false;Ti[	@‰iI"ˆ      
      # Returns +true+ if the given object is present in the collection.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets # => [#<Pet id: 20, name: "Snoop">]
      #;Ti[	@‰iAI"Á      # to the corresponding element in the other array, otherwise returns
      # +false+.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [;Ti[	@‰i[I"      # Returns a new array of objects from the collection. If the collection
      # hasn't been loaded, it fetches the records from the database.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [;Ti[	@‰iÉI"/      # to the association√¢¬Ä¬òs primary key. Returns +self+, so several appends may be
      # chained together.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets.size # => 0
      #   person.pets << Pet.new(name: 'Fancy-Fancy');Ti[	@‰i§I"X      # Reloads the collection from the database. Returns +self+.
      # Equivalent to <tt>collection(true)</tt>.
      #
      #   class Person < ActiveRecord::Base
      #     has_many :pets
      #   end
      #
      #   person.pets # fetches pets from the database
      #   # => [#<Pet id: 1, name: "Snoop", group: "dogs", person_id: 1>];Ti[I"@var = var;FI"@var = var;FI"@var = var;FI"@var = var;Fi[[	@ iI"
        attr_reader(:owners, :reflection, :preload_scope, :model, :klass)
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var = (var.first and var.first.class)
          @var = nil;Fi[	@&ieI"      # <tt>has_many :clients</tt> returns +{}+
      # :nodoc:
      def function(arglist)
        @var = var
        @var = var
        @var = var
        @var = var
        @var = var
        @var = var.pluralize_table_names ? (var.to_s.pluralize) : (var.to_s);Fi[	@&ifI"·      # :nodoc:
      def function(arglist)
        @var = var
        @var = var
        @var = var
        @var = var
        @var = var
        @var = var.pluralize_table_names ? (var.to_s.pluralize) : (var.to_s)
      end;Fi[	@.iI"ä    attr_accessor(:source)
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end
    ;Fi[	@1iI"û    GRAPH_NAME = "LITERAL"
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var
      @var = [];Fi[	@1iI"∫    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var
      @var = []
      @var = Hash.new { |arglist| var[var] = Set.new };Fi[	@4iI"ä    attr_accessor(:source)
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end
    ;Fi[	@7iI"€        attr_writer("LITERAL")
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var = (var or Proc.new { |arglist| true })
        end;Fi[	@@i#I"†    attr_reader(:transfers)
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var;Fi[	@@i$I"±    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var.fetch("LITERAL", "LITERAL");Fi[	@@i%I"œ    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var
      @var = var.fetch("LITERAL", "LITERAL")
      @var = var.delete("LITERAL");Fi[	@Ci$I"         end
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var["STRING"] ||= Sass::Script::Bool.new(true)
          @var["STRING"] ||= Sass::Script::String.new("STRING");Fi[	@Ii)I"–        include(::Rake::DSL) if defined? ::Rake::DSL
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var = var
        end;Fi[	@Ii*I"§        
        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var = var
        end
        ;Fi[	@Oi&I"4  end
  
  def function(arglist)
    @var = var
    @var = var
    @var = var
    @var = var
    var = { "LITERAL" => (var), "LITERAL" => (AppConfig.mail.sender_address), "LITERAL" => (I18n.t("STRING", "LITERAL" => (@var.name))), "LITERAL" => (AppConfig.pod_uri.host) }
    I18n.with_locale(var) do |arglist|;Fi[	@WiI"    # dir  - The String path between the source and the file.
    # name - The String filename of the file.
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      self.process(var)
      self.read_yaml(File.join(var, var), var);Fi[	@ZiI"‘    # dir  - The String path between <source> and the file.
    # name - The String filename of the file.
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end
    ;Fi[	@ciI"¸      # The string name of the queue from which the failed job was pulled
      # The payload object associated with the failed job
      def function(arglist)
        @var = var
        @var = var
        @var = var
        @var = var
      end
      ;Fi[	@fiI"    # @param method_options [Hash]
    # @return [Twitter::Cursor]
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
      @var = Array(var[var.to_sym]).map do |arglist|
        var ? (var.fetch_or_new(var)) : (var);Fi[I"#   person.pets;TI"#   # => [;T@@ﬁi[[	@‰i)I"(      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰ibI"(      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i{I"(      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰iôI"(      #     has_many :pets
      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰iI"<      #   person.pets.size # => 3
      #
      #   person.id # => 1
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i=I"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i^I"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰iwI"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰iîI"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i¥I"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i–I"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰iÏI"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰iI"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i$I"/      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i|I"0      #   end
      #
      #   person.pets.count # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i∞I"q      #
      #   # Because the collection is loaded, you can
      #   # call the collection with no additional queries:
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[@+@,I"	else;FI"# do nothing;Fi[[	@8iEI"ﬂ              case var
              when "LITERAL" then
                "STRING"
              when "LITERAL" then
                "STRING"
              else
                # do nothing
              end
            else;Fi[	@Ji5I"ø          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        var = ("STRING" % var);Fi[	@Oi3I"ø          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        var = ("STRING" % var);Fi[	@Ti=I"ø          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        var = ("STRING" % var);Fi[	@Yi1I"ø          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        var = ("STRING" % var);Fi[	@^iI"»          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        raise(RubyVersionMismatch, var);Fi[	@ciEI"ò        "STRING"
      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else
        # do nothing
      end
    end;Fi[	@hiII"∫          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end
        end;Fi[	@iáI"Õ              var = Capistrano::CLI.password_prompt
            end
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end
        end;Fi[	@∑iGI"ƒ              raise(("STRING" + "STRING"))
            end
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end
        end;Fi[	@kiRI"÷            "STRING"
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end
        end;Fi[	I"&data//homebrew_proj/cmd/update.rb;TièI"∑      case var
      when "LITERAL" then
        File.basename(var, "STRING")
      when "LITERAL" then
        "STRING"
      else
        # do nothing
      end
    end.compact.sort;Fi[	@™i?I"Ü      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end
  end;Fi[	@ªi^I"€      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end, var.bottle.checksum.hexdigest)
    assert_match("LITERAL", var.stable.checksum.hexdigest);Fi[	@ªiıI"¶      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end, var.bottle.checksum.hexdigest)
  end;Fi[@Ë@©@ßI"end;Fi[[	@8iFI"‹              when "LITERAL" then
                "STRING"
              when "LITERAL" then
                "STRING"
              else
                # do nothing
              end
            else
              super;Fi[	@Ji6I"∆        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        var = ("STRING" % var)
        send_message(var);Fi[	@Oi4I"∆        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        var = ("STRING" % var)
        send_message(var);Fi[	@Ti>I"∆        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        var = ("STRING" % var)
        send_message(var);Fi[	@Yi2I"∆        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        var = ("STRING" % var)
        send_message(var);Fi[	@^i	I"ø        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          # do nothing
        end
        raise(RubyVersionMismatch, var)
      end;Fi[	@ciFI"ç      when "LITERAL" then
        "STRING"
      when "LITERAL" then
        "STRING"
      else
        # do nothing
      end
    end
  end;Fi[	@hiJI"∞          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end
        end
        ;Fi[	@iàI"¢            end
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end
        end
        ;Fi[	@∑iHI"¢            end
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end
        end
        ;Fi[	@kiSI"           when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            "STRING"
          else
            # do nothing
          end
        end
        ;Fi[	@”i«I"ÿ      when "STRING" then
        "STRING"
      when "STRING" then
        "STRING"
      else
        # do nothing
      end
      var, ENV[var] = ENV[var], (var == "STRING") ? (nil) : (var) if var
      if var then;Fi[	@¿iêI"Æ      when "LITERAL" then
        File.basename(var, "STRING")
      when "LITERAL" then
        "STRING"
      else
        # do nothing
      end
    end.compact.sort
  end;Fi[	@™i@I"{    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    else
      # do nothing
    end
  end
end;Fi[@Ë@ÕI""STRING";FI"when "STRING" then;Fi[[	@÷iI"        if var.is_a?(Sass::Script::String) then
          var = case var.value
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@÷iI"‰          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@÷iI"÷          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          else;Fi[	@÷iEI"Ì      var = var.value.split("LITERAL").map do |arglist|
        case var
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then;Fi[	@÷iGI"“        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then;Fi[	@÷iII"ƒ        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        else;Fi[	@∆i¯I"            else
              case @var.value["LITERAL"]
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then;Fi[	@∆i˙I"              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then;Fi[	@∆i¸I"˙              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              else;Fi[	@…ifI"¯          when "STRING", "STRING" then
            "STRING"
          when "STRING", "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@…ihI"Ó          when "STRING", "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@…ijI"‰          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@…ilI"‰          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then;Fi[	@…inI"÷          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          else;Fi[@ö@õ@úI"end;Fi[[	@†iI"  ActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
    create_table("LITERAL") do |arglist|
      var.column("LITERAL", "LITERAL")
      var.column("LITERAL", "LITERAL")
      var.column("LITERAL", "LITERAL")
      var.column("LITERAL", "LITERAL")
    end
  end
end;Fi[	@£i
I"\    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@£iI"\    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@£i)I"T  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@£i5I"<  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@£i<I"˛  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
end;Fi[	@Æi	I"[  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@ÆiI"D    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@ÆiI"<  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@Æi!I"[  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@Æi'I"ﬂ  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
end;Fi[	@¡i	I"[  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL");Fi[	@¡iI"Á    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
end;Fi[I"empty_directory("STRING");FI"empty_directory("STRING");FI"empty_directory("STRING");FI"empty_directory("STRING");Fi[[	I"Mdata//redmine_proj/generators/redmine_plugin/redmine_plugin_generator.rb;TiI"‘  end
  
  def function(arglist)
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"Ï  
  def function(arglist)
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"  def function(arglist)
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    template("STRING", "STRING");Fi[	@+iI"    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    empty_directory("STRING")
    template("STRING", "STRING")
    template("STRING", "STRING");Fi[@V@W@XI"end;Fi[[	@#ieI"º      attr_reader(:object, :name, :values, :column)
      
      def function(arglist)
        @var = var
        @var = var
        @var = var
      end
      
      def function(arglist);Fi[	@JibI"        # Instantiates a new Campfire::Room object and sets all the
        # necessary arguments (@room_id, @subdomain, @api_token)
        def function(arglist)
          @var = var
          @var = var
          @var = var
        end
        
        ##;Fi[	@.iI"â    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end
    
    attr_reader :function;Fi[	@4iI"≥    
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end
    
    # Needed before installs, since the arch matters then and quick;Fi[	@=i=I"„          attr_reader(:configuration, :condition, :server)
          
          def function(arglist)
            @var = var
            @var = var
            @var = var
          end
          
          def function(arglist);Fi[	@ziBI"“        var = ensure_array_of_array(rubify(var))
        var = var.transpose
        create_cell_matrix(var)
        @var = var
        @var = var
        @var = var
      end
      
      def function(arglist);Fi[	@Ii+I"π        def function(arglist)
          @var = var
          @var = var
          @var = var
          @var = var
          @var = var
        end
        
        def function(arglist);Fi[	@LiI"¨      attr_reader(:tag_expressions)
      
      def function(arglist)
        @var = var
        @var = var
        @var = var
      end
      
      def function(arglist);Fi[	@™iôI"¥  
  # The user can chose to force installation even in the face of conflicts.
  def function(arglist)
    @var = var
    @var = var
    @var = var
  end
  
  def function(arglist);Fi[	@ZiI"∏    # name - The String filename of the file.
    def function(arglist)
      @var = var
      @var = var
      @var = var
      @var = var
    end
    
    # Returns source file path.;Fi[	@]iI"Æ        attr_reader(:exception, :attribute)
        
        def function(arglist)
          @var = var
          @var = var
          @var = var
        end
      end
      ;Fi[	@`i
I"®    attr_accessor(:file, :options, :attachment)
    
    def function(arglist)
      @var = var
      @var = var
      @var = var
    end
    
    def function(arglist);Fi[	@ciI"˛      # The payload object associated with the failed job
      def function(arglist)
        @var = var
        @var = var
        @var = var
        @var = var
      end
      
      # When a job fails, a new instance of your Failure backend is created;Fi[@I"var = "LITERAL";FI"var;FI"end;Fi[[	I"/data//nokogiri_proj/nokogiri/css/parser.rb;Ti>I"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiCI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiHI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiMI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiRI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiWI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiPI"ó      end
      
      # reduce 62 omitted
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiUI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiZI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hi_I"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hidI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hiiI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[	@hinI"â        var
      end
      
      def function(arglist)
        var = "LITERAL"
        var
      end
      
      def function(arglist);Fi[I"var = var["LITERAL"];FI"var = var["LITERAL"];FI"var = var["LITERAL"];FI"var = var["LITERAL"];Fi[[	I"9data//cucumber_prok/cucumber/ast/scenario_outline.rb;Ti(I"!        attach_steps(@var)
        @var = StepCollection.new(@var)
        @var = @var.map do |arglist|
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"];Fi[	@âi)I"%        @var = StepCollection.new(@var)
        @var = @var.map do |arglist|
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"];Fi[	@âi*I"        @var = @var.map do |arglist|
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"];Fi[	@âi+I"#          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = OutlineTable.new(var, self);Fi[	@âi,I"?          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = var["LITERAL"]
          var = OutlineTable.new(var, self)
          var = Examples.new(var, var, var, var, var, var);Fi[	@∆iÜI"         var = {}
        var = false
      else
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
      end;Fi[	@∆iáI"Ù        var = false
      else
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
      end
      if (var == "STRING") and (var.empty? and var.!) then;Fi[	I"1data//jekyll_proj/jekyll/migrators/drupal.rb;TiI"D      FileUtils.mkdir_p("STRING")
      File.open("STRING", "STRING") { |arglist| var.puts("STRING") }
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = Time.at(var)
        var = (var["LITERAL"] == "LITERAL");Fi[	I"1data//jekyll_proj/jekyll/migrators/joomla.rb;TiI"Ø      FileUtils.mkdir_p("STRING")
      var = "STRING"
      var[var].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ("STRING" % [var.year, var.month, var.day, var])
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |arglist|;Fi[	I"3data//jekyll_proj/jekyll/migrators/mephisto.rb;TiI"Î      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ([var.year, var.month, var.day, var].join("STRING") + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]) }.delete_if do |arglist|;Fi[	I"-data//jekyll_proj/jekyll/migrators/mt.rb;TiI"É      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"].gsub("LITERAL", "STRING")
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ((var + "STRING") + var) if var.!=(nil)
        var = (([var.year, var.month, var.day, var].join("STRING") + "STRING") + self.suffix(var));Fi[	I"6data//jekyll_proj/jekyll/migrators/textpattern.rb;TiI"ı      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ([var.strftime("STRING"), var].join("STRING") + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"].split("STRING")) }.delete_if do |arglist|;Fi[I"Gassert_equal("LITERAL", (version("STRING") <=> version("STRING")));FI"Gassert_equal("LITERAL", (version("STRING") <=> version("STRING")));FI"Gassert_equal("LITERAL", (version("STRING") <=> version("STRING")));FI"Gassert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[[	I".data//homebrew_proj/test/test_versions.rb;TiI"·  include(VersionAssertions)
  
  def function(arglist)
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"  
  def function(arglist)
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"O  def function(arglist)
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"~    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"~    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"~    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"~    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"~    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"~    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"~    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")));Fi[	@≠iI"h    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_nil((version("STRING") <=> "STRING"));Fi[	@≠iI"'    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_equal("LITERAL", (version("STRING") <=> version("STRING")))
    assert_nil((version("STRING") <=> "STRING"))
  end;Fi[I"puts("STRING");FI"puts("STRING");FI"puts("STRING");FI"puts("STRING");Fi[[	I",data//backup_proj/backup/cli/utility.rb;Ti∑I"ﬂ          Backup::Dependency.all.each do |arglist|
            puts
            puts(var)
            puts("STRING")
            puts("STRING")
            puts("STRING")
            puts("STRING")
          end
        end;Fi[	@ÃiøI"%        end
        if options["LITERAL"] then
          puts
          puts("STRING")
          puts("STRING")
          puts("STRING")
          puts("STRING")
          puts(`gem install #{options["LITERAL"]}STRING#{Backup::Dependency.all[options["LITERAL"]]["LITERAL"]}STRING`)
        end;Fi[	I"(data//homebrew_proj/cmd/--config.rb;TiÑI"í  end
  
  def function(arglist)
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts(hardware);Fi[	@—iÖI"ü  
  def function(arglist)
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts(hardware)
    puts("STRING");Fi[	@—iíI"±    puts("STRING")
    puts("STRING")
    puts("STRING") if macports_or_fink
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
  end;Fi[	@—iìI"°    puts("STRING")
    puts("STRING") if macports_or_fink
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
  end
  ;Fi[	I"#data//homebrew_proj/cmd/irb.rb;TiI"∞  
  def function(arglist)
    if ARGV.include?("STRING") then
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
    else
      ohai("STRING");Fi[	I"#data//homebrew_proj/cmd/tap.rb;Ti#I"Ÿ    var = link_tap_formula(var)
    puts("STRING")
    curl("STRING", "STRING", "STRING") rescue puts
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts
      puts("STRING");Fi[	I"-data//homebrew_proj/formula_installer.rb;TiÒI"ÿ      (ohai("STRING") if ARGV.verbose?
      if f.class.skip_clean_all? then
        opoo("STRING")
        puts("STRING")
        puts("STRING")
        puts("STRING")
        puts("STRING")
        return
      end;Fi[	@‡i,I"Ï    var = f.lib.children.select { |arglist| var.to_s =~ "LITERAL" }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts(var);Fi[	@‡i-I"∫    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true;Fi[	I":data//jekyll_proj/jekyll/migrators/wordpressdotcom.rb;Ti*I"’            var.puts(var.at("STRING").inner_text)
          end)
        rescue => var
          puts("STRING")
          puts("STRING")
          puts("STRING")
          puts("STRING")
          next
        end;Fi[@Õ@ŒI"newobj;FI"out("STRING");Fi[[	@”iBI"    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]));Fi[	@‡iKI"    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]));Fi[	@‡iXI"—      var = (var + (var["STRING"][var].to_s + "STRING"))
    end
    out((var + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING");Fi[	@Ìi1I"    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]));Fi[	@äiI"ä    newobj
    out("STRING")
    putinfo
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    putcatalog
    out("STRING");Fi[	@liíI"    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]));Fi[	@liüI"—      var = (var + (var["STRING"][var].to_s + "STRING"))
    end
    out((var + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING");Fi[	@liM	I"ä    newobj
    out("STRING")
    putinfo
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    putcatalog
    out("STRING");Fi[	@li[
I"    out("STRING")
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out((("STRING" + var["STRING"]) + "STRING"));Fi[	@lil
I"Œ    end
    out((("STRING" + var) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liÖ
I"ö    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liã
I"æ    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    var["STRING"].each do |arglist|;Fi[I"@var["STRING"] = "STRING";FI"@var["STRING"] = "STRING";FI"@var["STRING"] = "STRING";FI"@var["STRING"] = "STRING";Fi[[	I"<data//redmine_proj/plugins/rfpdf/lib/config/lang/eng.rb;TiI"v@var = []
@var["STRING"] = "STRING"
@var["STRING"] = "STRING"
@var["STRING"] = "STRING"
@var["STRING"] = "STRING";Fi[	@äi*I"‰    @var = "LITERAL"
    @var = []
    @var = {}
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi+I"Ì    @var = []
    @var = {}
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi,I"˝    @var = {}
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi-I"    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi.I"    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi/I"    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi0I"    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi1I"    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi2I"    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING";Fi[	@äi3I"    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    if (var == "STRING") then;Fi[	@äi4I"    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    @var["STRING"] = "STRING"
    if (var == "STRING") then
      @var = "LITERAL";Fi[@@I"	self;FI"end;Fi[[	I"Hdata//capistrano_proj/capistrano/recipes/deploy/local_dependency.rb;TiI"Ü        self
      end
      
      def function(arglist)
        @var = var
        self
      end
      
      attr_reader :function;Fi[	I"Idata//capistrano_proj/capistrano/recipes/deploy/remote_dependency.rb;TiTI"Ü        self
      end
      
      def function(arglist)
        @var = var
        self
      end
      
      attr_reader :function;Fi[	I"Pdata//paperclip_proj/paperclip/matchers/validate_attachment_size_matcher.rb;TiI"û          @var = var
        end
        
        def function(arglist)
          @var = var
          self
        end
        
        def function(arglist);Fi[	@/i I"ò          self
        end
        
        def function(arglist)
          @var = var
          self
        end
        
        def function(arglist);Fi[	I"3data//rspec_proj/spec/example/example_proxy.rb;Ti I"‚      
      # Convenience method for example group - updates the value of
      # <tt>description</tt> and returns self.
      def function(arglist)
        @var = var
        self
      end
      
      def function(arglist);Fi[	I"-data//rspec_proj/spec/matchers/change.rb;Ti7I"ä        "STRING"
      end
      
      def function(arglist)
        @var = var
        self
      end
      
      def function(arglist);Fi[	@7i<I"Ü        self
      end
      
      def function(arglist)
        @var = var
        self
      end
      
      def function(arglist);Fi[	@7iAI"Ü        self
      end
      
      def function(arglist)
        @var = var
        self
      end
      
      def function(arglist);Fi[	@7iFI"Ü        self
      end
      
      def function(arglist)
        @var = var
        self
      end
      
      def function(arglist);Fi[	@7iKI"Ü        self
      end
      
      def function(arglist)
        @var = var
        self
      end
      
      def function(arglist);Fi[	I"1data//rspec_proj/spec/matchers/respond_to.rb;Ti"I"ä        "STRING"
      end
      
      def function(arglist)
        @var = var
        self
      end
      
      def function(arglist);Fi[I"@var = nil;FI"@var = nil;FI"@var = nil;FI"@var = nil;Fi[[	I":data//activerecord_proj/active_record/model_schema.rb;TiI"        connection.clear_cache!
        undefine_attribute_methods
        connection.schema_cache.clear_table_cache!(table_name) if table_exists?
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil;Fi[	@KiI"˜        undefine_attribute_methods
        connection.schema_cache.clear_table_cache!(table_name) if table_exists?
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil;Fi[	@KiI"Á        connection.schema_cache.clear_table_cache!(table_name) if table_exists?
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil;Fi[	@KiI"»        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil unless defined? @var and @var;Fi[	@KiI"»        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil unless defined? @var and @var
        @var = nil;Fi[	I".data//backup_proj/backup/encryptor/gpg.rb;TioI"—      def function(arglist)
        FileUtils.rm_rf(@var, "LITERAL" => (true)) if @var
        @var = []
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
      end;Fi[	@VipI"º        FileUtils.rm_rf(@var, "LITERAL" => (true)) if @var
        @var = []
        @var = nil
        @var = nil
        @var = nil
        @var = nil
        @var = nil
      end
      ;Fi[	I"=data//bundler_proj/bundler/vendor/net/http/persistent.rb;TiÌI"    @var = [var, "STRING"].join("STRING").intern
    @var = [var, "STRING"].join("STRING").intern
    @var = [var, "STRING"].join("STRING").intern
    @var = nil
    @var = nil
    @var = nil
    @var = nil
    @var = nil
    @var = OpenSSL::SSL::VERIFY_PEER;Fi[	@[iÓI"‡    @var = [var, "STRING"].join("STRING").intern
    @var = [var, "STRING"].join("STRING").intern
    @var = nil
    @var = nil
    @var = nil
    @var = nil
    @var = nil
    @var = OpenSSL::SSL::VERIFY_PEER
    @var = nil;Fi[	@Ci*I"          @var = var
          @var["STRING"] ||= Sass::Script::Bool.new(true)
          @var["STRING"] ||= Sass::Script::String.new("STRING")
          @var = nil
          @var = nil
          @var = nil
          @var = nil
          @var = var
          validate!;Fi[	I"*data//homebrew_proj/test/test_ARGV.rb;TiI"Ωrequire("testing_env")
module ExtendArgvPlusYeast
  def function(arglist)
    @var = nil
    @var = nil
    @var = nil
    @var = nil
    while (ARGV.length > "LITERAL") do
      ARGV.shift;Fi[@˚I"	else;FI""LITERAL";FI"end;Fi[[	@ÆivI"      def function(arglist)
        if var.acts_like?("LITERAL") then
          var = if (ActiveRecord::Base.default_timezone == "LITERAL") then
            "LITERAL"
          else
            "LITERAL"
          end
          var = var.send(var) if var.respond_to?(var)
        end;Fi[	I"6data//bundler_proj/bundler/vendor/thor/actions.rb;TiLI"“        _cleanup_options_and_set(var, var["LITERAL"])
        "LITERAL"
      when "STRING" then
        "LITERAL"
      else
        "LITERAL"
      end
      super
      self.destination_root = var["LITERAL"];Fi[	I";data//cucumber_prok/cucumber/core_ext/instance_exec.rb;TiOI"Ø  end
  
  INSTANCE_EXEC_OFFSET = if (Cucumber::RUBY_1_9 or (Cucumber::RUBY_1_8_7 or Cucumber::JRUBY)) then
    "LITERAL"
  else
    "LITERAL"
  end
  
  def function(arglist);Fi[	I"#data//homebrew_proj/cleaner.rb;Ti&I"‹  # Set permissions for executables and non-executables
  def function(arglist)
    var = if (var.mach_o_executable? or var.text_executable?) then
      "LITERAL"
    else
      "LITERAL"
    end
    var.chmod(var)
  end;Fi[	@ÅiI"~    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end
  end
  ;Fi[	@Åi"I"~    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end
  end
  ;Fi[	@
i{I"º        when *var then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        else
          "LITERAL"
        end
      end
      link_dir("STRING", var) do |arglist|;Fi[	@
iíI"≥        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        else
          "LITERAL"
        end
      end
      unless var.dry_run then;Fi[	I" data//homebrew_proj/mach.rb;Ti.I"      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      else
        "LITERAL"
      end
      var = case read("LITERAL", (var + "LITERAL")).unpack("STRING")["LITERAL"]
      when "LITERAL", "LITERAL" then;Fi[	@}i8I"÷      when "LITERAL", "LITERAL" then
        "LITERAL"
      when "LITERAL", "LITERAL" then
        "LITERAL"
      else
        "LITERAL"
      end
      (var << { "LITERAL" => (var), "LITERAL" => (var) })
    end;Fi[@l@m@nI"while (var < var) do;Fi[[	@”irI"„    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL");Fi[	@”i∂I"    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL");Fi[	@‡igI"’    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = var;Fi[	@‡i±I"‚    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = var;Fi[	@ÌiaI"„    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL");Fi[	@Ìi•I"    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL");Fi[	@äiRI"–    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then;Fi[	@äiúI"—    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then;Fi[	@liMI"–    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then;Fi[	@li∂I"ƒ    end
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then;Fi[@lI"var = var;FI"var = "LITERAL";FI"if (var == "LITERAL") then;Fi[[	@”iøI"=      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@”i›I"P          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@‡i∫I":      if (var == "LITERAL") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@‡iÂI"P          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@ÌiÆI"=      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@ÌiÃI"P          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@äi§I"O      if (var == "STRING"["LITERAL"]) then
        self.Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", "LITERAL", var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@äi≈I"4          self.Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", "LITERAL", var)
          var = (var + "LITERAL")
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@liæI"D      if (var == "STRING"["LITERAL"]) then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[	@li‹I")          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var + "LITERAL")
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var);Fi[@l@õI"@var = @var;FI"!var = ((@var - @var) - @var);Fi[[	@”i¡I"        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end;Fi[	@”iﬂI"˚        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end;Fi[	@‡iºI"        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end;Fi[	@‡iÁI"˚        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end;Fi[	@Ìi∞I"        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end;Fi[	@ÌiŒI"˚        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end;Fi[	@äi¶I"        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end;Fi[	@äi«I"˚        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end;Fi[	@li¿I"¯        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (var - ("LITERAL" * @var))
        end;Fi[	@liﬁI"‰        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (var - ("LITERAL" * @var))
        end;Fi[I"var = (var + "LITERAL");FI"var = "LITERAL";FI"var = var;FI"var = "LITERAL";Fi[[	@”izI";      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL");Fi[	@”iæI"4      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var;Fi[	@‡ioI"*      var = var
      if (var == "LITERAL") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL");Fi[	@‡iπI"#      var = var
      if (var == "LITERAL") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var;Fi[	@ÌiiI";      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL");Fi[	@Ìi≠I"4      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var;Fi[	@äi^I"1        end
        var = (var == "LITERAL") ? ("LITERAL") : ((var - "LITERAL"))
        self.Cell(var, var, var[(var..var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL");Fi[	@äi£I"=      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        self.Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", "LITERAL", var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var;Fi[	@liZI"W        var = (var == "LITERAL") ? ("LITERAL") : ((var - "LITERAL"))
        var = (var == "LITERAL") ? ("LITERAL") : (var)
        Cell(var, var, var[(var..var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL");Fi[	@liΩI"2      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var;Fi[I"var = var;FI"var = "LITERAL";F@õI"@var = @var;Fi[[	@”i¿I"[        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@”iﬁI"8          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@‡iªI"[        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@‡iÊI"8          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@ÌiØI"[        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@ÌiÕI"8          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@äi•I"f        self.Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", "LITERAL", var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@äi∆I"          var = (var + "LITERAL")
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@liøI"D        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (var - ("LITERAL" * @var));Fi[	@li›I"˙          var = (var + "LITERAL")
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (var - ("LITERAL" * @var));Fi[I"# @since 2.1.0;FI"def function(arglist);FI"self["LITERAL"];FI"end;Fi[[	I"9data//mongoid_proj/lib/mongoid/relations/metadata.rb;TiI"√      #
      # @return [ true, false ] The as option.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Tells whether an as option exists.;Fi[	@	i6I"–      #
      # @return [ true, false ] The autosave option.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Does the metadata have a autosave option?;Fi[	@	iõI"Ã      #
      # @return [ true, false ] The cyclic option.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Does the metadata have a cyclic option?;Fi[	@	i≥I"Õ      #
      # @return [ Symbol ] The dependent option.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Does the metadata have a dependent option?;Fi[	@	i7I"›      #
      # @return [ true, false ] The index option.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Tells whether a foreign key index exists on the relation.;Fi[	@	iáI"Â      #
      # @return [ true, false ] The inverse_class_name option.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Returns the if the inverse class name option exists.;Fi[	@	i‘I"‘      #
      # @return [ true, false ] The inverse_of option.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Does the metadata have a inverse_of option?;Fi[	@	i_I"´      #
      # @return [ Symbol ] The name.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Is the name defined?;Fi[	@	iÆI"’      #
      # @return [ Proxy ] The relation proxy class.
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Gets the method name used to set this relation.;Fi[	@	iI"«      #
      # @return [ Criterion::Complex, nil] nil if doesn't set
      #
      # @since 2.1.0
      def function(arglist)
        self["LITERAL"]
      end
      
      # Is a default order set?;Fi[I">create_table("LITERAL", "LITERAL" => (true)) do |arglist|;FI"%var.column("LITERAL", "LITERAL");FI"%var.column("LITERAL", "LITERAL");FI"%var.column("LITERAL", "LITERAL");Fi[[	@£i3I"%    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@£i9I"D    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@ÆiI"5ActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@ÆiI"[  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@ÆiI"%    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@ÆiI"D    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@Æi%I"%    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@¡iI"5ActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@¡iI"[  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[I"0assert_version_detected("STRING", "STRING");FI"0assert_version_detected("STRING", "STRING");FI"0assert_version_detected("STRING", "STRING");FI"0assert_version_detected("STRING", "STRING");Fi[[	@≠i˝I"≤  #   assert_version_detected '7.0.4', 'http://www.haskell.org/ghc/dist/7.0.4/ghc-7.0.4-i386-apple-darwin.tar.bz2'
  # end
  def function(arglist)
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@≠i˛I"o  # end
  def function(arglist)
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@≠iˇI"ó  def function(arglist)
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@≠i I"Ø    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@≠iI"Ø    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@≠iI"Ø    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@≠iI"Ø    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING");Fi[	@≠iI"Ö    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
  end;Fi[	@≠iI"Y    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
    assert_version_detected("STRING", "STRING")
  end
end;Fi[I" #   person.pets.size # => 3;TI"#   person.pets;TI"#   # => [;TI"A#   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,;Ti[[	@‰i<I"a      #     has_many :pets # dependent: :nullify option by default
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰i]I"N      #     has_many :pets, dependent: :destroy
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰ivI"Q      #     has_many :pets, dependent: :delete_all
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰iìI"9      #     has_many :pets
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰i≥I"a      #     has_many :pets # dependent: :nullify option by default
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰iœI"N      #     has_many :pets, dependent: :destroy
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰iÎI"Q      #     has_many :pets, dependent: :delete_all
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰iI"9      #     has_many :pets
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[	@‰i#I"9      #     has_many :pets
      #   end
      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[@I"#var = Node.new("LITERAL", var);FI"var;FI"end;Fi[[	@hijI"ñ        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      # reduce 13 omitted;Fi[	@hipI"¶      end
      
      # reduce 13 omitted
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      def function(arglist);Fi[	@hiuI"ò        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      def function(arglist);Fi[	@hiêI"¶      end
      
      # reduce 22 omitted
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      def function(arglist);Fi[	@hi(I"∂      
      # reduce 49 omitted
      # reduce 50 omitted
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      def function(arglist);Fi[	@hi-I"ò        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      def function(arglist);Fi[	@hi2I"ò        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      def function(arglist);Fi[	@hi7I"ñ        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      # reduce 55 omitted;Fi[	@hi@I"…      # reduce 56 omitted
      # reduce 57 omitted
      # reduce 58 omitted
      def function(arglist)
        var = Node.new("LITERAL", var)
        var
      end
      
      def function(arglist);Fi[I"#       event :ignite do;FI",#         transition :parked => :idling;FI"#       end;FI"#     end;Fi[[	@ØiI"ƒ    #         transition :idling => :parked
    #       end
    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	@ØiDI"ƒ    #         transition :idling => :parked
    #       end
    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	@ØidI"‹    # 
    #   class Vehicle < ActiveRecord::Base
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	@æiI"¸        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   ;Fi[	@æiYI"¸        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   ;Fi[	@æi}I"¸        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   ;Fi[	@≈iéI"    #     property :id, Serial
    #     
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #     
    #     state_machine :alarm_state, :initial => :active do;Fi[	@ŸiÂI"≥    # 
    #   class Vehicle
    #     state_machine do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[	@Ÿi˛I"«    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   ;Fi[I"var = "LITERAL".match(var);FI".return var.captures.first unless var.nil?;FI"var = "LITERAL".match(var);FI".return var.captures.first unless var.nil?;Fi[[	@i{I"z    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first.gsub("STRING", "STRING") unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@i}I"z    return var.captures.first.gsub("STRING", "STRING") unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@iI"a    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@i|I"a    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@i~I"a    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@iÄI"a    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@iÇI"a    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@iÑI"a    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?;Fi[	@iÜI"f    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[I"##;FI"3# Creates a new instance of the storage object;FI"def function(arglist);FI"super(var, var);Fi[[	I"3data//backup_proj/backup/storage/cloudfiles.rb;TiI"(      # (LAN-based transfers to avoid charges and improve performance)
      ##
      # Rackspace Cloud Files container name and path
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= false
        @var ||= "STRING";Fi[	I"0data//backup_proj/backup/storage/dropbox.rb;TiI"      #   :dropbox (full access)
      ##
      # Path to where the backups will be stored
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "STRING"
        @var ||= "LITERAL";Fi[	I",data//backup_proj/backup/storage/ftp.rb;TiI"Í      # Path to store backups to
      ##
      # use passive mode?
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING";Fi[	I".data//backup_proj/backup/storage/local.rb;TiI"/      
      ##
      # Path where the backup will be stored.
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= File.join(File.expand_path((ENV["STRING"] or "STRING")), "STRING")
        instance_eval(&var) if block_given?;Fi[	I"1data//backup_proj/backup/storage/ninefold.rb;TiI"˝      # Ninefold Credentials
      ##
      # Ninefold directory path
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[	I".data//backup_proj/backup/storage/rsync.rb;TiI"Ú      # Path to store backups to
      ##
      # Flag to use local backups
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING";Fi[	I"+data//backup_proj/backup/storage/s3.rb;TiI"      # Amazon S3 bucket name and path
      ##
      # Region of the specified S3 bucket
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[	I",data//backup_proj/backup/storage/scp.rb;TiI"˜      # Server IP Address and SCP port
      ##
      # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING";Fi[	I"-data//backup_proj/backup/storage/sftp.rb;TiI"¯      # Server IP Address and SFTP port
      ##
      # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING";Fi[I"
begin;FI"((Threaded.begin_execution("STRING");FI"yield);FI"ensure;Fi[[	I":data//mongoid_proj/lib/mongoid/relations/accessors.rb;TièI"Ã      #
      # @since 3.0.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end;Fi[	I".data//mongoid_proj/lib/mongoid/scoping.rb;Ti≈I"Ã      #
      # @since 3.0.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end;Fi[	I"9data//mongoid_proj/lib/mongoid/threaded/lifecycle.rb;TiI"Ã      #
      # @since 2.2.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end;Fi[	@‘	i8I"Ã      #
      # @since 2.1.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end;Fi[	@‘	iWI"Ã      #
      # @since 2.1.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end;Fi[	@‘	i}I"Ã      #
      # @since 2.3.2
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end;Fi[	@‘	iúI"Ã      #
      # @since 2.3.4
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end;Fi[	@‘	i∞I"ﬁ        #
        # @since 2.1.0
        def function(arglist)
          begin
            (Threaded.begin_execution("STRING")
            yield)
          ensure
            Threaded.exit_execution("STRING")
          end;Fi[	I"<data//mongoid_proj/lib/mongoid/validations/queryable.rb;TiI"      #
      # @since 3.0.2
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          (klass.clear_persistence_options unless var.errors.empty?
          Threaded.exit_execution("STRING"));Fi[I"# @rate_limited Yes;FI",# @authentication Requires user context;FI"g# @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;FI"&# @return [Array<Twitter::Tweet>];Fi[[	I",data//twitter_proj/twitter/api/lists.rb;Ti/I"      # Show tweet timeline for members of the specified list
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/statuses
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @overload list_timeline(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.;Fi[	I"0data//twitter_proj/twitter/api/timelines.rb;TiI",      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/mentions_timeline
      # @note This method can only return up to 800 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@Ì	i*I"ˇ      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @overload user_timeline(user, options={})
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@Ì	iBI"      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.;Fi[	@Ì	iZI"*      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@Ì	ioI"<      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@Ì	iÅI"<      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[	@Ì	iñI"K      # Returns the 20 most recent tweets of the authenticated user that have been retweeted by others
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets_of_me
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	I"-data//twitter_proj/twitter/api/tweets.rb;TiI"Ì      # Returns up to 100 of the first retweets of a given tweet
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets/:id
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param id [Integer] The numerical ID of the desired Tweet.
      # @param options [Hash] A customizable set of options.;Fi[I"# @since 3.0.0;FI"def function(arglist);FI"Jquery.update_all("STRING" => ({ database_field_name(var) => (var) }));FI"end;Fi[[	I"8data//mongoid_proj/lib/mongoid/contextual/atomic.rb;TiI"       #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $bit operation on the matching documents.;Fi[	@
i"I"       #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $inc operation on the matching documents.;Fi[	@
i1I"       #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $pop operation on the matching documents.;Fi[	@
iEI"      #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $pull operation on the matching documents.;Fi[	@
iVI"      #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $pullAll operation on the matching documents.;Fi[	@
ieI"      #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $push operation on the matching documents.;Fi[	@
itI"      #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $pushAll operation on the matching documents.;Fi[	@
i~I"      #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $rename of fields on the matching documents.;Fi[	@
iúI"      #
      # @return [ nil ] Nil.
      #
      # @since 3.0.0
      def function(arglist)
        query.update_all("STRING" => ({ database_field_name(var) => (var) }))
      end
      
      # Perform an atomic $unset of a field on the matching documents.;Fi[@˚@¸@˝I"	else;Fi[[	@1i:I"’          when "LITERAL", "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          else
            super
          end;Fi[	@1iII"‹            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL"
            else
              super
            end;Fi[	@ÍiíI"≠      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      else
        # do nothing
      end;Fi[	@ÔiØI"     when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      case extname
      when "STRING", "STRING", "STRING", "STRING" then;Fi[	@Åi
I"∏    @@cpu_type ||= `/usr/sbin/sysctl -n hw.cputype`.to_i
    case @@var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end;Fi[	@Åi I"ò    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end;Fi[	@
iyI"∫        when LOCALEDIR_RX then
          "LITERAL"
        when *var then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        else
          "LITERAL"
        end;Fi[	@i∞I"ô    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      var.to_s
    end));Fi[	@i6I"∑        when Numeric then
          var
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        else
          # do nothing
        end;Fi[@‰	@Â	@Ê	I" # @return [Twitter::Cursor];Fi[[	I"<data//twitter_proj/twitter/api/friends_and_followers.rb;TiI"ƒ      include(Twitter::API::Utils)
      
      # @see https://dev.twitter.com/docs/api/1.1/get/friends/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following;Fi[	@0
i*I"¨      end
      
      # @see https://dev.twitter.com/docs/api/1.1/get/followers/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload follower_ids(options={})
      #   Returns an array of numeric IDs for every user following the authenticated user;Fi[	@0
i[I"ß      # Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/incoming
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@0
ijI"≥      # Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/outgoing
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :cursor (-1) Breaks the results into pages. Provide values as returned in the response objects's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@0
i¸I"      # Returns a cursored collection of user objects for users following the specified user.
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/followers/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following;Fi[	@0
iI"2      # Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following;Fi[	@Í	iqI"«      # List the lists the specified user has been added to
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/memberships
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload memberships(options={})
      #   @param options [Hash] A customizable set of options.;Fi[	@Í	i,I"‹      # Returns the members of the specified list
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/members
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload list_members(list, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.;Fi[	@Í	iÀI"¡      # List the lists the specified user follows
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/lists/subscriptions
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload subscriptions(options={})
      #   @param options [Hash] A customizable set of options.;Fi[@I"
begin;F@…	I"yield);Fi[[	@Œ	iéI"Ù      # @return [ Object ] The result of the yield.
      #
      # @since 3.0.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING");Fi[	@—	iƒI"Ù      # @return [ Object ] The result of the block.
      #
      # @since 3.0.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING");Fi[	@‘	iI"Ó      # @return [ Object ] The yielded value.
      #
      # @since 2.2.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING");Fi[	@‘	i7I"˙      # @return [ Object ] The return value of the block.
      #
      # @since 2.1.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING");Fi[	@‘	iVI"˙      # @return [ Object ] The return value of the block.
      #
      # @since 2.1.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING");Fi[	@‘	i|I"˙      # @return [ Object ] The return value of the block.
      #
      # @since 2.3.2
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING");Fi[	@‘	iõI"˙      # @return [ Object ] The return value of the block.
      #
      # @since 2.3.4
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING");Fi[	@‘	iØI"        # @return [ Object ] The return value of the block.
        #
        # @since 2.1.0
        def function(arglist)
          begin
            (Threaded.begin_execution("STRING")
            yield)
          ensure
            Threaded.exit_execution("STRING");Fi[	@·	iI"      # @return [ Object ] The result of the yield.
      #
      # @since 3.0.2
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          (klass.clear_persistence_options unless var.errors.empty?;Fi[@…	I"yield);FI"ensure;FI"&Threaded.exit_execution("STRING");Fi[[	@Œ	iêI"Œ      # @since 3.0.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end;Fi[	@—	i∆I"Œ      # @since 3.0.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end;Fi[	@‘	iI"Œ      # @since 2.2.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end;Fi[	@‘	i9I"Œ      # @since 2.1.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end;Fi[	@‘	iXI"Œ      # @since 2.1.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end;Fi[	@‘	i~I"Œ      # @since 2.3.2
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end;Fi[	@‘	iùI"Œ      # @since 2.3.4
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end;Fi[	@‘	i±I"‡        # @since 2.1.0
        def function(arglist)
          begin
            (Threaded.begin_execution("STRING")
            yield)
          ensure
            Threaded.exit_execution("STRING")
          end
        end;Fi[I"#   class BlogPost;FI"%#     extend ActiveModel::Naming;FI"#   end;FI"#;Fi[[	I"2data//activemodel_proj/active_model/naming.rb;TiI"7    # Equivalent to <tt>String#==</tt>. Returns +true+ if the class name and
    # +other+ are equal, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name == 'BlogPost'  # => true
    #   BlogPost.model_name == 'Blog Post' # => false;Fi[	@t
i(I"Ë    #
    # Equivalent to <tt>#==</tt>.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name === 'BlogPost'  # => true
    #   BlogPost.model_name === 'Blog Post' # => false;Fi[	@t
i6I"Ë    #
    # Equivalent to <tt>String#<=></tt>.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name <=> 'BlogPost'  # => 0
    #   BlogPost.model_name <=> 'Blog'      # => 1;Fi[	@t
iGI"    # regexp. Returns the position where the match starts or +nil+ if there is
    # no match.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name =~ /Post/ # => 4
    #   BlogPost.model_name =~ /\d/   # => nil;Fi[	@t
iVI"I    # Equivalent to <tt>String#!~</tt>. Match the class name against the given
    # regexp. Returns +true+ if there is no match, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name !~ /Post/ # => false
    #   BlogPost.model_name !~ /\d/   # => true;Fi[	@t
ieI"V    # Equivalent to <tt>String#eql?</tt>. Returns +true+ if the class name and
    # +other+ have the same length and content, otherwise +false+.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name.eql?('BlogPost')  # => true
    #   BlogPost.model_name.eql?('Blog Post') # => false;Fi[	@t
isI"Ø    #
    # Returns the class name.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name.to_s # => "BlogPost"
    ##;Fi[	@t
iôI"    # Transform the model name into a more humane format, using I18n. By default,
    # it will underscore then humanize the class name.
    #
    #   class BlogPost
    #     extend ActiveModel::Naming
    #   end
    #
    #   BlogPost.model_name.human # => "Blog post"
    #;Fi[I"case var;F@+I""STRING";FI"when "LITERAL" then;Fi[[	@1i›I"Ó            raise(ActiveRecordError, "STRING")
          end
        when "STRING" then
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then;Fi[	@8iBI"ı            when "STRING" then
              "STRING"
            when "LITERAL" then
              case var
              when "LITERAL" then
                "STRING"
              when "LITERAL" then
                "STRING"
              else;Fi[	@;iI"-        def function(arglist)
          var = var.reverse_merge("LITERAL" => "STRING")
          var = var.symbolize_keys.sum do |arglist|
            case var
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then;Fi[	@;i@I"Á            end
          when "STRING" then
            return "STRING" unless var
            case var
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else;Fi[	@hiFI"Ê        # etc. are handled here.
        def function(arglist)
          logger.info("STRING")
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else;Fi[	@kiII"˛        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING")
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then;Fi[	@pi&I"£  
  def function(arglist)
    return var if var
    case var
    when "LITERAL" then
      "STRING"
    when "LITERAL" then
      "STRING"
    when "LITERAL" then;Fi[	@„iI"ª      private
      
      def function(arglist)
        case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[I"L# There is also a list of default options supported by every validator:;FI"-# +:if+, +:unless+, +:on+ and +:strict+.;FI"J# See <tt>ActiveModel::Validation#validates</tt> for more information;FI"def function(arglist);Fi[[	I"?data//activemodel_proj/active_model/validations/absence.rb;TiI"™      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "must be blank").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(arglist)
        validates_with(AbsenceValidator, _merge_attributes(var))
      end;Fi[	I"Bdata//activemodel_proj/active_model/validations/acceptance.rb;Ti2I"ß      #   a database column, since the attribute is typecast from "1" to +true+
      #   before validation.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(arglist)
        validates_with(AcceptanceValidator, _merge_attributes(var))
      end;Fi[	I"Ddata//activemodel_proj/active_model/validations/confirmation.rb;Ti4I"ß      # * <tt>:message</tt> - A custom error message (default is: "doesn't match
      #   confirmation").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(arglist)
        validates_with(ConfirmationValidator, _merge_attributes(var))
      end;Fi[	I"Adata//activemodel_proj/active_model/validations/exclusion.rb;Ti,I"∫      # * <tt>:allow_blank</tt> - If set to true, skips this validation if the
      #   attribute is blank(default is +false+).
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(arglist)
        validates_with(ExclusionValidator, _merge_attributes(var))
      end;Fi[	I">data//activemodel_proj/active_model/validations/format.rb;TimI"⁄      #   anchors that match the beginning or end of lines as opposed to the
      #   beginning or end of the string. These anchors are <tt>^</tt> and <tt>$</tt>.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(arglist)
        validates_with(FormatValidator, _merge_attributes(var))
      end;Fi[	I"Adata//activemodel_proj/active_model/validations/inclusion.rb;Ti+I"Ω      # * <tt>:allow_blank</tt> - If set to +true+, skips this validation if the
      #   attribute is blank (default is +false+).
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(arglist)
        validates_with(InclusionValidator, _merge_attributes(var))
      end;Fi[	I">data//activemodel_proj/active_model/validations/length.rb;TihI"∑      #   as in above example). Defaults to <tt>->(value) { value.split(//) }</tt>
      #   which counts individual characters.
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(arglist)
        validates_with(LengthValidator, _merge_attributes(var))
      end;Fi[	I"@data//activemodel_proj/active_model/validations/presence.rb;Ti!I"¨      # Configuration options:
      # * <tt>:message</tt> - A custom error message (default is: "can't be blank").
      #
      # There is also a list of default options supported by every validator:
      # +:if+, +:unless+, +:on+ and +:strict+.
      # See <tt>ActiveModel::Validation#validates</tt> for more information
      def function(arglist)
        validates_with(PresenceValidator, _merge_attributes(var))
      end;Fi[I"/#     state_machine :initial => :parked do;FI"#       event :ignite do;FI",#         transition :parked => :idling;FI"#       end;Fi[[	@ØicI"Â    # == Examples
    # 
    #   class Vehicle < ActiveRecord::Base
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end;Fi[	@∂iAI"›    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :park do;Fi[	@∂isI"›    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :park do;Fi[	@æiI"        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end;Fi[	@æiXI"        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end;Fi[	@æi|I"        #     property :id, Serial
        #     property :state, :String
        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end;Fi[	@≈içI"Ò    #     include DataMapper::Resource
    #     property :id, Serial
    #     
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #     ;Fi[	@Ÿi˝I"œ    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end;Fi[@ˇ	@ 
I"Msuper(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)));FI"end;Fi[[	I";data//mongoid_proj/lib/mongoid/errors/invalid_scope.rb;TiI"      # @param [ Class ] klass The model class.
      # @param [ Object ] value The attempted scope value.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)))
      end
    end
  end;Fi[	I"Edata//mongoid_proj/lib/mongoid/errors/invalid_storage_options.rb;TiI"      # @param [ Class ] klass The model class.
      # @param [ Hash, String, Symbol ] options The provided options.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)))
      end
    end
  end;Fi[	I"Idata//mongoid_proj/lib/mongoid/errors/mixed_session_configuration.rb;TiI"      # @param [ Symbol ] name The name of the session config.
      # @param [ Hash ] config The configuration options.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)))
      end
    end
  end;Fi[	I"Rdata//mongoid_proj/lib/mongoid/errors/nested_attributes_metadata_not_found.rb;TiI"      # @param [ Class ] klass The class of the document.
      # @param [ Symbol, String ] name The name of the relation
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)))
      end
    end
  end;Fi[	I"Adata//mongoid_proj/lib/mongoid/errors/no_session_database.rb;TiI"      # @param [ Symbol, String ] name The db config key.
      # @param [ Hash ] config The hash configuration options.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)))
      end
    end
  end;Fi[	I">data//mongoid_proj/lib/mongoid/errors/no_session_hosts.rb;TiI"      # @param [ Symbol, String ] name The db config key.
      # @param [ Hash ] config The hash configuration options.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)))
      end
    end
  end;Fi[	I"@data//mongoid_proj/lib/mongoid/errors/readonly_attribute.rb;TiI"      # @param [ Symbol, String ] name The name of the attribute.
      # @param [ Object ] value The attempted set value.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)))
      end
    end
  end;Fi[	I"Ddata//mongoid_proj/lib/mongoid/errors/unsupported_javascript.rb;TiI"      # @param [ Class ] klass The embedded document class.
      # @param [ String ] javascript The javascript expression.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var), "LITERAL" => (var)))
      end
    end
  end;Fi[@x	I"#       end;FI"#     end;FI"#   end;Fi[[	@Øi I"Œ    #       end
    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   events = Vehicle.state_machine(:state).events;Fi[	@ØiEI"∆    #       end
    #       
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   events = Vehicle.state_machine.events;Fi[	@ØieI"2    #   class Vehicle < ActiveRecord::Base
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                       # => #<Vehicle id: nil, state: "parked">;Fi[	@æiI"˜        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver;Fi[	@æiZI"˜        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver;Fi[	@æi~I"˜        #     
        #     state_machine :initial => :parked do
        #       event :ignite do
        #         transition :parked => :idling
        #       end
        #     end
        #   end
        #   
        #   class VehicleObserver;Fi[	@ŸiÊI"     #   class Vehicle
    #     state_machine do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new;Fi[	@ŸiˇI"    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new     # => #<Vehicle:0xb7b7f568 @state="parked">;Fi[I"6# Any error raised will be rescued during Cycling;FI"B# and a warning will be logged, containing the error message.;FI"def function(arglist);FI"var = remote_path_for(var);Fi[[	@≠	i;I"u      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        transferred_files_for(var) do |arglist|
          Logger.message(("STRING" + "STRING"));Fi[	@∞	i]I"v      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |arglist| (var << ("STRING" + "STRING")) };Fi[	@≥	iEI"g      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        connection do |arglist|
          transferred_files_for(var) do |arglist|;Fi[	@∂	i&I"i      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |arglist| (var << "STRING") };Fi[	@π	iCI"Q      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        if var = directory_for(var) then
          var = [];Fi[	@ø	i>I"c      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        connection.sync_clock
        transferred_files_for(var) do |arglist|;Fi[	@¬	i;I"v      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |arglist| (var << ("STRING" + "STRING")) };Fi[	@≈	i9I"g      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        connection do |arglist|
          transferred_files_for(var) do |arglist|;Fi[I".return var.captures.first unless var.nil?;FI"var = "LITERAL".match(var);F@í	I"var = "LITERAL".match(var);Fi[[	@i|I"k    var = "LITERAL".match(var)
    return var.captures.first.gsub("STRING", "STRING") unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@i~I"R    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@i{I"R    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@i}I"R    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@iI"R    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@iÅI"R    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@iÉI"R    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[	@iÖI"W    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s);Fi[I"%# @return [Array<Twitter::User>];FI"def function(arglist);FI"T@var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) };FI"end;Fi[[	I"0data//twitter_proj/twitter/action/follow.rb;TiI"      
      # A collection of users who followed a user
      #
      # @return [Array<Twitter::User>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) }
      end
      
      # A collection containing the followed user;Fi[	@0iI"Û      
      # A collection containing the followed user
      #
      # @return [Array<Twitter::User>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) }
      end
    end
  end;Fi[	I";data//twitter_proj/twitter/action/list_member_added.rb;TiI"$      
      # A collection of users who added a user to a list
      #
      # @return [Array<Twitter::User>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) }
      end
      
      # A collection of lists that were added to;Fi[	@5iI"¯      
      # A collection of users who were added to a list
      #
      # @return [Array<Twitter::User>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) }
      end
    end
  end;Fi[	I"1data//twitter_proj/twitter/action/mention.rb;TiI"      
      # A collection of users who mentioned a user
      #
      # @return [Array<Twitter::User>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) }
      end
      
      # The user who mentioned a user;Fi[	@:i%I"Ù      
      # A collection containing the mentioned user
      #
      # @return [Array<Twitter::User>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) }
      end
    end
  end;Fi[	I"1data//twitter_proj/twitter/action/retweet.rb;TiI"Ù      
      # A collection containing the retweeted user
      #
      # @return [Array<Twitter::User>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) }
      end
    end
  end;Fi[	I"/data//twitter_proj/twitter/action/tweet.rb;TiI"Ô      
      attr_reader(:max_position, :min_position)
      
      # @return [Array<Twitter::User>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::User.fetch_or_new(var) }
      end
    end
    ;Fi[I"yield);FI"ensure;F@[
I"end;Fi[[	@Œ	iëI"¿      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end
      ;Fi[	@—	i«I"¿      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end
      ;Fi[	@‘	iI"¿      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end
      ;Fi[	@‘	i:I"¿      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end
      ;Fi[	@‘	iYI"¿      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end
      ;Fi[	@‘	iI"¿      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end
      ;Fi[	@‘	iûI"¿      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure
          Threaded.exit_execution("STRING")
        end
      end
      ;Fi[	@‘	i≤I"“        def function(arglist)
          begin
            (Threaded.begin_execution("STRING")
            yield)
          ensure
            Threaded.exit_execution("STRING")
          end
        end
        ;Fi[I"if (var == "LITERAL") then;FI"@var = @var;F@≥I"<var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[[	@”i¬I"        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL");Fi[	@”i‡I"        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL");Fi[	@‡iΩI"        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL");Fi[	@‡iËI"        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL");Fi[	@Ìi±I"        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL");Fi[	@ÌiœI"        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL");Fi[	@äißI"        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL");Fi[	@äi»I"        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL");Fi[@ß	I"I# Removes the transferred archive file(s) from the storage location.;F@ˇ
@ i[[	@≠	i9I"+        end
      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var);Fi[	@∞	i[I"+        end
      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var);Fi[	@≥	iCI"+        end
      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var);Fi[	@∂	i$I"+        end
      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var);Fi[	@π	iAI"+        end
      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var);Fi[	@ø	i<I"+        end
      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var);Fi[	@¬	i9I"+        end
      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var);Fi[	@≈	i7I"+        end
      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var);Fi[I"@var = @var;F@≥@\I"end;Fi[[	@”i√I"        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL")
        next;Fi[	@”i·I"        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL")
      else;Fi[	@‡iæI"        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL")
        next;Fi[	@‡iÈI"        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL")
      else;Fi[	@Ìi≤I"        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL")
        next;Fi[	@Ìi–I"        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL")
      else;Fi[	@äi®I"        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL")
        next;Fi[	@äi…I"        var = var
        var = "LITERAL"
        if (var == "LITERAL") then
          @var = @var
          var = ((@var - @var) - @var)
          var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
        end
        var = (var + "LITERAL")
      else;Fi[I"var = "STRING";FI"	else;FI"var = "STRING";FI"end;Fi[[	I"&data//bundler_proj/bundler/cli.rb;Ti(I"      when "STRING" then
        var = "STRING"
      when nil then
        var = "STRING"
      else
        var = "STRING"
      end
      var = ["STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING", "STRING"]
      if var.include?(var) then;Fi[	@πi*I"    
    def function(arglist)
      if ((platform == Gem::Platform::RUBY) or platform.nil?) then
        var = "STRING"
      else
        var = "STRING"
      end
      dependencies.sort_by { |arglist| var.to_s }.each do |arglist|
        next if (var.type == "LITERAL");Fi[	I"+data//homebrew_proj/formula_support.rb;TiõI"¡      when "LITERAL", "STRING" then
        var = "STRING"
      when "STRING" then
        var = "STRING"
      else
        var = "STRING"
      end
    end
    (@var << Option.new(var, var));Fi[	@äifI"∫      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end
    end
    out(sprintf("STRING"));Fi[	@äixI"      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end
    end
    out(sprintf("STRING", (var * @var), ((@var - var) * @var), (var * @var), (-var * @var), var));Fi[	@lipI"∫      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end
    end
    out(sprintf("STRING"));Fi[	@liäI"      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end
    end
    out(sprintf("STRING", (var * @var), ((@var - var) * @var), (var * @var), (-var * @var), var));Fi[	@liπI"¨    if (var == "STRING") then
      if (var == "STRING") then
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
      end
    end
    case var;Fi[@o@ˇ
@ @i[[	@≠	i:I"O      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        transferred_files_for(var) do |arglist|;Fi[	@∞	i\I"0      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = [];Fi[	@≥	iDI"?      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        connection do |arglist|;Fi[	@∂	i%I"0      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = [];Fi[	@π	iBI"H      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        if var = directory_for(var) then;Fi[	@ø	i=I"=      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        connection.sync_clock;Fi[	@¬	i:I"0      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = [];Fi[	@≈	i8I"?      end
      
      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        connection do |arglist|;Fi[I"var["LITERAL"] = "STRING";FI"var["LITERAL"] = "STRING";FI"var["LITERAL"] = "LITERAL";FI"end;Fi[[	I"=data//redmine_proj/plugins/rfpdf/lib/fonts/dejavusans.rb;TiI"˛ö  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	I">data//redmine_proj/plugins/rfpdf/lib/fonts/dejavusansb.rb;TiI"Œö  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	I">data//redmine_proj/plugins/rfpdf/lib/fonts/dejavusansi.rb;TiI"û|  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	I";data//redmine_proj/plugins/rfpdf/lib/fonts/freesans.rb;TiI"^Ã  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	I"<data//redmine_proj/plugins/rfpdf/lib/fonts/freesansb.rb;TiI"éc  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	I"=data//redmine_proj/plugins/rfpdf/lib/fonts/freesansbi.rb;TiI"÷]  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	I"<data//redmine_proj/plugins/rfpdf/lib/fonts/freesansi.rb;TiI"Êk  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[I"6TCPDFFontDescriptor.define("STRING") do |arglist|;FI"var["LITERAL"] = "STRING";F@¡I" var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" };Fi[[	@∆i I"pTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL";Fi [	@…i I"pTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL";Fi [	@Ãi I"pTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL";Fi [	@œi I"pTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL";Fi [	@“i I"pTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL";Fi [	@’i I"pTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL";Fi [	@ÿi I"pTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL";Fi [@¿@›I"var["LITERAL"] = "LITERAL";FI"var["LITERAL"] = "LITERAL";Fi[[	@∆iI"˙õTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING";Fi[	@…iI" õTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = { "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL" }
  var["LITERAL"] = "STRING";Fi[	@ÃiI"ö}TCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING";Fi[	@œiI"ZÕTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING";Fi[	@“iI"ädTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING";Fi[	@’iI"“^TCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING";Fi[	@ÿiI"‚lTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING";Fi[I"/File.open("STRING", "STRING") do |arglist|;FI"var.puts(var);FI"var.puts("STRING");FI"var.puts(var);Fi[[	@òi#I"F        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
        if var then;Fi[	@õiI"x        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
      end;Fi[	@ûi"I"G        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
      end;Fi[	@°iI"Z        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
      end;Fi[	I"4data//jekyll_proj/jekyll/migrators/posterous.rb;Ti/I"N          var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |arglist|
            (var.nil? or (var == "STRING"))
          end.to_yaml
          File.open("STRING", "STRING") do |arglist|
            var.puts(var)
            var.puts("STRING")
            var.puts(var)
          end
        end;Fi[	@§iI"W        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"].split("STRING")) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
      end;Fi[	I"4data//jekyll_proj/jekyll/migrators/wordpress.rb;Ti]I"      var = { "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => ((var["LITERAL"].to_s == "STRING")), "STRING" => (var.to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)) }.delete_if do |arglist|
        (var.nil? or (var == "STRING"))
      end.to_yaml
      File.open("STRING", "STRING") do |arglist|
        var.puts(var)
        var.puts("STRING")
        var.puts(var)
      end
    end;Fi[@+@,@¶I""STRING";Fi[[	@;i(I"               "STRING"
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              "STRING"
            end
          end;Fi[	@hisI"¸          (var << case revision_type(var)
          when "LITERAL" then
            "STRING" if (revision_type(var) == "LITERAL")
          when "LITERAL" then
            "STRING"
          else
            "STRING"
          end)
          return var;Fi[	@~i$I"Ì        safe_system(@@var, "STRING", "STRING", case @var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end)
        var = [@@var, "STRING", "STRING"];Fi[	@ÜipI"¶          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end
      end;Fi[	@Õi{I"ü        "STRING"
      when "LITERAL" then
        var["LITERAL"].to_s
      when "LITERAL" then
        "STRING"
      else
        "STRING"
      end
    end;Fi[	@ﬁiI"¶          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end
      end;Fi[	@„iI"¶          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        else
          "STRING"
        end
      end;Fi[@¿@¡I"var["LITERAL"] = "STRING";F@¬i[[	@∆iI"õ  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@…iI"Îö  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@ÃiI"ª|  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@œiI"{Ã  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@“iI"´c  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@’iI"Û]  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@ÿiI"l  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[I"var.puts(var);F@I"var.puts(var);FI"end;Fi[[	@òi$I"	          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
        if var then
          var = var["STRING", "STRING"].all;Fi[	@õiI"€          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
      end
    end;Fi[	@ûi#I"€          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
      end
    end;Fi[	@°iI"€          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
      end
    end;Fi[	@i0I"            (var.nil? or (var == "STRING"))
          end.to_yaml
          File.open("STRING", "STRING") do |arglist|
            var.puts(var)
            var.puts("STRING")
            var.puts(var)
          end
        end
        var = (var + "LITERAL");Fi[	@§iI"€          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end
      end
    end;Fi[	@i^I"»        (var.nil? or (var == "STRING"))
      end.to_yaml
      File.open("STRING", "STRING") do |arglist|
        var.puts(var)
        var.puts("STRING")
        var.puts(var)
      end
    end
    ;Fi[@¿@¡@'I"var["LITERAL"] = "STRING";Fi[[	@∆iI"8õ  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@…iI"õ  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@ÃiI"ÿ|  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@œiI"òÃ  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = { "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL" }
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@“iI"»c  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@’iI"^  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[	@ÿiI" l  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {}
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "LITERAL"
end;Fi[@¿@¡@›@Ói[[	@∆iI"ﬁõTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {};Fi[	@…iI"ÆõTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = { "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL", "LITERAL" => "LITERAL" };Fi[	@ÃiI"~}TCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {};Fi[	@œiI">ÕTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {};Fi[	@“iI"ndTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {};Fi[	@’iI"∂^TCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {};Fi[	@ÿiI"∆lTCPDFFontDescriptor.define("STRING") do |arglist|
  var["LITERAL"] = "STRING"
  var["LITERAL"] = "STRING"
  var["LITERAL"] = { "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "STRING", "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => "LITERAL" }
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = "LITERAL"
  var["LITERAL"] = {};Fi[@@I"reconnect_ssl;FI"end;Fi[[	@[i˝I"ó  
  ##
  # Sets this client's OpenSSL::X509::Certificate
  def function(arglist)
    @var = var
    reconnect_ssl
  end
  
  alias "LITERAL" "LITERAL";Fi[	@[iI"ë  # For Net::HTTP parity
  ##
  # Sets the SSL certificate authority file.
  def function(arglist)
    @var = var
    reconnect_ssl
  end
  
  ##;Fi[	@[iI"ü  ##
  # Overrides the default SSL certificate store used for verifying
  # connections.
  def function(arglist)
    @var = var
    reconnect_ssl
  end
  
  ##;Fi[	@[i‰I"å  
  ##
  # Sets this client's SSL private key
  def function(arglist)
    @var = var
    reconnect_ssl
  end
  
  alias "LITERAL" "LITERAL";Fi[	@[iÿI"ì  if (RUBY_VERSION > "STRING") then
    ##
    # SSL version to use
    def function(arglist)
      @var = var
      reconnect_ssl
    end
  end
  ;Fi[	@[i‰I"
  # Setting this to VERIFY_NONE is a VERY BAD IDEA and should NEVER be used.
  # Securely transfer the correct certificate and update the default
  # certificate store or set the ca file instead.
  def function(arglist)
    @var = var
    reconnect_ssl
  end
  
  ##;Fi[	@[iÎI"í  
  ##
  # SSL verification callback.
  def function(arglist)
    @var = var
    reconnect_ssl
  end
end
require("net/http/persistent/ssl_reuse");Fi[I"assert(var.ppc7400?.!);FI"assert(var.ppc64?.!);FI"assert(var.dylib?.!);FI"%assert(var.mach_o_executable?.!);Fi[[	I"*data//homebrew_proj/test/test_mach.rb;TiGI"     assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?);Fi[	@ÑiUI"     assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?);Fi[	@ÑicI"     assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?);Fi[	@ÑiqI"    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!);Fi[	@ÑiêI"    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?)
    assert_equal([], var.archs);Fi[	@Ñi†I"    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?)
    assert_equal([], var.archs);Fi[	@Ñi∞I"    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert_equal([], var.archs);Fi[@ñI"(var << "STRING");FI"(var << "STRING");FI"(var << "STRING");Fi[[	I"0data//redmine_proj/redmine/helpers/gantt.rb;Ti´I"K        var = "STRING"
        if var["LITERAL"] and var["LITERAL"] then
          var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL")
          var = "STRING"
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          var = "STRING" if var["LITERAL"]
          var = "STRING" if var["LITERAL"];Fi[	@òiπI"ù          (var << view.content_tag("LITERAL", "STRING".html_safe, var))
          if var["LITERAL"] then
            var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL")
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end;Fi[	@òi¡I"?          end
          if var["LITERAL"] then
            var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL")
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            var = "STRING" if var["LITERAL"]
            var = "STRING" if var["LITERAL"];Fi[	@òiÃI">        end
        if var["LITERAL"] then
          if var["LITERAL"] then
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end;Fi[	@òi”I"ë            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
          if var["LITERAL"] then
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end;Fi[	@òi€I"          end
        end
        if var["LITERAL"] then
          var = "STRING"
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << view.content_tag("LITERAL", var["LITERAL"], "LITERAL" => (var), "LITERAL" => "STRING"))
        end;Fi[	@òi„I"o        end
        if var["LITERAL"] and (var["LITERAL"] and var["LITERAL"]) then
          var = view.content_tag("LITERAL", view.render_issue_tooltip(var["LITERAL"]).html_safe, "LITERAL" => "STRING")
          var = "STRING"
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << "STRING");Fi[I"end.to_yaml;FI"/File.open("STRING", "STRING") do |arglist|;FI"var.puts(var);F@i[[	@òi"I"l        var = ((var.strftime("STRING") + var) + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@õiI"≠        var = ("STRING" % [var.year, var.month, var.day, var])
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@ûi!I"ã        var = ([var.year, var.month, var.day, var].join("STRING") + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@°iI"≥        var = (([var.year, var.month, var.day, var].join("STRING") + "STRING") + self.suffix(var))
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@i.I"É          var = ("STRING" % [var.year, var.month, var.day, var])
          var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |arglist|
            (var.nil? or (var == "STRING"))
          end.to_yaml
          File.open("STRING", "STRING") do |arglist|
            var.puts(var)
            var.puts("STRING")
            var.puts(var)
          end;Fi[	@§iI"ï        var = ([var.strftime("STRING"), var].join("STRING") + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"].split("STRING")) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var)
        end;Fi[	@i\I"
      end
      var = { "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => ((var["LITERAL"].to_s == "STRING")), "STRING" => (var.to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)) }.delete_if do |arglist|
        (var.nil? or (var == "STRING"))
      end.to_yaml
      File.open("STRING", "STRING") do |arglist|
        var.puts(var)
        var.puts("STRING")
        var.puts(var)
      end;Fi[@ˇ	@ 
I"	true;FI"end;Fi[[	I"7data//mongoid_proj/lib/mongoid/extensions/array.rb;TixI"ó      #
      # @return [ true ] true.
      #
      # @since 3.0.0
      def function(arglist)
        true
      end
      
      module ClassMethods;Fi[	@æi¢I"ñ        #
        # @return [ true ] true.
        #
        # @since 3.0.0
        def function(arglist)
          true
        end
      end
    end;Fi[	I"7data//mongoid_proj/lib/mongoid/extensions/float.rb;TiI"û      #
      # @return [ true ] Always true.
      #
      # @since 3.0.0
      def function(arglist)
        true
      end
      
      module ClassMethods;Fi[	I"6data//mongoid_proj/lib/mongoid/extensions/hash.rb;Ti}I"…      #
      # @return [ true ] true.
      #
      # @since 3.0.0
      def function(arglist)
        true
      end
      
      # Convert this hash to a criteria. Will iterate over each keys in the;Fi[	@∆iøI"ñ        #
        # @return [ true ] true.
        #
        # @since 3.0.0
        def function(arglist)
          true
        end
      end
    end;Fi[	I"9data//mongoid_proj/lib/mongoid/extensions/integer.rb;TiI"Ã      #
      # @return [ true ] Always true.
      #
      # @since 3.0.0
      def function(arglist)
        true
      end
      
      # Is the object not to be converted to bson on criteria creation?;Fi[	I"7data//mongoid_proj/lib/mongoid/extensions/range.rb;Ti(I"ó      #
      # @return [ true ] True.
      #
      # @since 3.0.0
      def function(arglist)
        true
      end
      
      module ClassMethods;Fi[I"assert(var.x86_64?.!);F@~@@Äi[[	@Ñi8I"     var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?)
    assert(var.text_executable?.!);Fi[	@ÑiFI"    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ÑiTI"    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ÑipI"    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[	@ÑièI"˘    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?);Fi[	@ÑiüI"˘    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?);Fi[	@ÑiØI"˚    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!);Fi[I"assert(var.i386?.!);F@—@~@i[[	@ÑiI"ı  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!);Fi[	@Ñi7I"ı  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?);Fi[	@ÑiEI"˜  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ÑioI"˘  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ÑiéI"ˇ    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ÑiûI"ˇ    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[	@ÑiÆI"ˇ    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!);Fi[I";# @param options [Hash] A customizable set of options.;FI"{# @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;FI"|# @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;FI"w# @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[[	I"6data//twitter_proj/twitter/api/direct_messages.rb;TiI"`      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Direct messages sent to the authenticating user.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Integer] :page Specifies the page of results to retrieve.
      # @example Return the 20 most recent direct messages sent to the authenticating user;Fi[	@˘i)I"`      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Direct messages sent by the authenticating user.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Integer] :page Specifies the page of results to retrieve.
      # @example Return the 20 most recent direct messages sent by the authenticating user;Fi[	@Ì	iI"§      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @example Return the 20 most recent mentions (statuses containing @username) for the authenticating user;Fi[	@Ì	iGI"¿      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi[	@Ì	i^I"é      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi[	@Ì	isI"é      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi[	@Ì	iÖI"é      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi[I"$(var.nil? or (var == "STRING"));FI"end.to_yaml;F@®I"var.puts(var);Fi[[	@òi!I"        var = var.strip.downcase.gsub("LITERAL", "STRING").gsub("LITERAL", "STRING").gsub("LITERAL", "STRING").gsub("LITERAL", "STRING").gsub("LITERAL", "STRING").gsub("LITERAL", "STRING")
        var = ((var.strftime("STRING") + var) + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@õiI"æ        var = var["LITERAL"]
        var = ("STRING" % [var.year, var.month, var.day, var])
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@ûi I"ú        var = var["LITERAL"]
        var = ([var.year, var.month, var.day, var].join("STRING") + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@°iI"›        var = ((var + "STRING") + var) if var.!=(nil)
        var = (([var.year, var.month, var.day, var].join("STRING") + "STRING") + self.suffix(var))
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"]), "STRING" => (var) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@i-I"ï          var = var["STRING"].!
          var = ("STRING" % [var.year, var.month, var.day, var])
          var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var) }.delete_if do |arglist|
            (var.nil? or (var == "STRING"))
          end.to_yaml
          File.open("STRING", "STRING") do |arglist|
            var.puts(var)
            var.puts("STRING")
            var.puts(var);Fi[	@§iI"¶        var = var["LITERAL"]
        var = ([var.strftime("STRING"), var].join("STRING") + "STRING")
        var = { "STRING" => "STRING", "STRING" => (var.to_s), "STRING" => (var["LITERAL"].split("STRING")) }.delete_if do |arglist|
          (var.nil? or (var == "STRING"))
        end.to_yaml
        File.open("STRING", "STRING") do |arglist|
          var.puts(var)
          var.puts("STRING")
          var.puts(var);Fi[	@i[I"B        var.sort! { |arglist| (var["STRING"] <=> var["STRING"]) }
      end
      var = { "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => ((var["LITERAL"].to_s == "STRING")), "STRING" => (var.to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var), "STRING" => (var["LITERAL"]), "STRING" => (var["LITERAL"].to_s), "STRING" => (var), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)), "STRING" => (var["LITERAL"] ? (var) : (nil)) }.delete_if do |arglist|
        (var.nil? or (var == "STRING"))
      end.to_yaml
      File.open("STRING", "STRING") do |arglist|
        var.puts(var)
        var.puts("STRING")
        var.puts(var);Fi[@ˇ	@ 
I"	self;FI"end;Fi[[	I"/data//mongoid_proj/lib/mongoid/criteria.rb;TiII"ó    #
    # @return [ Criteria ] self.
    #
    # @since 3.0.0
    def function(arglist)
      self
    end
    
    # Convert the criteria to a proc.;Fi[	I"8data//mongoid_proj/lib/mongoid/extensions/object.rb;TiI"°      #
      # @return [ Object ] self.
      #
      # @since 3.0.0
      def function(arglist)
        self
      end
      
      (alias "LITERAL" "LITERAL");Fi[	@"iI"¨      #
      # @return [ Object ] self.
      #
      # @since 3.0.0
      def function(arglist)
        self
      end
      
      # Mongoize a plain object into a time.;Fi[	@"i)I"Æ      #
      # @return [ Object ] self.
      #
      # @since 3.0.0
      def function(arglist)
        self
      end
      
      # Try to form a setter from this object.;Fi[	@"iAI"∂      #
      # @return [ Object ] self.
      #
      # @since 3.0.0
      def function(arglist)
        self
      end
      
      # Conversion of an object to an $inc-able value.;Fi[	@"iÉI"ß      #
      # @return [ Object ] The object.
      #
      # @since 3.0.0
      def function(arglist)
        self
      end
      
      # Is the object multi args.;Fi[	I";data//mongoid_proj/lib/mongoid/extensions/object_id.rb;TiI"∞      #
      # @return [ Moped::BSON::ObjectId ] self.
      #
      # @since 3.0.0
      def function(arglist)
        self
      end
      
      (alias "LITERAL" "LITERAL");Fi[I"require("formula");FI"module Homebrew;FI"extend(self);FI" ;Fi[[	I"$data//homebrew_proj/cmd/edit.rb;Ti I"örequire("formula")
module Homebrew
  extend(self)
  
  def function(arglist)
    raise("STRING".undent) unless (HOMEBREW_REPOSITORY / "STRING").directory?;Fi [	I"%data//homebrew_proj/cmd/fetch.rb;Ti I"Ñrequire("formula")
module Homebrew
  extend(self)
  
  def function(arglist)
    raise(FormulaUnspecifiedError) if ARGV.named.empty?;Fi [	I"'data//homebrew_proj/cmd/missing.rb;Ti I"^require("formula")
module Homebrew
  extend(self)
  
  def function(arglist)
    var = [];Fi [	I""data//homebrew_proj/cmd/sh.rb;TiI"{require("superenv")
require("formula")
module Homebrew
  extend(self)
  
  def function(arglist)
    if superenv? then;Fi[	I")data//homebrew_proj/cmd/uninstall.rb;TiI"jrequire("keg")
require("formula")
module Homebrew
  extend(self)
  
  def function(arglist)
    begin;Fi[	I"$data//homebrew_proj/cmd/uses.rb;Ti I"Ñrequire("formula")
module Homebrew
  extend(self)
  
  def function(arglist)
    raise(FormulaUnspecifiedError) if ARGV.named.empty?;Fi [	I"(data//homebrew_proj/cmd/versions.rb;Ti I"|require("formula")
module Homebrew
  extend(self)
  
  def function(arglist)
    raise("STRING") unless which("STRING");Fi [@ÕI"newobj;FI"out("STRING");FI"out("STRING");Fi[[	@”iCI"p    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((((("STRING" + textstring("STRING")) + "STRING") + textstring(var["STRING"]["STRING"])) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"));Fi[	@‡iLI">    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"));Fi[	@Ìi2I">    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"));Fi[	@liìI">    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"));Fi[	@li\
I"4    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out((("STRING" + var["STRING"]) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"));Fi[	@lim
I"ÿ    out((("STRING" + var) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@liÜ
I"ö    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[I"2require("capistrano/recipes/deploy/scm/base");FI"module Capistrano;FI"module Deploy;FI"module SCM;Fi[[	I"?data//capistrano_proj/capistrano/recipes/deploy/scm/bzr.rb;Ti I"órequire("capistrano/recipes/deploy/scm/base")
module Capistrano
  module Deploy
    module SCM
      class Bzr < Base
        default_command("STRING");Fi [	@hi I"órequire("capistrano/recipes/deploy/scm/base")
module Capistrano
  module Deploy
    module SCM
      class Cvs < Base
        default_command("STRING");Fi [	I"Adata//capistrano_proj/capistrano/recipes/deploy/scm/darcs.rb;Ti I"ôrequire("capistrano/recipes/deploy/scm/base")
module Capistrano
  module Deploy
    module SCM
      class Darcs < Base
        default_command("STRING");Fi [	@i I"órequire("capistrano/recipes/deploy/scm/base")
module Capistrano
  module Deploy
    module SCM
      class Git < Base
        default_command("STRING");Fi [	@∑i I"ùrequire("capistrano/recipes/deploy/scm/base")
module Capistrano
  module Deploy
    module SCM
      class Mercurial < Base
        default_command("STRING");Fi [	I"@data//capistrano_proj/capistrano/recipes/deploy/scm/none.rb;Ti I"∏require("capistrano/recipes/deploy/scm/base")
module Capistrano
  module Deploy
    module SCM
      class None < Base
        # No versioning, thus, no head. Returns the empty string.;Fi [	@∫i I"úrequire("capistrano/recipes/deploy/scm/base")
module Capistrano
  module Deploy
    module SCM
      class Perforce < Base
        default_command("STRING");Fi [@ˇ	@ 
I"@var = var;FI"end;Fi[[	I"8data//mongoid_proj/lib/mongoid/contextual/memory.rb;Ti-I"™      #
      # @return [ Integer ] The limit.
      #
      # @since 3.0.0
      def function(arglist)
        @var = var
      end
      
      # Get the skiping value.;Fi[	@yiII"™      #
      # @return [ Integer ] The skip.
      #
      # @since 3.0.0
      def function(arglist)
        @var = var
      end
      
      # Apply criteria options.;Fi[	@ifI"æ    #
    # @return [ Array<Document> ] The embedded documents.
    #
    # @since 3.0.0
    def function(arglist)
      @var = var
    end
    
    # Is the criteria for embedded documents?;Fi[	@iÒI"Ÿ    #
    # @return [ Array<Metadata> ] The new inclusions.
    #
    # @since 3.0.0
    def function(arglist)
      @var = var
    end
    
    # Merges another object with this +Criteria+ and returns a new criteria.;Fi[	I"/data//mongoid_proj/lib/mongoid/loggable.rb;Ti I"ã    #
    # @return [ Logger ] The new logger.
    #
    # @since 3.0.0
    def function(arglist)
      @var = var
    end
    
    private;Fi[	I"Cdata//mongoid_proj/lib/mongoid/relations/embedded/batchable.rb;TiòI"Î        #
        # @return [ true, false ] The flag.
        #
        # @since 3.0.0
        def function(arglist)
          @var = var
        end
        
        # Normalize the documents, in case they were provided as an array of;Fi[	@ÖiœI"Á        #
        # @return [ String ] The path.
        #
        # @since 3.0.0
        def function(arglist)
          @var = var
        end
        
        # Get the selector for executing atomic operations on the collection.;Fi[I"%# : The backup operation failed.;FI"H# : Notification will be sent, including the Exception which caused;FI"F# : the failure, the Exception's backtrace, a copy of the current;FI"K# : backup log and other information if `on_failure` was set to `true`;Fi[[	@Ji*I"|      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist);Fi[	I"1data//backup_proj/backup/notifier/hipchat.rb;TiBI"|      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist);Fi[	I".data//backup_proj/backup/notifier/mail.rb;Ti|I"|      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist);Fi[	@Oi(I"|      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist);Fi[	@Ti2I"|      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist);Fi[	@Yi&I"|      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist);Fi[@‰@ÂI"var = (var + "LITERAL");FI",var = var if var and (var == "LITERAL");Fi[[	@”i|I"        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end;Fi[	@”iêI")          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        var = (var + (var ? ("LITERAL") : ("LITERAL")));Fi[	@‡iqI"        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end;Fi[	@‡iäI"          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        var = (var + var);Fi[	@ÌikI"        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end;Fi[	@ÌiI")          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        var = (var + (var ? ("LITERAL") : ("LITERAL")));Fi[I"var.insert_at("LITERAL");FI"%assert_equal("LITERAL", var.pos);FI"var.reload;FI"%assert_equal("LITERAL", var.pos);Fi[[	@†iyI"4    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos);Fi[	@†i}I"&    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos);Fi[	@†i~I"˚    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
  end
  ;Fi[	@†iI"3    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("STRING" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos);Fi[	@†iÙI")    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var = ListMixinSub1.create("STRING" => "LITERAL")
    assert_equal("LITERAL", var.pos);Fi[	@†i˙I"˛    assert_equal("LITERAL", var.pos)
    var = ListMixinSub1.create("STRING" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
  end
  ;Fi[I"	else;FI"if (@var == "STRING") then;FI"out("STRING");FI"	else;Fi[[	@äiˆI"     out("STRING")
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then
          out("STRING");Fi[	@äi˘I"˙    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then
          out("STRING")
        else
          if @var.kind_of?(String).! then
            out((("STRING" + (@var / "LITERAL")) + "STRING"));Fi[	@äiI"ª    end
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        out("STRING") if (@var == "STRING")
      end;Fi[	@li	I"     out("STRING")
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then
          out("STRING");Fi[	@li	I"Ú    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then
          out("STRING")
        else
          out((("STRING" + (@var / "LITERAL")) + "STRING")) if @var.is_a?(String).!
        end;Fi[	@li'	I"ª    end
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        out("STRING") if (@var == "STRING")
      end;Fi[@ZI"var = "STRING";FI"var = "STRING";FI"var = "STRING";Fi[[	@”ieI"≥    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING";Fi[	@‡iZI"≥    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING";Fi[	@ÌiTI"≥    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING";Fi[	@äiDI"¡    end
    var = "LITERAL"
    if var.!=("LITERAL") then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING";Fi[	@li=I"À    var = var.length
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        if var.is_a?(String) then;Fi[	@liI"Ï    var = ((@var - var) - @var) if (var == "LITERAL")
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        if var.is_a?(String) then;Fi[I"if (@var > "LITERAL") then;FI"@var = "LITERAL";FI"out("STRING");FI"end;Fi[[	@äiXI"F    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        if (@var > "LITERAL") then
          @var = "LITERAL"
          out("STRING")
        end
        var = (var == "LITERAL") ? ("LITERAL") : ((var - "LITERAL"))
        self.Cell(var, var, var[(var..var)], var, "LITERAL", var, var);Fi[	@äioI"N        if (var > var) then
          if (var == "LITERAL") then
            var = (var + "LITERAL") if (var == var)
            if (@var > "LITERAL") then
              @var = "LITERAL"
              out("STRING")
            end
            self.Cell(var, var, var[(var..(var - "LITERAL"))], var, "LITERAL", var, var)
          else;Fi[	@äiãI"        end
      end
    end
    if (@var > "LITERAL") then
      @var = "LITERAL"
      out("STRING")
    end
    var = (var + "STRING") if var.!=("LITERAL") and var.index("STRING").nil?.!
    self.Cell(var, var, var[(var..var)], var, "LITERAL", var, var);Fi[	@liSI"6    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        if (@var > "LITERAL") then
          @var = "LITERAL"
          out("STRING")
        end
        var = (var == "LITERAL") ? ("LITERAL") : ((var - "LITERAL"))
        var = (var == "LITERAL") ? ("LITERAL") : (var);Fi[	@lilI"7      if (var > var) then
        if (var == "LITERAL") then
          var = (var + "LITERAL") if (var == var)
          if (@var > "LITERAL") then
            @var = "LITERAL"
            out("STRING")
          end
          Cell(var, var, var[(var..(var - "LITERAL"))], var, "LITERAL", var, var)
        else;Fi[	@liÉI"        var = (var + "LITERAL")
      end
    end
    if (@var > "LITERAL") then
      @var = "LITERAL"
      out("STRING")
    end
    (var << "STRING") if var.is_a?(String) and var.include?("STRING")
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var);Fi[I"%assert_equal("LITERAL", var.pos);F@Æ@ØI"var.reload;Fi[[	@†ixI"B    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL");Fi[	@†i|I"    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL");Fi[	@†i}I"    var.reload
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
  end;Fi[	@†iÔI"D    var = ListMixinSub2.create("STRING" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("STRING" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL");Fi[	@†iÛI"!    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
    var = ListMixinSub1.create("STRING" => "LITERAL");Fi[	@†i˘I"
    var.reload
    assert_equal("LITERAL", var.pos)
    var = ListMixinSub1.create("STRING" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos)
    var.reload
    assert_equal("LITERAL", var.pos)
  end;Fi[@¿I""if File.exist?("STRING") then;FI""LITERAL";FI"	else;Fi[[	I"7data//capistrano_proj/capistrano/recipes/deploy.rb;TikI"ªdef function(arglist)
  if File.exist?("STRING") then
    "LITERAL"
  else
    if File.exist?("STRING") then
      "LITERAL"
    else
      if File.exist?("STRING") then
        "LITERAL";Fi[	@
inI"º  else
    if File.exist?("STRING") then
      "LITERAL"
    else
      if File.exist?("STRING") then
        "LITERAL"
      else
        if File.exist?("STRING") then
          "LITERAL";Fi[	@
iqI"Œ    else
      if File.exist?("STRING") then
        "LITERAL"
      else
        if File.exist?("STRING") then
          "LITERAL"
        else
          if File.exist?("STRING") then
            "LITERAL";Fi[	@
itI"‡      else
        if File.exist?("STRING") then
          "LITERAL"
        else
          if File.exist?("STRING") then
            "LITERAL"
          else
            if File.exist?("STRING") then
              "LITERAL";Fi[	@
iwI"Ú        else
          if File.exist?("STRING") then
            "LITERAL"
          else
            if File.exist?("STRING") then
              "LITERAL"
            else
              if File.exist?("STRING") then
                "LITERAL";Fi[	@
izI"          else
            if File.exist?("STRING") then
              "LITERAL"
            else
              if File.exist?("STRING") then
                "LITERAL"
              else
                File.exist?("STRING") ? ("LITERAL") : ("LITERAL")
              end;Fi[@ß	I"7# Notify the user of the backup operation results.;FI"/# `status` indicates one of the following:;FI"#;Fi[[	@JiI"÷      
      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@íi4I"÷      
      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@ïisI"÷      
      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@OiI"÷      
      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@Ti$I"÷      
      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[	@YiI"÷      
      private
      
      ##
      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.;Fi[I"#       ...;FI"#     end;FI"#   end;FI"#;Fi[[	I"=data//activemodel_proj/active_model/attribute_methods.rb;TivI"‹      #     private
      #
      #     def reset_attribute_to_default!(attr)
      #       ...
      #     end
      #   end
      #
      #   person = Person.new
      #   person.name                         # => 'Gem';Fi[	@≈iJI"∑    # 
    #   class Vehicle
    #     state_machine :status, :attribute => :status_value do
    #       ...
    #     end
    #   end
    # 
    # With a static initial state:
    # ;Fi[	@≈iRI"∞    # 
    #   class Vehicle
    #     state_machine :status, :initial => :parked do
    #       ...
    #     end
    #   end
    # 
    # With a dynamic initial state:
    # ;Fi[	@≈iZI"’    # 
    #   class Vehicle
    #     state_machine :status, :initial => lambda {|vehicle| vehicle.speed == 0 ? :parked : :idling} do
    #       ...
    #     end
    #   end
    # 
    # == Class Methods
    # ;Fi[	@≈i⁄I"ˇ    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new   # => #<Vehicle:0xb7c8dbf8 @state="parked">
    #   vehicle.state           # => "parked";Fi[	@Ÿi≥I"¯    # 
    #   class Vehicle
    #     state_machine :action => :save do
    #       ...
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new
    #   transition = StateMachine::Transition.new(vehicle, machine, :ignite, :parked, :idling);Fi[I"# `:success`;FI"+# : The backup completed successfully.;FI"D# : Notification will be sent if `on_success` was set to `true`;FI"#;Fi[[	@Ji I"X      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@íi8I"X      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@ïiwI"X      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@OiI"X      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@Ti(I"X      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[	@YiI"X      # Notify the user of the backup operation results.
      # `status` indicates one of the following:
      #
      # `:success`
      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged;Fi[I"# `:warning`;FI"D# : The backup completed successfully, but warnings were logged;FI"C# : Notification will be sent, including a copy of the current;FI"6# : backup log, if `on_warning` was set to `true`;Fi[[	@Ji$I"k      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@íi<I"k      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@ïi{I"k      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@Oi"I"k      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@Ti,I"k      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[	@Yi I"k      # : The backup completed successfully.
      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`;Fi[@fI"var["STRING"] = "STRING";FI"when "STRING" then;FI"var["STRING"] = "STRING";Fi[[	I"?data//redmine_proj/plugins/rfpdf/lib/core/image_science.rb;TiI"
      var["LITERAL"] = var.width
      var["LITERAL"] = var.height
      case var["LITERAL"]
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING";Fi[	@diI"      case var["LITERAL"]
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING";Fi[	@diI"        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING";Fi[	@diI"Ó        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      else
        # do nothing;Fi[	I"6data//redmine_proj/redmine/helpers/time_report.rb;Ti-I"2            case @var
            when "STRING" then
              var["STRING"] = var["STRING"]
            when "STRING" then
              var["STRING"] = "STRING"
            when "STRING" then
              var["STRING"] = "STRING"
            when "STRING" then
              var["STRING"] = "STRING";Fi[	@mi/I")              var["STRING"] = var["STRING"]
            when "STRING" then
              var["STRING"] = "STRING"
            when "STRING" then
              var["STRING"] = "STRING"
            when "STRING" then
              var["STRING"] = "STRING"
            else
              # do nothing;Fi[@ÕI"	else;F@¡I"out("STRING");Fi[[	@äiıI"ƒ    out("STRING")
    out("STRING")
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then;Fi[	@äi¯I"–      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then
          out("STRING")
        else
          if @var.kind_of?(String).! then;Fi[	@äiI"ª      end
    end
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        out("STRING") if (@var == "STRING");Fi[	@li	I"ƒ    out("STRING")
    out("STRING")
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then;Fi[	@li	I"˙      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then
          out("STRING")
        else
          out((("STRING" + (@var / "LITERAL")) + "STRING")) if @var.is_a?(String).!;Fi[	@li&	I"ª      end
    end
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        out("STRING") if (@var == "STRING");Fi[@fI"var.print("STRING");FI"when "STRING" then;FI"var.print("STRING");Fi[[	I";data//homebrew_proj/vendor/multi_json/vendor/okjson.rb;TiëI"      var = var.class.method_defined?("LITERAL")
      while (var < var.length) do
        case var[var]
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@áiìI"˘        case var[var]
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@áiïI"          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@áióI"          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@áiôI"          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING");Fi[	@áiõI"Ô          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        else
          (var = var[var];Fi[I"var = @var;FI"var = @var;FI"var = @var;FI"var = @var;Fi[[	@äi÷I"¡    self.Open if (@var == "LITERAL")
    var = @var
    var = (@var + (@var ? ("STRING") : ("STRING")))
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var;Fi[	@äi◊I"ª    var = @var
    var = (@var + (@var ? ("STRING") : ("STRING")))
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    if (@var > "LITERAL") then;Fi[	@äiÿI"æ    var = (@var + (@var ? ("STRING") : ("STRING")))
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    if (@var > "LITERAL") then
      @var = true;Fi[	@li«I"·    Open if (@var == "LITERAL")
    var = @var
    var = ((@var + (@var ? ("STRING") : ("STRING"))) + (@var ? ("STRING") : ("STRING")))
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var;Fi[	@li»I"‡    var = @var
    var = ((@var + (@var ? ("STRING") : ("STRING"))) + (@var ? ("STRING") : ("STRING")))
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    if (@var > "LITERAL") then;Fi[	@li…I"„    var = ((@var + (@var ? ("STRING") : ("STRING"))) + (@var ? ("STRING") : ("STRING")))
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    var = @var
    if (@var > "LITERAL") then
      @var = true;Fi[@l@û@üI"	else;Fi[[	@”iëI"Í        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        var = (var + (var ? ("LITERAL") : ("LITERAL")))
      end;Fi[	@‡iãI"Í        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        var = (var + var)
        var = var if (var >= "LITERAL");Fi[	@ÌiÄI"Í        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        var = (var + (var ? ("LITERAL") : ("LITERAL")))
      end;Fi[	@äibI"ı        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        if (var == "STRING"["LITERAL"]) then
          var = var;Fi[	@äiÉI"          var = "LITERAL"
          var = var
          var = "LITERAL"
          var = "LITERAL"
          var = (var + "LITERAL")
          var = var if var and (var == "LITERAL")
        else
          var = (var + "LITERAL")
        end;Fi[	@li|I"ﬁ        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        var = (var + "LITERAL")
      end;Fi[@Ë@Õ@ËI"	else;Fi[[	@”i≈I"¨    def function(arglist)
      var = case var
      when "STRING" then
        "STRING"
      when "STRING" then
        "STRING"
      else
        # do nothing
      end;Fi[	@÷iI"Ì          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          else
            (Compass::Util.compass_warn("STRING")
            var.value);Fi[	@÷iKI"∞        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        else
          var
        end;Fi[	@∆i˛I"Î              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              when "STRING" then
                "STRING"
              else
                "STRING"
              end;Fi[	@∆i
I"Ë          if @var.html4? then
            case @var.value["LITERAL"]
            when "STRING" then
              "STRING"
            when "STRING" then
              "STRING"
            else
              "STRING"
            end;Fi[	@…ipI"€          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          when "STRING" then
            "STRING"
          else
            (var.value.first + "STRING")
          end;Fi[@‰	@Â	@Ê	I";# @param options [Hash] A customizable set of options.;Fi[[	I"5data//twitter_proj/twitter/api/places_and_geo.rb;TiI"¡      #
      # @see https://dev.twitter.com/docs/api/1.1/get/geo/reverse_geocode
      # @note This request is an informative call and will deliver generalized results about geography.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi[	@«i2I"¢      # Search for places that can be attached to a {Twitter::API::Tweets#update}
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/geo/search
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi[	@«iLI"à      #
      # @see https://dev.twitter.com/docs/api/1.1/get/geo/similar_places
      # @note Conceptually, you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to {Twitter::API::PlacesAndGeo#place} to create a new one. The token contained in the response is the token necessary to create a new place.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi[	@«iaI"â      # Creates a new place at the given latitude and longitude
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/geo/place
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :name The name a place is known as.
      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.;Fi[	I"-data//twitter_proj/twitter/api/trends.rb;Ti&I"      # Returns the locations that Twitter has trending topic information for
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/trends/available
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @return [Array<Twitter::Place>]
      # @example Return the locations that Twitter has trending topic information for;Fi[	@–i6I"¶      # Returns the locations that Twitter has trending topic information for, closest to a specified location.
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/trends/closest
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat If provided with a :long option the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for latitude are -90.0 to +90.0 (North is positive) inclusive.
      # @option options [Float] :long If provided with a :lat option the available trend locations will be sorted by distance, nearest to furthest, to the co-ordinate pair. The valid ranges for longitude are -180.0 to +180.0 (East is positive) inclusive.;Fi[@N@O@PI"#;Fi[[	@Ji%I"e      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@íi=I"e      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@ïi|I"e      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@Oi#I"e      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@Ti-I"e      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[	@Yi!I"e      # : Notification will be sent if `on_success` was set to `true`
      #
      # `:warning`
      # : The backup completed successfully, but warnings were logged
      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.;Fi[I"7# @param [ Symbol ] name The name of the relation.;FI"4# @param [ Hash ] options The relation options.;FI"D# @param [ Proc ] block Optional block for defining extensions.;FI"def function(arglist);Fi[[	I"7data//mongoid_proj/lib/mongoid/relations/macros.rb;Ti1I"á        #     embedded_in :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.
        # @param [ Proc ] block Optional block for defining extensions.
        def function(arglist)
          if ancestors.include?(Mongoid::Versioning) then
            raise(Errors::VersioningNotOnRoot.new(self));Fi[	@ÍiOI"Ä        #     embedded_in :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.
        # @param [ Proc ] block Optional block for defining extensions.
        def function(arglist)
          var = characterize(var, Embedded::Many, var, &var)
          self.cyclic = true if var["LITERAL"];Fi[	@ÍikI"        #     embedded_in :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.
        # @param [ Proc ] block Optional block for defining extensions.
        def function(arglist)
          var = characterize(var, Embedded::One, var, &var)
          self.cyclic = true if var["LITERAL"];Fi[	@ÍiÇI"à        #     has_one :game
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.
        # @param [ Proc ] block Optional block for defining extensions.
        def function(arglist)
          var = reference_one_to_one(var, var, Referenced::In, &var)
          aliased_fields[var.to_s] = var.foreign_key;Fi[	@ÍiõI"m        #     belongs_to :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.
        # @param [ Proc ] block Optional block for defining extensions.
        def function(arglist)
          var = characterize(var, Referenced::Many, var, &var)
          relate(var, var);Fi[	@Íi’I"Z        #     has_one :game
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.
        # @param [ Proc ] block Optional block for defining extensions.
        def function(arglist)
          reference_one_to_one(var, var, Referenced::One, &var)
        end;Fi[I";out((("STRING" + (@var + "LITERAL").to_s) + "STRING"));FI"out("STRING");FI"out("STRING");FI"newobj;Fi[[	@”iAI"    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING");Fi[	@‡iJI"    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING");Fi[	@Ìi0I"    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING");Fi[	@liëI"    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING");Fi[	@liZ
I"    out((("STRING" + var["STRING"]) + "STRING"))
    out("STRING")
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING");Fi[	@lik
I"      (var << (((("STRING" + var.to_s) + "STRING") + var.to_s) + "STRING"))
    end
    out((("STRING" + var) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING");Fi[I"# `:failure`;F@ä@ã@åi[[	@Ji)I"•      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@íiAI"•      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@ïi{I"•      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@Oi'I"•      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@Ti1I"•      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[	@Yi%I"•      # : Notification will be sent, including a copy of the current
      # : backup log, if `on_warning` was set to `true`
      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #;Fi[@?I";#   #       #<Pet id: 2, name: "Spook", person_id: 1>,;TI">#   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;TI"#   #    ];Ti[[	@‰ipI"@      #   # => #<Pet id: 2, name: "fancy-fancy", person_id: 1>
      #
      #   person.pets.find(2, 3)
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.find(*var, &var);Ti[	@‰i¿I"¸      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   Pet.find(1);Ti[	@‰i¯I"¸      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   Pet.find(1);Ti[	@‰iI"@      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>]
      #
      #   person.pets.delete(2, 3)
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.delete(*var);Ti[	@‰i0I"      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy(Pet.find(2), Pet.find(3));Ti[	@‰i6I"      #   #    ]
      #
      #   person.pets.destroy(Pet.find(2), Pet.find(3))
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.size  # => 0;Ti[I">add_property_to_class(SiriConfirmationOptions, "LITERAL");FI">add_property_to_class(SiriConfirmationOptions, "LITERAL");FI">add_property_to_class(SiriConfirmationOptions, "LITERAL");FI">add_property_to_class(SiriConfirmationOptions, "LITERAL");Fi[[	I")data//SiriProxy_proj/siri_objects.rb;TiïI"Ç    self.cancelTrigger = var
  end
end
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL");Fi[	@/iñI"ü  end
end
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL");Fi[	@/ióI"”end
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL");Fi[	@/iòI"	add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL");Fi[	@/iôI"¸add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
class SiriConfirmSnippetCommand < SiriObject;Fi[	@/iöI"⁄add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
add_property_to_class(SiriConfirmationOptions, "LITERAL")
class SiriConfirmSnippetCommand < SiriObject
  def function(arglist);Fi[I"I#   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.;FI"=#   @param options [Hash] A customizable set of options.;FI"def function(arglist);FI"+var = Twitter::API::Arguments.new(var);Fi[[	@˘i`I"ñ      #   Returns direct messages
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        if var.empty? then
          direct_messages_received(var.options);Fi[	I"0data//twitter_proj/twitter/api/favorites.rb;TiTI"§      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          begin;Fi[	@DivI"§      #   @example Favorite the Tweet with the ID 25938088801
      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          begin;Fi[	I"5data//twitter_proj/twitter/api/saved_searches.rb;Ti#I"Ô      #   Retrieve the data for saved searches owned by the authenticating user
      #
      #   @see https://dev.twitter.com/docs/api/1.1/get/saved_searches/show/:id
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        if var.empty? then
          objects_from_response(Twitter::SavedSearch, "LITERAL", "STRING", var.options);Fi[	@IiYI"      #   @example Destroys a saved search for the authenticated user with the ID 16129012
      #     Twitter.saved_search_destroy(16129012)
      # @overload saved_search_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          object_from_response(Twitter::SavedSearch, "LITERAL", "STRING", var.options);Fi[	I"3data//twitter_proj/twitter/api/undocumented.rb;TikI"Ê      #   @example Return activity summary for the Tweet with the ID 25938088801
      #     Twitter.statuses_activity(25938088801)
      # @overload statuses_activity(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map { |arglist| status_activity(var, var.options) }
      end;Fi[I"module InstanceMethods;FI"def self.included(arglist);FI"var.extend(ClassMethods);FI"end;Fi[[	I"Zdata//redmine_proj/plugins/acts_as_activity_provider/lib/acts_as_activity_provider.rb;TiI"∞        end
      end
      
      module InstanceMethods
        def self.included(arglist)
          var.extend(ClassMethods)
        end
        
        module ClassMethods;Fi[	I"Ldata//redmine_proj/plugins/acts_as_attachable/lib/acts_as_attachable.rb;TiI"≤        end
      end
      
      module InstanceMethods
        def self.included(arglist)
          var.extend(ClassMethods)
        end
        
        def function(arglist);Fi[	I"Pdata//redmine_proj/plugins/acts_as_customizable/lib/acts_as_customizable.rb;TiI"≤        end
      end
      
      module InstanceMethods
        def self.included(arglist)
          var.extend(ClassMethods)
        end
        
        def function(arglist);Fi[	I"Bdata//redmine_proj/plugins/acts_as_event/lib/acts_as_event.rb;TiI"·        end
      end
      
      module InstanceMethods
        def self.included(arglist)
          var.extend(ClassMethods)
        end
        
        ["STRING", "STRING", "STRING", "STRING", "STRING"].each do |arglist|;Fi[	I"Ldata//redmine_proj/plugins/acts_as_searchable/lib/acts_as_searchable.rb;Ti(I"∞        end
      end
      
      module InstanceMethods
        def self.included(arglist)
          var.extend(ClassMethods)
        end
        
        module ClassMethods;Fi[	I"Jdata//redmine_proj/plugins/acts_as_watchable/lib/acts_as_watchable.rb;TiI"÷        end
      end
      
      module InstanceMethods
        def self.included(arglist)
          var.extend(ClassMethods)
        end
        
        # Returns an array of users that are proposed as watchers;Fi[I"0@var = sprintf("STRING", (var / "LITERAL"));FI"	else;FI"V@var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"));FI"end;Fi[[	@äiI"H  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    out(@var) if (@var > "LITERAL")
  end;Fi[	@äiI"[  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    @var = @var.!=(@var)
    out(@var) if (@var > "LITERAL");Fi[	@äi I"=  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    @var = @var.!=(@var)
  end;Fi[	@li∏I"J  	#
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    out(@var) if (@var > "LITERAL")
  end;Fi[	@liÃI"]  	#
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    @var = @var.!=(@var)
    out(@var) if (@var > "LITERAL");Fi[	@liÏI"m  	#
  def function(arglist)
    if (((var == "LITERAL") and (("LITERAL" == "LITERAL") and ("LITERAL" == "LITERAL"))) or ("LITERAL" == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    @var = @var.!=(@var)
    @var = [var, var, var] if var;Fi[@I"@var ||= "STRING";FI"try("STRING", var);FI"	self;Fi[[	@,iI"í        @var = nil
      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      ;Fi[	@,iI"å        self
      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      ;Fi[	@,iI"å        self
      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      ;Fi[	@,i%I"å        self
      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      ;Fi[	@,i2I"å        self
      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      ;Fi[	@,i8I"å        self
      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      ;Fi[I";add_property_to_class(SiriSetRequestOrigin, "LITERAL");FI";add_property_to_class(SiriSetRequestOrigin, "LITERAL");FI";add_property_to_class(SiriSetRequestOrigin, "LITERAL");FI";add_property_to_class(SiriSetRequestOrigin, "LITERAL");Fi[[	@/i˛I"f    self.age = var
  end
end
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL");Fi[	@/iˇI"ä  end
end
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL");Fi[	@/i I"ªend
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL");Fi[	@/iI"Óadd_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL");Fi[	@/iI"∑add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL");Fi[	@/iI"Äadd_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL")
add_property_to_class(SiriSetRequestOrigin, "LITERAL");Fi[I"if (@var == "STRING") then;FI"out("STRING");FI"	else;F@¡i[[	@äiÙI"π  def function(arglist)
    out("STRING")
    out("STRING")
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else;Fi[	@äi˜I"≈    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then
          out("STRING")
        else;Fi[	@äiI"õ        end
      end
    end
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else;Fi[	@li	I"π  def function(arglist)
    out("STRING")
    out("STRING")
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else;Fi[	@li	I"≈    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else
        if (@var == "STRING") then
          out("STRING")
        else;Fi[	@li%	I"õ        end
      end
    end
    if (@var == "STRING") then
      out("STRING")
    else
      if (@var == "STRING") then
        out("STRING")
      else;Fi[@ã@å@çI"#;Fi[[	@Ji+I"[      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var;Fi[	@íiCI"`      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var, var = case var;Fi[	@ïi}I"`      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var, var = case var;Fi[	@Oi)I"[      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var;Fi[	@Ti3I"[      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var;Fi[	@Yi'I"[      #
      # `:failure`
      # : The backup operation failed.
      # : Notification will be sent, including the Exception which caused
      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var;Fi[@+@,@¶I"'raise(ActiveRecordError, "STRING");Fi[[	@1i◊I"€            "STRING"
          when nil then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end
        when "STRING" then;Fi[	@1iÊI"Ò            "STRING"
          when nil, "LITERAL", "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end
        when "STRING" then;Fi[	@1iÛI"”            "STRING"
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end
        else;Fi[	@;i1I"˛              "STRING"
            when "LITERAL", "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING")
            end
          when "STRING" then;Fi[	@;i9I"˚          when "STRING" then
            return super unless var
            case var
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING")
            end
          when "STRING" then;Fi[	@;iCI"„            case var
            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING")
            end
          else;Fi[I"@var ||= "STRING";F@|I"	self;FI"end;Fi[[	@,iI"õ      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      
      def function(arglist);Fi[	@,iI"õ      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      
      def function(arglist);Fi[	@,i I"õ      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      
      def function(arglist);Fi[	@,i&I"õ      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      
      def function(arglist);Fi[	@,i3I"õ      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      
      def function(arglist);Fi[	@,i9I"õ      end
      
      def function(arglist)
        @var ||= "STRING"
        try("STRING", var)
        self
      end
      
      def function(arglist);Fi[I"&merge_list!(var.options, var.pop);FI"Cunless (var.options["LITERAL"] or var.options["LITERAL"]) then;FI"8merge_owner!(var.options, (var.pop or screen_name));FI"end;Fi[[	@Í	iJI"ì      #     Twitter.list_timeline(7505382, 8863586)
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end
        objects_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options)
      end;Fi[	@Í	iI"y      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end
        object_from_response(Twitter::List, var, var, var.options)
      end;Fi[	@Í	iI"i      
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end
        cursor_from_response("LITERAL", Twitter::User, var, var, var.options, var)
      end;Fi[	@Í	iI"k        begin
          (var = Twitter::API::Arguments.new(var)
          merge_user!(var.options, var.pop)
          merge_list!(var.options, var.pop)
          unless (var.options["LITERAL"] or var.options["LITERAL"]) then
            merge_owner!(var.options, (var.pop or screen_name))
          end
          send(var.to_sym, var, var.options)
          true);Fi[	@Í	i)I"|      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_user!(var.options, var.pop)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end
        object_from_response(Twitter::List, var, var, var.options)
      end;Fi[	@Í	i3I"¬      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var = var.pop
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end
        var.flatten.each_slice(MAX_USERS_PER_REQUEST).threaded_map do |arglist|
          object_from_response(Twitter::List, var, var, merge_users(var.options, var));Fi[@l@m@ÇI"?var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[[	@”isI"ˇ    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then;Fi[	@”i∑I"ˇ    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then;Fi[	@‡ihI"Ó    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = var
      if (var == "LITERAL") then;Fi[	@‡i≤I"Ó    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = var
      if (var == "LITERAL") then;Fi[	@ÌibI"ˇ    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then;Fi[	@Ìi¶I"ˇ    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then;Fi[I""if File.exist?("STRING") then;FI""LITERAL";FI"	else;F@i[[	@
iiI"˛# in the project, it will set the :scm variable to :git and so on. If no 
# directory is found, it will default to :git.
def function(arglist)
  if File.exist?("STRING") then
    "LITERAL"
  else
    if File.exist?("STRING") then
      "LITERAL"
    else;Fi[	@
ilI"∞  if File.exist?("STRING") then
    "LITERAL"
  else
    if File.exist?("STRING") then
      "LITERAL"
    else
      if File.exist?("STRING") then
        "LITERAL"
      else;Fi[	@
ioI"¬    if File.exist?("STRING") then
      "LITERAL"
    else
      if File.exist?("STRING") then
        "LITERAL"
      else
        if File.exist?("STRING") then
          "LITERAL"
        else;Fi[	@
irI"‘      if File.exist?("STRING") then
        "LITERAL"
      else
        if File.exist?("STRING") then
          "LITERAL"
        else
          if File.exist?("STRING") then
            "LITERAL"
          else;Fi[	@
iuI"Ê        if File.exist?("STRING") then
          "LITERAL"
        else
          if File.exist?("STRING") then
            "LITERAL"
          else
            if File.exist?("STRING") then
              "LITERAL"
            else;Fi[	@
ixI"¯          if File.exist?("STRING") then
            "LITERAL"
          else
            if File.exist?("STRING") then
              "LITERAL"
            else
              if File.exist?("STRING") then
                "LITERAL"
              else;Fi[@˚@e@I""LITERAL";Fi[[	@
ijI"ÿ# directory is found, it will default to :git.
def function(arglist)
  if File.exist?("STRING") then
    "LITERAL"
  else
    if File.exist?("STRING") then
      "LITERAL"
    else
      if File.exist?("STRING") then;Fi[	@
imI"∂    "LITERAL"
  else
    if File.exist?("STRING") then
      "LITERAL"
    else
      if File.exist?("STRING") then
        "LITERAL"
      else
        if File.exist?("STRING") then;Fi[	@
ipI"»      "LITERAL"
    else
      if File.exist?("STRING") then
        "LITERAL"
      else
        if File.exist?("STRING") then
          "LITERAL"
        else
          if File.exist?("STRING") then;Fi[	@
isI"⁄        "LITERAL"
      else
        if File.exist?("STRING") then
          "LITERAL"
        else
          if File.exist?("STRING") then
            "LITERAL"
          else
            if File.exist?("STRING") then;Fi[	@
ivI"Ï          "LITERAL"
        else
          if File.exist?("STRING") then
            "LITERAL"
          else
            if File.exist?("STRING") then
              "LITERAL"
            else
              if File.exist?("STRING") then;Fi[	@
iyI"            "LITERAL"
          else
            if File.exist?("STRING") then
              "LITERAL"
            else
              if File.exist?("STRING") then
                "LITERAL"
              else
                File.exist?("STRING") ? ("LITERAL") : ("LITERAL");Fi[@l@ô@ö@ûi[[	@”i{I"*      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next;Fi[	@”ièI";          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else;Fi[	@‡ipI"'      if (var == "LITERAL") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next;Fi[	@‡iâI";          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else;Fi[	@ÌijI"*      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next;Fi[	@Ìi~I";          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else;Fi[@ñI"var = "STRING";FI"var = "STRING";FI"	else;Fi[[	@”ifI"Á    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?;Fi[	@‡i[I"Á    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?;Fi[	@ÌiUI"Á    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?;Fi[	@äiEI"    var = "LITERAL"
    if var.!=("LITERAL") then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.index("STRING").nil?;Fi[	@li>I"œ    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        if var.is_a?(String) then
          var = "STRING";Fi[	@liI"œ    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        if var.is_a?(String) then
          var = "STRING";Fi[@Ë@©@æI"end;Fi[[	@1iÿI"Ÿ          when nil then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end
        when "STRING" then
          case var;Fi[	@1iÁI"Ô          when nil, "LITERAL", "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end
        when "STRING" then
          case var;Fi[	@1iÙI"Œ          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            raise(ActiveRecordError, "STRING")
          end
        else
          super;Fi[	@;i2I"            when "LITERAL", "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING")
            end
          when "STRING" then
            return super unless var;Fi[	@;i:I"            return super unless var
            case var
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING")
            end
          when "STRING" then
            return "STRING" unless var;Fi[	@;iDI"‡            when "LITERAL" then
              "STRING"
            when "LITERAL" then
              "STRING"
            else
              raise(ActiveRecordError, "STRING")
            end
          else
            super;Fi[I"var.print("STRING");F@É@ÑI"when "STRING" then;Fi
[
[	@áiíI"˝      while (var < var.length) do
        case var[var]
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@áiîI"˛        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@áiñI"˛        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@áiòI"˛        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then;Fi[	@áiöI"        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        when "STRING" then
          var.print("STRING")
        else;Fi[I"require("rubygems");FI"require("sequel");FI"require("fileutils");FI"require("yaml");Fi
[
[	@òi I"mrequire("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module Drupal;Fi [	@õi I"mrequire("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module Joomla;Fi [	@°i I"irequire("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module MT;Fi [	@§i I"rrequire("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module TextPattern;Fi [	@i I"prequire("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module WordPress;Fi [I"&# @return [Array<Twitter::Tweet>];FI"def function(arglist);FI"U@var = Array(@var["LITERAL"]).map { |arglist| Twitter::Tweet.fetch_or_new(var) };FI"end;Fi
[
[	I"2data//twitter_proj/twitter/action/favorite.rb;TiI"˜      
      # A collection containing the favorited tweet
      #
      # @return [Array<Twitter::Tweet>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::Tweet.fetch_or_new(var) }
      end
    end
  end;Fi[	@:iI""      
      # A collection of tweets that mention a user
      #
      # @return [Array<Twitter::Tweet>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::Tweet.fetch_or_new(var) }
      end
      
      # A collection containing the mentioned user;Fi[	I"/data//twitter_proj/twitter/action/reply.rb;TiI"K    class Reply < Twitter::Action::Tweet
      # A collection of tweets that reply to a user
      #
      # @return [Array<Twitter::Tweet>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::Tweet.fetch_or_new(var) }
      end
      
      # A collection that contains the replied-to tweets;Fi[	@viI"¸      
      # A collection that contains the replied-to tweets
      #
      # @return [Array<Twitter::Tweet>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::Tweet.fetch_or_new(var) }
      end
    end
  end;Fi[	@?iI"4    class Retweet < Twitter::Action::Tweet
      # A collection of retweets
      #
      # @return [Array<Twitter::Tweet>]
      def function(arglist)
        @var = Array(@var["LITERAL"]).map { |arglist| Twitter::Tweet.fetch_or_new(var) }
      end
      
      # A collection containing the retweeted user;Fi[@@Ä@ÅI"#assert(var.text_executable?.!);Fi
[
[	@ÑiHI"    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var));Fi[	@ÑiVI"
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var));Fi[	@ÑidI"
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var));Fi[	@ÑirI"    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert((var.arch == "LITERAL"));Fi[	@Ñi±I"
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert_equal([], var.archs)
    assert((var.arch == "LITERAL"));Fi[@+@◊I"	else;FI""LITERAL";Fi
[
[	@ÅiI"Ö    case @@var
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end
  end;Fi[	@Åi!I"Ü      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end
  end;Fi[	@
izI"•          "LITERAL"
        when *var then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        else
          "LITERAL"
        end
      end;Fi[	I"/data//homebrew_proj/test/test_compilers.rb;TiI"Œ    assert(var.fails_with?("LITERAL").!)
    var.select_compiler
    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end, ENV.compiler)
  end;Fi[	@îiYI"Æ    end)
    var.select_compiler
    assert_equal(case MacOS.clang_build_version
    when "LITERAL" then
      "LITERAL"
    else
      "LITERAL"
    end, ENV.compiler)
  end;Fi[I"1var = Category.create("LITERAL" => "STRING");FI"1var = Category.create("LITERAL" => "STRING");FI"var.move_to_child_of(var);FI"var.move_to_child_of(var);Fi
[
[	I"Rdata//redmine_proj/plugins/awesome_nested_set/spec/awesome_nested_set_spec.rb;Ti>I"8  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING");Fi[	@üiII"8  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING");Fi[	@üiTI"'  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var.name = nil
    var.save!("LITERAL" => (false));Fi[	I"Rdata//redmine_proj/plugins/awesome_nested_set/test/awesome_nested_set_test.rb;TiåI"î  #rebuild swaps the position of the 2 children when added using move_to_child twice onto same parent
  def function(arglist)
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING");Fi[	@¶iôI"{  # doing move_to_child twice onto same parent from the furthest right first
  def function(arglist)
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING");Fi[@ô@öI"1var = Category.create("LITERAL" => "STRING");F@õi
[
[	@üi=I"L    (categories("LITERAL").right.should == "LITERAL")
  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text;Fi[	@üiHI"F    (Category.roots.last.to_text.should == var)
  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text;Fi[	@üiSI"3    (Category.roots.last.to_text.should == var)
  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var.name = nil;Fi[	@¶iãI"u  
  #rebuild swaps the position of the 2 children when added using move_to_child twice onto same parent
  def function(arglist)
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text;Fi[	@¶iòI"\  
  # doing move_to_child twice onto same parent from the furthest right first
  def function(arglist)
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text;Fi[I"J# Defines an initialization hook into the owner class for setting the;FI"J# initial state of the machine *before* any attributes are set on the;FI"# object;FI"def function(arglist);Fi
[
[	I"Idata//state_machine_proj/state_machine/integrations/active_record.rb;Ti(I"0        end
      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_static_state_initializer
        define_dynamic_state_initializer;Fi[	I"Gdata//state_machine_proj/state_machine/integrations/data_mapper.rb;TiRI"_        ::DataMapper::Inflector.pluralize(var.to_s)
      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	I"Hdata//state_machine_proj/state_machine/integrations/mongo_mapper.rb;Ti&I"T        owner_class.keys[attribute.to_s]
      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	I"Cdata//state_machine_proj/state_machine/integrations/mongoid.rb;Ti*I"V        owner_class.fields[attribute.to_s]
      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[	I"Bdata//state_machine_proj/state_machine/integrations/sequel.rb;TiFI"Z        require("sequel/extensions/inflector")
      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end;Fi[I"3add_property_to_class(SiriLocation, "LITERAL");FI"3add_property_to_class(SiriLocation, "LITERAL");FI"3add_property_to_class(SiriLocation, "LITERAL");FI"3add_property_to_class(SiriLocation, "LITERAL");Fi
[
[	@/iπI"<    self.longitude = var
  end
end
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL");Fi[	@/i∫I"R  end
end
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL");Fi[	@/iªI"{end
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL");Fi[	@/iºI"ïadd_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
class SiriAnswer < SiriObject;Fi[	@/iΩI"~add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
add_property_to_class(SiriLocation, "LITERAL")
class SiriAnswer < SiriObject
  def function(arglist);Fi[@I"iif (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then;F@iI"	else;Fi
[
[	@äiI"9  
  attr_reader :function
  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end;Fi[	@äiI"H    out(@var) if (@var > "LITERAL")
  end
  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end;Fi[	@äiI"H    out(@var) if (@var > "LITERAL")
  end
  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end;Fi[	@li∂I"~  	# @since 1.3
  	# @see SetFillColor(), SetTextColor(), Line(), Rect(), Cell(), MultiCell()
  	#
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end;Fi[	@li I"v  	# @since 1.3
  	# @see SetDrawColor(), SetTextColor(), Rect(), Cell(), MultiCell()
  	#
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end;Fi[@ìI"(var << "STRING");FI"(var << "STRING");FI"(var << "STRING");Fi
[
[	I"+data//bundler_proj/bundler/resolver.rb;TiSI"˛          end
        else
          if var = @var[var].first then
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << gem_message(var))
            (var << "STRING");Fi[	@òi‰I"Ã        if var["LITERAL"] and (var["LITERAL"] and var["LITERAL"]) then
          var = view.content_tag("LITERAL", view.render_issue_tooltip(var["LITERAL"]).html_safe, "LITERAL" => "STRING")
          var = "STRING"
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << view.content_tag("LITERAL", var.html_safe, "LITERAL" => (var), "LITERAL" => "STRING"));Fi[	@òiÂI"ë          var = view.content_tag("LITERAL", view.render_issue_tooltip(var["LITERAL"]).html_safe, "LITERAL" => "STRING")
          var = "STRING"
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << view.content_tag("LITERAL", var.html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
        end;Fi[	I"'data//rescue_proj/resque/server.rb;Ti∂I"ˆ    get("STRING") do |arglist|
      var = Resque.info
      var = []
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      Resque.queues.each { |arglist| (var << "STRING") };Fi[	@˜i∑I"Ù      var = Resque.info
      var = []
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      (var << "STRING")
      Resque.queues.each { |arglist| (var << "STRING") }
      content_type("STRING");Fi[I"=# Call with no arguments to return all registered hooks.;FI"def function(arglist);FI"?var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"));FI"end;Fi
[
[	I" data//rescue_proj/resque.rb;Ti_I"˚  # worker.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  
  # Register a before_first_fork proc.;Fi[	@inI"  # permanent for the lifespan of the worker.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  
  # Register a before_fork proc.;Fi[	@i}I"  # long as the job currently being processed.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  
  # Register an after_fork proc.;Fi[	@iùI"
  # Job.before_perform hook.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  
  # Register an before_perform proc.;Fi[	@i¨I"  # Job.after_perform hook.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  
  # Register an after_perform proc.;Fi[@Â	@Ê	@Á	I";# @param options [Hash] A customizable set of options.;Fi
[
[	@Ì	iI"ß      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/mentions_timeline
      # @note This method can only return up to 800 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@Ì	i[I"•      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@Ì	ipI"∑      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@Ì	iÇI"∑      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/home_timeline
      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi[	@Ì	ióI"f      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/retweets_of_me
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;Fi[I",# Call with a block to register a hook.;F@¸I"def function(arglist);F@˛i
[
[	@i^I"  # changes you make will be permanent for the lifespan of the
  # worker.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  ;Fi[	@imI"8  # before every job, so be careful- any changes you make will be
  # permanent for the lifespan of the worker.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  ;Fi[	@i|I"?  # the current job. Any changes you make, therefore, will only live as
  # long as the job currently being processed.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  ;Fi[	@iúI""  # the job code is performed. This hook will run before any
  # Job.before_perform hook.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  ;Fi[	@i´I"!  # the job code has performed. This hook will run after any
  # Job.after_perform hook.
  #
  # Call with a block to register a hook.
  # Call with no arguments to return all registered hooks.
  def function(arglist)
    var ? (register_hook("LITERAL", var)) : (hooks("LITERAL"))
  end
  ;Fi[@fI"E["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];FI"when "STRING" then;FI"E["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi
[
[	@áiÉI"q    # it is the lexeme.
    def function(arglist)
      case var["LITERAL"]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@áiÖI"°      case var["LITERAL"]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@áiáI"–        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@áiâI"–        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]];Fi[	@áiãI"ú        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        nulltok(var);Fi[I"if var then;FI"if (var == "LITERAL") then;FI"var = "STRING";FI"var = "STRING";Fi
[
[	@”idI"∫      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else;Fi[	@‡iYI"∫      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else;Fi[	@ÌiSI"∫      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else;Fi[	@li<I"–    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else;Fi[	@liI"ÿ    SetY(var)
    var = ((@var - var) - @var) if (var == "LITERAL")
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else;Fi[@ˇ	@ 
I"9super(compose_message("STRING", "LITERAL" => (var)));FI"end;Fi
[
[	I"Bdata//mongoid_proj/lib/mongoid/errors/no_map_reduce_output.rb;TiI"Õ      #
      # @param [ Hash ] command The map/reduce command.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var)))
      end
    end
  end;Fi[	I"9data//mongoid_proj/lib/mongoid/errors/no_metadata.rb;TiI"»      #
      # @param [ Class ] klass The document class.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var)))
      end
    end
  end;Fi[	I"7data//mongoid_proj/lib/mongoid/errors/no_parent.rb;TiI"ÿ      #
      # @param [ Class ] klass The class of the embedded document.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var)))
      end
    end
  end;Fi[	I"?data//mongoid_proj/lib/mongoid/errors/no_session_config.rb;TiI"’      #
      # @param [ String, Symbol ] name The name of the session.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var)))
      end
    end
  end;Fi[	I"Ddata//mongoid_proj/lib/mongoid/errors/versioning_not_on_root.rb;TiI"»      #
      # @param [ Class ] klass The embedded class.
      #
      # @since 3.0.0
      def function(arglist)
        super(compose_message("STRING", "LITERAL" => (var)))
      end
    end
  end;Fi[I"O# * <tt>:if</tt> - Specifies a method, proc or string to call to determine;FI"M#   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,;FI"O#   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,;FI"O#   proc or string should return or evaluate to a +true+ or +false+ value.;Fi
[
[	I"Adata//activemodel_proj/active_model/validations/validates.rb;TiPI"∞      # * <tt>:on</tt> - Specifies when this validation is active. Runs in all
      #   validation contexts by default (+nil+), other options are <tt>:create</tt>
      #   and <tt>:update</tt>.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,;Fi[	I"7data//activemodel_proj/active_model/validations.rb;Ti)I"Õ      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,;Fi[	@cicI"Õ      #   (e.g. <tt>on: :create</tt> or <tt>on: :custom_validation_context</tt>)
      # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,;Fi[	I"Ddata//activerecord_proj/active_record/validations/associated.rb;Ti)I"∞      # * <tt>:on</tt> - Specifies when this validation is active. Runs in all
      #   validation contexts by default (+nil+), other options are <tt>:create</tt>
      #   and <tt>:update</tt>.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,;Fi[	I"Ddata//activerecord_proj/active_record/validations/uniqueness.rb;TiÑI"¢      #   attribute is +nil+ (default is +false+).
      # * <tt>:allow_blank</tt> - If set to +true+, skips this validation if the
      #   attribute is blank (default is +false+).
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should ot occur (e.g. <tt>unless: :skip_validation</tt>,;Fi[@I"super(var);FI"(instance_eval(&var) if block_given?;FI"end;Fi
[
[	@JiI"       # Campfire account's subdomain
      ##
      # Campfire account's room id
      def function(arglist)
        super(var)
        instance_eval(&var) if block_given?
      end
      
      private;Fi[	@ïilI"&      # Folder where mail will be kept when using the `:file` `delivery_method` option.
      # Default location is '$HOME/Backup/emails'
      # Example: '/tmp/test-mails'
      def function(arglist)
        super(var)
        instance_eval(&var) if block_given?
      end
      
      private;Fi[	@OiI"Ÿ      ##
      # API-Key
      # Create a Prowl account and request an API key on prowlapp.com.
      def function(arglist)
        super(var)
        instance_eval(&var) if block_given?
      end
      
      private;Fi[	@TiI"≈      # The message title
      ##
      # The priority of the notification
      def function(arglist)
        super(var)
        instance_eval(&var) if block_given?
      end
      
      private;Fi[	@YiI"≈      # Twitter consumer key credentials
      ##
      # OAuth credentials
      def function(arglist)
        super(var)
        instance_eval(&var) if block_given?
      end
      
      private;Fi[@(@)@*I"when "STRING" then;Fi
[
[	@áiÑI"r    def function(arglist)
      case var["LITERAL"]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@áiÜI"†      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@áiàI"†      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@áiäI"†      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then;Fi[	@áiåI"l      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        ["STRING", var["LITERAL", "LITERAL"], var["LITERAL", "LITERAL"]]
      when "STRING" then
        nulltok(var)
      when "STRING" then;Fi[@Ù@ı@ˆI"¥# @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi
[
[	@Ì	iI"ë      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @example Return the 20 most recent mentions (statuses containing @username) for the authenticating user
      #   Twitter.mentions;Fi[	@Ì	iHI"	      # @return [Array<Twitter::Tweet>]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[	@Ì	i_I"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[	@Ì	itI"Å      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :include_rts Specifies that the timeline should include native retweets in addition to regular tweets. Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will no longer contain a full user object.;Fi[	@Ì	iÜI"      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[@I"var = @var;TI"@var.each do |arglist|;FI"newobj;Fi
[
[	@”iÒI"õ  
  private
  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING");Fi[	@‡i˙I"õ  
  private
  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING");Fi[	@Ìi‡I"õ  
  private
  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING");Fi[	@äiMI"≥    out("STRING")
  end
  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out(((("STRING" + "STRING") + var) + "STRING"))
      out("STRING");Fi[	@li4I"µ  	# putfonts
  	# @access protected
  	#
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING");Fi[I")var.extend(StringInreplaceExtension);FI"-var.change_make_var!("STRING", "STRING");FI" assert_equal("STRING", var);FI"end;Fi
[
[	I"/data//homebrew_proj/test/test_inreplace.rb;Ti
I"Ïclass InreplaceTest < Test::Unit::TestCase
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  
  def function(arglist);Fi[	@¨iI"ƒ  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  
  def function(arglist);Fi[	@¨iI"ƒ  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  
  def function(arglist);Fi[	@¨iI"ƒ  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  
  def function(arglist);Fi[	@¨i&I"ƒ  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  
  def function(arglist);Fi[@ﬁ@ﬂ@‡I"def function(arglist);Ti
[
[	@‰iqI"      #
      #   person.pets.find(2, 3)
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.find(*var, &var)
      end;Ti[	@‰i‚I"J      #   person.pets.find(1, 2, 3)
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.create(var, &var)
      end;Ti[	@‰iI"	      #
      #   person.pets.delete(2, 3)
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.delete(*var)
      end;Ti[	@‰iI":      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.count(var, var)
      end;Ti[	@‰i≥I"1      #   person.pets
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      def function(arglist)
        @var.length
      end;Ti[@I"var = "STRING";F@¶@ßi
[
[	@¨iI"require("testing_env")
require("extend/string")
class InreplaceTest < Test::Unit::TestCase
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@¨iI"œ    assert_equal("STRING", var)
  end
  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@¨iI"œ    assert_equal("STRING", var)
  end
  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@¨iI"œ    assert_equal("STRING", var)
  end
  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[	@¨i$I"œ    assert_equal("STRING", var)
  end
  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end;Fi[I"if (@var > @var) then;FI"@var = @var;FI"@var = (@var + var);FI"!var = ((@var - @var) - @var);Fi
[
[	@”iŒI"}      var = (var + (var ? (var[var.chr]) : ("LITERAL") or "LITERAL"))
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL");Fi[	@‡i÷I";      end
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + var);Fi[	@ÌiΩI"}      var = (var + (var ? (var[var.chr]) : ("LITERAL") or "LITERAL"))
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL");Fi[	@äi∂I"P      var = (var + GetCharWidth(var, var))
      if (var > var) then
        if (var == "LITERAL") then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL");Fi[	@liÕI"@      var = GetStringWidth(var[var, (var - var)])
      if (var > var) then
        if (var == "LITERAL") then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (var - ("LITERAL" * @var))
            var = (var + "LITERAL");Fi[I"	true;FI"	else;FI"
false;TI"end;Ti
[
[	@)i(I"©      else
        if (var - var).any? then
          ActiveSupport::Deprecation.warn("STRING")
          true
        else
          false
        end
      end
    end;Ti[	@æiåI"ß    def function(arglist)
      case peek
      when LONG_RE, SHORT_RE, EQ_RE, SHORT_NUM, SHORT_SQ_RE then
        true
      else
        false
      end
    end
    ;Fi[	I"@data//capistrano_proj/capistrano/configuration/variables.rb;Ti:I"¡        protect(var) do |arglist|
          if @var.key?(var) then
            @var[var] = @var.delete(var)
            true
          else
            false
          end
        end
      end;Fi[	I"'data//diaspora_proj/models/user.rb;TiKI"ù    end
    if self.profile.update_attributes(var) then
      Postzord::Dispatcher.build(self, profile).post
      true
    else
      false
    end
  end
  ;Fi[	@äiÏI"ì  
  def function(arglist)
    if ((@var + var) > @var) and (@var.! and self.AcceptPageBreak) then
      true
    else
      false
    end
  end
  ;Fi[I"rescue LoadError;FI"STDERR.puts("STRING");FI"STDERR.puts("STRING");FI"(raise(FatalException.new("STRING"));Fi
[
[	I"4data//jekyll_proj/jekyll/converters/markdown.rb;TiI"          end
          @var = {}
          @var["STRING"]["STRING"].each { |arglist| @var[var.to_sym] = true })
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"))
        end
      when "STRING" then;Fi[	@˘i'I"      when "STRING" then
        begin
          require("kramdown")
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"))
        end
      when "STRING" then;Fi[	@˘i0I"!        begin
          (require("rdiscount")
          @var = @var["STRING"]["STRING"].map { |arglist| var.to_sym })
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"))
        end
      when "STRING" then;Fi[	@˘iFI"0            MaRuKu::Globals["LITERAL"] = @var["STRING"]["STRING"]
            MaRuKu::Globals["LITERAL"] = @var["STRING"]["STRING"]
          end)
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"))
        end
      else;Fi[	I"3data//jekyll_proj/jekyll/converters/textile.rb;TiI"Ÿ        (return if @var
        require("redcloth")
        @var = true)
      rescue LoadError
        STDERR.puts("STRING")
        STDERR.puts("STRING")
        raise(FatalException.new("STRING"))
      end
    end;Fi[@∆@«@»I"end;Fi
[
[	@Ãi∏I"œ            puts
            puts(var)
            puts("STRING")
            puts("STRING")
            puts("STRING")
            puts("STRING")
          end
        end
        if options["LITERAL"] then;Fi[	I"1data//capistrano_proj/capistrano/cli/help.rb;TiAI"Ê          unless var then
            if (var > var.length) then
              puts
              puts("STRING")
              puts("STRING")
              puts("STRING")
            end
            puts
            puts("STRING");Fi[	I"!data//homebrew_proj/build.rb;TiaI"¡      puts("STRING")
      puts("STRING")
      if ARGV.flag?("STRING") then
        puts("STRING")
        puts("STRING")
        puts("STRING")
      end
      interactive_shell(var)
    else;Fi[	@—iîI"¶    puts("STRING") if macports_or_fink
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
    puts("STRING")
  end
  
  def function(arglist);Fi[	@~iÓI"˝    var = var.split("STRING").collect { |arglist| Integer(var) }
    if (var["LITERAL"] == "LITERAL") and (var["LITERAL"] <= "LITERAL") then
      onoe("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
    end
    return var
  end;Fi[I";#   #       #<Pet id: 5, name: "Brain", person_id: 1>,;TI":#   #       #<Pet id: 6, name: "Boss",  person_id: 1>;TI"#   #    ];TI"#;Ti
[
[	@‰iGI"Q      #   person.pets
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy("4")
      #   # => #<Pet id: 4, name: "Benny", person_id: 1>;Ti[	@‰iQI"      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy(5, 6)
      #   # => [;Ti[	@‰iWI"      #
      #   person.pets.destroy(5, 6)
      #   # => [
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #
      #   person.pets.size  # => 0
      #   person.pets       # => [];Ti[	@‰ibI"0      #   person.pets
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #
      #   other_pets = person.pets.to_ary
      #   # => [;Ti[	@‰iiI"I      #   other_pets = person.pets.to_ary
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #
      #   other_pets.replace([Pet.new(name: 'BooGoo')])
      #;Ti[I"require("sequel");FI"require("fileutils");FI"require("yaml");FI"module Jekyll;Fi
[
[	@òiI"}require("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module Drupal
    QUERY = "STRING";Fi[	@õiI"Ürequire("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module Joomla
    def self.process(arglist);Fi[	@°iI"~require("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module MT
    QUERY = "STRING";Fi[	@§iI"Çrequire("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module TextPattern
    QUERY = "STRING";Fi[	@iI"ârequire("rubygems")
require("sequel")
require("fileutils")
require("yaml")
module Jekyll
  module WordPress
    def self.process(arglist);Fi[@Õ@Œ@œI"end;Fi
[
[	@”ibI"z    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end
end;Fi[	@‡icI"z    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end
end;Fi[	@ÌiMI"z    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end
end;Fi[	@li™I"}    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
  end
  
  #;Fi[	@üiπI"±          end
          newobj
          @var = self.n
          out("STRING")
          out("STRING")
          out("STRING")
        end
        
        def function(arglist);Fi[I"(flash["LITERAL"] = I18n.t("STRING");FI"	else;FI"(flash["LITERAL"] = I18n.t("STRING");FI"end;Fi
[
[	I";data//diaspora_proj/controllers/profiles_controller.rb;Ti+I"x      @var["LITERAL"] = Photo.where("LITERAL" => (current_user.person_id), "LITERAL" => (params["LITERAL"])).first
    end
    if current_user.update_profile(@var) then
      flash["LITERAL"] = I18n.t("STRING")
    else
      flash["LITERAL"] = I18n.t("STRING")
    end
    respond_to do |arglist|
      var.js { |arglist| render("LITERAL" => (true), "LITERAL" => "LITERAL") };Fi[	I"8data//diaspora_proj/controllers/users_controller.rb;Ti'I"M        if var["LITERAL"] and (var["LITERAL"] and var["LITERAL"]) then
          if @var.update_with_password(var) then
            var = true
            flash["LITERAL"] = I18n.t("STRING")
          else
            flash["LITERAL"] = I18n.t("STRING")
          end
        else
          if (var["LITERAL"] or var["LITERAL"]) then;Fi[	@Ji.I"(        else
          if (var["LITERAL"] or var["LITERAL"]) then
            if @var.update_attributes(var) then
              flash["LITERAL"] = I18n.t("STRING")
            else
              flash["LITERAL"] = I18n.t("STRING")
            end
          else
            if var["LITERAL"] then;Fi[	@Ji6I"C            if var["LITERAL"] then
              if @var.update_attributes(var) then
                I18n.locale = @var.language
                flash["LITERAL"] = I18n.t("STRING")
              else
                flash["LITERAL"] = I18n.t("STRING")
              end
            else
              if var["LITERAL"] then;Fi[	@JiFI"2              else
                if var["LITERAL"] then
                  if @var.update_attributes(var) then
                    flash["LITERAL"] = I18n.t("STRING")
                  else
                    flash["LITERAL"] = I18n.t("STRING")
                  end
                end
              end;Fi[@Õ@K@LI"$out(("STRING" + var["STRING"]));Fi
[
[	@”iXI"Ø      end
    end
    out((("STRING" + var) + "STRING"))
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING");Fi[	@‡iYI"™    end
    out((var + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING");Fi[	@ÌiCI"¬      var = (var + "STRING")
    end
    out((("STRING" + var) + "STRING"))
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING");Fi[	@li†I"™    end
    out((var + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING");Fi[	@liå
I"Á    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    var["STRING"].each do |arglist|
      out(((("STRING" + var.to_s) + "STRING") + var.to_s));Fi[I"# @rate_limited No;FI",# @authentication Requires user context;FI"g# @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;FI"6# @return [Twitter::User] The authenticated user.;Fi
[
[	I",data//twitter_proj/twitter/api/users.rb;Ti>I"      # Sets which device Twitter delivers updates to for the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_delivery_device
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param device [String] Must be one of: 'sms', 'none'.
      # @param options [Hash] A customizable set of options.;Fi[	@fiNI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile
      # @note Only the options specified will be updated.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :name Full name associated with the profile. Maximum of 20 characters.;Fi[	@fi`I"      # Updates the authenticating user's profile background image
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile_background_image
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param image [File] The background image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 800 kilobytes in size. Images with width larger than 2048 pixels will be forcibly scaled down. The image must be provided as raw multipart data, not a URL.
      # @param options [Hash] A customizable set of options.;Fi[	@fipI"=      # Sets one or more hex values that control the color scheme of the authenticating user's profile
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile_colors
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :profile_background_color Profile background color.;Fi[	@fiÄI"_      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile_image
      # @note Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image.
      # @note This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users/show.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param image [File] The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Animated GIFs will be converted to a static GIF of the first frame, removing the animation.
      # @param options [Hash] A customizable set of options.;Fi[I"out((var + "STRING"));FI"out("STRING");FI"newobj;FI"var = ("STRING" + var);Fi
[
[	@”i+I"K          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var));Fi[	@‡i4I"K          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var));Fi[	@ÌiI"K          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var));Fi[	@äiçI"K          "LITERAL".upto("LITERAL") do |arglist|
            (var << (GetCharWidth(var, var).to_s + "STRING"))
          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each do |arglist|
            (var << ((("STRING" + var) + "STRING") + var));Fi[	@liuI"l            var = var["STRING"]
            var = "STRING"
            "LITERAL".upto("LITERAL") { |arglist| (var << (var[var.chr] + "STRING")) }
            out((var + "STRING"))
            out("STRING")
            newobj
            var = ("STRING" + var)
            var["STRING"].each do |arglist|
              (var << ((("STRING" + var) + "STRING") + var));Fi[I"# @since 2.4.0;FI"def function(arglist);FI"@var ||= {};FI"end;Fi
[
[	I"-data//mongoid_proj/lib/mongoid/atomic.rb;Ti4I"¿    #
    # @return [ Hash ] The array pushes.
    #
    # @since 2.4.0
    def function(arglist)
      @var ||= {}
    end
    
    # For array fields these are the pulls that need to happen.;Fi[	@ái@I"≈    #
    # @return [ Hash ] The array pulls.
    #
    # @since 2.4.0
    def function(arglist)
      @var ||= {}
    end
    
    # For array fields these are the unique adds that need to happen.;Fi[	@áiLI"     #
    # @return [ Hash ] The array add_to_sets.
    #
    # @since 2.4.0
    def function(arglist)
      @var ||= {}
    end
    
    # Get all the atomic updates that need to happen for the current;Fi[	I",data//mongoid_proj/lib/mongoid/dirty.rb;Ti4I"¡    #
    # @return [ Hash<String, Object> ] The attribute changes.
    #
    # @since 2.4.0
    def function(arglist)
      @var ||= {}
    end
    
    # Get all the changes for the document.;Fi[	@éimI"Ò    #
    # @return [ Hash<String, Array<Object, Object> ] The previous changes.
    #
    # @since 2.4.0
    def function(arglist)
      @var ||= {}
    end
    
    # Remove a change from the dirty attributes hash. Used by the single field;Fi[I"var = case var;FI"when "LITERAL" then;FI""STRING";FI"when "LITERAL" then;Fi
[
[	@Ji0I"      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Oi.I"      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Ti8I"      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@Yi,I"      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[	@^iI"      var = Bundler::SystemRubyVersion.new
      if var = ruby_version.diff(var) then
        var, var, var = var
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING"
        when "LITERAL" then;Fi[@›@iI"	else;F@ki
[
[	@äiI"Z  attr_reader :function
  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    out(@var) if (@var > "LITERAL");Fi[	@äiI"=  end
  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    @var = @var.!=(@var);Fi[	@äiI"=  end
  
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    @var = @var.!=(@var);Fi[	@li∑I"í  	# @see SetFillColor(), SetTextColor(), Line(), Rect(), Cell(), MultiCell()
  	#
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    out(@var) if (@var > "LITERAL");Fi[	@liÀI"  	# @see SetDrawColor(), SetTextColor(), Rect(), Cell(), MultiCell()
  	#
  def function(arglist)
    if (((var == "LITERAL") and ((var == "LITERAL") and (var == "LITERAL"))) or (var == "LITERAL")) then
      @var = sprintf("STRING", (var / "LITERAL"))
    else
      @var = sprintf("STRING", (var / "LITERAL"), (var / "LITERAL"), (var / "LITERAL"))
    end
    @var = @var.!=(@var);Fi[@ñI":var = { "STRING" => "STRING", "STRING" => "LITERAL" };FI")AddCIDFonts(var, var, var, var, var);FI"end;Fi
[
[	@”iI"«  
  def function(arglist)
    var = Big5_widths
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, var, var, var)
  end
  
  def function(arglist);Fi[	@”i#I"   def function(arglist)
    var = {}
    "LITERAL".upto("LITERAL") { |arglist| var[var.chr] = "LITERAL" }
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, var, var, var)
  end
  
  def function(arglist);Fi[	@”i*I"≈  
  def function(arglist)
    var = GB_widths
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, var, var, var)
  end
  
  def function(arglist);Fi[	@‡iI"◊  def function(arglist)
    var = "STRING"
    var = SJIS_widths
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, var, var, var)
  end
  
  def function(arglist);Fi[	@ÌiI"∆  
  def function(arglist)
    var = UHC_widths
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, var, var, var)
  end
  
  def function(arglist);Fi[@ñ@¶@ß@®i
[
[	@¨i	I"Ìrequire("extend/string")
class InreplaceTest < Test::Unit::TestCase
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  ;Fi[	@¨iI"≤  end
  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  ;Fi[	@¨iI"≤  end
  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  ;Fi[	@¨iI"≤  end
  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  ;Fi[	@¨i%I"≤  end
  
  def function(arglist)
    var = "STRING"
    var.extend(StringInreplaceExtension)
    var.change_make_var!("STRING", "STRING")
    assert_equal("STRING", var)
  end
  ;Fi[@ñ@-I"	else;FI"var = "STRING";Fi
[
[	@”igI"    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?;Fi[	@‡i\I"    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?;Fi[	@ÌiVI"    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?;Fi[	@äiFI"    if var.!=("LITERAL") then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.index("STRING").nil?
        var = (var + "STRING") unless var.index("STRING").nil?;Fi[	@li∏I"¥    var = var.upcase
    if (var == "STRING") then
      if (var == "STRING") then
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
      end
    end;Fi[@lI"if var then;F@8I"var = "STRING";Fi
[
[	@”icI"ˆ    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING";Fi[	@‡iXI"ˆ    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING";Fi[	@ÌiRI"ˆ    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING";Fi[	@li;I"Í    var = (var - ("LITERAL" * @var))
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING";Fi[	@liI"€    SetX(var)
    SetY(var)
    var = ((@var - var) - @var) if (var == "LITERAL")
    var = "LITERAL"
    if var then
      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING";Fi[I"STDERR.puts("STRING");FI"STDERR.puts("STRING");F@ˆI"end;Fi
[
[	@˘i I"          @var = {}
          @var["STRING"]["STRING"].each { |arglist| @var[var.to_sym] = true })
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"))
        end
      when "STRING" then
        begin;Fi[	@˘i(I"Â        begin
          require("kramdown")
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"))
        end
      when "STRING" then
        begin;Fi[	@˘i1I"!          (require("rdiscount")
          @var = @var["STRING"]["STRING"].map { |arglist| var.to_sym })
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"))
        end
      when "STRING" then
        begin;Fi[	@˘iGI"            MaRuKu::Globals["LITERAL"] = @var["STRING"]["STRING"]
          end)
        rescue LoadError
          STDERR.puts("STRING")
          STDERR.puts("STRING")
          raise(FatalException.new("STRING"))
        end
      else
        (STDERR.puts("STRING");Fi[	@iI"∆        require("redcloth")
        @var = true)
      rescue LoadError
        STDERR.puts("STRING")
        STDERR.puts("STRING")
        raise(FatalException.new("STRING"))
      end
    end
    ;Fi[I"module ClassMethods;FI"J# Turn the object from the ruby type we deal with to a Mongo friendly;FI"# type.;FI"#;Fi
[
[	I"9data//mongoid_proj/lib/mongoid/extensions/boolean.rb;TiI"module Mongoid
  module Extensions
    module Boolean
      module ClassMethods
        # Turn the object from the ruby type we deal with to a Mongo friendly
        # type.
        #
        # @example Mongoize the object.
        #   Boolean.mongoize("123.11");Fi[	@√i I"Ï        true
      end
      
      module ClassMethods
        # Turn the object from the ruby type we deal with to a Mongo friendly
        # type.
        #
        # @example Mongoize the object.
        #   Float.mongoize("123.11");Fi[	@∆ißI"        var ? (var.mongoize(var)) : (var)
      end
      
      module ClassMethods
        # Turn the object from the ruby type we deal with to a Mongo friendly
        # type.
        #
        # @example Mongoize the object.
        #   Hash.mongoize([ 1, 2, 3 ]);Fi[	@Ài,I"Ò        true
      end
      
      module ClassMethods
        # Turn the object from the ruby type we deal with to a Mongo friendly
        # type.
        #
        # @example Mongoize the object.
        #   BigDecimal.mongoize("123.11");Fi[	I"8data//mongoid_proj/lib/mongoid/extensions/regexp.rb;TiI"module Mongoid
  module Extensions
    module Regexp
      module ClassMethods
        # Turn the object from the ruby type we deal with to a Mongo friendly
        # type.
        #
        # @example Mongoize the object.
        #   Regexp.mongoize(/^[abc]/);Fi[@Ë@©I"var;FI"end;Fi
[
[	I"Cdata//activerecord_proj/active_record/relation/calculations.rb;TiêI"Í    def function(arglist)
      var.map! do |arglist|
        if var.is_a?(Symbol) and self.column_names.include?(var.to_s) then
          "STRING"
        else
          var
        end
      end
      if has_include?(var.first) then;Fi[	@∫iI"ß          when "STRING" then
            "STRING"
          when "LITERAL" then
            "STRING"
          else
            var
          end
        end
      end;Fi[	@÷iMI"…        when "STRING" then
          "STRING"
        when "STRING" then
          "STRING"
        else
          var
        end
      end
      Sass::Script::String.new(var.join("STRING"), var.type);Fi[	@îi'I"     def function(arglist)
      if var["LITERAL"] and timestamp_possible? then
        var = var.match("LITERAL") ? ("STRING") : ("STRING")
        "STRING"
      else
        var
      end
    end
    ;Fi[	@⁄i§I"À            var.gsub("LITERAL", "STRING")
            if var then
              var = var
              "STRING"
            else
              var
            end
          end
          var = "LITERAL";Fi[@lI"while (var < var) do;FI"var = var[var];FI")if (var == "STRING"["LITERAL"]) then;Fi	[	[	@äiTI"Ê    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        if (@var > "LITERAL") then
          @var = "LITERAL";Fi[	@äiûI"+    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        self.Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", "LITERAL", var)
        var = (var + "LITERAL");Fi[	@liOI"Ê    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        if (@var > "LITERAL") then
          @var = "LITERAL";Fi[	@li∏I"     var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL");Fi[@l@I"?var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);FI"var = (var < "LITERAL");Fi	[	[	@”itI"3    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var);Fi[	@”i∏I"C    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var);Fi[	@ÌicI"3    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var);Fi[	@ÌißI"C    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var);Fi[@l@mI"var = (var + "LITERAL");FI",var = var if var and (var == "LITERAL");Fi	[	[	@äiaI"        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        if (var == "STRING"["LITERAL"]) then;Fi[	@äiÇI"Ú          end
          var = "LITERAL"
          var = var
          var = "LITERAL"
          var = "LITERAL"
          var = (var + "LITERAL")
          var = var if var and (var == "LITERAL")
        else
          var = (var + "LITERAL");Fi[	@li]I"‡        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end;Fi[	@li{I"‡        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else
        var = (var + "LITERAL");Fi[@l@m@ÇI"var = var[var];Fi	[	[	@äiSI"ﬂ    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        if (@var > "LITERAL") then;Fi[	@äiùI"    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        self.Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", "LITERAL", var);Fi[	@liNI"ﬂ    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        if (@var > "LITERAL") then;Fi[	@li∑I"    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var);Fi[I"unless var.empty? then;FI"opoo("STRING");FI"puts("STRING");FI"puts("STRING");Fi	[	[	@‡i*I"  def function(arglist)
    return unless f.lib.directory?
    var = f.lib.children.select { |arglist| var.to_s =~ "LITERAL" }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING");Fi[	@‡i=I"¬      next if var.directory?
      var.include?(var.extname).!
    end
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true;Fi[	@‡iII"
  def function(arglist)
    return unless f.bin.directory?
    var = f.bin.children.select { |arglist| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true;Fi[	@‡iUI"  def function(arglist)
    return unless f.sbin.directory?
    var = f.sbin.children.select { |arglist| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true;Fi[@l@ô@öI"var = "LITERAL";Fi	[	[	@äi_I"U        var = (var == "LITERAL") ? ("LITERAL") : ((var - "LITERAL"))
        self.Cell(var, var, var[(var..var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL");Fi[	@äiÄI"2            self.Cell(var, var, var[(var..var)], var, "LITERAL", var, var)
            var = (var + "LITERAL")
          end
          var = "LITERAL"
          var = var
          var = "LITERAL"
          var = "LITERAL"
          var = (var + "LITERAL")
          var = var if var and (var == "LITERAL");Fi[	@li[I"B        var = (var == "LITERAL") ? ("LITERAL") : (var)
        Cell(var, var, var[(var..var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL");Fi[	@liyI"          Cell(var, var, var[(var..var)], var, "LITERAL", var, var)
          var = (var + "LITERAL")
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL");Fi[@l@û@üI"	next;Fi	[	[	@”i}I"‹        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end
      if var.! then;Fi[	@‡irI"Ë        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end
      if (var < "LITERAL") then;Fi[	@ÌilI"‹        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end
      if var.! then;Fi[	@li^I"Î        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end
      if (var == "STRING"["LITERAL"]) then;Fi[I"ìassert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"));FI"-ListMixin.find("LITERAL").move_to_bottom;FI"ìassert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"));FI"*ListMixin.find("LITERAL").move_to_top;Fi	[	[	@†i?I"6    ListMixin.find("LITERAL").move_lower
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_higher
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom;Fi[	@†iCI"    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
  end;Fi[	@†i…I"6    ListMixin.find("LITERAL").move_lower
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_higher
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom;Fi[	@†iÕI"    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
  end;Fi[@l@m@nI"ìassert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"));Fi	[	[	@†i@I"•    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_higher
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"));Fi[	@†iDI"È    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
  end
  ;Fi[	@†i I"•    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_higher
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"));Fi[	@†iŒI"È    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_bottom
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").move_to_top
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
  end
  ;Fi[I"@var.each do |arglist|;FI"newobj;FI"'out((("STRING" + var) + "STRING"));FI"out("STRING");Fi	[	[	@”iÛI"∂  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|;Fi[	@‡i¸I"∂  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|;Fi[	@Ìi‚I"∂  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|;Fi[	@li6I"≥  	#
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each do |arglist|;Fi[I"while (var < var) do;FI"(var << var);FI"var = Time.at(var).to_a;FI"var["LITERAL"] += var;Fi	[	[	I"-data//redmine_proj/SVG/Graph/Schedule.rb;Ti§I"T            case var
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var
                if (var["LITERAL"] > "LITERAL") then
                  var["LITERAL"] += (var["LITERAL"] / "LITERAL").to_i;Fi[	@òi∞I"              end
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var
                var = Time.local(*var).to_i
              end;Fi[	I"/data//redmine_proj/SVG/Graph/TimeSeries.rb;TigI"T            case var
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var
                if (var["LITERAL"] > "LITERAL") then
                  var["LITERAL"] += (var["LITERAL"] / "LITERAL").to_i;Fi[	@ùisI"              end
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var
                var = Time.local(*var).to_i
              end;Fi[@í@$@%I""if (var.chr == "STRING") then;Fi	[	[	@”iuI"?    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL");Fi[	@”iπI"O    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL");Fi[	@ÌidI"?    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL");Fi[	@Ìi®I"O    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL");Fi[@Z@[I"	else;FI"if (var == "LITERAL") then;Fi	[	[	@”iöI"    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var);Fi[	@‡iïI"    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var);Fi[	@ÌiâI"    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var);Fi[	@liâI"    end
    (var << "STRING") if var.is_a?(String) and var.include?("STRING")
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = var;Fi[I";#   #       #<Pet id: 4, name: "Benny", person_id: 1>,;T@@I"#   #    ];Ti	[	[	@‰iFI":      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #
      #   person.pets.destroy("4");Ti[	@‰iaI"'      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #
      #   other_pets = person.pets.to_ary;Ti[	@‰ihI"I      #
      #   other_pets = person.pets.to_ary
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #
      #   other_pets.replace([Pet.new(name: 'BooGoo')]);Ti[	@‰iuI"M      #   person.pets
      #   # This is not affected by replace
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      def function(arglist)
        load_target.dup;Ti[I")assert_equal("LITERAL", var.version);FI"5assert_equal("LITERAL", var.versions(true).size);FI"1var.update_attributes("LITERAL" => "STRING");FI")assert_equal("LITERAL", var.version);Fi	[	[	I"Hdata//redmine_proj/plugins/acts_as_versioned/test/versioned_test.rb;TiéI"|      alias_method("LITERAL", "LITERAL")
    end
    var = Page.create!("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING");Fi[	@ÀiëI"¿    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    Page.class_eval { |arglist| alias_method("LITERAL", "LITERAL") };Fi[	@ÀiùI"√    var = Page.version_condition
    Page.version_condition = Proc.new { |arglist| (var.title["LITERAL"] == "STRING") }
    var = Page.create!("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING");Fi[	@Ài†I"ú    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    Page.version_condition = var;Fi[@∆@«@»I"5assert_equal("LITERAL", var.versions(true).size);Fi	[	[	@ÀièI"|    end
    var = Page.create!("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version);Fi[	@ÀiíI"ù    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    Page.class_eval { |arglist| alias_method("LITERAL", "LITERAL") }
  end;Fi[	@ÀiûI"À    Page.version_condition = Proc.new { |arglist| (var.title["LITERAL"] == "STRING") }
    var = Page.create!("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version);Fi[	@Ài°I"y    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    var.update_attributes("LITERAL" => "STRING")
    assert_equal("LITERAL", var.version)
    assert_equal("LITERAL", var.versions(true).size)
    Page.version_condition = var
  end;Fi[@îI"if (var > "LITERAL") then;FI"@var = "LITERAL";FI"out("STRING");Fi	[	[	@äiıI"œ  def function(arglist)
    if self.BreakThePage?(var) then
      var = @var
      var = @var
      if (var > "LITERAL") then
        @var = "LITERAL"
        out("STRING")
      end
      self.AddPage(@var);Fi[	@li◊I"    if ((@var + var) > @var) and (@var.! and AcceptPageBreak) then
      if @var[(@var + "LITERAL")].nil? then
        var = @var
        var = @var
        if (var > "LITERAL") then
          @var = "LITERAL"
          out("STRING")
        end
        AddPage(@var);Fi[	@li(I"W      var = "LITERAL" if (var >= "LITERAL")
      if ((var + ((var["STRING"] * var) / (@var * @var))) > @var) and (@var.! and AcceptPageBreak) then
        if @var[(@var + "LITERAL")].nil? then
          var = @var
          if (var > "LITERAL") then
            @var = "LITERAL"
            out("STRING")
          end
          AddPage(@var);Fi[	@liXI"    if (@var > @var) and (@var.! and AcceptPageBreak) then
      if @var[(@var + "LITERAL")].nil? then
        var = @var
        var = @var
        if (var > "LITERAL") then
          @var = "LITERAL"
          out("STRING")
        end
        AddPage(@var);Fi[@î@òI"newobj;F@Üi	[	[	@”iÚI"†  private
  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end;Fi[	@‡i˚I"†  private
  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end;Fi[	@Ìi·I"†  private
  
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end;Fi[	@li5I"Ø  	# @access protected
  	#
  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end;Fi[I"it("STRING") do |arglist|;FI"1var = Category.create("LITERAL" => "STRING");F@ö@´i	[	[	@üi<I"[    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var);Fi[	@üiGI"6    Category.rebuild!
    (Category.roots.last.to_text.should == var)
  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var);Fi[	@üiRI"6    Category.rebuild!
    (Category.roots.last.to_text.should == var)
  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var);Fi[	@üi¨I"n    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = [var, var, var, var];Fi[I"var.move_to_child_of(var);F@úI"&var = Category.roots.last.to_text;FI""Category.update_all("STRING");Fi	[	[	@üi@I"\    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!
    (Category.roots.last.to_text.should == var);Fi[	@üiKI"\    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!
    (Category.roots.last.to_text.should == var);Fi[	@¶iéI"_    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!
    assert_equal(Category.roots.last.to_text, var);Fi[	@¶iõI"_    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!
    assert_equal(Category.roots.last.to_text, var);Fi[@@@I"Category.rebuild!;Fi	[	[	@üiAI"1    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!
    (Category.roots.last.to_text.should == var)
  end;Fi[	@üiLI"1    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!
    (Category.roots.last.to_text.should == var)
  end;Fi[	@¶ièI"4    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!
    assert_equal(Category.roots.last.to_text, var)
  end;Fi[	@¶iúI"4    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!
    assert_equal(Category.roots.last.to_text, var)
  end;Fi[@?@π@@i	[	[	@‰iEI"      #
      #   person.pets.size # => 3
      #   person.pets
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #;Ti[	@‰i`I"      #   end
      #
      #   person.pets
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #;Ti[	@‰igI""      #   #    ]
      #
      #   other_pets = person.pets.to_ary
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      #;Ti[	@‰itI"=      #
      #   person.pets
      #   # This is not affected by replace
      #   # => [
      #   #       #<Pet id: 4, name: "Benny", person_id: 1>,
      #   #       #<Pet id: 5, name: "Brain", person_id: 1>,
      #   #       #<Pet id: 6, name: "Boss",  person_id: 1>
      #   #    ]
      def function(arglist);Ti[I"5(categories("LITERAL").left.should == "LITERAL");FI"6(categories("LITERAL").right.should == "LITERAL");FI"5(categories("LITERAL").left.should == "LITERAL");FI"6(categories("LITERAL").right.should == "LITERAL");Fi	[	[	@üiI"ï    (var.should == categories("LITERAL").children.last)
  end
  it("STRING") do |arglist|
    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
    categories("LITERAL").move_to_child_of(categories("LITERAL"))
    Category.valid?.should(be_true);Fi[	@üiI"¶    categories("LITERAL").move_to_child_of(categories("LITERAL"))
    Category.valid?.should(be_true)
    (categories("LITERAL").id.should == categories("LITERAL").parent_id)
    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
  end
  it("STRING") do |arglist|;Fi[	@üi.I"|    (var.right.should == "LITERAL")
  end
  it("STRING") do |arglist|
    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
    var = Category.create("LITERAL" => "STRING")
    categories("LITERAL").move_to_child_of(var);Fi[	@üi7I"s    categories("LITERAL").reload
    Category.valid?.should(be_true)
    (var.id.should == categories("LITERAL").parent_id)
    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
    (categories("LITERAL").left.should == "LITERAL")
    (categories("LITERAL").right.should == "LITERAL")
  end
  it("STRING") do |arglist|;Fi[@ô@õ@ú@i	[	[	@üi?I"H  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!;Fi[	@üiJI"H  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!;Fi[	@¶içI"D  def function(arglist)
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!;Fi[	@¶iöI"D  def function(arglist)
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var = Category.create("LITERAL" => "STRING")
    var.move_to_child_of(var)
    var.move_to_child_of(var)
    var = Category.roots.last.to_text
    Category.update_all("STRING")
    Category.rebuild!;Fi[I" var.left.should_not(be_nil);FI"!var.right.should_not(be_nil);FI"$Category.valid?.should(be_true);FI"end;Fi	[	[	@üiÛI"°    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (categories("LITERAL").id))
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end
  it("STRING") do |arglist|
    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (categories("LITERAL")));Fi[	@üi˚I"å    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (categories("LITERAL")))
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end
  it("STRING") do |arglist|
    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (nil));Fi[	@üiI"+    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (nil))
    var.parent.should(be_nil)
    var.parent_id.should(be_nil)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end
  it("STRING") do |arglist|
    var = categories("LITERAL");Fi[	@üi'I"∏    var = categories("LITERAL").children.create!("LITERAL" => "STRING")
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end
  # create a new top-level node and move single-node top-level tree inside it.
  # create a new top-level node and move an entire top-level tree inside it.;Fi[I"8assert_equal("LITERAL", categories("LITERAL").left);FI"9assert_equal("LITERAL", categories("LITERAL").right);FI"8assert_equal("LITERAL", categories("LITERAL").left);FI"9assert_equal("LITERAL", categories("LITERAL").right);Fi	[	[	@¶i]I"`  end
  
  def function(arglist)
    assert_equal("LITERAL", categories("LITERAL").left)
    assert_equal("LITERAL", categories("LITERAL").right)
    assert_equal("LITERAL", categories("LITERAL").left)
    assert_equal("LITERAL", categories("LITERAL").right)
    categories("LITERAL").move_to_child_of(categories("LITERAL"))
    assert(Category.valid?);Fi[	@¶idI"î    categories("LITERAL").move_to_child_of(categories("LITERAL"))
    assert(Category.valid?)
    assert_equal(categories("LITERAL").id, categories("LITERAL").parent_id)
    assert_equal("LITERAL", categories("LITERAL").left)
    assert_equal("LITERAL", categories("LITERAL").right)
    assert_equal("LITERAL", categories("LITERAL").left)
    assert_equal("LITERAL", categories("LITERAL").right)
  end
  ;Fi[	@¶izI"c  end
  
  def function(arglist)
    assert_equal("LITERAL", categories("LITERAL").left)
    assert_equal("LITERAL", categories("LITERAL").right)
    assert_equal("LITERAL", categories("LITERAL").left)
    assert_equal("LITERAL", categories("LITERAL").right)
    var = Category.create("LITERAL" => "STRING")
    categories("LITERAL").move_to_child_of(var);Fi[	@¶iÉI"a    categories("LITERAL").reload
    assert(Category.valid?)
    assert_equal(var.id, categories("LITERAL").parent_id)
    assert_equal("LITERAL", categories("LITERAL").left)
    assert_equal("LITERAL", categories("LITERAL").right)
    assert_equal("LITERAL", categories("LITERAL").left)
    assert_equal("LITERAL", categories("LITERAL").right)
  end
  ;Fi[@[@\@]I"I# * <tt>:unless</tt> - Specifies a method, proc or string to call to;Fi	[	[	@ci*I"       # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;Fi[	@cidI"       # * <tt>:allow_nil</tt> - Skip validation if attribute is +nil+.
      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;Fi[	@hi*I"Ø      #   validation contexts by default (+nil+), other options are <tt>:create</tt>
      #   and <tt>:update</tt>.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;Fi[	@kiÖI"Ω      # * <tt>:allow_blank</tt> - If set to +true+, skips this validation if the
      #   attribute is blank (default is +false+).
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should ot occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;Fi[I"newobj;F@ÜI"out("STRING");FI"end;Fi	[	[	@”iÙI"¿  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj;Fi[	@‡i˝I"¿  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj;Fi[	@Ìi„I"¿  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj;Fi[	@li7I"ª  def function(arglist)
    var = @var
    @var.each do |arglist|
      newobj
      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each do |arglist|
      newobj;Fi[@+@◊I"when "STRING" then;FI""LITERAL";Fi	[	[	@
iÅI"–          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@
iãI"“          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[	@
ièI"¬          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        else
          "LITERAL";Fi[	@iSI"Ω    case default_cc
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "STRING" then
      "LITERAL"
    else
      if (Xcode.version >= "STRING") then;Fi[@˚@¸@˝@qi	[	[	@
iÄI"◊        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then;Fi[	@
iäI"Ÿ        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then;Fi[	@
iéI"         when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        else;Fi[	@iRI"´  def function(arglist)
    case default_cc
    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "STRING" then
      "LITERAL"
    else;Fi[@˚I"when "STRING" then;FI""LITERAL";FI"	else;Fi	[	[	@liJI"Î      self.behavior = case var["LITERAL"].to_s
      when "STRING", "STRING" then
        _cleanup_options_and_set(var, var["LITERAL"])
        "LITERAL"
      when "STRING" then
        "LITERAL"
      else
        "LITERAL"
      end;Fi[	@Ôi∑I"»      when "STRING", "STRING", "STRING", "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      else
        # do nothing
      end;Fi[	@
iêI"∫        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        else
          "LITERAL"
        end;Fi[	@iTI"ª    when "LITERAL" then
      "LITERAL"
    when "LITERAL" then
      "LITERAL"
    when "STRING" then
      "LITERAL"
    else
      if (Xcode.version >= "STRING") then
        "LITERAL";Fi[@dI"var = var["STRING"];FI"var = "STRING";FI"+"LITERAL".upto("LITERAL") do |arglist|;Fi	[	[	@”i%I"        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end;Fi[	@‡i.I"        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end;Fi[	@ÌiI"        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end;Fi[	@äiáI"          end
          out("STRING")
          out("STRING")
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            (var << (GetCharWidth(var, var).to_s + "STRING"))
          end;Fi[@dI"out("STRING");FI"out("STRING");FI"$out(("STRING" + var["STRING"]));Fi	[	[	@”iDI"á    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((((("STRING" + textstring("STRING")) + "STRING") + textstring(var["STRING"]["STRING"])) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"));Fi[	@‡iMI"U    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"));Fi[	@Ìi3I"U    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"));Fi[	@liîI"U    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"));Fi[@ìI"	else;FI"(var << "STRING");FI"end;Fi	[	[	@iœI"              else
                var = "STRING"
                if @var.source_types.include?(Bundler::Source::Rubygems) then
                  (var << "STRING")
                else
                  (var << "STRING")
                end
              end
            end;Fi[	@i7I"Á      var = "STRING"
      if var.required_by.first and var.required_by.first.name.!=(var.name) then
        (var << "STRING")
        (var << "STRING")
      else
        (var << "STRING")
      end
      (var << "STRING")
    end;Fi[	@i]I"”          else
            if var.required_by.first then
              (var << "STRING")
              (var << "STRING")
            else
              (var << "STRING")
            end
          end
        end;Fi[	@ﬁi!I"‹            (var << "STRING")
          else
            if (var < (var.length - "LITERAL")) then
              (var << "STRING")
            else
              (var << "STRING")
            end
          end
        end;Fi[@VI"@var = (var + var);FI"	else;FI"%@var = var if (var == "LITERAL");Fi	[	[	@”iûI"Ø      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end
    end;Fi[	@‡iôI"Ø      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end
    end;Fi[	@ÌiçI"Ø      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end
    end;Fi[	@liéI"∞    else
      if (var == "LITERAL") then
        @var = var
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end
    end;Fi[I"-# @return [ Strategy ] The new strategy.;FI"def function(arglist);FI"@var, @var = var, var;FI"@var = var.send(var.name);Fi	[	[	I"Adata//mongoid_proj/lib/mongoid/relations/cascading/delete.rb;TiI"6        # @param [ Document ] document The document to cascade from.
        # @param [ Metadata ] metadata The relation's metadata.
        #
        # @return [ Strategy ] The new strategy.
        def function(arglist)
          @var, @var = var, var
          @var = var.send(var.name)
        end
        ;Fi[	I"Bdata//mongoid_proj/lib/mongoid/relations/cascading/destroy.rb;TiI"6        # @param [ Document ] document The document to cascade from.
        # @param [ Metadata ] metadata The relation's metadata.
        #
        # @return [ Strategy ] The new strategy.
        def function(arglist)
          @var, @var = var, var
          @var = var.send(var.name)
        end
        ;Fi[	I"Bdata//mongoid_proj/lib/mongoid/relations/cascading/nullify.rb;TiI"6        # @param [ Document ] document The document to cascade from.
        # @param [ Metadata ] metadata The relation's metadata.
        #
        # @return [ Strategy ] The new strategy.
        def function(arglist)
          @var, @var = var, var
          @var = var.send(var.name)
        end
        ;Fi[	I"Cdata//mongoid_proj/lib/mongoid/relations/cascading/restrict.rb;TiI"6        # @param [ Document ] document The document to cascade from.
        # @param [ Metadata ] metadata The relation's metadata.
        #
        # @return [ Strategy ] The new strategy.
        def function(arglist)
          @var, @var = var, var
          @var = var.send(var.name)
        end
        ;Fi[@d@°@SI"out("STRING");Fi	[	[	@”iYI"∑    end
    out((("STRING" + var) + "STRING"))
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@‡iZI"¥    out((var + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@ÌiDI"∑    end
    out((("STRING" + var) + "STRING"))
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li°I"¥    out((var + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING");Fi[I"def self.included(arglist);FI"'if var.respond_to?("LITERAL") then;FI"(var.declare("LITERAL", ["LITERAL"]);FI"3var.declare("LITERAL", ["LITERAL", "LITERAL"]);Fi	[	[	I"Adata//compass_proj/compass/sass_extensions/functions/urls.rb;TiI"‹  end
  
  module StylesheetUrl
    def self.included(arglist)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end
    end;Fi[	@Îi-I"÷  end
  
  module FontUrl
    def self.included(arglist)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end
    end;Fi[	@ÎiFI"  end
  
  module ImageUrl
    def self.included(arglist)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL", "LITERAL"])
      end;Fi[	@ÎiyI"‡  end
  
  module GeneratedImageUrl
    def self.included(arglist)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end
    end;Fi[I"1# @return [ true, false ] If a value exists.;FI"def function(arglist);FI"determine(var, "LITERAL");FI"end;Fi	[	[	I"2data//mongoid_proj/lib/mongoid/matchers/gt.rb;TiI"À      #
      # @param [ Hash ] value The values to check.
      #
      # @return [ true, false ] If a value exists.
      def function(arglist)
        determine(var, "LITERAL")
      end
    end
  end;Fi[	I"3data//mongoid_proj/lib/mongoid/matchers/gte.rb;TiI"À      #
      # @param [ Hash ] value The values to check.
      #
      # @return [ true, false ] If a value exists.
      def function(arglist)
        determine(var, "LITERAL")
      end
    end
  end;Fi[	I"2data//mongoid_proj/lib/mongoid/matchers/lt.rb;TiI"À      #
      # @param [ Hash ] value The values to check.
      #
      # @return [ true, false ] If a value exists.
      def function(arglist)
        determine(var, "LITERAL")
      end
    end
  end;Fi[	I"3data//mongoid_proj/lib/mongoid/matchers/lte.rb;TiI"À      #
      # @param [ Hash ] value The values to check.
      #
      # @return [ true, false ] If a value exists.
      def function(arglist)
        determine(var, "LITERAL")
      end
    end
  end;Fi[@ÂI".var.send("LITERAL", "LITERAL", "LITERAL");FI".var.send("LITERAL", "LITERAL", "LITERAL");FI"end;Fi	[	[	@
iI"‹      
      HEADER_LEN = "LITERAL"
      
      def self.included(arglist)
        var.send("LITERAL", "LITERAL", "LITERAL")
        var.send("LITERAL", "LITERAL", "LITERAL")
      end
      
      def function(arglist);Fi[	I"Bdata//capistrano_proj/capistrano/configuration/connections.rb;TiI"˘module Capistrano
  class Configuration
    module Connections
      def self.included(arglist)
        var.send("LITERAL", "LITERAL", "LITERAL")
        var.send("LITERAL", "LITERAL", "LITERAL")
      end
      
      class DefaultConnectionFactory;Fi[	I"@data//capistrano_proj/capistrano/configuration/execution.rb;Ti	I"	module Capistrano
  class Configuration
    module Execution
      def self.included(arglist)
        var.send("LITERAL", "LITERAL", "LITERAL")
        var.send("LITERAL", "LITERAL", "LITERAL")
      end
      
      TaskCallFrame = Struct.new("LITERAL", "LITERAL");Fi[	I"<data//capistrano_proj/capistrano/configuration/roles.rb;Ti
I"Ëmodule Capistrano
  class Configuration
    module Roles
      def self.included(arglist)
        var.send("LITERAL", "LITERAL", "LITERAL")
        var.send("LITERAL", "LITERAL", "LITERAL")
      end
      
      attr_reader(:roles);Fi[I"# @since 2.0.0.rc.1;FI"def function(arglist);FI"/metadata and (metadata.macro == "LITERAL");FI"end;Fi	[	[	I"0data//mongoid_proj/lib/mongoid/relations.rb;TiMI"˜    #
    # @return [ true, false ] True if in an embeds many.
    #
    # @since 2.0.0.rc.1
    def function(arglist)
      metadata and (metadata.macro == "LITERAL")
    end
    
    # Determine if the document is part of an embeds_one relation.;Fi[	@iYI"˝    #
    # @return [ true, false ] True if in an embeds one.
    #
    # @since 2.0.0.rc.1
    def function(arglist)
      metadata and (metadata.macro == "LITERAL")
    end
    
    # Get the metadata name for this document. If no metadata was defined;Fi[	@iuI"˛    #
    # @return [ true, false ] True if in a references many.
    #
    # @since 2.0.0.rc.1
    def function(arglist)
      metadata and (metadata.macro == "LITERAL")
    end
    
    # Determine if the document is part of an references_one relation.;Fi[	@i|I"˛    #
    # @return [ true, false ] True if in a references one.
    #
    # @since 2.0.0.rc.1
    def function(arglist)
      metadata and (metadata.macro == "LITERAL")
    end
    
    # Convenience method for iterating through the loaded relations and;Fi[@˝@˛I""Threaded.executing?("STRING");FI"end;Fi	[	[	@‘	i(I"‹      #
      # @return [ true, false ] If the thread is assigning.
      #
      # @since 2.1.0
      def function(arglist)
        Threaded.executing?("STRING")
      end
      
      # Execute a block in binding mode.;Fi[	@‘	iGI"€      #
      # @return [ true, false ] If the thread is binding.
      #
      # @since 2.1.0
      def function(arglist)
        Threaded.executing?("STRING")
      end
      
      # Execute a block in building mode.;Fi[	@‘	ifI"‚      #
      # @return [ true, false ] If the thread is building.
      #
      # @since 2.1.0
      def function(arglist)
        Threaded.executing?("STRING")
      end
      
      # Is the current thread in creating mode?;Fi[	@‘	irI"€      #
      # @return [ true, false ] If the thread is creating.
      #
      # @since 2.1.0
      def function(arglist)
        Threaded.executing?("STRING")
      end
      
      # Execute a block in loading mode.;Fi[I"var = @var["STRING"];FI"7var = ((@var - @var) - @var) if (var == "LITERAL");FI"<var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);FI"'var = var.gsub("STRING", "STRING");Fi	[	[	@”i[I"D  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then;Fi[	@‡iPI"D  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then;Fi[	@ÌiJI"D  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then;Fi[	@äi:I"3  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")].chr == "STRING") then;Fi[@1I"!var = ((@var - @var) - @var);FI"<var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);FI"'var = var.gsub("STRING", "STRING");Fi	[	[	@”iØI"Ê  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL";Fi[	@‡i™I"Ê  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL";Fi[	@ÌiûI"Ê  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL";Fi[	@äiïI"Ê  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL";Fi[@fI""LITERAL";FI"when "STRING" then;FI""LITERAL";Fi	[	[	@Ôi∂I"—      case extname
      when "STRING", "STRING", "STRING", "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      else
        # do nothing;Fi[	@
i}I"ÿ      end
      link_dir("STRING", var) do |arglist|
        case var.to_s
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[	@
iÉI"–          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@
iÖI"–          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[@2@3@4I"var = var.length;Fi	[	[	@”i\I"J    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL");Fi[	@‡iQI"J    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL");Fi[	@ÌiKI"J    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL");Fi[	@äi;I"K  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")].chr == "STRING") then
      var = (var - "LITERAL");Fi[@fI"#say("STRING", "LITERAL", true);FI"when "STRING" then;FI"#say("STRING", "LITERAL", true);Fi	[	[	I":data//bundler_proj/bundler/vendor/thor/shell/color.rb;Ti{I"      
      def function(arglist)
        case var.action
        when "STRING" then
          say("STRING", "LITERAL", true)
        when "STRING" then
          say("STRING", "LITERAL", true)
        when "STRING" then
          say("STRING", "LITERAL", true);Fi[	@ii}I"        case var.action
        when "STRING" then
          say("STRING", "LITERAL", true)
        when "STRING" then
          say("STRING", "LITERAL", true)
        when "STRING" then
          say("STRING", "LITERAL", true)
          say("STRING", "LITERAL", true)
        else;Fi[	I"9data//bundler_proj/bundler/vendor/thor/shell/html.rb;TiiI"      
      def function(arglist)
        case var.action
        when "STRING" then
          say("STRING", "LITERAL", true)
        when "STRING" then
          say("STRING", "LITERAL", true)
        when "STRING" then
          say("STRING", "LITERAL", true);Fi[	@nikI"        case var.action
        when "STRING" then
          say("STRING", "LITERAL", true)
        when "STRING" then
          say("STRING", "LITERAL", true)
        when "STRING" then
          say("STRING", "LITERAL", true)
          say("STRING", "LITERAL", true)
        else;Fi[@3@4I"var = var.length;FI"var = "LITERAL";Fi	[	[	@”i±I"  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@‡i¨I"  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@Ìi†I"  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@äióI"  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[I"var;FI"	else;FI"var;FI"end;Fi	[	[	I"Qdata//activerecord_proj/active_record/associations/collection_association.rb;TiYI"Ï            (var.attribute_names.&(var.attribute_names) - var.changes.keys).each do |arglist|
              var[var] = var[var]
            end
            var
          else
            var
          end
        end
        (var + var);Fi[	I"\data//activerecord_proj/active_record/connection_adapters/abstract/schema_statements.rb;Ti1I"É              (var << "STRING")
            end
          end
          var
        else
          var
        end
      end
      ;Fi[	@@iÆI"ß          var = var.pos
          var = StringIO.new(var.read)
          var.pos = var.pos = var
          var
        else
          var
        end
      end
    end;Fi[	@⁄itI"ó      when "LITERAL" then
        var
      when "LITERAL" then
        var
      else
        var
      end
    end.flatten
    incoming_entities(var);Fi[I"DCell(var, var, var[var, (var - var)], var, "LITERAL", var, var);FI"if (var == "LITERAL") then;FI"@var = @var;FI"	else;Fi	[	[	@”iôI"	      end
    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var;Fi[	@‡iîI"	      end
    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var;Fi[	@ÌiàI"	      end
    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var;Fi[	@liàI"      out("STRING")
    end
    (var << "STRING") if var.is_a?(String) and var.include?("STRING")
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var;Fi[@fI"var["LITERAL"] = "STRING";FI"when "STRING" then;FI"var["LITERAL"] = "STRING";Fi	[	[	I"9data//redmine_proj/plugins/rfpdf/lib/core/rmagick.rb;TiI"˙    var["LITERAL"] = var.columns
    var["LITERAL"] = var.rows
    case var.mime_type
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING";Fi[	@¢iI"Ú    case var.mime_type
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING";Fi[	@¢iI"˚      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING";Fi[	@¢iI"‡      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    else
      # do nothing;Fi[@ªI"	else;F@ΩI"end;Fi	[	[	@”iüI"£    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end
    end
  end;Fi[	@‡iöI"£    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end
    end
  end;Fi[	@ÌiéI"£    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end
    end
  end;Fi[	@lièI"≠      if (var == "LITERAL") then
        @var = var
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end
    end
  end;Fi[I"#   class Person;FI"$#     include Mongoid::Document;FI"#     field :title;FI"#;Fi	[	[	I"2data//mongoid_proj/lib/mongoid/validations.rb;TiI"∑      #
      # @example
      #
      #   class Person
      #     include Mongoid::Document
      #     field :title
      #
      #     validates_uniqueness_of :title
      #   end;Fi[	@ΩiâI"Ó      # Validates the format of a field.
      #
      # @example
      #   class Person
      #     include Mongoid::Document
      #     field :title
      #
      #     validates_format_of :title, with: /^[a-z0-9 \-_]*$/i
      #   end;Fi[	@ΩiöI"‚      # Validates the length of a field.
      #
      # @example
      #   class Person
      #     include Mongoid::Document
      #     field :title
      #
      #     validates_length_of :title, minimum: 100
      #   end;Fi[	@Ωi´I"˘      # Validates whether or not a field is present - meaning nil or empty.
      #
      # @example
      #   class Person
      #     include Mongoid::Document
      #     field :title
      #
      #     validates_presence_of :title
      #   end;Fi[@?@@@AI"var = var.length;Fi	[	[	@”i∞I"Ù  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL";Fi[	@‡i´I"Ù  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL";Fi[	@ÌiüI"Ù  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL";Fi[	@äiñI"Ù  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL";Fi[I"TCell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var);FI"var = (var + "LITERAL");FI"var = "LITERAL";FI"var = var;Fi	[	[	@”iΩI"_      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then;Fi[	@‡i∏I"N      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = var
      if (var == "LITERAL") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then;Fi[	@Ìi¨I"_      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then;Fi[	@liºI"5    while (var < var) do
      var = var[var]
      if (var == "STRING"["LITERAL"]) then
        Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        if (var == "LITERAL") then;Fi[I"$out(("STRING" + var["STRING"]));FI"out("STRING");FI"out("STRING");FI"out("STRING");Fi	[	[	@”i[I"¨    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@‡i\I"¨    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@ÌiFI"¨    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li£I"¨    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[@fI"var = var;FI"while (var < var) do;F@ìi	[	[	@òi¢I"          if var then
            var = nil
            case var
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var;Fi[	@òiÆI"                end
                var = Time.local(*var).to_i
              end
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var;Fi[	@ùieI"          if var then
            var = nil
            case var
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var;Fi[	@ùiqI"                end
                var = Time.local(*var).to_i
              end
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var;Fi[@¿I"5if ((var == "STRING") or (var == "STRING")) then;FI"var = "STRING";FI"	else;Fi	[	[	@äidI"Ó    out(sprintf("STRING", var, var, var, var, var, var))
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end;Fi[	@äivI"Õ  def function(arglist)
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end;Fi[	@linI"Ó    out(sprintf("STRING", var, var, var, var, var, var))
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end;Fi[	@liàI"Õ  def function(arglist)
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end;Fi[@ﬂ@˜I"out("STRING");FI"out("STRING");Fi	[	[	@”i@I"  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING");Fi[	@‡iII"  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING");Fi[	@Ìi/I"  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING");Fi[	@liêI"    out("STRING")
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj
    out("STRING");Fi[@ÕI"Cout(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]));FI"$out(("STRING" + var["STRING"]));F@˜i	[	[	@”i>I"¯  end
  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING");Fi[	@‡iGI"¯  end
  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING");Fi[	@Ìi-I"¯  end
  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING");Fi[	@liéI"  def function(arglist)
    newobj
    out("STRING")
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING");Fi[@‰@ÂI"var = "LITERAL";F@0i	[	[	@äi`I"        self.Cell(var, var, var[(var..var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else;Fi[	@äiÅI"Ù            var = (var + "LITERAL")
          end
          var = "LITERAL"
          var = var
          var = "LITERAL"
          var = "LITERAL"
          var = (var + "LITERAL")
          var = var if var and (var == "LITERAL")
        else;Fi[	@li\I"        Cell(var, var, var[(var..var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next;Fi[	@lizI"‚          var = (var + "LITERAL")
        end
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
      else;Fi[@‰@Ó@ì@îi	[	[	@òi£I"$            var = nil
            case var
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var
                if (var["LITERAL"] > "LITERAL") then;Fi[	@òiØI".                var = Time.local(*var).to_i
              end
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var
                var = Time.local(*var).to_i;Fi[	@ùifI"$            var = nil
            case var
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var
                if (var["LITERAL"] > "LITERAL") then;Fi[	@ùirI".                var = Time.local(*var).to_i
              end
            when "STRING" then
              var = var
              while (var < var) do
                (var << var)
                var = Time.at(var).to_a
                var["LITERAL"] += var
                var = Time.local(*var).to_i;Fi[I"if (var == "STRING") then;FI"var = "STRING";FI"	else;FI"5if ((var == "STRING") or (var == "STRING")) then;Fi	[	[	@äibI"˘    var = (var - (var * var))
    var = var
    out(sprintf("STRING", var, var, var, var, var, var))
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else;Fi[	@äitI"µ  end
  
  def function(arglist)
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else;Fi[	@lilI"˘    var = (var - (var * var))
    var = var
    out(sprintf("STRING", var, var, var, var, var, var))
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else;Fi[	@liÜI"Í  	# @see SetLineWidth(), SetDrawColor(), SetFillColor()
  	#
  def function(arglist)
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else;Fi[@3@4I"	else;FI"if (var == "STRING") then;Fi	[	[	@äiGI"ﬂ    end
    if var.is_a?(String) then
      var.downcase!
      if (var == "STRING") then
        var = ["LITERAL", "LITERAL"]
      else
        if (var == "STRING") then
          var = ["LITERAL", "LITERAL"]
        else;Fi[	@äiJI"      if (var == "STRING") then
        var = ["LITERAL", "LITERAL"]
      else
        if (var == "STRING") then
          var = ["LITERAL", "LITERAL"]
        else
          if (var == "STRING") then
            var = ["LITERAL", "LITERAL"]
          else;Fi[	@äiMI"        if (var == "STRING") then
          var = ["LITERAL", "LITERAL"]
        else
          if (var == "STRING") then
            var = ["LITERAL", "LITERAL"]
          else
            if (var == "STRING") then
              var = ["LITERAL", "LITERAL"]
            else;Fi[	@äiPI"%          if (var == "STRING") then
            var = ["LITERAL", "LITERAL"]
          else
            if (var == "STRING") then
              var = ["LITERAL", "LITERAL"]
            else
              if (var == "STRING") then
                var = ["LITERAL", "LITERAL"]
              else;Fi[@ˇ	@ 
I"counts["STRING"];FI"end;Fi	[	[	I"<data//mongoid_proj/lib/mongoid/contextual/map_reduce.rb;Ti2I"‚      #
      # @return [ Integer ] The number of emitted documents.
      #
      # @since 3.0.0
      def function(arglist)
        counts["STRING"]
      end
      
      # Provide a finalize js function for the map/reduce.;Fi[	@Qi^I"–      #
      # @return [ Integer ] The number of input documents.
      #
      # @since 3.0.0
      def function(arglist)
        counts["STRING"]
      end
      
      # Sets the map/reduce to use jsMode.;Fi[	@QiåI"‡      #
      # @return [ Integer ] The number of output documents.
      #
      # @since 3.0.0
      def function(arglist)
        counts["STRING"]
      end
      
      # Get the raw output from the map/reduce operation.;Fi[	@QiØI"Ô      #
      # @return [ Integer ] The number of reduced documents.
      #
      # @since 3.0.0
      def function(arglist)
        counts["STRING"]
      end
      
      # Adds a javascript object to the global scope of the map/reduce.;Fi[I"# Returns true;FI"def function(arglist);FI"	true;FI"end;Fi	[	[	I"Qdata//activerecord_proj/active_record/connection_adapters/sqlite3_adapter.rb;TisI"ø        "STRING"
      end
      
      # Returns true
      def function(arglist)
        true
      end
      
      # Returns true if SQLite version is '3.6.8' or greater, false otherwise.;Fi[	@`iåI"à        true
      end
      
      # Returns true
      def function(arglist)
        true
      end
      
      def function(arglist);Fi[	@`i¢I"á        @var.clear
      end
      
      # Returns true
      def function(arglist)
        true
      end
      
      # Returns true;Fi[	@`ißI"à        true
      end
      
      # Returns true
      def function(arglist)
        true
      end
      
      def function(arglist);Fi[@ß	I"-# Credentials for the specified database;FI"##;FI"# Connectivity options;Fi	[	[	I"1data//backup_proj/backup/database/mongodb.rb;TiI"◊      
      ##
      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # IPv6 support (disabled by default);Fi[	I"/data//backup_proj/backup/database/mysql.rb;TiI"      ##
      # Name of the database that needs to get dumped
      # To dump all databases, set this to `:all` or leave blank.
      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Tables to skip while dumping the database;Fi[	I"4data//backup_proj/backup/database/postgresql.rb;TiI"ﬁ      
      ##
      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Tables to skip while dumping the database;Fi[	I"/data//backup_proj/backup/database/redis.rb;TiI"      
      ##
      # Name of and path to the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Determines whether Backup should invoke the SAVE command through;Fi[@¿I"if (var == "STRING") then;FI"!var = ["LITERAL", "LITERAL"];FI"	else;Fi	[	[	@äiII"      var.downcase!
      if (var == "STRING") then
        var = ["LITERAL", "LITERAL"]
      else
        if (var == "STRING") then
          var = ["LITERAL", "LITERAL"]
        else
          if (var == "STRING") then
            var = ["LITERAL", "LITERAL"];Fi[	@äiLI"      else
        if (var == "STRING") then
          var = ["LITERAL", "LITERAL"]
        else
          if (var == "STRING") then
            var = ["LITERAL", "LITERAL"]
          else
            if (var == "STRING") then
              var = ["LITERAL", "LITERAL"];Fi[	@äiOI"        else
          if (var == "STRING") then
            var = ["LITERAL", "LITERAL"]
          else
            if (var == "STRING") then
              var = ["LITERAL", "LITERAL"]
            else
              if (var == "STRING") then
                var = ["LITERAL", "LITERAL"];Fi[	@äiRI"          else
            if (var == "STRING") then
              var = ["LITERAL", "LITERAL"]
            else
              if (var == "STRING") then
                var = ["LITERAL", "LITERAL"]
              else
                raise(("STRING" + var))
              end;Fi[@Õ@£I"out("STRING");FI"out("STRING");Fi	[	[	@”iZI"¡    out((("STRING" + var) + "STRING"))
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@‡i[I"¨    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@ÌiEI"¡    out((("STRING" + var) + "STRING"))
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[	@li¢I"¨    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out(("STRING" + var["STRING"]))
    out("STRING")
    out("STRING")
    out("STRING")
    out("STRING");Fi[I"
super;FI"B@var = "STRING" unless (var.to_s.empty? or (var == "STRING"));FI"#@var = (HOMEBREW_CACHE + @var);FI"end;Fi	[	[	@~iZI"‡end
class CVSDownloadStrategy < AbstractDownloadStrategy
  def function(arglist)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @var)
  end
  
  attr_reader :function;Fi[	@~iÖI"Êend
class MercurialDownloadStrategy < AbstractDownloadStrategy
  def function(arglist)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @var)
  end
  
  attr_reader :function;Fi[	@~i≠I"„end
class BazaarDownloadStrategy < AbstractDownloadStrategy
  def function(arglist)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @var)
  end
  
  attr_reader :function;Fi[	@~iÀI"„end
class FossilDownloadStrategy < AbstractDownloadStrategy
  def function(arglist)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @var)
  end
  
  attr_reader :function;Fi[@@@˜I"out("STRING");Fi	[	[	@”i?I"˝  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj;Fi[	@‡iHI"˝  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj;Fi[	@Ìi.I"˝  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj;Fi[	@lièI"ˇ    newobj
    out("STRING")
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING")
    out("STRING")
    newobj;Fi[@4I"	else;F@B@{i	[	[	@äiHI"˚    if var.is_a?(String) then
      var.downcase!
      if (var == "STRING") then
        var = ["LITERAL", "LITERAL"]
      else
        if (var == "STRING") then
          var = ["LITERAL", "LITERAL"]
        else
          if (var == "STRING") then;Fi[	@äiKI"        var = ["LITERAL", "LITERAL"]
      else
        if (var == "STRING") then
          var = ["LITERAL", "LITERAL"]
        else
          if (var == "STRING") then
            var = ["LITERAL", "LITERAL"]
          else
            if (var == "STRING") then;Fi[	@äiNI"          var = ["LITERAL", "LITERAL"]
        else
          if (var == "STRING") then
            var = ["LITERAL", "LITERAL"]
          else
            if (var == "STRING") then
              var = ["LITERAL", "LITERAL"]
            else
              if (var == "STRING") then;Fi[	@äiQI")            var = ["LITERAL", "LITERAL"]
          else
            if (var == "STRING") then
              var = ["LITERAL", "LITERAL"]
            else
              if (var == "STRING") then
                var = ["LITERAL", "LITERAL"]
              else
                raise(("STRING" + var));Fi[I"var["STRING"] = "STRING";F@`@aI"when "STRING" then;Fi	[	[	@diI"      var["LITERAL"] = var.height
      case var["LITERAL"]
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then;Fi[	@diI"       when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then;Fi[	@diI"Ú      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      when "STRING" then
        var["STRING"] = "STRING"
      else;Fi[	@mi.I"-            when "STRING" then
              var["STRING"] = var["STRING"]
            when "STRING" then
              var["STRING"] = "STRING"
            when "STRING" then
              var["STRING"] = "STRING"
            when "STRING" then
              var["STRING"] = "STRING"
            else;Fi[@ñI".var["STRING"].keys.sort.each do |arglist|;FI"7var = (var + (var["STRING"][var].to_s + "STRING"));FI"end;Fi	[	[	@”iPI"      if (var["STRING"] == "STRING") then
        var = "STRING"
      else
        var = "STRING"
        var["STRING"].keys.sort.each do |arglist|
          var = (var + (var["STRING"][var].to_s + "STRING"))
        end
        var = (var + "STRING")
      end;Fi[	@‡iSI"u    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    var = "STRING"
    var["STRING"].keys.sort.each do |arglist|
      var = (var + (var["STRING"][var].to_s + "STRING"))
    end
    out((var + "STRING"))
    out("STRING");Fi[	@Ìi<I"Ù    if (var["STRING"] == "STRING") then
      var = "STRING"
    else
      var = "STRING"
      var["STRING"].keys.sort.each do |arglist|
        var = (var + (var["STRING"][var].to_s + "STRING"))
      end
      var = (var + "STRING")
    end;Fi[	@liöI"u    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    var = "STRING"
    var["STRING"].keys.sort.each do |arglist|
      var = (var + (var["STRING"][var].to_s + "STRING"))
    end
    out((var + "STRING"))
    out("STRING");Fi[I"if @var.!=(var) then;FI"@var = var;FI"out(var);FI"end;Fi	[	[	@äiÛI"ƒ      out(sprintf("STRING", (var * @var)))
    end
    self.SetFont(var, var, var) if var
    if @var.!=(var) then
      @var = var
      out(var)
    end
    if @var.!=(var) then
      @var = var;Fi[	@äi˜I"Ü      @var = var
      out(var)
    end
    if @var.!=(var) then
      @var = var
      out(var)
    end
    @var = var
    @var = var;Fi[	@li‰I"ø      out(sprintf("STRING", (var * @var)))
    end
    SetFont(var, var, var) if var
    if @var.!=(var) then
      @var = var
      out(var)
    end
    if @var.!=(var) then
      @var = var;Fi[	@liËI"Ü      @var = var
      out(var)
    end
    if @var.!=(var) then
      @var = var
      out(var)
    end
    @var = var
    @var = var;Fi[@ñ@ó@6I"var = "STRING";Fi	[	[	@äicI"Ú    var = var
    out(sprintf("STRING", var, var, var, var, var, var))
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING";Fi[	@äiuI"∆  
  def function(arglist)
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING";Fi[	@limI"Ú    var = var
    out(sprintf("STRING", var, var, var, var, var, var))
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING";Fi[	@liáI"»  	#
  def function(arglist)
    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING";Fi[I"@var = "STRING";FI"@var = @var;FI"@var = @var;FI"	else;Fi	[	[	@äieI"Ò    @var = (@var / @var)
    var.downcase!
    if ((var == "STRING") or (var == "STRING")) then
      @var = "STRING"
      @var = @var
      @var = @var
    else
      if ((var == "STRING") or (var == "STRING")) then
        @var = "STRING";Fi[	@äijI"∆      @var = @var
    else
      if ((var == "STRING") or (var == "STRING")) then
        @var = "STRING"
        @var = @var
        @var = @var
      else
        raise(("STRING" + var))
      end;Fi[	@lijI"ˆ    @var = (@var / @var)
    var = var.downcase
    if ((var == "STRING") or (var == "STRING")) then
      @var = "STRING"
      @var = @var
      @var = @var
    else
      if ((var == "STRING") or (var == "STRING")) then
        @var = "STRING";Fi[	@lioI"æ      @var = @var
    else
      if ((var == "STRING") or (var == "STRING")) then
        @var = "STRING"
        @var = @var
        @var = @var
      else
        Error("STRING")
      end;Fi[I"9out(sprintf("STRING", var, var, var, var, var, var));FI"var = var;FI"var = var;FI"var = "LITERAL";Fi	[	[	@äiFI"Ã    var = var
    var = var
    var = (var + (var * var))
    out(sprintf("STRING", var, var, var, var, var, var))
    var = var
    var = var
    var = "LITERAL"
    var = ("LITERAL" - var)
    var = var;Fi[	@äiXI"Ã    var = var
    var = var
    var = (var - (var * var))
    out(sprintf("STRING", var, var, var, var, var, var))
    var = var
    var = var
    var = "LITERAL"
    var = ("LITERAL" + var)
    var = var;Fi[	@liPI"Ã    var = var
    var = var
    var = (var + (var * var))
    out(sprintf("STRING", var, var, var, var, var, var))
    var = var
    var = var
    var = "LITERAL"
    var = ("LITERAL" - var)
    var = var;Fi[	@libI"Ã    var = var
    var = var
    var = (var - (var * var))
    out(sprintf("STRING", var, var, var, var, var, var))
    var = var
    var = var
    var = "LITERAL"
    var = ("LITERAL" + var)
    var = var;Fi[I"/@var.compressor.compress_with do |arglist|;FI"(var << var);FI"(var << var);FI"end;Fi	[	[	I"(data//backup_proj/backup/archive.rb;TiJI"Í      var = Pipeline.new
      (var << ("STRING" + "STRING"))
      if @var.compressor then
        @var.compressor.compress_with do |arglist|
          (var << var)
          (var << var)
        end
      end
      (var << "STRING");Fi[	@niuI"        var = (((@var + "STRING") + var) + "STRING")
        Logger.message(("STRING" + "STRING"))
        (var << "STRING")
        @var.compressor.compress_with do |arglist|
          (var << var)
          (var << var)
        end
        (var << "STRING")
        var.run;Fi[	@qi<I"Ï        var = "STRING"
        (var << mysqldump)
        if @var.compressor then
          @var.compressor.compress_with do |arglist|
            (var << var)
            (var << var)
          end
        end
        (var << "STRING");Fi[	@ti<I"È        var = "STRING"
        (var << pgdump)
        if @var.compressor then
          @var.compressor.compress_with do |arglist|
            (var << var)
            (var << var)
          end
        end
        (var << "STRING");Fi[I""#       send(attr).length < 5;FI"#     end;FI"#   end;FI"#;Fi	[	[	@.iRI"»      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[	@.iéI"»      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[	@.i“I"»      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[	@.iıI"»      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new
      #   person.name = 'Bob';Fi[I"%#     def attribute_short?(attr);F@I"#     end;FI"#   end;Fi	[	[	@.iQI"≤      #
      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new;Fi[	@.içI"≤      #
      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new;Fi[	@.i—I"≤      #
      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new;Fi[	@.iÙI"≤      #
      #     private
      #
      #     def attribute_short?(attr)
      #       send(attr).length < 5
      #     end
      #   end
      #
      #   person = Person.new;Fi[I"Hout((((("STRING" + var) + "STRING") + var.length.to_s) + "STRING"));FI"putstream(var);FI"out("STRING");FI"end;Fi	[	[	@äi;I"      out("STRING")
      var = @var ? (Zlib::Deflate.deflate(@var[var])) : (@var[var])
      newobj
      out((((("STRING" + var) + "STRING") + var.length.to_s) + "STRING"))
      putstream(var)
      out("STRING")
    end
    @var["LITERAL"] = @var.length
    out("STRING");Fi[	@äi√I"      if (var["STRING"] == "STRING") then
        newobj
        var = @var ? (Zlib::Deflate.deflate(var["STRING"])) : (var["STRING"])
        out((((("STRING" + var) + "STRING") + var.length.to_s) + "STRING"))
        putstream(var)
        out("STRING")
      end
    end
  end;Fi[	@liI"      out("STRING")
      var = @var ? (gzcompress(@var[var])) : (@var[var])
      newobj
      out((((("STRING" + var) + "STRING") + var.length.to_s) + "STRING"))
      putstream(var)
      out("STRING")
    end
    @var["LITERAL"] = @var.length
    out("STRING");Fi[	@li”I"      if (var["STRING"] == "STRING") then
        newobj
        var = @var ? (gzcompress(var["STRING"])) : (var["STRING"])
        out((((("STRING" + var) + "STRING") + var.length.to_s) + "STRING"))
        putstream(var)
        out("STRING")
      end
    end
  end;Fi[I"&(var << Notifiable.new("STRING"));FI"&(var << Notifiable.new("STRING"));FI"&(var << Notifiable.new("STRING"));FI"&(var << Notifiable.new("STRING"));Fi	[	[	I"-data//redmine_proj/redmine/notifiable.rb;TiI"Ö      (var << Notifiable.new("STRING", "STRING"))
      (var << Notifiable.new("STRING", "STRING"))
      (var << Notifiable.new("STRING", "STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"));Fi[	@CiI"{      (var << Notifiable.new("STRING", "STRING"))
      (var << Notifiable.new("STRING", "STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"));Fi[	@CiI"S      (var << Notifiable.new("STRING", "STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      var;Fi[	@CiI")      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      (var << Notifiable.new("STRING"))
      var
    end;Fi[I"%Redmine::Scm::Base.add("STRING");FI"%Redmine::Scm::Base.add("STRING");FI"%Redmine::Scm::Base.add("STRING");FI"%Redmine::Scm::Base.add("STRING");Fi	[	[	I""data//redmine_proj/redmine.rb;Ti1I"Á  require("csv")
  FCSV = CSV
end
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING");Fi[	@Ri2I"˜  FCSV = CSV
end
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING");Fi[	@Ri3I"end
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::CustomFieldFormat.map do |arglist|;Fi[	@Ri4I"+Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::Scm::Base.add("STRING")
Redmine::CustomFieldFormat.map do |arglist|
  var.register("STRING");Fi[@∆@«I"puts(var);FI"@var = true;Fi	[	[	@‡i/I"ò      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end
  end;Fi[	@‡i?I"ë    end
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end
  end;Fi[	@‡iKI"›    var = f.bin.children.select { |arglist| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end
  end;Fi[	@‡iWI"ﬁ    var = f.sbin.children.select { |arglist| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end
  end;Fi[I"$var = "LITERAL".match(var.to_s);F@I"$var = "LITERAL".match(var.to_s);FI".return var.captures.first unless var.nil?;Fi	[	[	@ioI"V    else
      "LITERAL".match(var.to_s) ? (Pathname.new(var.dirname).stem) : (var.stem)
    end
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[	@iqI"O    end
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[	@isI"u    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?;Fi[	@iuI"â    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var)
    return var.captures.first.gsub("STRING", "STRING") unless var.nil?;Fi[@∆I"puts(var);FI"@var = true;FI"end;Fi	[	[	@‡i0I"Ü      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end
  end
  ;Fi[	@‡i@I"å    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end
  end
  ;Fi[	@‡iLI"å    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end
  end
  ;Fi[	@‡iXI"å    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end
  end
  ;Fi[I"@var ||= false;FI"(instance_eval(&var) if block_given?;FI"@var = "STRING";FI"@var = "STRING";Fi	[	[	I"1data//backup_proj/backup/compressor/bzip2.rb;TiI"Ú      # Creates a new instance of Backup::Compressor::Bzip2
      def function(arglist)
        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end
      ;Fi[	I"0data//backup_proj/backup/compressor/gzip.rb;TiI"Ò      # Creates a new instance of Backup::Compressor::Gzip
      def function(arglist)
        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end
      ;Fi[	I"0data//backup_proj/backup/compressor/lzma.rb;TiI"Õ      def function(arglist)
        load_defaults!
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end
      ;Fi[	I"2data//backup_proj/backup/compressor/pbzip2.rb;TiI"»        load_defaults!
        @var ||= false
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end
      ;Fi[@ÇI"@var = "STRING";FI"@var = "STRING";FI"end;Fi	[	[	@áiI"ƒ      def function(arglist)
        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end
      
      private;Fi[	@äiI"ƒ      def function(arglist)
        load_defaults!
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end
      
      private;Fi[	@çiI"∫        load_defaults!
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end
      
      ##;Fi[	@êiI"∫        @var ||= false
        @var ||= false
        @var ||= false
        instance_eval(&var) if block_given?
        @var = "STRING"
        @var = "STRING"
      end
      
      ##;Fi[@iI"##;F@kI"##;Fi	[	[	@niI"Ÿ      ##
      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # IPv6 support (disabled by default)
      ##;Fi[	@qiI"      # Name of the database that needs to get dumped
      # To dump all databases, set this to `:all` or leave blank.
      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Tables to skip while dumping the database
      ##;Fi[	@tiI"‡      ##
      # Name of the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Tables to skip while dumping the database
      ##;Fi[	@wiI"A      ##
      # Name of and path to the database that needs to get dumped
      ##
      # Credentials for the specified database
      ##
      # Connectivity options
      ##
      # Determines whether Backup should invoke the SAVE command through
      # the 'redis-cli' utility to persist the most recent data before;Fi[@@?I"*var.flatten.threaded_map do |arglist|;FI"
begin;Fi	[	[	@DiVI"€      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)))
          rescue Twitter::Error::Forbidden => var;Fi[	@DixI"€      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)))
          rescue Twitter::Error::Forbidden => var;Fi[	@¸	iéI",      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          begin
            post_retweet(var, var.options)
          rescue Twitter::Error::Forbidden => var;Fi[	@¸	i©I",      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          begin
            post_retweet(var, var.options)
          rescue Twitter::Error::Forbidden => var;Fi[I""next if send(var).to_s.empty?;FI""STRING";FI"end.compact.join("STRING");FI"end;Fi	[	[	@niâI"Ò      # to perform the database dumping process
      def function(arglist)
        ["STRING", "STRING"].map do |arglist|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING")
      end
      
      ##;Fi[	@niìI"Ò      # to perform the database dumping process
      def function(arglist)
        ["STRING", "STRING"].map do |arglist|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING")
      end
      
      ##;Fi[	@qigI"˚      # to perform the database dumping process
      def function(arglist)
        ["STRING", "STRING", "STRING"].map do |arglist|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING")
      end
      
      ##;Fi[	@wigI"˚      # to perform the database dumping process
      def function(arglist)
        ["STRING", "STRING", "STRING"].map do |arglist|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING")
      end
      
      ##;Fi[I"var.register("LITERAL");FI"var.register("LITERAL");FI"var.register("LITERAL");FI"var.register("LITERAL");Fi	[	[	@RiŒI"  var.register("LITERAL", "LITERAL" => (false))
end
Redmine::Search.map do |arglist|
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL");Fi[	@RiœI"⁄end
Redmine::Search.map do |arglist|
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL");Fi[	@Ri–I"⁄Redmine::Search.map do |arglist|
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
end;Fi[	@Ri—I"‚  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
  var.register("LITERAL")
end
Redmine::WikiFormatting.map do |arglist|;Fi[I"var = @var.to_sexp;FI"var = (var + [var]) if var;FI"var = @var.to_sexp;FI""var = (var + var) if var.any?;Fi	[	[	I"3data//cucumber_prok/cucumber/ast/background.rb;TiUI"˜        init
        var = ["LITERAL", @var, @var]
        var = (var + [name]) unless name.empty?
        var = @var.to_sexp
        var = (var + [var]) if var
        var = @var.to_sexp
        var = (var + var) if var.any?
        var
      end;Fi[	I"0data//cucumber_prok/cucumber/ast/feature.rb;TieI"3      def function(arglist)
        init
        var = ["LITERAL", @var, name]
        var = @var.to_sexp
        var = (var + [var]) if var
        var = @var.to_sexp
        var = (var + var) if var.any?
        var = (var + [@var.to_sexp]) if @var
        var = (var + @var.map { |arglist| var.to_sexp });Fi[	I"1data//cucumber_prok/cucumber/ast/scenario.rb;TiaI"      
      def function(arglist)
        var = ["LITERAL", @var, @var, name]
        var = @var.to_sexp
        var = (var + [var]) if var
        var = @var.to_sexp
        var = (var + var) if var.any?
        var = @var.to_sexp
        var = (var + var) if var.any?;Fi[	@âi`I"      def function(arglist)
        init
        var = ["LITERAL", @var, name]
        var = @var.to_sexp
        var = (var + [var]) if var
        var = @var.to_sexp
        var = (var + var) if var.any?
        var = @var.to_sexp
        var = (var + var) if var.any?;Fi[I"9require("spec/runner/formatter/base_text_formatter");FI"module Spec;FI"module Runner;FI"module Formatter;Fi	[	[	I"Odata//rspec_proj/spec/runner/formatter/failing_example_groups_formatter.rb;Ti I"¡require("spec/runner/formatter/base_text_formatter")
module Spec
  module Runner
    module Formatter
      class FailingExampleGroupsFormatter < BaseTextFormatter
        def function(arglist);Fi [	I"Idata//rspec_proj/spec/runner/formatter/failing_examples_formatter.rb;Ti I"ºrequire("spec/runner/formatter/base_text_formatter")
module Spec
  module Runner
    module Formatter
      class FailingExamplesFormatter < BaseTextFormatter
        def function(arglist);Fi [	I"Ddata//rspec_proj/spec/runner/formatter/nested_text_formatter.rb;Ti I"≥require("spec/runner/formatter/base_text_formatter")
module Spec
  module Runner
    module Formatter
      class NestedTextFormatter < BaseTextFormatter
        INDENT = "STRING";Fi [	I"@data//rspec_proj/spec/runner/formatter/specdoc_formatter.rb;Ti I"¥require("spec/runner/formatter/base_text_formatter")
module Spec
  module Runner
    module Formatter
      class SpecdocFormatter < BaseTextFormatter
        def function(arglist);Fi [@I"/var = var.read("LITERAL").unpack("STRING");FI"return var["LITERAL"];FI"end;Fi	[	[	@äiπI"?    { "STRING" => (var), "STRING" => (var), "STRING" => (var), "STRING" => (var), "STRING" => "STRING", "STRING" => (var), "STRING" => (var), "STRING" => (var), "STRING" => (var) }
  end
  
  def function(arglist)
    var = var.read("LITERAL").unpack("STRING")
    return var["LITERAL"]
  end
  
  def function(arglist);Fi[	@äiæI"§    return var["LITERAL"]
  end
  
  def function(arglist)
    var = var.read("LITERAL").unpack("STRING")
    return var["LITERAL"]
  end
  
  def function(arglist);Fi[	@äi√I"§    return var["LITERAL"]
  end
  
  def function(arglist)
    var = var.read("LITERAL").unpack("STRING")
    return var["LITERAL"]
  end
  
  def function(arglist);Fi[	@li
I"Æ  	# Read a 4-byte integer from file
  	# @access protected
  	#
  def function(arglist)
    var = var.read("LITERAL").unpack("STRING")
    return var["LITERAL"]
  end
  
  #;Fi[@I"var = @var["STRING"];F@?@@i	[	[	@”iÆI"⁄    end
  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length;Fi[	@‡i©I"⁄    end
  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length;Fi[	@ÌiùI"⁄    end
  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length;Fi[	@äiîI"‚    @var = @var
  end
  
  def function(arglist)
    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length;Fi[I"#   class Vehicle;FI"7#     state_machine :state, :initial => :parked do;FI"#       ...;FI"#     end;Fi	[	[	@≈iÿI"†    # 
    # For example,
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #   end
    #   ;Fi[	@≈iÊI"Â    # 
    # In the following example, a custom +initialize+ method is defined:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize;Fi[	@≈i˜I"    # are called, the custom method *must* call +super+ without any arguments
    # like so:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize(attributes = {});Fi[	@≈iI"(    # If you want to avoid calling the superclass's constructor, but still want
    # to initialize the state machine attributes:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize(attributes = {});Fi[@w	@x	@y	I"#;Fi	[	[	@∂iBI"¯    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked;Fi[	@∂itI"¯    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked;Fi[	@≈inI"    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :shift_up do
    #         transition :idling => :first_gear;Fi[	@≈iüI"     # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked;Fi[I"if (var > "LITERAL") then;F@‡I"out("STRING");FI"end;Fi	[	[	@äiˆI"»    if self.BreakThePage?(var) then
      var = @var
      var = @var
      if (var > "LITERAL") then
        @var = "LITERAL"
        out("STRING")
      end
      self.AddPage(@var)
      @var = var;Fi[	@liÿI"€      if @var[(@var + "LITERAL")].nil? then
        var = @var
        var = @var
        if (var > "LITERAL") then
          @var = "LITERAL"
          out("STRING")
        end
        AddPage(@var)
        @var = var;Fi[	@li)I"O      if ((var + ((var["STRING"] * var) / (@var * @var))) > @var) and (@var.! and AcceptPageBreak) then
        if @var[(@var + "LITERAL")].nil? then
          var = @var
          if (var > "LITERAL") then
            @var = "LITERAL"
            out("STRING")
          end
          AddPage(@var)
          if (var > "LITERAL") then;Fi[	@liYI"€      if @var[(@var + "LITERAL")].nil? then
        var = @var
        var = @var
        if (var > "LITERAL") then
          @var = "LITERAL"
          out("STRING")
        end
        AddPage(@var)
        @var = var;Fi[I"%#         transition all => :off;FI"#       end;FI"#     end;FI"#   end;Fi	[	[	@∂iQI"
    #       end
    #       
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">;Fi[	@∂i~I"
    #       end
    #       
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   
    #   vehicle = Vehicle.new                         # => #<Vehicle:0xb7c02850 @state="parked", @alarm_state="active">;Fi[	@≈iïI"‰    #     
    #     state_machine :alarm_state, :initial => :active do
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   
    #   # Fire +ignite+ event directly;Fi[	@≈i–I"Â    #       end
    #       
    #       event :turn_off do
    #         transition all => :off
    #       end
    #     end
    #   end
    # 
    # The above class defines two state machines: +heater_state+ and +alarm_state+.;Fi[@®	@©	I"super(var, var);FI"@var ||= "LITERAL";Fi	[	[	@≥	iI"‡      ##
      # use passive mode?
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false;Fi[	@º	iI"Ë      ##
      # Flag to use local backups
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false;Fi[	@¬	iI"¸      ##
      # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[	@≈	iI"¸      ##
      # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        instance_eval(&var) if block_given?;Fi[@I"Ivar = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten);FI"var;FI"end;Fi	[	[	@hiƒI"æ        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var
      end
      
      def function(arglist);Fi[	@hi…I"æ        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var
      end
      
      def function(arglist);Fi[	@hiŒI"æ        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var
      end
      
      def function(arglist);Fi[	@hi”I"æ        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", [var.first.strip, var["LITERAL"]].flatten)
        var
      end
      
      def function(arglist);Fi[@I"0var = Node.new("LITERAL", [var["LITERAL"]]);FI"var;FI"end;Fi	[	[	@hiäI"±      end
      
      # reduce 20 omitted
      def function(arglist)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var
      end
      
      # reduce 22 omitted;Fi[	@hiI"•        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var
      end
      
      def function(arglist);Fi[	@hi!I"£        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var
      end
      
      # reduce 49 omitted;Fi[	@hisI"£        var
      end
      
      def function(arglist)
        var = Node.new("LITERAL", [var["LITERAL"]])
        var
      end
      
      # reduce 71 omitted;Fi[@πI"# object;F@ªI"Jdefine_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"));Fi	[	[	@¡iSI"2      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      ;Fi[	@ƒi'I"2      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      ;Fi[	@«i+I"2      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      ;Fi[	@ iGI"2      end
      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      ;Fi[I"var = read_file("STRING");FI"/assert(var.include?("STRING").!, "STRING");FI"-assert(var.include?("STRING"), "STRING");FI"end;Fi	[	[	I".data//homebrew_proj/test/test_patching.rb;Ti#I"  def function(arglist)
    shutup do |arglist|
      DefaultPatchBall.new("STRING").brew do |arglist|
        var = read_file("STRING")
        assert(var.include?("STRING").!, "STRING")
        assert(var.include?("STRING"), "STRING")
      end
    end
  end;Fi[	@{i-I"  def function(arglist)
    shutup do |arglist|
      ListPatchBall.new("STRING").brew do |arglist|
        var = read_file("STRING")
        assert(var.include?("STRING").!, "STRING")
        assert(var.include?("STRING"), "STRING")
      end
    end
  end;Fi[	@{i7I"ˇ  def function(arglist)
    shutup do |arglist|
      P0PatchBall.new("STRING").brew do |arglist|
        var = read_file("STRING")
        assert(var.include?("STRING").!, "STRING")
        assert(var.include?("STRING"), "STRING")
      end
    end
  end;Fi[	@{iAI"ˇ  def function(arglist)
    shutup do |arglist|
      P1PatchBall.new("STRING").brew do |arglist|
        var = read_file("STRING")
        assert(var.include?("STRING").!, "STRING")
        assert(var.include?("STRING"), "STRING")
      end
    end
  end;Fi[I"assert(var.universal?.!);FI"assert(var.i386?.!);FI"assert(var.x86_64?.!);FI"assert(var.ppc7400?.!);Fi	[	[	@ÑinI"◊  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ÑiçI"Ú  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ÑiùI"Ú  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@Ñi≠I"Ú  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[I"# object;F@ª@jI"end;Fi	[	[	@¡iTI"v      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      
      # Skips defining reader/writer methods since this is done automatically;Fi[	@ƒi(I"v      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      
      # Skips defining reader/writer methods since this is done automatically;Fi[	@«i,I"v      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      
      # Skips defining reader/writer methods since this is done automatically;Fi[	@ iHI"v      
      # Defines an initialization hook into the owner class for setting the
      # initial state of the machine *before* any attributes are set on the
      # object
      def function(arglist)
        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      
      # Skips defining reader/writer methods since this is done automatically;Fi[@k@I"{# @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.;FI"|# @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.;Fi	[	[	@Ì	iI"N      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@Ì	i]I"N      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@Ì	irI"N      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[	@Ì	iÑI"N      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;Fi[I"require("twitter/base");FI"!require("twitter/creatable");FI"module Twitter;FI"module Action;Fi	[	[	@0i I"ñrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action
    class Follow < Twitter::Base
      include(Twitter::Creatable);Fi [	@5i I"ürequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action
    class ListMemberAdded < Twitter::Base
      include(Twitter::Creatable);Fi [	@:i I"órequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action
    class Mention < Twitter::Base
      include(Twitter::Creatable);Fi [	@Bi I"ïrequire("twitter/base")
require("twitter/creatable")
module Twitter
  module Action
    class Tweet < Twitter::Base
      include(Twitter::Creatable);Fi [I"†# @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.;F@‰	@Â	@Ê	i	[	[	@˘iI"ñ      # Returns the 20 most recent direct messages sent to the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Direct messages sent to the authenticating user.
      # @param options [Hash] A customizable set of options.;Fi[	@˘i$I"õ      # Returns the 20 most recent direct messages sent by the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/sent
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] Direct messages sent by the authenticating user.
      # @param options [Hash] A customizable set of options.;Fi[	@˘i7I"5      # Returns a direct message
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/direct_messages/show
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::DirectMessage] The requested messages.
      # @param id [Integer] A Tweet IDs.;Fi[	@˘iEI"-        object_from_response(Twitter::DirectMessage, "LITERAL", "STRING", var)
      end
      
      # @note This method requires an access token with RWD (read, write & direct message) permissions. Consult The Application Permission Model for more information.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::DirectMessage>] The requested messages.
      # @overload direct_messages(options={});Fi[@I"var = case var;F@îI""STRING";Fi	[	[	@Ji/I"-      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Oi-I"-      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Ti7I"-      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[	@Yi+I"-      # : the failure, the Exception's backtrace, a copy of the current
      # : backup log and other information if `on_failure` was set to `true`
      #
      def function(arglist)
        var = case var
        when "LITERAL" then
          "STRING"
        when "LITERAL" then
          "STRING";Fi[@Ê	@Á	@@ûi	[	[	@Ì	iI"œ      # @note This method can only return up to 800 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@Ì	i\I"—      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@Ì	iqI"„      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[	@Ì	iÉI"„      # @note This method can only return up to 800 Tweets, including retweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.;Fi[@I"super(var, var);F@DI"@var ||= "STRING";Fi	[	[	@≥	iI"      # use passive mode?
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@º	iI"      # Flag to use local backups
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        @var ||= false
        instance_eval(&var) if block_given?;Fi[	@¬	iI"       # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        instance_eval(&var) if block_given?
        @var = path.sub("LITERAL", "STRING");Fi[	@≈	iI"       # Path to store backups to
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "LITERAL"
        @var ||= "STRING"
        instance_eval(&var) if block_given?
        @var = path.sub("LITERAL", "STRING");Fi[@ı@ˆ@äI"S# @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.;Fi	[	[	@Ì	iII"'      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @example Return the 20 most recent retweets posted by @sferik;Fi[	@Ì	i`I"ˇ      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @example Return the 20 most recent retweets posted by the authenticating user;Fi[	@Ì	iuI"       # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :include_rts Specifies that the timeline should include native retweets in addition to regular tweets. Note: If you're using the trim_user parameter in conjunction with include_rts, the retweets will no longer contain a full user object.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[	@Ì	iáI"-      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @option options [Boolean, String, Integer] :include_entities The tweet entities node will be disincluded when set to false.;Fi[I"MockFormula.new("STRING");FI"MockFormula.new("STRING");FI"MockFormula.new("STRING");FI"MockFormula.new("STRING");Fi	[	[	I",data//homebrew_proj/test/test_bucket.rb;TiI"  
  def function(arglist)
    assert_nothing_raised do |arglist|
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING");Fi[	@ˆiI"  def function(arglist)
    assert_nothing_raised do |arglist|
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING");Fi[	@ˆiI"    assert_nothing_raised do |arglist|
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
    end;Fi[	@ˆiI"Ì      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
      MockFormula.new("STRING")
    end
  end;Fi[I"5if ((var == "STRING") or (var == "STRING")) then;FI"var = "STRING";FI"	else;FI"var = "STRING";Fi	[	[	@äieI"Ω    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end
    end;Fi[	@äiwI"Ω    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end
    end;Fi[	@lioI"Ω    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end
    end;Fi[	@liâI"Ω    if (var == "STRING") then
      var = "STRING"
    else
      if ((var == "STRING") or (var == "STRING")) then
        var = "STRING"
      else
        var = "STRING"
      end
    end;Fi[@ I"var = (var + "LITERAL");FI"	next;FI"end;Fi	[	[	@”i”I"ó            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var);Fi[	@Ìi¬I"ó            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var);Fi[	@äiªI"ä            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end
          var = (var + "LITERAL") if (var == var)
          self.Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", "LITERAL", var);Fi[	@li“I"n            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (var - ("LITERAL" * @var))
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end
          var = (var + "LITERAL") if (var == var)
          Cell(var, var, var[var, (var - "LITERAL")], "LITERAL", "LITERAL", "STRING", var, var);Fi[@I"if var.nil? then;FI"nil;FI"	else;Fi	[	[	I"Qdata//activerecord_proj/active_record/connection_adapters/postgresql/cast.rb;TiI"          Hash.===(var) ? (var.map { |arglist| "STRING" }.join("STRING")) : (var)
        end
        
        def function(arglist)
          if var.nil? then
            nil
          else
            if String.===(var) then
              Hash[var.scan(HstorePair).map do |arglist|;Fi[	@iRI"Ó          parse_pg_array(var).map { |arglist| var.type_cast(var) }
        end
        
        def function(arglist)
          if var.nil? then
            nil
          else
            if ("STRING" == var) then
              (nil..nil);Fi[	@ilI"Ì          end
        end
        
        def function(arglist)
          if var.nil? then
            nil
          else
            if Range.===(var) then
              if [var.first, var.last].all? { |arglist| Integer.===(var) } then;Fi[	I"8data//compass_proj/compass/configuration/helpers.rb;TiI"Ω        @var = var
      end
      
      def function(arglist)
        if var.nil? then
          nil
        else
          if var.is_a?(Compass::Configuration::Data) then
            var;Fi[@ @üI"	next;FI"end;Fi	[	[	@”i~I"Œ        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end
      if var.! then
        var = var;Fi[	@‡isI"˙        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end
      if (var < "LITERAL") then
        var = (var + (var[var.chr] or "LITERAL"));Fi[	@ÌimI"Œ        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end
      if var.! then
        var = var;Fi[	@li_I"Â        var = var
        var = "LITERAL"
        var = "LITERAL"
        var = (var + "LITERAL")
        var = var if var and (var == "LITERAL")
        next
      end
      if (var == "STRING"["LITERAL"]) then
        var = var;Fi[@ˇI"@var = "STRING";FI"@var = @var;FI"@var = @var;Fi	[	[	@äidI"Ú    @var = (@var / @var)
    @var = (@var / @var)
    var.downcase!
    if ((var == "STRING") or (var == "STRING")) then
      @var = "STRING"
      @var = @var
      @var = @var
    else
      if ((var == "STRING") or (var == "STRING")) then;Fi[	@äiiI"Œ      @var = @var
      @var = @var
    else
      if ((var == "STRING") or (var == "STRING")) then
        @var = "STRING"
        @var = @var
        @var = @var
      else
        raise(("STRING" + var));Fi[	@liiI"˜    @var = (@var / @var)
    @var = (@var / @var)
    var = var.downcase
    if ((var == "STRING") or (var == "STRING")) then
      @var = "STRING"
      @var = @var
      @var = @var
    else
      if ((var == "STRING") or (var == "STRING")) then;Fi[	@linI"∆      @var = @var
      @var = @var
    else
      if ((var == "STRING") or (var == "STRING")) then
        @var = "STRING"
        @var = @var
        @var = @var
      else
        Error("STRING");Fi[I"=#   @param options [Hash] A customizable set of options.;F@>I"Bthreaded_user_objects_from_response("LITERAL", "STRING", var);FI"end;Fi	[	[	@0
i¥I"¬      #     Twitter.unfollow('sferik')
      # @overload unfollow(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        threaded_user_objects_from_response("LITERAL", "STRING", var)
      end
      
      (alias "LITERAL" "LITERAL");Fi[	I"5data//twitter_proj/twitter/api/spam_reporting.rb;TiI"Ω      #     Twitter.report_spam(14589771) # Same as above
      # @overload report_spam(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        threaded_user_objects_from_response("LITERAL", "STRING", var)
      end
    end
  end;Fi[	@fi÷I"Î      #     Twitter.block(7505382)  # Same as above
      # @overload block(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        threaded_user_objects_from_response("LITERAL", "STRING", var)
      end
      
      # Un-blocks the users specified by the authenticating user;Fi[	@fiÈI"Á      #     Twitter.unblock(7505382)  # Same as above
      # @overload unblock(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        threaded_user_objects_from_response("LITERAL", "STRING", var)
      end
      
      # Returns extended information for up to 100 users;Fi[@I"
super;F@î@ïi	[	[	@~iYI"Œ  end
end
class CVSDownloadStrategy < AbstractDownloadStrategy
  def function(arglist)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @var)
  end
  ;Fi[	@~iÑI"‘  end
end
class MercurialDownloadStrategy < AbstractDownloadStrategy
  def function(arglist)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @var)
  end
  ;Fi[	@~i¨I"—  end
end
class BazaarDownloadStrategy < AbstractDownloadStrategy
  def function(arglist)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @var)
  end
  ;Fi[	@~i I"—  end
end
class FossilDownloadStrategy < AbstractDownloadStrategy
  def function(arglist)
    super
    @var = "STRING" unless (var.to_s.empty? or (var == "STRING"))
    @var = (HOMEBREW_CACHE + @var)
  end
  ;Fi[I"'var = var.gsub("STRING", "STRING");FI"var = var.length;FI"var = "LITERAL";FI"var = "LITERAL";Fi	[	[	@”i≤I"    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@‡i≠I"    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@Ìi°I"    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@äiòI"    var = @var["STRING"]
    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[@@PI"@var = nil;FI"end;Fi	[	[	I"Gdata//bundler_proj/bundler/vendor/net/http/persistent/ssl_reuse.rb;TiI"u  
  @var = nil
  
  def function(arglist)
    super
    @var = nil
  end
  
  if (RUBY_VERSION > "STRING") then;Fi[	I",data//compass_proj/compass/test_case.rb;TiI"É  else
    Test::Unit::TestCase
  end
    def function(arglist)
      super
      @var = nil
    end
    
    def function(arglist);Fi[	I"6data//cucumber_prok/cucumber/ast/outline_table.rb;TiNI"Í        attr_reader(:scenario_outline)
        
        # https://rspec.lighthouseapp.com/projects/16211/tickets/342
        def function(arglist)
          super
          @var = nil
        end
        
        def function(arglist);Fi[	I"3data//state_machine_proj/state_machine/path.rb;TiI"ó      @var = var["LITERAL"]
    end
    
    def function(arglist)
      super
      @var = nil
    end
    
    # The initial state name for this path;Fi[I"var = var.length;FI"var = "LITERAL";FI"var = "LITERAL";FI"var = "LITERAL";Fi	[	[	@”i≥I"¸    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@‡iÆI"¸    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@Ìi¢I"¸    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[	@äiôI"¸    var = ((@var - @var) - @var)
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL"
    var = "LITERAL";Fi[I"+api_accessible("LITERAL") do |arglist|;FI"var.add("LITERAL");FI"var.add("LITERAL");FI"var.add("LITERAL");Fi	[	[	I"'data//diaspora_proj/models/like.rb;TiI"û  
  acts_as_api
  
  api_accessible("LITERAL") do |arglist|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
  end;Fi[	I"0data//diaspora_proj/models/participation.rb;TiI"û  
  acts_as_api
  
  api_accessible("LITERAL") do |arglist|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
  end;Fi[	I")data//diaspora_proj/models/person.rb;TiI"Ô  
  acts_as_api
  
  api_accessible("LITERAL") do |arglist|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add(lambda { |arglist| var.diaspora_handle }, "LITERAL" => "LITERAL")
    var.add(lambda do |arglist|;Fi[	I"(data//diaspora_proj/models/photo.rb;TiI"∏  
  acts_as_api
  
  api_accessible("LITERAL") do |arglist|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add(lambda do |arglist|;Fi[@<@=I"∂#   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.;FI"def function(arglist);Fi	[	[	@¸	iQI"<      #   @example Return the Tweet with the ID 25938088801
      #     Twitter.statuses(25938088801)
      # @overload statuses(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(arglist)
        threaded_tweets_from_response("LITERAL", "STRING", var)
      end;Fi[	@¸	ieI"I      #   @example Destroy the Tweet with the ID 25938088801
      #     Twitter.status_destroy(25938088801)
      # @overload status_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(arglist)
        threaded_tweets_from_response("LITERAL", "STRING", var)
      end;Fi[	@¸	iãI"N      #   @example Retweet the Tweet with the ID 28561922516
      #     Twitter.retweet(28561922516)
      # @overload retweet(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|;Fi[	@¸	i¶I"P      #   @example Retweet the Tweet with the ID 28561922516
      #     Twitter.retweet!(28561922516)
      # @overload retweet!(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      #   @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|;Fi[@`@a@bI"(# @return [Twitter::List] The list.;Fi	[	[	@Í	iTI"      # Removes the specified member from the list
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.
      # @overload list_remove_member(list, user_to_remove, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.;Fi[	@Í	iÒI"U      #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/create_all
      # @note Lists are limited to having 500 members, and you are limited to adding up to 100 members to a list at a time with this method.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.
      # @overload list_add_members(list, users, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.;Fi[	@Í	iII"       #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/create
      # @note Lists are limited to having 500 members.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.
      # @overload list_add_member(list, user_to_add, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.;Fi[	@Í	i‚I"¸      # Removes specified members from the list
      #
      # @see https://dev.twitter.com/docs/api/1.1/post/lists/members/destroy_all
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::List] The list.
      # @overload list_remove_members(list, users, options={})
      #   @param list [Integer, String, Twitter::List] A Twitter list ID, slug, or object.;Fi[I"# @return [Boolean];FI"def function(arglist);FI"@(super or (attr_equal("LITERAL", var) or attrs_equal(var)));FI"end;Fi	[	[	I"&data//twitter_proj/twitter/geo.rb;TiI"     alias "LITERAL" "LITERAL"
    
    # @param other [Twitter::Geo]
    # @return [Boolean]
    def function(arglist)
      (super or (attr_equal("LITERAL", var) or attrs_equal(var)))
    end
  end
end;Fi[	I"+data//twitter_proj/twitter/identity.rb;Ti!I"Ã    end
    
    # @param other [Twitter::Identity]
    # @return [Boolean]
    def function(arglist)
      (super or (attr_equal("LITERAL", var) or attrs_equal(var)))
    end
    
    # @return [Integer];Fi[	I"-data//twitter_proj/twitter/suggestion.rb;TiI"¯    attr_reader(:name, :size, :slug)
    
    # @param other [Twitter::Suggestion]
    # @return [Boolean]
    def function(arglist)
      (super or (attr_equal("LITERAL", var) or attrs_equal(var)))
    end
    
    # @return [Array<Twitter::User>];Fi[	I"(data//twitter_proj/twitter/trend.rb;TiI"Ô    attr_reader(:events, :name, :promoted_content, :query, :url)
    
    # @param other [Twitter::Trend]
    # @return [Boolean]
    def function(arglist)
      (super or (attr_equal("LITERAL", var) or attrs_equal(var)))
    end
  end
end;Fi[I"J# Determines what the response should be for a particular bit of text;FI"H# from the SCM. Password prompts, connection requests, passphrases,;FI"# etc. are handled here.;FI"def function(arglist);Fi	[	[	@hiAI"5          return var
        end
        
        # Determines what the response should be for a particular bit of text
        # from the SCM. Password prompts, connection requests, passphrases,
        # etc. are handled here.
        def function(arglist)
          logger.info("STRING")
          case var;Fi[	@iyI"`          (variable("LITERAL") or super)
        end
        
        # Determines what the response should be for a particular bit of text
        # from the SCM. Password prompts, connection requests, passphrases,
        # etc. are handled here.
        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING");Fi[	@∫i>I"?          (var.to_i + "LITERAL")
        end
        
        # Determines what the response should be for a particular bit of text
        # from the SCM. Password prompts, connection requests, passphrases,
        # etc. are handled here.
        def function(arglist)
          case var
          when "LITERAL" then;Fi[	@kiCI"X          (var.to_i + "LITERAL")
        end
        
        # Determines what the response should be for a particular bit of text
        # from the SCM. Password prompts, connection requests, passphrases,
        # etc. are handled here.
        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING");Fi[@I"@var, @var = var, var;F@ÀI"end;Fi	[	[	@ŒiI"A        # @param [ Metadata ] metadata The relation's metadata.
        #
        # @return [ Strategy ] The new strategy.
        def function(arglist)
          @var, @var = var, var
          @var = var.send(var.name)
        end
        
        # Execute the cascading deletion for the relation if it already exists.;Fi[	@—iI"A        # @param [ Metadata ] metadata The relation's metadata.
        #
        # @return [ Strategy ] The new strategy.
        def function(arglist)
          @var, @var = var, var
          @var = var.send(var.name)
        end
        
        # Execute the cascading deletion for the relation if it already exists.;Fi[	@‘iI">        # @param [ Metadata ] metadata The relation's metadata.
        #
        # @return [ Strategy ] The new strategy.
        def function(arglist)
          @var, @var = var, var
          @var = var.send(var.name)
        end
        
        # This cascade does not delete the referenced relations, but instead;Fi[	@◊iI"A        # @param [ Metadata ] metadata The relation's metadata.
        #
        # @return [ Strategy ] The new strategy.
        def function(arglist)
          @var, @var = var, var
          @var = var.send(var.name)
        end
        
        # Execute the cascading deletion for the relation if it already exists.;Fi[I"module Mongoid;FI"module Relations;FI"module Builders;FI"module Referenced;Fi	[	[	I"Gdata//mongoid_proj/lib/mongoid/relations/builders/referenced/in.rb;Ti I"∞module Mongoid
  module Relations
    module Builders
      module Referenced
        class In < Builder
          # This builder either takes a foreign key and queries for the;Fi [	I"Idata//mongoid_proj/lib/mongoid/relations/builders/referenced/many.rb;Ti I"´module Mongoid
  module Relations
    module Builders
      module Referenced
        class Many < Builder
          # This builder either takes a hash and queries for the;Fi [	I"Qdata//mongoid_proj/lib/mongoid/relations/builders/referenced/many_to_many.rb;Ti I"±module Mongoid
  module Relations
    module Builders
      module Referenced
        class ManyToMany < Builder
          # This builder either takes a hash and queries for the;Fi [	I"Hdata//mongoid_proj/lib/mongoid/relations/builders/referenced/one.rb;Ti I"∑module Mongoid
  module Relations
    module Builders
      module Referenced
        class One < Builder
          # This builder either takes an _id or an object and queries for the;Fi [@‹@›I"module Bindings;FI"module Referenced;Fi	[	[	I"Gdata//mongoid_proj/lib/mongoid/relations/bindings/referenced/in.rb;Ti I"∏module Mongoid
  module Relations
    module Bindings
      module Referenced
        class In < Binding
          # Binds the base object to the inverse of the relation. This is so we;Fi [	I"Idata//mongoid_proj/lib/mongoid/relations/bindings/referenced/many.rb;Ti I"Æmodule Mongoid
  module Relations
    module Bindings
      module Referenced
        class Many < Binding
          # Binds a single document with the inverse relation. Used;Fi [	I"Qdata//mongoid_proj/lib/mongoid/relations/bindings/referenced/many_to_many.rb;Ti I"¥module Mongoid
  module Relations
    module Bindings
      module Referenced
        class ManyToMany < Binding
          # Binds a single document with the inverse relation. Used;Fi [	I"Hdata//mongoid_proj/lib/mongoid/relations/bindings/referenced/one.rb;Ti I"πmodule Mongoid
  module Relations
    module Bindings
      module Referenced
        class One < Binding
          # Binds the base object to the inverse of the relation. This is so we;Fi [@ÇI"@var = @var;FI"@var = @var;FI"@var = @var;Fi	[	[	@äiEI"Ø    end
    if var.!=(@var) then
      if (var == "STRING") then
        @var = @var
        @var = @var
        @var = @var
        @var = @var
      else
        @var = @var;Fi[	@äiJI"ß        @var = @var
        @var = @var
      else
        @var = @var
        @var = @var
        @var = @var
        @var = @var
      end
      @var = (@var - @var);Fi[	@liv	I"Ø    end
    if var.!=(@var) then
      if (var == "STRING") then
        @var = @var
        @var = @var
        @var = @var
        @var = @var
      else
        @var = @var;Fi[	@li{	I"ß        @var = @var
        @var = @var
      else
        @var = @var
        @var = @var
        @var = @var
        @var = @var
      end
      @var = (@var - @var);Fi[@Ç@”@‘I"<var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi	[	[	@”iœI"[      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL");Fi[	@‡i◊I"U      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + var)
            var = (var + "LITERAL");Fi[	@ÌiæI"[      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL");Fi[	@äi∑I"I      if (var > var) then
        if (var == "LITERAL") then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL");Fi[I"require("twitter/tweet");FI"require("twitter/user");FI"module Twitter;FI"module API;Fi	[	[	@Di	I"Ôrequire("twitter/api/utils")
require("twitter/error/already_favorited")
require("twitter/error/forbidden")
require("twitter/tweet")
require("twitter/user")
module Twitter
  module API
    module Favorites
      include(Twitter::API::Utils);Fi[	@Í	iI"ﬁrequire("twitter/error/forbidden")
require("twitter/error/not_found")
require("twitter/list")
require("twitter/tweet")
require("twitter/user")
module Twitter
  module API
    module Lists
      include(Twitter::API::Utils);Fi[	@Ì	iI"°require("twitter/api/utils")
require("twitter/tweet")
require("twitter/user")
module Twitter
  module API
    module Timelines
      include(Twitter::API::Utils);Fi[	@Ni	I"ﬂrequire("twitter/api/arguments")
require("twitter/api/utils")
require("twitter/cursor")
require("twitter/tweet")
require("twitter/user")
module Twitter
  module API
    module Undocumented
      include(Twitter::API::Utils);Fi[I"ï#   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.;FI"=#   @param options [Hash] A customizable set of options.;FI"def function(arglist);F@Ci	[	[	@0
i≥I"ƒ      #   @example Unfollow @sferik
      #     Twitter.unfollow('sferik')
      # @overload unfollow(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        threaded_user_objects_from_response("LITERAL", "STRING", var)
      end
      ;Fi[	@IiI"ﬂ      #     Twitter.report_spam("spam")
      #     Twitter.report_spam(14589771) # Same as above
      # @overload report_spam(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        threaded_user_objects_from_response("LITERAL", "STRING", var)
      end
    end;Fi[	@fi’I"Œ      #     Twitter.block('sferik')
      #     Twitter.block(7505382)  # Same as above
      # @overload block(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        threaded_user_objects_from_response("LITERAL", "STRING", var)
      end
      ;Fi[	@fiËI"‘      #     Twitter.unblock('sferik')
      #     Twitter.unblock(7505382)  # Same as above
      # @overload unblock(*users, options)
      #   @param users [Array<Integer, String, Twitter::User>, Set<Integer, String, Twitter::User>] An array of Twitter user IDs, screen names, or objects.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        threaded_user_objects_from_response("LITERAL", "STRING", var)
      end
      ;Fi[@ÇI"	else;F@ÆI"@var = var;Fi	[	[	@”iõI"    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else;Fi[	@‡iñI"    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else;Fi[	@ÌiäI"    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else;Fi[	@liäI"%    (var << "STRING") if var.is_a?(String) and var.include?("STRING")
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = var
        @var = (var + var);Fi[I"@var.puts("STRING");FI"@var.puts("STRING");FI"@var.flush;FI"end;Fi	[	[	I"=data//rspec_proj/spec/runner/formatter/html_formatter.rb;Ti,I"œ            @var.puts("STRING")
          end
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.flush
        end
        
        def function(arglist);Fi[	@Ci2I"∂        end
        
        def function(arglist)
          @var.puts("STRING")
          @var.puts("STRING")
          @var.flush
        end
        
        def function(arglist);Fi[	@CiOI"%          @var.puts("STRING") unless var.exception.nil?
          @var.puts("STRING") unless var.exception.nil?
          @var.puts(var) unless (var == "STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.flush
        end
        
        def function(arglist);Fi[	@Ci|I"›          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.flush
        end
        
        def function(arglist);Fi[@@@I"@var = [];Fi	[	[	@πiI"í    
    attr_accessor(:source)
    
    def function(arglist)
      @var = var
      @var = var
      @var = []
      @var = var
      @var = var;Fi[	I"-data//capistrano_proj/capistrano/role.rb;Ti6I"°    protected
    
    class DynamicServerList
      def function(arglist)
        @var = var
        @var = var
        @var = []
        @var = false
      end;Fi[	@°iI"çclass SoftwareSpec
  attr_reader(:checksum, :mirrors, :specs)
  
  def function(arglist)
    @var = var
    @var = var
    @var = []
  end
  ;Fi[	@ŸiQI"%    # The result of invoking the action associated with the machine
    # Whether the transition is only existing temporarily for the object
    # Creates a new, specific transition
    def function(arglist)
      @var = var
      @var = var
      @var = []
      @var = false
      @var = nil;Fi[I"# @note Undocumented;FI"# @rate_limited Yes;FI",# @authentication Requires user context;FI"g# @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi	[	[	@NiI"e      
      # Returns activity about me
      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array] An array of actions
      # @param options [Hash] A customizable set of options.;Fi[	@Ni0I"i        objects_from_response(Twitter::ActionFactory, "LITERAL", "STRING", var)
      end
      
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      #
      # @overload following_followers_of(options={});Fi[	@NiNI"e      
      # Returns activity summary for a Tweet
      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Tweet] The requested Tweet.
      # @param id [Integer] A Tweet ID.;Fi[	@NiaI"n      
      # Returns activity summary for Tweets
      #
      # @note Undocumented
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>] The requested Tweets.
      # @overload statuses_activity(*ids);Fi[I"# @return [Integer];FI"def function(arglist);FI"3@var["LITERAL"]["LITERAL"] if search_metadata?;FI"end;Fi	[	[	I"1data//twitter_proj/twitter/search_results.rb;TiI"Õ      @var["LITERAL"]["LITERAL"] if search_metadata?
    end
    
    # @return [Integer]
    def function(arglist)
      @var["LITERAL"]["LITERAL"] if search_metadata?
    end
    
    # @return [Integer];Fi[	@liI"Ã      @var["LITERAL"]["LITERAL"] if search_metadata?
    end
    
    # @return [Integer]
    def function(arglist)
      @var["LITERAL"]["LITERAL"] if search_metadata?
    end
    
    # @return [String];Fi[	@li%I"”      @var["LITERAL"]["LITERAL"] if search_metadata?
    end
    
    # @return [Integer]
    def function(arglist)
      @var["LITERAL"]["LITERAL"] if search_metadata?
    end
    
    alias "LITERAL" "LITERAL";Fi[	@li0I"¢      @var["LITERAL"].nil?.!
    end
    
    # @return [Integer]
    def function(arglist)
      @var["LITERAL"]["LITERAL"] if search_metadata?
    end
  end
end;Fi[I".Sass::Script::String.new(clean_path(var));FI"	else;FI"clean_url(var);FI"end;Fi[[	@Îi%I"§      end
      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var)
      end
    end
  end;Fi[	@Îi>I"§      end
      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var)
      end
    end
  end;Fi[	@ÎiqI"´      end
      var = "STRING" if var
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var)
      end
    end
  end;Fi[I",require("cucumber/ast/feature_element");FI""require("cucumber/ast/names");FI"module Cucumber;FI"module Ast;Fi[[	@⁄i I"ïrequire("cucumber/ast/feature_element")
require("cucumber/ast/names")
module Cucumber
  module Ast
    class Background
      include(FeatureElement);Fi [	@‡i I"ìrequire("cucumber/ast/feature_element")
require("cucumber/ast/names")
module Cucumber
  module Ast
    class Scenario
      include(FeatureElement);Fi [	@âi I"örequire("cucumber/ast/feature_element")
require("cucumber/ast/names")
module Cucumber
  module Ast
    class ScenarioOutline
      include(FeatureElement);Fi [I"if var.to_bool then;F@uI"	else;FI"clean_url(var);Fi[[	@Îi$I"™        end
      end
      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var)
      end
    end;Fi[	@Îi=I"Ã        Compass.configuration.http_fonts_path
      end
      var = "STRING"
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var)
      end
    end;Fi[	@ÎipI"±        end
      end
      var = "STRING" if var
      if var.to_bool then
        Sass::Script::String.new(clean_path(var))
      else
        clean_url(var)
      end
    end;Fi[I" @var.each_pair do |arglist|;FI"newobj;FI"@var[var]["STRING"] = @var;FI"5var = (FPDF_FONTPATH + var) if defined("STRING");Fi[[	@”i¯I"      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!;Fi[	@‡iI"      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!;Fi[	@ÌiÁI"      out((("STRING" + var) + "STRING"))
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!;Fi[@ò@ô@öI"out("STRING");Fi[[	@”iI"œ      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var);Fi[	@‡iI"œ      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var);Fi[	@Ìi˜I"œ      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var);Fi[I"&if list_of_color_stops?(var) then;FI"var = (var.value + var);FI"var = nil;FI"end;Fi[[	I"Mdata//compass_proj/compass/sass_extensions/functions/gradient_support.rb;TiıI"‘        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end
      end
      var = nil if var and var.to_bool.!;Fi[	@≥iˇI"‘        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end
      end
      var = nil if var and var.to_bool.!;Fi[	@≥iI"‘        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end
      end
      var = nil if var and var.to_bool.!;Fi[I"if color_stop?(var) then;FI"var.unshift(var);FI"var = nil;FI"	else;Fi[[	@≥iÒI"«    end
    
    def function(arglist)
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var);Fi[	@≥i˚I"ﬂ        end
      end
      var = nil if var and var.to_bool.!
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var);Fi[	@≥iI"«    end
    
    def function(arglist)
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var);Fi[@=@>I"@var.puts("STRING");FI"@var.puts("STRING");Fi[[	@Ci}I"            var = "STRING"
            (var << "STRING") if (var > "LITERAL")
          end
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING");Fi[	@Ci~I"	            (var << "STRING") if (var > "LITERAL")
          end
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.flush;Fi[	@CiI"‚          end
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.puts("STRING")
          @var.flush
        end;Fi[I"9Sass::Script::List.new(var.value.dup, var.separator);FI"	else;FI"-Sass::Script::List.new([var], "LITERAL");FI"end;Fi[[	@÷iI"Y    # returns the opposite position of a side or corner.
    def function(arglist)
      var = if var.is_a?(Sass::Script::List) then
        Sass::Script::List.new(var.value.dup, var.separator)
      else
        Sass::Script::List.new([var], "LITERAL")
      end
      var.value.map! do |arglist|
        if var.is_a?(Sass::Script::String) then;Fi[	@≥i∫I"Ñ    def function(arglist)
      var = var
      var = if var.is_a?(Sass::Script::List) then
        Sass::Script::List.new(var.value.dup, var.separator)
      else
        Sass::Script::List.new([var], "LITERAL")
      end
      return var unless var.value.all? { |arglist| is_position(var).to_bool }
      if (var.value.first.value =~ "LITERAL" or var.value.last.value =~ "LITERAL") then;Fi[	I"Bdata//compass_proj/compass/sass_extensions/functions/lists.rb;Ti2I"   # into a string by sass before it was passed to a mixin.
  def function(arglist)
    if var.is_a?(Sass::Script::List) then
      Sass::Script::List.new(var.value.dup, var.separator)
    else
      Sass::Script::List.new([var], "LITERAL")
    end
  end
  ;Fi[I"if (var > var) then;FI"1if ((var == "LITERAL") or (var == var)) then;F@—I"@var = @var;Fi[[	@”iÃI"S      end
      var = var if (var.! or (var.chr == "STRING"))
      var = (var + (var ? (var[var.chr]) : ("LITERAL") or "LITERAL"))
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var);Fi[	@‡i‘I"˘          var = var
        end
      end
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var);Fi[	@ÌiªI"S      end
      var = var if (var.! or (var.chr == "STRING"))
      var = (var + (var ? (var[var.chr]) : ("LITERAL") or "LITERAL"))
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var);Fi[I""if var.delete("LITERAL") then;FI"Fvar = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var));FI" var = process_erb(var, var);FI"end;Fi[[	I"2data//compass_proj/compass/installers/base.rb;TiPI";            copy(var, var, nil, var)
          else
            var = File.new(var).read
            if var.delete("LITERAL") then
              var = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var))
              var = process_erb(var, var)
            end
            write_file(var, var)
          end;Fi[	@Ói_I"’        var = templatize(var)
        var = targetize(install_location_for_stylesheet(var, var))
        var = File.new(var).read
        if var.delete("LITERAL") then
          var = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var))
          var = process_erb(var, var)
        end
        if preferred_syntax.to_s.!=(var["LITERAL"]) then
          var = Sass::Engine.new(var, Compass.sass_engine_options.merge("LITERAL" => (var["LITERAL"].intern))).to_tree;Fi[	@ÓiáI"€          var = var[("LITERAL"..-("STRING".length + "LITERAL"))]
          var = install_location_for_html(var, var) if respond_to?("LITERAL")
          var = File.read(templatize(var))
          if var.delete("LITERAL") then
            var = TemplateContext.ctx("LITERAL" => (var), "LITERAL" => (var))
            var = process_erb(var, var)
          end
          Compass.configure_sass_plugin!
          var = Haml::Engine.new(var, "LITERAL" => (templatize(var))).render;Fi[I"@var = (@var + var);F@‘@I"var = (var + "LITERAL");Fi[[	@”i–I"R        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next;Fi[	@ÌiøI"R        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next;Fi[	@äi∏I"@        if (var == "LITERAL") then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next;Fi[I"9require("capistrano/recipes/deploy/strategy/remote");FI"module Capistrano;FI"module Deploy;FI"module Strategy;Fi[[	I"Idata//capistrano_proj/capistrano/recipes/deploy/strategy/checkout.rb;Ti I"örequire("capistrano/recipes/deploy/strategy/remote")
module Capistrano
  module Deploy
    module Strategy
      class Checkout < Remote
        protected;Fi [	I"Gdata//capistrano_proj/capistrano/recipes/deploy/strategy/export.rb;Ti I"òrequire("capistrano/recipes/deploy/strategy/remote")
module Capistrano
  module Deploy
    module Strategy
      class Export < Remote
        protected;Fi [	I"Mdata//capistrano_proj/capistrano/recipes/deploy/strategy/remote_cache.rb;Ti I"ÿrequire("capistrano/recipes/deploy/strategy/remote")
module Capistrano
  module Deploy
    module Strategy
      class RemoteCache < Remote
        # Executes the SCM command for this strategy and writes the REVISION;Fi [I"K# the files must be copied from there to their intended resting place.;FI"def function(arglist);FI"$p4_sync(var, var, p4sync_flags);FI"end;Fi[[	@∫iI"û        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end
        
        # Returns the command that will sync the given revision to the given;Fi[	@∫iI"û        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end
        
        # Returns the command that will sync the given revision to the given;Fi[	@∫i$I"°        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end
        
        # Returns the command that will do an "p4 diff2" for the two revisions.;Fi[I"O# Generate a token checking if one does not already exist in the database.;FI"def function(arglist);FI"generate_token("LITERAL");FI"end;Fi[[	I"3data//devise_proj/devise/models/confirmable.rb;Ti‘I"          var
        end
        
        # Generate a token checking if one does not already exist in the database.
        def function(arglist)
          generate_token("LITERAL")
        end
        
        # Find a record for confirmation by unconfirmed email field;Fi[	I"3data//devise_proj/devise/models/recoverable.rb;Ti`I"          var
        end
        
        # Generate a token checking if one does not already exist in the database.
        def function(arglist)
          generate_token("LITERAL")
        end
        
        # Attempt to find a user by its reset_password_token to reset its;Fi[	I"=data//devise_proj/devise/models/token_authenticatable.rb;Ti2I"H          find_for_authentication("LITERAL" => (var[token_authentication_key]))
        end
        
        # Generate a token checking if one does not already exist in the database.
        def function(arglist)
          generate_token("LITERAL")
        end
        
        Devise::Models.config(self, "LITERAL", "LITERAL");Fi[I"!var["LITERAL"] ||= "LITERAL";FI"=var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"];FI"!var["LITERAL"] ||= "LITERAL";FI"!var["LITERAL"] ||= "LITERAL";Fi[[	I"7data//redmine_proj/plugins/rfpdf/lib/core/rfpdf.rb;TiI"â  	#   draw_circle(x, y, radius, :border_color => ReportHelper::COLOR_PALETTE[:dark_blue], :border_width => 1)
  	#
  def function(arglist)
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL";Fi[	@/i|I"<  	#   draw_box(x, y - 1, 38, 22)
  	#
  def function(arglist)
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL";Fi[	@/i£I"=  	#
  def function(arglist)
    var["LITERAL"] ||= "STRING"
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= default_font;Fi[@)I" var["LITERAL"] ||= "STRING";FI"5set_text_color_a(var["LITERAL"], var["LITERAL"]);FI"<SetFont(var["LITERAL"], var["LITERAL"], var["LITERAL"]);Fi[[	@/iGI"k  def function(arglist)
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= default_font
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "STRING"
    set_text_color_a(var["LITERAL"], var["LITERAL"])
    SetFont(var["LITERAL"], var["LITERAL"], var["LITERAL"])
    SetXY(var, var)
    Write((var["LITERAL"] + "LITERAL"), var);Fi[	@/ibI"U  def function(arglist)
    var["LITERAL"] ||= default_font
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "STRING"
    set_text_color_a(var["LITERAL"], var["LITERAL"])
    SetFont(var["LITERAL"], var["LITERAL"], var["LITERAL"])
    SetXY(var, var)
    SetLeftMargin(var);Fi[	@/iÏI"k  def function(arglist)
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= default_font
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "STRING"
    set_text_color_a(var["LITERAL"], var["LITERAL"])
    SetFont(var["LITERAL"], var["LITERAL"], var["LITERAL"])
    SetXY(var, var)
    Write((var["LITERAL"] + "LITERAL"), var);Fi[I"var = var["STRING"];FI"var = "STRING";F@ñI",var = (var + (var[var.chr] + "STRING"));Fi[[	@”i&I"        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"));Fi[	@‡i/I"        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"));Fi[	@ÌiI"        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"));Fi[@AI"out(("STRING" + var));FI"(if (var["STRING"] == "STRING") then;FI"out("STRING");Fi[[	@”iI"      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else;Fi[	@‡iI"      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else;Fi[	@Ìi˛I"      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else;Fi[@AI"if var then;FI"Ñvar = (var + (((("STRING" + ((var["STRING"] == "STRING") ? ("STRING") : ("STRING"))) + "STRING") + @var[var]["STRING"]) + "STRING"));FI"end;Fi[[	@”i2I"á          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"]
          if var then
            var = (var + (((("STRING" + ((var["STRING"] == "STRING") ? ("STRING") : ("STRING"))) + "STRING") + @var[var]["STRING"]) + "STRING"))
          end
          out((var + "STRING"))
          out("STRING");Fi[	@‡i;I"á          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"]
          if var then
            var = (var + (((("STRING" + ((var["STRING"] == "STRING") ? ("STRING") : ("STRING"))) + "STRING") + @var[var]["STRING"]) + "STRING"))
          end
          out((var + "STRING"))
          out("STRING");Fi[	@Ìi!I"á          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"]
          if var then
            var = (var + (((("STRING" + ((var["STRING"] == "STRING") ? ("STRING") : ("STRING"))) + "STRING") + @var[var]["STRING"]) + "STRING"))
          end
          out((var + "STRING"))
          out("STRING");Fi[@‹I"module Atomic;FI"module Paths;FI"module Embedded;Fi[[	I"Adata//mongoid_proj/lib/mongoid/atomic/paths/embedded/many.rb;Ti I"ymodule Mongoid
  module Atomic
    module Paths
      module Embedded
        class Many
          include(Embedded);Fi [	I"@data//mongoid_proj/lib/mongoid/atomic/paths/embedded/one.rb;Ti I"xmodule Mongoid
  module Atomic
    module Paths
      module Embedded
        class One
          include(Embedded);Fi [	I"<data//mongoid_proj/lib/mongoid/atomic/paths/embedded.rb;TiI"ırequire("mongoid/atomic/paths/embedded/one")
require("mongoid/atomic/paths/embedded/many")
module Mongoid
  module Atomic
    module Paths
      module Embedded
        attr_reader(:delete_modifier, :document, :insert_modifier, :parent)
        ;Fi[@‹@›@ÓI"module Embedded;Fi[[	I"Edata//mongoid_proj/lib/mongoid/relations/bindings/embedded/in.rb;Ti I"∂module Mongoid
  module Relations
    module Bindings
      module Embedded
        class In < Binding
          # Binds the base object to the inverse of the relation. This is so we;Fi [	I"Gdata//mongoid_proj/lib/mongoid/relations/bindings/embedded/many.rb;Ti I"¨module Mongoid
  module Relations
    module Bindings
      module Embedded
        class Many < Binding
          # Binds a single document with the inverse relation. Used;Fi [	I"Fdata//mongoid_proj/lib/mongoid/relations/bindings/embedded/one.rb;Ti I"∑module Mongoid
  module Relations
    module Bindings
      module Embedded
        class One < Binding
          # Binds the base object to the inverse of the relation. This is so we;Fi [I"L# destination directory. The perforce client has a fixed destination so;F@@@i[[	@∫iI"]        end
        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end
        ;Fi[	@∫iI"]        end
        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end
        ;Fi[	@∫i#I"]        end
        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end
        ;Fi[@‹@›@ﬁI"module Embedded;Fi[[	I"Edata//mongoid_proj/lib/mongoid/relations/builders/embedded/in.rb;Ti I"±module Mongoid
  module Relations
    module Builders
      module Embedded
        class In < Builder
          # This builder doesn't actually build anything, just returns the;Fi [	I"Gdata//mongoid_proj/lib/mongoid/relations/builders/embedded/many.rb;Ti I"±module Mongoid
  module Relations
    module Builders
      module Embedded
        class Many < Builder
          # Builds the document out of the attributes using the provided;Fi [	I"Fdata//mongoid_proj/lib/mongoid/relations/builders/embedded/one.rb;Ti I"∞module Mongoid
  module Relations
    module Builders
      module Embedded
        class One < Builder
          # Builds the document out of the attributes using the provided;Fi [I"I# Returns the command that will sync the given revision to the given;F@|@@i[[	@∫iI"g          "STRING"
        end
        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end;Fi[	@∫iI"~          p4_sync(var, var, p4sync_flags)
        end
        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end;Fi[	@∫i"I"~          p4_sync(var, var, p4sync_flags)
        end
        
        # Returns the command that will sync the given revision to the given
        # destination directory. The perforce client has a fixed destination so
        # the files must be copied from there to their intended resting place.
        def function(arglist)
          p4_sync(var, var, p4sync_flags)
        end;Fi[I"var.json do |arglist|;FI"<render("LITERAL" => (@var.stream_posts.map do |arglist|;FI"ILastThreeCommentsDecorator.new(PostPresenter.new(var, current_user));FI"
end));Fi[[	I"9data//diaspora_proj/controllers/people_controller.rb;TigI"5      var.all do |arglist|
        respond_with(@var, "LITERAL" => ({ "LITERAL" => "LITERAL" }))
      end
      var.json do |arglist|
        render("LITERAL" => (@var.stream_posts.map do |arglist|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end
    end;Fi[	I":data//diaspora_proj/controllers/streams_controller.rb;Ti?I"F    respond_with do |arglist|
      var.html { |arglist| render("STRING") }
      var.mobile { |arglist| render("STRING") }
      var.json do |arglist|
        render("LITERAL" => (@var.stream_posts.map do |arglist|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end
    end;Fi[	I"7data//diaspora_proj/controllers/tags_controller.rb;Ti)I"è    gon.tagFollowings = tags if user_signed_in?
    @var = Stream::Tag.new(current_user, params["LITERAL"], "LITERAL" => (max_time), "LITERAL" => (params["LITERAL"]))
    respond_with do |arglist|
      var.json do |arglist|
        render("LITERAL" => (@var.stream_posts.map do |arglist|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end
    end;Fi[I"$var = var["LITERAL"]["LITERAL"];FI"logger.info("STRING");FI"case var;FI"when "LITERAL" then;Fi[[	@i}I"k        # from the SCM. Password prompts, connection requests, passphrases,
        # etc. are handled here.
        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING")
          case var
          when "LITERAL" then
            unless var = variable("LITERAL") then
              var = Capistrano::CLI.password_prompt;Fi[	@∑i9I"w        # user/pass can come from ssh and http distribution methods
        # yes/no is for when ssh asks you about fingerprints
        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING")
          case var
          when "LITERAL" then
            if var = (variable("LITERAL") or variable("LITERAL")) then
              "STRING";Fi[	@kiGI"8        # from the SCM. Password prompts, connection requests, passphrases,
        # etc. are handled here.
        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING")
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then;Fi[@õ@úI"
end));FI"end;Fi[[	@†ihI"         respond_with(@var, "LITERAL" => ({ "LITERAL" => "LITERAL" }))
      end
      var.json do |arglist|
        render("LITERAL" => (@var.stream_posts.map do |arglist|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end
    end
  end;Fi[	@£i@I".      var.html { |arglist| render("STRING") }
      var.mobile { |arglist| render("STRING") }
      var.json do |arglist|
        render("LITERAL" => (@var.stream_posts.map do |arglist|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end
    end
  end;Fi[	@¶i*I"e    @var = Stream::Tag.new(current_user, params["LITERAL"], "LITERAL" => (max_time), "LITERAL" => (params["LITERAL"]))
    respond_with do |arglist|
      var.json do |arglist|
        render("LITERAL" => (@var.stream_posts.map do |arglist|
          LastThreeCommentsDecorator.new(PostPresenter.new(var, current_user))
        end))
      end
    end
  end;Fi[I" var["LITERAL"] ||= "STRING";F@7@8I"SetXY(var, var);Fi[[	@/iHI"Y    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= default_font
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "STRING"
    set_text_color_a(var["LITERAL"], var["LITERAL"])
    SetFont(var["LITERAL"], var["LITERAL"], var["LITERAL"])
    SetXY(var, var)
    Write((var["LITERAL"] + "LITERAL"), var)
  end;Fi[	@/icI"U    var["LITERAL"] ||= default_font
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "STRING"
    set_text_color_a(var["LITERAL"], var["LITERAL"])
    SetFont(var["LITERAL"], var["LITERAL"], var["LITERAL"])
    SetXY(var, var)
    SetLeftMargin(var)
    SetRightMargin(var);Fi[	@/iÌI"Y    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= default_font
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "STRING"
    set_text_color_a(var["LITERAL"], var["LITERAL"])
    SetFont(var["LITERAL"], var["LITERAL"], var["LITERAL"])
    SetXY(var, var)
    Write((var["LITERAL"] + "LITERAL"), var)
  end;Fi[I"if (var < "LITERAL") then;FI"/var = (var + var[var.chr]) if var[var.chr];FI"var = (var + "LITERAL");FI"	else;Fi[[	@”iEI"+    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        var = (var + "LITERAL")
        var = (var + "LITERAL");Fi[	@‡i5I"G    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        if (var >= "LITERAL") and (var <= "LITERAL") then
          var = (var + "LITERAL");Fi[	@Ìi4I"+    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        var = (var + "LITERAL")
        var = (var + "LITERAL");Fi[I";# Increments the given revision number and returns it.;FI"def function(arglist);FI"(var.to_i + "LITERAL");FI"end;Fi[[	@diBI"“          var = yield(var)
        end
        
        # Increments the given revision number and returns it.
        def function(arglist)
          (var.to_i + "LITERAL")
        end
        
        private;Fi[	@∫i9I"           yield(var)["LITERAL", "LITERAL"]
        end
        
        # Increments the given revision number and returns it.
        def function(arglist)
          (var.to_i + "LITERAL")
        end
        
        # Determines what the response should be for a particular bit of text;Fi[	@ki>I"J          [(var["STRING"] or "LITERAL").to_i, (var["STRING"] or "LITERAL").to_i].max
        end
        
        # Increments the given revision number and returns it.
        def function(arglist)
          (var.to_i + "LITERAL")
        end
        
        # Determines what the response should be for a particular bit of text;Fi[@yI"Gif (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then;FI"var = (var - "LITERAL");FI"end;Fi[[	@”i_I"?    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then;Fi[	@‡iTI"?    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then;Fi[	@ÌiNI"?    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL"
    if var then;Fi[I"var.add("LITERAL");FI"var.add("LITERAL");FI"var.add("LITERAL");FI"var.add("LITERAL");Fi[[	@çiI"û  acts_as_api
  
  api_accessible("LITERAL") do |arglist|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
  end
  ;Fi[	@êiI"ü  acts_as_api
  
  api_accessible("LITERAL") do |arglist|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
  end
end;Fi[	@ñiI"'  acts_as_api
  
  api_accessible("LITERAL") do |arglist|
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add("LITERAL")
    var.add(lambda do |arglist|
      { "LITERAL" => (var.url("LITERAL")), "LITERAL" => (var.url("LITERAL")), "LITERAL" => (var.url("LITERAL")) };Fi[I"*return image_url if (var == "STRING");FI"/if (var.nil? or var.match("LITERAL")) then;FI"super(var);FI"	else;Fi[[	I"*data//diaspora_proj/models/profile.rb;TimI"¬  end
  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end;Fi[	@˛ivI"¬  end
  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end;Fi[	@˛iI"¬  end
  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end;Fi[@˘I"super(var);FI"	else;FI"%super(absolutify_local_url(var));Fi[[	@˛inI"¬  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end
  end;Fi[	@˛iwI"¬  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end
  end;Fi[	@˛i{I"¬  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end
  end;Fi[I"$version("LITERAL") do |arglist|;FI"3process("LITERAL" => (["LITERAL", "LITERAL"]));FI"process("LITERAL");FI"end;Fi[[	I"5data//diaspora_proj/uploaders/processed_image.rb;TiI"÷    (model.random_string + File.extname(@var)) if @var
  end
  
  version("LITERAL") do |arglist|
    process("LITERAL" => (["LITERAL", "LITERAL"]))
    process("LITERAL")
  end
  
  version("LITERAL") do |arglist|;Fi[	@iI"∂    process("LITERAL")
  end
  
  version("LITERAL") do |arglist|
    process("LITERAL" => (["LITERAL", "LITERAL"]))
    process("LITERAL")
  end
  
  version("LITERAL") do |arglist|;Fi[	@iI"∂    process("LITERAL")
  end
  
  version("LITERAL") do |arglist|
    process("LITERAL" => (["LITERAL", "LITERAL"]))
    process("LITERAL")
  end
  
  version("LITERAL") do |arglist|;Fi[@y@zI"while (var < var) do;F@$i[[	@”iAI"  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr];Fi[	@‡i1I"  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr];Fi[	@Ìi0I"  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr];Fi[@[@\@·@‚i[[	@”i^I"H    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL";Fi[	@‡iSI"H    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL";Fi[	@ÌiMI"H    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end
    var = "LITERAL";Fi[I"var.unshift(var);FI"var = nil;FI"	else;F@≠i[[	@≥iÚI"”    
    def function(arglist)
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil;Fi[	@≥i¸I"Á      end
      var = nil if var and var.to_bool.!
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil;Fi[	@≥iI"”    
    def function(arglist)
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil;Fi[I"# @example;FI"#   class Person;FI"$#     include Mongoid::Document;FI"#     field :title;Fi[[	@ΩiàI"Á      
      # Validates the format of a field.
      #
      # @example
      #   class Person
      #     include Mongoid::Document
      #     field :title
      #
      #     validates_format_of :title, with: /^[a-z0-9 \-_]*$/i;Fi[	@ΩiôI"€      
      # Validates the length of a field.
      #
      # @example
      #   class Person
      #     include Mongoid::Document
      #     field :title
      #
      #     validates_length_of :title, minimum: 100;Fi[	@Ωi™I"Ú      
      # Validates whether or not a field is present - meaning nil or empty.
      #
      # @example
      #   class Person
      #     include Mongoid::Document
      #     field :title
      #
      #     validates_presence_of :title;Fi[I"require("keg");FI"module Homebrew;FI"extend(self);FI" ;Fi[[	I"(data//homebrew_proj/cmd/outdated.rb;TiI"{require("formula")
require("keg")
module Homebrew
  extend(self)
  
  def function(arglist)
    outdated_brews do |arglist|;Fi[	I"%data//homebrew_proj/cmd/prune.rb;Ti I"ôrequire("keg")
module Homebrew
  extend(self)
  
  # $n and $d are used by the ObserverPathnameExtension to keep track of
  # certain filesystem actions.;Fi [	I"$data//homebrew_proj/cmd/test.rb;TiI"™require("extend/ENV")
require("hardware")
require("keg")
module Homebrew
  extend(self)
  
  def function(arglist)
    raise(FormulaUnspecifiedError) if ARGV.named.empty?;Fi[I""var.gsub!("STRING", "STRING");FI""var.gsub!("STRING", "STRING");FI""var.gsub!("STRING", "STRING");FI""var.gsub!("STRING", "STRING");Fi[[	@igI"q    def self.clean_entities(arglist)
      var.force_encoding("STRING") if var.respond_to?("LITERAL")
      var = HTMLEntities.new.encode(var, "LITERAL")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING");Fi[	@ihI"V      var.force_encoding("STRING") if var.respond_to?("LITERAL")
      var = HTMLEntities.new.encode(var, "LITERAL")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var;Fi[	@iiI"      var = HTMLEntities.new.encode(var, "LITERAL")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var.gsub!("STRING", "STRING")
      var
    end;Fi[I"# ==== Parameters;FI"=# source<String>:: the relative path to the source root.;FI"G# destination<String>:: the relative path to the destination root.;FI"C# config<Hash>:: give :verbose => false to not log the status.;Fi[[	I"@data//bundler_proj/bundler/vendor/thor/actions/directory.rb;Ti'I"9    # expand %something%, this `something` should be a public method in the class calling
    # #directory. If a method is private, Thor stack raises PrivateMethodEncodedError.
    #
    # ==== Parameters
    # source<String>:: the relative path to the source root.
    # destination<String>:: the relative path to the destination root.
    # config<Hash>:: give :verbose => false to not log the status.
    #                If :recursive => false, does not look for paths recursively.
    #                If :mode => :preserve, preserve the file mode from the source.;Fi[	I"Hdata//bundler_proj/bundler/vendor/thor/actions/file_manipulation.rb;Ti*I"ï    # Links the file from the relative source to the relative destination. If
    # the destination is not given it's assumed to be equal to the source.
    #
    # ==== Parameters
    # source<String>:: the relative path to the source root.
    # destination<String>:: the relative path to the destination root.
    # config<Hash>:: give :verbose => false to not log the status.
    #
    # ==== Examples;Fi[	@ii`I"å    # at the relative destination. If the destination is not given it's assumed
    # to be equal to the source removing .tt from the filename.
    #
    # ==== Parameters
    # source<String>:: the relative path to the source root.
    # destination<String>:: the relative path to the destination root.
    # config<Hash>:: give :verbose => false to not log the status.
    #
    # ==== Examples;Fi[I"require("blacklist");FI"module Homebrew;FI"extend(self);FI" ;Fi[[	I"&data//homebrew_proj/cmd/create.rb;TiI"ârequire("formula")
require("blacklist")
module Homebrew
  extend(self)
  
  # Create a formula from a tarball URL
  def function(arglist);Fi[	I"'data//homebrew_proj/cmd/install.rb;TiI"∑require("formula_installer")
require("hardware")
require("blacklist")
module Homebrew
  extend(self)
  
  def function(arglist)
    raise(FormulaUnspecifiedError) if ARGV.named.empty?;Fi[	I"&data//homebrew_proj/cmd/search.rb;TiI"Örequire("formula")
require("blacklist")
module Homebrew
  extend(self)
  
  def function(arglist)
    if ARGV.include?("STRING") then;Fi[I"
retry;FI"rescue;FI"var = (var + $!.success);FI"end;Fi[[	I"/data//redmine_proj/redmine/codeset_util.rb;TiI"          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end
          var = var
        end;Fi[	@ÉiCI"          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end
          var = var
        end;Fi[	@ÉiÅI"          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end
          var = var
        end;Fi[@ I"	else;FI"var = (var + "LITERAL");FI"var = (var + "LITERAL");Fi[[	@”iGI"      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        var = (var + "LITERAL")
        var = (var + "LITERAL")
      end
    end;Fi[	@‡i;I"Ô      else
        if (var >= "LITERAL") and (var <= "LITERAL") then
          var = (var + "LITERAL")
          var = (var + "LITERAL")
        else
          var = (var + "LITERAL")
          var = (var + "LITERAL")
        end
      end;Fi[	@Ìi6I"      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        var = (var + "LITERAL")
        var = (var + "LITERAL")
      end
    end;Fi[I"opoo("STRING");FI"puts("STRING");FI"puts("STRING");FI"puts(var);Fi[[	@‡i>I"≠      var.include?(var.extname).!
    end
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end;Fi[	@‡iJI"˙    return unless f.bin.directory?
    var = f.bin.children.select { |arglist| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end;Fi[	@‡iVI"¸    return unless f.sbin.directory?
    var = f.sbin.children.select { |arglist| (var.directory? or var.executable?.!) }
    unless var.empty? then
      opoo("STRING")
      puts("STRING")
      puts("STRING")
      puts(var)
      @var = true
    end;Fi[I"J(var << Thread.new { |arglist| search_tap("STRING", "STRING", var) });FI"J(var << Thread.new { |arglist| search_tap("STRING", "STRING", var) });FI"J(var << Thread.new { |arglist| search_tap("STRING", "STRING", var) });FI"J(var << Thread.new { |arglist| search_tap("STRING", "STRING", var) });Fi[[	@zi(I"#          $found = var.length
          var = []
          var = []
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) });Fi[	@zi)I"9          var = []
          var = []
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          var.each { |arglist| (var << var.value) };Fi[	@zi*I"Y          var = []
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          (var << Thread.new { |arglist| search_tap("STRING", "STRING", var) })
          var.each { |arglist| (var << var.value) }
          var.each { |arglist| puts_columns(var) };Fi[I"var.pull!;FI"var = Report.new;FI"var.merge!(var.report);FI""assert(var.expectations_met?);Fi[[	I"-data//homebrew_proj/test/test_updater.rb;Ti9I"˚      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?)
      assert(var.empty?)
    end;Fi[	@≥iKI"E      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?)
      assert(var.select_formula("LITERAL").empty?)
      assert(var.select_formula("LITERAL").empty?);Fi[	@≥i_I"ç      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!
      var = Report.new
      var.merge!(var.report)
      assert(var.expectations_met?)
      assert_equal(["STRING", "STRING"], var.select_formula("LITERAL"))
      assert_equal(["STRING", "STRING", "STRING", "STRING", "STRING"], var.select_formula("LITERAL"));Fi[I"%if @var.include?("LITERAL") then;FI""LITERAL";FI"	else;FI"<@var.include?("LITERAL") ? ("LITERAL") : (ENV.compiler);Fi[[	I"%data//homebrew_proj/compilers.rb;TiiI"    return if (@var.empty? or @var.include?(ENV.compiler))
    ENV.send(case ENV.compiler
    when "LITERAL" then
      if @var.include?("LITERAL") then
        "LITERAL"
      else
        @var.include?("LITERAL") ? ("LITERAL") : (ENV.compiler)
      end
    when "LITERAL" then;Fi[	@¿irI"      if @var.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL"
      else
        if @var.include?("LITERAL") then
          "LITERAL"
        else
          @var.include?("LITERAL") ? ("LITERAL") : (ENV.compiler)
        end
      end;Fi[	@¿i|I"      if @var.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then
        "LITERAL"
      else
        if @var.include?("LITERAL") then
          "LITERAL"
        else
          @var.include?("LITERAL") ? ("LITERAL") : (ENV.compiler)
        end
      end;Fi[I"SubversionDownloadStrategy;FI"when "LITERAL" then;FI"SubversionDownloadStrategy;FI"when "LITERAL" then;Fi[[	@~iI"ˆ    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      FossilDownloadStrategy
    when "LITERAL" then;Fi[	@~i
I"˙    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then;Fi[	@~iI"    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      CurlApacheMirrorDownloadStrategy
    when "LITERAL" then;Fi[I"%when ["LITERAL", "LITERAL"] then;FI""LITERAL";FI"%when ["LITERAL", "LITERAL"] then;FI""LITERAL";Fi[[	@}i'I"    end
    var.each do |arglist|
      var = case read("LITERAL", var).unpack("STRING")
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL";Fi[	@}i)I"      var = case read("LITERAL", var).unpack("STRING")
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL";Fi[	@}i+I"Ÿ        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      when ["LITERAL", "LITERAL"] then
        "LITERAL"
      else
        "LITERAL";Fi[I"&@var ||= if locate("STRING") then;FI"-`#{locate("STRING")}STRING` =~ "LITERAL";FI"$1.to_i;FI"end;Fi[[	@iaI"î  end
  
  def function(arglist)
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i
    end
  end
  ;Fi[	@ioI"î  end
  
  def function(arglist)
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i
    end
  end
  ;Fi[	@i}I"î  end
  
  def function(arglist)
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i
    end
  end
  ;Fi[I"if var["STRING"] then;FI"!if var["STRING"].nil?.! then;FI"9out((("STRING" + (var + var["STRING"])) + "STRING"));FI"	else;Fi[[	@”iI"X          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end;Fi[	@‡i#I"X          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end;Fi[	@Ìi	I"X          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end;Fi[I"var.write("STRING");FI"assert(var.universal?.!);FI"assert(var.i386?.!);FI"assert(var.x86_64?.!);Fi[[	@ÑiåI"‹  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ÑiúI"‹  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@Ñi¨I"‹  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[I"0assert_version_equal("STRING", var.version);FI""assert_nil(var.head.checksum);FI"$assert_equal("STRING", var.url);FI"=assert_equal(GitDownloadStrategy, var.download_strategy);Fi[[	@ªi∂I"Ç    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head);Fi[	@ªi≈I"Ç    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head);Fi[	@ªi‘I"Ç    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head);Fi[I"$assert_equal("STRING", var.url);FI"=assert_equal(GitDownloadStrategy, var.download_strategy);FI"<assert_instance_of(GitDownloadStrategy, var.downloader);FI"3assert_instance_of(HeadSoftwareSpec, var.head);Fi[[	@ªi∏I"V    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end
  ;Fi[	@ªi«I"V    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end
  ;Fi[	@ªi÷I"V    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end
  ;Fi[I""assert_nil(var.head.checksum);F@@I"<assert_instance_of(GitDownloadStrategy, var.downloader);Fi[[	@ªi∑I"m    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end;Fi[	@ªi∆I"m    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end;Fi[	@ªi’I"m    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end;Fi[I",assert_equal(var.head, var.active_spec);FI"0assert_version_equal("STRING", var.version);F@@i[[	@ªiµI"j    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader);Fi[	@ªiƒI"j    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader);Fi[	@ªi”I"j    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader);Fi[@@@I"end;Fi[[	@ªiπI"B    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end
  
  def function(arglist);Fi[	@ªi»I"B    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end
  
  def function(arglist);Fi[	@ªi◊I"B    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy)
    assert_instance_of(GitDownloadStrategy, var.downloader)
    assert_instance_of(HeadSoftwareSpec, var.head)
  end
  
  def function(arglist);Fi[I"assert_not_nil(var.head);FI"assert_nil(var.stable);FI"assert_nil(var.bottle);FI"assert_nil(var.devel);Fi[[	@ªi±I"  
  def function(arglist)
    var = HeadOnlySpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version);Fi[	@ªi¿I"  
  def function(arglist)
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version);Fi[	@ªiœI"  
  def function(arglist)
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version);Fi[@9@:@;I",assert_equal(var.head, var.active_spec);Fi[[	@ªi≤I"%  def function(arglist)
    var = HeadOnlySpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum);Fi[	@ªi¡I"-  def function(arglist)
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum);Fi[	@ªi–I"-  def function(arglist)
    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum);Fi[@:@;@DI"0assert_version_equal("STRING", var.version);Fi[[	@ªi≥I"1    var = HeadOnlySpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url);Fi[	@ªi¬I"9    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url);Fi[	@ªi—I"9    var = IncompleteStableSpecTestBall.new
    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url);Fi[@;@D@M@i[[	@ªi¥I"K    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy);Fi[	@ªi√I"K    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy);Fi[	@ªi“I"K    assert_not_nil(var.head)
    assert_nil(var.stable)
    assert_nil(var.bottle)
    assert_nil(var.devel)
    assert_equal(var.head, var.active_spec)
    assert_version_equal("STRING", var.version)
    assert_nil(var.head.checksum)
    assert_equal("STRING", var.url)
    assert_equal(GitDownloadStrategy, var.download_strategy);Fi[I"
true);FI"rescue LoadError;FI"
false;FI"end;Fi[[	@iiäI"Ø        return @var unless @var.nil?
        @var = begin
          (require("diff/lcs")
          true)
        rescue LoadError
          false
        end
      end
    end;Fi[	@ni}I"Ø        return @var unless @var.nil?
        @var = begin
          (require("diff/lcs")
          true)
        rescue LoadError
          false
        end
      end
    end;Fi[	I""data//homebrew_proj/debrew.rb;TiUI"É    begin
      (require("rubygems")
      require("ruby-debug")
      true)
    rescue LoadError
      false
    end
    end
  end;Fi[I"!var = Pathname.new("STRING");FI"assert(var.universal?);FI"assert(var.i386?.!);F@—i[[	@ÑiI"Ìend
class MachOPathnameTests < Test::Unit::TestCase
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@Ñi5I"¬  end
  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[	@ÑiCI"¬  end
  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!);Fi[@lI"assert(var.i386?.!);F@—@~i[[	@ÑiI" class MachOPathnameTests < Test::Unit::TestCase
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?);Fi[	@Ñi6I"’  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[	@ÑiDI"’  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!);Fi[I"var = (var - var);FI"Avar = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"));FI"var = ((var + var) - var);FI"1var = (scale_divisions or (var / "LITERAL"));Fi[[	I"(data//redmine_proj/SVG/Graph/Bar.rb;TiI"`      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = [];Fi[	I"2data//redmine_proj/SVG/Graph/BarHorizontal.rb;TiI"`      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = [];Fi[	I")data//redmine_proj/SVG/Graph/Line.rb;TiTI"`      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = [];Fi[@I"var = (var - var);FI"var = (var - var);FI"var = (var - var);Fi[[	I"*data//bundler_proj/bundler/runtime.rb;TiI"º      end
      var.uniq!
      var.flatten!
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var);Fi[	@ìi{I"ÿ      var.uniq!
      var.flatten!
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var.collect do |arglist|;Fi[	@ìi|I"ˆ      var.flatten!
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var - var)
      var = (var.collect do |arglist|
        var = Pathname.new(var).basename.to_s;Fi[@~@I"assert(var.dylib?);FI"%assert(var.mach_o_executable?.!);Fi[[	@ÑiI"    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert((var.arch == "LITERAL"));Fi[	@ÑiI"     assert(var.universal?.!)
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!);Fi[	@Ñi+I"     assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!);Fi[I"rescue LoadError => var;FI"(var.message << "STRING");FI"raise(var);FI"end;Fi[[	@zi—I"Ω      def function(arglist)
        begin
          require("diff/lcs")
        rescue LoadError => var
          (var.message << "STRING")
          raise(var)
        end
      end
      ;Fi[	@◊iI"¡          begin
          begin
            require("fog")
          rescue LoadError => var
            (var.message << "STRING")
            raise(var)
          end
          end
        end;Fi[	I"1data//paperclip_proj/paperclip/storage/s3.rb;TiI"≈          begin
          begin
            require("aws-sdk")
          rescue LoadError => var
            (var.message << "STRING")
            raise(var)
          end
          end
        end;Fi[@I"assert(var.dylib?);F@õI"#assert(var.text_executable?.!);Fi[[	@ÑiI"    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert((var.arch == "LITERAL"))
    assert_match("LITERAL", file(var));Fi[	@ÑiI"
    assert(var.i386?)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert_match("LITERAL", file(var));Fi[	@Ñi,I"
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert_match("LITERAL", file(var));Fi[I"A# the block from the user's configuration file is evaluated.;FI"def function(arglist);FI"
super;FI"(instance_eval(&var) if block_given?;Fi[[	I"9data//backup_proj/backup/syncer/cloud/cloud_files.rb;Ti'I"c        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(arglist)
          super
          instance_eval(&var) if block_given?
          @var = path.sub("LITERAL", "STRING")
        end;Fi[	I"0data//backup_proj/backup/syncer/cloud/s3.rb;TiI"c        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and Cloud specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(arglist)
          super
          instance_eval(&var) if block_given?
          @var = path.sub("LITERAL", "STRING")
        end;Fi[	I"3data//backup_proj/backup/syncer/rsync/local.rb;TiI"=        # which in turn will invoke Syncer::Base.
        #
        # Once pre-configured defaults and RSync specific defaults are set,
        # the block from the user's configuration file is evaluated.
        def function(arglist)
          super
          instance_eval(&var) if block_given?
        end
        ;Fi[@õ@≤I"assert(var.mach_o_bundle?);FI"'assert_match("LITERAL", file(var));Fi[[	@ÑiJI"„    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end
  ;Fi[	@ÑiXI"„    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end
  ;Fi[	@ÑifI"„    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end
  ;Fi[@≤I"!assert(var.mach_o_bundle?.!);FI"'assert_match("LITERAL", file(var));FI"end;Fi[[	@Ñi!I"‡    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert_match("LITERAL", file(var))
  end
  
  def function(arglist);Fi[	@Ñi/I"‡    assert(var.ppc64?.!)
    assert(var.dylib?)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert_match("LITERAL", file(var))
  end
  
  def function(arglist);Fi[	@Ñi=I"‡    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?.!)
    assert_match("LITERAL", file(var))
  end
  
  def function(arglist);Fi[@≤@ @ÀI"end;Fi[[	@ÑiKI"‡    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end
  
  def function(arglist);Fi[	@ÑiYI"‡    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end
  
  def function(arglist);Fi[	@ÑigI"‡    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end
  
  def function(arglist);Fi[I"A# Transfers the archived file to the specified remote server;FI"def function(arglist);FI" var = remote_path_for(@var);FI"connection do |arglist|;Fi[[	@≥	i7I"      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function(arglist)
        var = remote_path_for(@var)
        connection do |arglist|
          create_remote_path(var, var)
          files_to_transfer_for(@var) do |arglist|;Fi[	@¬	i-I"      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function(arglist)
        var = remote_path_for(@var)
        connection do |arglist|
          var.exec!("STRING")
          files_to_transfer_for(@var) do |arglist|;Fi[	@≈	i+I"      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function(arglist)
        var = remote_path_for(@var)
        connection do |arglist|
          create_remote_path(var, var)
          files_to_transfer_for(@var) do |arglist|;Fi[@Ä@Å@}@ i[[	@ÑiII"˙    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end;Fi[	@ÑiWI"˙    assert(var.x86_64?.!)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end;Fi[	@ÑieI"¯    assert(var.x86_64?)
    assert(var.ppc7400?.!)
    assert(var.ppc64?.!)
    assert(var.dylib?.!)
    assert(var.mach_o_executable?.!)
    assert(var.text_executable?.!)
    assert(var.mach_o_bundle?)
    assert_match("LITERAL", file(var))
  end;Fi[I"'var = (HOMEBREW_PREFIX / "STRING");FI"var.write("STRING");F@¯I"assert(var.i386?.!);Fi[[	@ÑiãI"…  end
  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ÑiõI"…  end
  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@Ñi´I"…  end
  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[I"0assert_equal("LITERAL", var.patches.length);FI"!var = var.patches["LITERAL"];FI")assert_equal("LITERAL", var.patch_p);FI"end;Fi[[	I"-data//homebrew_proj/test/test_patches.rb;TiI"˝class PatchingTests < Test::Unit::TestCase
  def function(arglist)
    var = Patches.new("STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
  end
  
  def function(arglist);Fi[	@i#I"‚  
  def function(arglist)
    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
  end
  
  def function(arglist);Fi[	@i*I"‚  
  def function(arglist)
    var = Patches.new("LITERAL" => "STRING")
    assert_equal("LITERAL", var.patches.length)
    var = var.patches["LITERAL"]
    assert_equal("LITERAL", var.patch_p)
  end
  
  def function(arglist);Fi[@DI"@var ||= [];FI"@var ||= [];FI"@var ||= "LITERAL";Fi[[	@li±I"æ    @var ||= "LITERAL"
    @var ||= "LITERAL"
    @var ||= []
    @var ||= "LITERAL"
    @var ||= []
    @var ||= []
    @var ||= "LITERAL"
    @var ||= "STRING" if var
    @var ||= "STRING";Fi[	@li—I"±    @var ||= "LITERAL"
    @var ||= "STRING"
    @var ||= "LITERAL"
    @var ||= "LITERAL"
    @var ||= []
    @var ||= []
    @var ||= "LITERAL"
    @var ||= []
    @var ||= [];Fi[	@li‘I"§    @var ||= "LITERAL"
    @var ||= []
    @var ||= []
    @var ||= "LITERAL"
    @var ||= []
    @var ||= []
    @var ||= "LITERAL"
    @var ||= {}
    @var ||= [];Fi[I"(HOMEBREW_REPOSITORY.cd do |arglist|;FI"var = UpdaterMock.new;FI"!var.in_repo_expect("STRING");FI"+var.in_repo_expect("STRING", "STRING");Fi[[	@≥i1I"˙  end
  
  def function(arglist)
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING");Fi[	@≥iCI"  
  def function(arglist)
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING");Fi[	@≥iWI"  
  def function(arglist)
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING");Fi[@ @!@"I"!var.in_repo_expect("STRING");Fi[[	@≥i2I"!  
  def function(arglist)
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[	@≥iDI":  def function(arglist)
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[	@≥iXI":  def function(arglist)
    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING");Fi[@!@"@+I"!var.in_repo_expect("STRING");Fi[[	@≥i3I"A  def function(arglist)
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING");Fi[	@≥iEI"J    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var);Fi[	@≥iYI"J    var = fixture("STRING")
    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var);Fi[@"@+@4I"+var.in_repo_expect("STRING", "STRING");Fi[[	@≥i4I"9    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.pull!;Fi[	@≥iFI">    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!;Fi[	@≥iZI">    HOMEBREW_REPOSITORY.cd do |arglist|
      var = UpdaterMock.new
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING")
      var.in_repo_expect("STRING", "STRING")
      var.in_repo_expect("STRING", var)
      var.pull!;Fi[@ @@I"var = [];Fi[[	@∞	i^I"ö      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |arglist| (var << ("STRING" + "STRING")) }
        Logger.message(var.join("STRING"));Fi[	@∂	i'I"ç      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |arglist| (var << "STRING") }
        Logger.message(var.join("STRING"));Fi[	@¬	i<I"ö      ##
      # Removes the transferred archive file(s) from the storage location.
      # Any error raised will be rescued during Cycling
      # and a warning will be logged, containing the error message.
      def function(arglist)
        var = remote_path_for(var)
        var = []
        transferred_files_for(var) { |arglist| (var << ("STRING" + "STRING")) }
        Logger.message(var.join("STRING"));Fi[@®	@©	@CI"@var ||= "STRING";Fi[[	@∞	iI"      ##
      # Path to where the backups will be stored
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "STRING"
        @var ||= "LITERAL"
        instance_eval(&var) if block_given?;Fi[	@π	iI"Í      ##
      # Ninefold directory path
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "STRING"
        instance_eval(&var) if block_given?
      end;Fi[	@ø	iI"Ù      ##
      # Region of the specified S3 bucket
      ##
      # Creates a new instance of the storage object
      def function(arglist)
        super(var, var)
        @var ||= "STRING"
        instance_eval(&var) if block_given?
      end;Fi[I" sha1("STRING" => "LITERAL");FI" sha1("STRING" => "LITERAL");FI" sha1("STRING" => "LITERAL");FI"end;Fi[[	I")data//homebrew_proj/test/testball.rb;TitI"ü  end
  
  bottle do |arglist|
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
  end
  
  def function(arglist);Fi[	@^i I"™  sha1("STRING")
  
  bottle do |arglist|
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
  end
  
  def function(arglist);Fi[	@^iI"∞  
  bottle do |arglist|
    version("LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
    sha1("STRING" => "LITERAL")
  end
  
  def function(arglist);Fi[I".# to perform the database dumping process;FI"def function(arglist);FI"*["STRING", "STRING"].map do |arglist|;F@∏i[[	@niÜI".      
      ##
      # Builds the MongoDB credentials syntax to authenticate the user
      # to perform the database dumping process
      def function(arglist)
        ["STRING", "STRING"].map do |arglist|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING");Fi[	@niêI"2      
      ##
      # Builds the MongoDB connectivity options syntax to connect the user
      # to perform the database dumping process
      def function(arglist)
        ["STRING", "STRING"].map do |arglist|
          next if send(var).to_s.empty?
          "STRING"
        end.compact.join("STRING");Fi[	@qiZI"E      
      ##
      # Builds the credentials MySQL syntax to authenticate the user
      # to perform the database dumping process
      def function(arglist)
        ["STRING", "STRING"].map do |arglist|
          next if send(var).to_s.empty?
          "STRING".gsub("STRING", "STRING")
        end.compact.join("STRING");Fi[I"var[var] = var[var];FI"var[var] = "LITERAL";FI"var = "LITERAL";FI"	else;Fi[[	@üi
I"        var = []
        var.each_with_index do |arglist|
          if (var > var[var]) then
            var[var] = var[var]
            var[var] = "LITERAL"
            var = "LITERAL"
          else
            if (var < var[var]) then
              var[var] = var[var];Fi[	@üiI"ˆ            var = "LITERAL"
          else
            if (var < var[var]) then
              var[var] = var[var]
              var[var] = "LITERAL"
              var = "LITERAL"
            else
              var[var] = "LITERAL"
            end;Fi[	@üi'I"L            if (var[var] == "LITERAL") then
              var[var] = (var * var)
              if (var[var] < var[var]) then
                var[var] = var[var]
                var[var] = "LITERAL"
                var = "LITERAL"
              else
                if (var[var] > var[var]) then
                  var[var] = var[var];Fi[I"var.putc(var);FI"var.putc(var);FI"return "LITERAL";FI"end;Fi[[	@áiÕI"'          if ((var.&(Umask2) << "LITERAL").|(var.&(Umaskx)) <= Uchar1max) then
            raise(Utf8Error)
          end
          var.putc(var)
          var.putc(var)
          return "LITERAL"
        end
        raise(Utf8Error) if (var < "LITERAL")
        var = var[(var + "LITERAL")].ord;Fi[	@áiÿI"T          var = (var.&(Umask3) << "LITERAL").|((var.&(Umaskx) << "LITERAL")).|(var.&(Umaskx))
          raise(Utf8Error) if (var <= Uchar2max)
          var.putc(var)
          var.putc(var)
          var.putc(var)
          return "LITERAL"
        end
        raise(Utf8Error) if (var < "LITERAL")
        var = var[(var + "LITERAL")].ord;Fi[	@ái‰I"Ë          raise(Utf8Error) if (var <= Uchar3max)
          var.putc(var)
          var.putc(var)
          var.putc(var)
          var.putc(var)
          return "LITERAL"
        end
        raise(Utf8Error))
      rescue Utf8Error;Fi[@∆I"	puts;FI"puts("STRING");FI"puts("STRING");Fi[[	@Ãi™I"         unless options.any? then
          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING");Fi[	@Ãi≠I"µ          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          exit
        end;Fi[	@›i&I"ô      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts
      puts("STRING")
      puts("STRING")
      puts
  end;Fi[@@h@iI"$var = "LITERAL".match(var.to_s);Fi[[	@ipI"q      "LITERAL".match(var.to_s) ? (Pathname.new(var.dirname).stem) : (var.stem)
    end
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s);Fi[	@irI"k    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s);Fi[	@itI"f    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var.to_s)
    return var.captures.first unless var.nil?
    var = "LITERAL".match(var);Fi[@∆@«I"	puts;F@âi[[	@Ãi©I"Õ      def function(arglist)
        unless options.any? then
          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          puts;Fi[	@Ãi¨I"¬          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          exit;Fi[	@›i%I"∆    curl("STRING", "STRING", "STRING") rescue puts
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts
      puts("STRING")
      puts("STRING")
      puts;Fi[I"def self.process(arglist);FI"ovar = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING");FI" FileUtils.mkdir_p("STRING");FI"!var[QUERY].each do |arglist|;Fi[[	@ûiI",    
    QUERY = "STRING"
    
    def self.process(arglist)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@°iI"M  module MT
    QUERY = "STRING"
    
    def self.process(arglist)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"].gsub("LITERAL", "STRING");Fi[	@§iI"<  module TextPattern
    QUERY = "STRING"
    
    def self.process(arglist)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[I"	puts;F@∆@«I"	puts;Fi[[	@Ãi®I"Ó      # Returns a list of Backup's dependencies
      def function(arglist)
        unless options.any? then
          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING");Fi[	@Ãi´I"¬          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING")
          puts
          puts("STRING")
          puts("STRING");Fi[	@›i'I"á      puts("STRING")
      puts("STRING")
      puts("STRING")
      puts
      puts("STRING")
      puts("STRING")
      puts
  end
  ;Fi[@¶@ß@®I"var = var["LITERAL"];Fi[[	@ûiI"D    QUERY = "STRING"
    
    def self.process(arglist)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[	@°iI"^    QUERY = "STRING"
    
    def self.process(arglist)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"].gsub("LITERAL", "STRING")
        var = var["LITERAL"];Fi[	@§iI"D    QUERY = "STRING"
    
    def self.process(arglist)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"];Fi[I"!var[QUERY].each do |arglist|;FI"var = var["LITERAL"];FI"var = var["LITERAL"];FI"var = var["LITERAL"];Fi[[	@òiI":      FileUtils.mkdir_p("STRING")
      FileUtils.mkdir_p("STRING")
      File.open("STRING", "STRING") { |arglist| var.puts("STRING") }
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = Time.at(var);Fi[	@ûiI"ï    def self.process(arglist)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ([var.year, var.month, var.day, var].join("STRING") + "STRING");Fi[	@§iI"è    def self.process(arglist)
      var = Sequel.mysql(var, "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => (var), "LITERAL" => "STRING")
      FileUtils.mkdir_p("STRING")
      var[QUERY].each do |arglist|
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = var["LITERAL"]
        var = ([var.strftime("STRING"), var].join("STRING") + "STRING");Fi[I"var.run;FI"if var.success? then;FI"Logger.message("STRING");FI"	else;Fi[[	@iPI"€        end
      end
      (var << "STRING")
      var.run
      if var.success? then
        Logger.message("STRING")
      else
        raise(Errors::Archive::PipelineError, ("STRING" + var.error_messages))
      end;Fi[	@qiBI"Ó          end
        end
        (var << "STRING")
        var.run
        if var.success? then
          Logger.message("STRING")
        else
          raise(Errors::Database::PipelineError, ("STRING" + var.error_messages))
        end;Fi[	@tiBI"Ó          end
        end
        (var << "STRING")
        var.run
        if var.success? then
          Logger.message("STRING")
        else
          raise(Errors::Database::PipelineError, ("STRING" + var.error_messages))
        end;Fi[I"if @var.compressor then;F@I"(var << var);FI"(var << var);Fi[[	@iII"Á      var = "STRING"
      var = Pipeline.new
      (var << ("STRING" + "STRING"))
      if @var.compressor then
        @var.compressor.compress_with do |arglist|
          (var << var)
          (var << var)
        end
      end;Fi[	@qi;I"Ì        var = Pipeline.new
        var = "STRING"
        (var << mysqldump)
        if @var.compressor then
          @var.compressor.compress_with do |arglist|
            (var << var)
            (var << var)
          end
        end;Fi[	@ti;I"Í        var = Pipeline.new
        var = "STRING"
        (var << pgdump)
        if @var.compressor then
          @var.compressor.compress_with do |arglist|
            (var << var)
            (var << var)
          end
        end;Fi[I"K# its non-bang version in that it passes through the attribute setter.;FI"J# Saving is not subjected to validation checks. Returns +true+ if the;FI"# record could be saved.;FI"def function(arglist);Fi[[	I"9data//activerecord_proj/active_record/persistence.rb;TiI"l    end
    
    # Wrapper around +increment+ that saves the record. This method differs from
    # its non-bang version in that it passes through the attribute setter.
    # Saving is not subjected to validation checks. Returns +true+ if the
    # record could be saved.
    def function(arglist)
      increment(var, var).update_attribute(var, self[var])
    end;Fi[	@ÌiI"l    end
    
    # Wrapper around +decrement+ that saves the record. This method differs from
    # its non-bang version in that it passes through the attribute setter.
    # Saving is not subjected to validation checks. Returns +true+ if the
    # record could be saved.
    def function(arglist)
      decrement(var, var).update_attribute(var, self[var])
    end;Fi[	@Ìi/I"a    end
    
    # Wrapper around +toggle+ that saves the record. This method differs from
    # its non-bang version in that it passes through the attribute setter.
    # Saving is not subjected to validation checks. Returns +true+ if the
    # record could be saved.
    def function(arglist)
      toggle(var).update_attribute(var, self[var])
    end;Fi[I"var = Dir["STRING"];FI"var = Dir["STRING"];FI"var = Dir["STRING"];FI"var = Dir["STRING"];Fi[[	@ìidI"¬    end
    
    def function(arglist)
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"];Fi[	@ìieI"…    
    def function(arglist)
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = [];Fi[	@ìifI"#    def function(arglist)
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = Dir["STRING"]
      var = []
      var = @var.sources.select { |arglist| var.is_a?(Bundler::Source::Git) }.map do |arglist|;Fi[I"!if var["STRING"].nil?.! then;F@ÌI"	else;FI"out("STRING");Fi[[	@”iI"N          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end
          end;Fi[	@‡i$I"N          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end
          end;Fi[	@Ìi
I"N          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end
          end;Fi[I"class_attribute("LITERAL");FI"class_attribute("LITERAL");FI"class_attribute("LITERAL");FI"class_attribute("LITERAL");Fi[[	@kiI"    included do |arglist|
      setup("LITERAL")
      teardown("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL");Fi[	@ki I"      setup("LITERAL")
      teardown("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      self.fixture_table_names = [];Fi[	@ki!I"0      teardown("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      class_attribute("LITERAL")
      self.fixture_table_names = []
      self.use_transactional_fixtures = true;Fi[@ˇ	@ 
I"@var ||= {};FI"end;Fi[[	@ái#I"¡    #
    # @return [ Hash ] The atomic unsets
    #
    # @since 3.0.0
    def function(arglist)
      @var ||= {}
    end
    
    # Flag the document as destroyed and return the atomic path.;Fi[	I"-data//mongoid_proj/lib/mongoid/config.rb;Ti÷I"∑    #
    # @return [ Hash ] The sessions configuration.
    #
    # @since 3.0.0
    def function(arglist)
      @var ||= {}
    end
    
    # Set the session configuration options.;Fi[	I"9data//mongoid_proj/lib/mongoid/contextual/command.rb;TiI"∞      #
      # @return [ Hash ] The db command.
      #
      # @since 3.0.0
      def function(arglist)
        @var ||= {}
      end
      
      # Get the database session.;Fi[@ˇ	@ 
I""STRING";FI"end;Fi[[	I"Bdata//mongoid_proj/lib/mongoid/contextual/aggregable/mongo.rb;TiyI"ﬁ        #
        # @return [ String ] The finalize JS function.
        #
        # @since 3.0.0
        def function(arglist)
          "STRING"
        end
        
        # Get the map function for the provided field.;Fi[	@'iÑI"‹        #
        # @return [ String ] The map JS function.
        #
        # @since 3.0.0
        def function(arglist)
          "STRING"
        end
        
        # Get the reduce function for the provided field.;Fi[	@'iíI"Æ        #
        # @return [ String ] The reduce JS function.
        #
        # @since 3.0.0
        def function(arglist)
          "STRING"
        end
      end
    end;Fi[@ß	@Ë@È@Íi[[	@≥	i6I"Ô        end
      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function(arglist)
        var = remote_path_for(@var)
        connection do |arglist|
          create_remote_path(var, var);Fi[	@¬	i,I"Ê        end
      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function(arglist)
        var = remote_path_for(@var)
        connection do |arglist|
          var.exec!("STRING");Fi[	@≈	i*I"Ô        end
      end
      
      ##
      # Transfers the archived file to the specified remote server
      def function(arglist)
        var = remote_path_for(@var)
        connection do |arglist|
          create_remote_path(var, var);Fi[I"#var.gsub!("LITERAL", "STRING");FI"#var.gsub!("LITERAL", "STRING");FI"#var.gsub!("LITERAL", "STRING");FI"#var.gsub!("LITERAL", "STRING");Fi[[	@⁄i¶I"Ú  end
  
  def function(arglist)
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING");Fi[	@⁄ißI"   
  def function(arglist)
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    flush_left(var);Fi[	@⁄i®I"  def function(arglist)
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    var.gsub!("LITERAL", "STRING")
    flush_left(var)
  end;Fi[@fI"SetStyle("STRING", false);FI"when "STRING" then;FI"SetStyle("STRING", false);Fi[[	@liÍI"˚      @var = (@var - "LITERAL")
      @var = "LITERAL"
      @var = (@var + "LITERAL")
    when "STRING" then
      SetStyle("STRING", false)
    when "STRING" then
      SetStyle("STRING", false)
    when "STRING" then
      SetStyle("STRING", false);Fi[	@liÏI"˚      @var = (@var + "LITERAL")
    when "STRING" then
      SetStyle("STRING", false)
    when "STRING" then
      SetStyle("STRING", false)
    when "STRING" then
      SetStyle("STRING", false)
    when "STRING" then
      SetStyle("STRING", false);Fi[	@liÓI"
      SetStyle("STRING", false)
    when "STRING" then
      SetStyle("STRING", false)
    when "STRING" then
      SetStyle("STRING", false)
    when "STRING" then
      SetStyle("STRING", false)
    when "STRING", "STRING", "STRING" then
      SetStyle(var, false);Fi[@ˇ	@ 
I"@var.!.!;FI"end;Fi[[	I"7data//mongoid_proj/lib/mongoid/contextual/mongo.rb;Ti"I"‘      #
      # @return [ true, false ] If the context is cached.
      #
      # @since 3.0.0
      def function(arglist)
        @var.!.!
      end
      
      # Get the number of documents matching the query.;Fi[	@QiÙI"»      #
      # @return [ true, false ] If the cache is loaded.
      #
      # @since 3.0.0
      def function(arglist)
        @var.!.!
      end
      
      # Get the documents for cached queries.;Fi[	@irI"Ÿ    #
    # @return [ true, false ] If the criteria is embedded.
    #
    # @since 3.0.0
    def function(arglist)
      @var.!.!
    end
    
    # Extract a single id from the provided criteria. Could be in an $and;Fi[@fI"var = @var;FI"SetFontSize(@var);FI"@var = @var;Fi[[	@li¯I"Ã      @var = nil
    when "STRING" then
      Ln
    when "STRING" then
      var = @var
      SetFontSize(@var)
      @var = @var
      SetXY(GetX, (GetY - ((var - @var) * @@var)))
    when "STRING" then;Fi[	@li˝I"¯      SetFontSize(@var)
      @var = @var
      SetXY(GetX, (GetY - ((var - @var) * @@var)))
    when "STRING" then
      var = @var
      SetFontSize(@var)
      @var = @var
      SetXY(GetX, (GetY + ((var - @var) * @@var)))
    when "STRING" then;Fi[	@liI"¸      SetFontSize(@var)
      @var = @var
      SetXY(GetX, (GetY + ((var - @var) * @@var)))
    when "STRING" then
      var = @var
      SetFontSize(@var)
      @var = @var
      SetXY(GetX, (GetY - ((@var - var) / "LITERAL")))
    when "STRING" then;Fi[@f@XI"@var = @var;FI" SetFontSize((@var * @@var));Fi[[	@livI"…          end
        end
      end
    when "STRING" then
      var = @var
      @var = @var
      SetFontSize((@var * @@var))
      SetXY(GetX, (GetY - ((var - @var) * @@var)))
    when "STRING" then;Fi[	@li{I"      @var = @var
      SetFontSize((@var * @@var))
      SetXY(GetX, (GetY - ((var - @var) * @@var)))
    when "STRING" then
      var = @var
      @var = @var
      SetFontSize((@var * @@var))
      SetXY(GetX, (GetY + ((var - @var) * @@var)))
    when "STRING" then;Fi[	@liÄI"      @var = @var
      SetFontSize((@var * @@var))
      SetXY(GetX, (GetY + ((var - @var) * @@var)))
    when "STRING" then
      var = @var
      @var = @var
      SetFontSize((@var * @@var))
      SetXY(GetX, (GetY + ((var - @var) / "LITERAL")))
    when "STRING" then;Fi[@ˇ	@ 
I"translate("STRING", var);FI"end;Fi[[	I";data//mongoid_proj/lib/mongoid/errors/mongoid_error.rb;Ti3I"∂      #
      # @return [ String ] The problem.
      #
      # @since 3.0.0
      def function(arglist)
        translate("STRING", var)
      end
      
      # Create the summary.;Fi[	@qiBI"π      #
      # @return [ String ] The summary.
      #
      # @since 3.0.0
      def function(arglist)
        translate("STRING", var)
      end
      
      # Create the resolution.;Fi[	@qiQI"§      #
      # @return [ String ] The resolution.
      #
      # @since 3.0.0
      def function(arglist)
        translate("STRING", var)
      end
    end
  end;Fi[@fI"SetStyle("STRING", true);FI"when "STRING" then;FI"SetStyle("STRING", true);Fi[[	@li!I"˚      SetLineWidth("LITERAL")
      Line((@var + var), @var, (@var + var), @var)
      Ln
    when "STRING" then
      SetStyle("STRING", true)
    when "STRING" then
      SetStyle("STRING", true)
    when "STRING" then
      SetStyle("STRING", true);Fi[	@li#I"‡      Ln
    when "STRING" then
      SetStyle("STRING", true)
    when "STRING" then
      SetStyle("STRING", true)
    when "STRING" then
      SetStyle("STRING", true)
    when "STRING" then
      SetStyle("STRING", true);Fi[	@li%I"      SetStyle("STRING", true)
    when "STRING" then
      SetStyle("STRING", true)
    when "STRING" then
      SetStyle("STRING", true)
    when "STRING" then
      SetStyle("STRING", true)
    when "STRING", "STRING", "STRING" then
      SetStyle(var, true);Fi[@f@LI"when "LITERAL" then;FI""LITERAL";Fi[[	@
iI"“        case var.to_s
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[	@
iáI"—          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL";Fi[	@
içI"—          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL";Fi[@ˇ	@ 
I"
false;FI"end;Fi[[	@"ièI"†      #
      # @return [ false ] false.
      #
      # @since 3.0.0
      def function(arglist)
        false
      end
      
      # Is the object a number?;Fi[	@"iõI"√      #
      # @return [ false ] Always false.
      #
      # @since 3.0.0
      def function(arglist)
        false
      end
      
      # Remove the instance variable for the provided name.;Fi[	@"i∫I"¥      #
      # @return [ false ] false.
      #
      # @since 3.0.0
      def function(arglist)
        false
      end
      
      # Get the substitutable version of an object.;Fi[@ˇ	@ 
I"@var ||= match["LITERAL"];FI"end;Fi[[	I"9data//mongoid_proj/lib/mongoid/sessions/mongo_uri.rb;TiI"«      #
      # @return [ String ] The database.
      #
      # @since 3.0.0
      def function(arglist)
        @var ||= match["LITERAL"]
      end
      
      # Get the hosts provided in the URI.;Fi[	@õiAI"⁄      #
      # @return [ String ] The password.
      #
      # @since 3.0.0
      def function(arglist)
        @var ||= match["LITERAL"]
      end
      
      # Get the uri as a Mongoid friendly configuration hash.;Fi[	@õi]I"£      #
      # @return [ String ] The username.
      #
      # @since 3.0.0
      def function(arglist)
        @var ||= match["LITERAL"]
      end
    end
  end;Fi[@fI"case var;FI"when "LITERAL" then;FI""STRING";Fi[[	@1i—I"˛      # Maps logical Rails types to MySQL-specific data types.
      def function(arglist)
        case var.to_s
        when "STRING" then
          case var
          when "LITERAL" then
            "STRING"
          when nil then
            "STRING";Fi[	@1i‹I"ﬂ          else
            raise(ActiveRecordError, "STRING")
          end
        when "STRING" then
          case var
          when "LITERAL" then
            "STRING"
          when "LITERAL" then
            "STRING";Fi[	@1iÎI"‰          else
            raise(ActiveRecordError, "STRING")
          end
        when "STRING" then
          case var
          when "LITERAL" then
            "STRING"
          when nil, "LITERAL" then
            "STRING";Fi[I"execute("STRING");FI"rescue;FI"# do nothing;FI"end;Fi[[	@1iI"è      
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end
      end
      ;Fi[	@1iI"ó      #:nodoc:
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end
      end
      ;Fi[	@1iI"ó      #:nodoc:
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end
      end
      ;Fi[@˝@˛I"
begin;FI"((Threaded.begin_execution("STRING");Fi[[	@‘	i6I"÷      #
      # @return [ Object ] The return value of the block.
      #
      # @since 2.1.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure;Fi[	@‘	iUI"÷      #
      # @return [ Object ] The return value of the block.
      #
      # @since 2.1.0
      def function(arglist)
        begin
          (Threaded.begin_execution("STRING")
          yield)
        ensure;Fi[	@‘	iÆI"Ë        #
        # @return [ Object ] The return value of the block.
        #
        # @since 2.1.0
        def function(arglist)
          begin
            (Threaded.begin_execution("STRING")
            yield)
          ensure;Fi[I"# @since 2.2.0;FI"def function(arglist);FI"conflicts["STRING"] ||= {};FI"end;Fi[[	I"7data//mongoid_proj/lib/mongoid/atomic/modifiers.rb;Ti¶I"ﬁ      #
      # @return [ Hash ] The conflicting pull operations.
      #
      # @since 2.2.0
      def function(arglist)
        conflicts["STRING"] ||= {}
      end
      
      # Get the conflicting push modifications.;Fi[	@…i≤I"›      #
      # @return [ Hash ] The conflicting push operations.
      #
      # @since 2.2.0
      def function(arglist)
        conflicts["STRING"] ||= {}
      end
      
      # Get the conflicting set modifications.;Fi[	@…iæI"˜      #
      # @return [ Hash ] The conflicting set operations.
      #
      # @since 2.2.0
      def function(arglist)
        conflicts["STRING"] ||= {}
      end
      
      # Get the push operations that would have conflicted with the sets.;Fi[@√@ƒI"@var ||= {};FI"end;Fi[[	@…i÷I"‘      #
      # @return [ Array<String> ] The pull fields.
      #
      # @since 2.2.0
      def function(arglist)
        @var ||= {}
      end
      
      # Get the names of the fields that need to be pushed.;Fi[	@…i‚I"—      #
      # @return [ Array<String> ] The push fields.
      #
      # @since 2.2.0
      def function(arglist)
        @var ||= {}
      end
      
      # Get the names of the fields that need to be set.;Fi[	@…iÓI"”      #
      # @return [ Array<String> ] The set fields.
      #
      # @since 2.2.0
      def function(arglist)
        @var ||= {}
      end
      
      # Get the $pullAll operations or intialize a new one.;Fi[I"# @since 3.1.0;FI"def function(arglist);FI"#first_or("LITERAL", var, &var);FI"end;Fi[[	I";data//mongoid_proj/lib/mongoid/criterion/modifiable.rb;TiaI"¯      #
      # @return [ Document ] A matching or newly created document.
      #
      # @since 3.1.0
      def function(arglist)
        first_or("LITERAL", var, &var)
      end
      
      # Find the first +Document+, or creates a new document;Fi[	@‡iqI"¸      #
      # @return [ Document ] A matching or newly created document.
      #
      # @since 3.1.0
      def function(arglist)
        first_or("LITERAL", var, &var)
      end
      
      # Find the first +Document+, or initializes a new document;Fi[	@‡i{I"Õ      #
      # @return [ Document ] A matching or newly initialized document.
      #
      # @since 3.1.0
      def function(arglist)
        first_or("LITERAL", var, &var)
      end
      
      private;Fi[I"# @since 2.3.0;FI"def function(arglist);FI"@var ||= {};FI"end;Fi[[	@áiI"¥    #
    # @return [ Hash ] The delayed $sets.
    #
    # @since 2.3.0
    def function(arglist)
      @var ||= {}
    end
    
    # Get a hash of atomic pulls that are pending.;Fi[	I"5data//mongoid_proj/lib/mongoid/config/options.rb;TiI"…      #
      # @return [ Hash ] The default options.
      #
      # @since 2.3.0
      def function(arglist)
        @var ||= {}
      end
      
      # Define a configuration option with a default.;Fi[	@Ôi7I"ö      #
      # @return [ Hash ] The setting options.
      #
      # @since 2.3.0
      def function(arglist)
        @var ||= {}
      end
    end
  end;Fi[I"$#     include Mongoid::Document;FI"#     embedded_in :person;FI"#   end;FI"#;Fi[[	@Íi-I"
        #   end
        #
        #   class Address
        #     include Mongoid::Document
        #     embedded_in :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.;Fi[	@ÍiKI"
        #   end
        #
        #   class Address
        #     include Mongoid::Document
        #     embedded_in :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.;Fi[	@ÍigI"        #   end
        #
        #   class Name
        #     include Mongoid::Document
        #     embedded_in :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.;Fi[@ÙI"#     belongs_to :person;FI"#   end;FI"#;Fi[[	@Íi~I"Ï        # @example Define the relation.
        #
        #   class Game
        #     include Mongoid::Document
        #     belongs_to :person
        #   end
        #
        #   class Person
        #     include Mongoid::Document;Fi[	@ÍióI"        #   end
        #
        #   class Game
        #     include Mongoid::Document
        #     belongs_to :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.
        # @param [ Hash ] options The relation options.;Fi[	@ÍiÃI"Ï        # @example Define the relation.
        #
        #   class Game
        #     include Mongoid::Document
        #     belongs_to :person
        #   end
        #
        #   class Person
        #     include Mongoid::Document;Fi[@@I"@var ||= "STRING";FI"end;Fi[[	@	i+I"’      #
      # @return [ String ] The foreign_key plus =.
      #
      # @since 2.0.0.rc.1
      def function(arglist)
        @var ||= "STRING"
      end
      
      # Returns the index option of the relation.;Fi[	@	iªI"Ï      #
      # @return [ String ] The name plus "=".
      #
      # @since 2.0.0.rc.1
      def function(arglist)
        @var ||= "STRING"
      end
      
      # Returns the name of the field in which to store the name of the class;Fi[	@	iFI"Ã      #
      # @return [ String ] The classified name.
      #
      # @since 2.0.0.rc.1
      def function(arglist)
        @var ||= "STRING"
      end
      
      # Get the name for the inverse field.;Fi[I"super(var);FI"	else;F@I"end;Fi[[	@˛ioI"¬  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end
  end
  ;Fi[	@˛ixI"¬  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end
  end
  ;Fi[	@˛i|I"¬  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var))
    end
  end
  ;Fi[I".# @param [ Class ] klass The model class.;FI"4# @param [ Hash ] spec The index specification.;FI"1# @param [ Hash ] options The index options.;FI"#;Fi[[	I"Adata//mongoid_proj/lib/mongoid/indexes/validators/options.rb;TiI"T        # @example Validate the index spec.
        #   Options.validate(Band, name: 1)
        #
        # @param [ Class ] klass The model class.
        # @param [ Hash ] spec The index specification.
        # @param [ Hash ] options The index options.
        #
        # @raise [ Errors::InvalidIndex ] If validation failed.
        #;Fi[	@& i)I"Y        # @example Validate the options.
        #   Options.validate_options(Band, name: 1)
        #
        # @param [ Class ] klass The model class.
        # @param [ Hash ] spec The index specification.
        # @param [ Hash ] options The index options.
        #
        # @raise [ Errors::InvalidIndex ] If validation failed.
        #;Fi[	@& i?I"S        # @example Validate the spec.
        #   Options.validate_spec(Band, name: 1)
        #
        # @param [ Class ] klass The model class.
        # @param [ Hash ] spec The index specification.
        # @param [ Hash ] options The index options.
        #
        # @raise [ Errors::InvalidIndex ] If validation failed.
        #;Fi[@ì@ÎI"h(var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"));FI"end;Fi[[	@òiªI"ó            var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL")
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
          if var["LITERAL"] then
            var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL");Fi[	@òiŒI"O          if var["LITERAL"] then
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
          if var["LITERAL"] then
            var = "STRING";Fi[	@òi’I">          if var["LITERAL"] then
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
        end
        if var["LITERAL"] then;Fi[@ì@Î@Ï@- i[[	@òi∫I"v          if var["LITERAL"] then
            var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL")
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
          if var["LITERAL"] then;Fi[	@òiÕI"S        if var["LITERAL"] then
          if var["LITERAL"] then
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
          if var["LITERAL"] then;Fi[	@òi‘I"-          end
          if var["LITERAL"] then
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
        end;Fi[@ì@ÎI"	else;FI"(var << "STRING");Fi[[	@i6I"˘    def function(arglist)
      var = "STRING"
      if var.required_by.first and var.required_by.first.name.!=(var.name) then
        (var << "STRING")
        (var << "STRING")
      else
        (var << "STRING")
      end
      (var << "STRING");Fi[	@i\I"Â            (var << "STRING")
          else
            if var.required_by.first then
              (var << "STRING")
              (var << "STRING")
            else
              (var << "STRING")
            end
          end;Fi[	I"#data//homebrew_proj/caveats.rb;TiHI"          (var << "STRING")
          if f.plist_startup then
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
          else
            (var << "STRING")
            (var << "STRING")
          end;Fi[@ìI"var.run;F@—@“i[[	@iOI"Ë          (var << var)
        end
      end
      (var << "STRING")
      var.run
      if var.success? then
        Logger.message("STRING")
      else
        raise(Errors::Archive::PipelineError, ("STRING" + var.error_messages));Fi[	@qiAI"˚            (var << var)
          end
        end
        (var << "STRING")
        var.run
        if var.success? then
          Logger.message("STRING")
        else
          raise(Errors::Database::PipelineError, ("STRING" + var.error_messages));Fi[	@tiAI"˚            (var << var)
          end
        end
        (var << "STRING")
        var.run
        if var.success? then
          Logger.message("STRING")
        else
          raise(Errors::Database::PipelineError, ("STRING" + var.error_messages));Fi[I"L# Execute the cascading deletion for the relation if it already exists.;FI"I# This should be optimized in the future potentially not to load all;FI"# objects from the db.;FI"#;Fi[[	@ŒiI"L          @var = var.send(var.name)
        end
        
        # Execute the cascading deletion for the relation if it already exists.
        # This should be optimized in the future potentially not to load all
        # objects from the db.
        #
        # @example Perform the cascading delete.
        #   strategy.cascade;Fi[	@—iI"M          @var = var.send(var.name)
        end
        
        # Execute the cascading deletion for the relation if it already exists.
        # This should be optimized in the future potentially not to load all
        # objects from the db.
        #
        # @example Perform the cascading destroy.
        #   strategy.cascade;Fi[	@◊iI"L          @var = var.send(var.name)
        end
        
        # Execute the cascading deletion for the relation if it already exists.
        # This should be optimized in the future potentially not to load all
        # objects from the db.
        #
        # @example Perform the cascading delete.
        #   strategy.cascade;Fi[I"#   class Game;FI"$#     include Mongoid::Document;F@  I"#   end;Fi[[	@Íi}I"Œ        #
        # @example Define the relation.
        #
        #   class Game
        #     include Mongoid::Document
        #     belongs_to :person
        #   end
        #
        #   class Person;Fi[	@ÍiñI"Ï        #     has_many :posts
        #   end
        #
        #   class Game
        #     include Mongoid::Document
        #     belongs_to :person
        #   end
        #
        # @param [ Symbol ] name The name of the relation.;Fi[	@ÍiÀI"Œ        #
        # @example Define the relation.
        #
        #   class Game
        #     include Mongoid::Document
        #     belongs_to :person
        #   end
        #
        #   class Person;Fi[I"=# @param [ Document ] document The document to validate.;FI"=# @param [ Symbol ] attribute The name of the attribute.;FI"7# @param [ Object ] value The value of the object.;FI"#;Fi[[	I"=data//mongoid_proj/lib/mongoid/validations/uniqueness.rb;Ti9I"J      # @example Add the error.
      #   validator.add_error(doc, :name, "test")
      #
      # @param [ Document ] document The document to validate.
      # @param [ Symbol ] attribute The name of the attribute.
      # @param [ Object ] value The value of the object.
      #
      # @since 2.4.10
      def function(arglist);Fi[	@p iXI"É      #   validator.create_criteria(User, user, :name, "syd")
      #
      # @param [ Class, Proxy ] base The base to execute the criteria from.
      # @param [ Document ] document The document to validate.
      # @param [ Symbol ] attribute The name of the attribute.
      # @param [ Object ] value The value of the object.
      #
      # @return [ Criteria ] The criteria.
      #;Fi[	@p iqI"\      # @example Get the criteria.
      #   validator.criterion(person, :title, "Sir")
      #
      # @param [ Document ] document The document to validate.
      # @param [ Symbol ] attribute The name of the attribute.
      # @param [ Object ] value The value of the object.
      #
      # @return [ Criteria ] The uniqueness criteria.
      #;Fi[I"#var = Node.new("LITERAL", var);FI"	else;FI"&raise(Racc::ParseError, "STRING");FI"end;Fi[[	@hi˙I"”      
      def function(arglist)
        if (var["LITERAL"] == "STRING") then
          var = Node.new("LITERAL", var)
        else
          raise(Racc::ParseError, "STRING")
        end
        var
      end;Fi[	@hi	I"          if (var["LITERAL"] == "STRING") then
            var["LITERAL"] = "STRING"
            var.unshift("STRING")
            var = Node.new("LITERAL", var)
          else
            raise(Racc::ParseError, "STRING")
          end
        end
        var;Fi[	@hiI"Ë        if (var["LITERAL"] == "STRING") then
          (var << "STRING")
          (var << "STRING")
          var = Node.new("LITERAL", var)
        else
          raise(Racc::ParseError, "STRING")
        end
        var
      end;Fi[@¿I"when "STRING" then;F@üI"when "STRING" then;Fi[[	@¢iI"    var["LITERAL"] = var.rows
    case var.mime_type
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then;Fi[	@¢iI"Ú    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then;Fi[	@¢iI"‰    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    when "STRING" then
      var["LITERAL"] = "STRING"
    else;Fi[@ì@Æ@ØI"(var << "STRING");Fi[[	@i*I"˝            (var << "STRING")
            (var << "STRING")
            if (false == variable("LITERAL")) then
              (var << "STRING")
            else
              (var << "STRING")
              (var << "STRING")
            end
          end;Fi[	@iII"˝            (var << "STRING")
            (var << "STRING")
            if (false == variable("LITERAL")) then
              (var << "STRING")
            else
              (var << "STRING")
              (var << "STRING")
            end
          end;Fi[	@G iII"·          if f.plist_startup then
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
          else
            (var << "STRING")
            (var << "STRING")
          end
        else;Fi[@˚@á@à@Éi[[	@
i~I"È      link_dir("STRING", var) do |arglist|
        case var.to_s
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then;Fi[	@
iÜI"ÿ        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then;Fi[	@
iåI"Ÿ        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then;Fi[@˚@á@à@Mi[[	@ÔiµI"≈    else
      case extname
      when "STRING", "STRING", "STRING", "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      else;Fi[	@
iÇI"◊        when "STRING" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then;Fi[	@
iÑI"ÿ        when "LITERAL" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "STRING" then
          "LITERAL"
        when "LITERAL" then;Fi[@˚@e@ΩI"end;Fi[[	@¿ijI"0    ENV.send(case ENV.compiler
    when "LITERAL" then
      if @var.include?("LITERAL") then
        "LITERAL"
      else
        @var.include?("LITERAL") ? ("LITERAL") : (ENV.compiler)
      end
    when "LITERAL" then
      if @var.include?("LITERAL") and (MacOS.clang_build_version >= "LITERAL") then;Fi[	@¿isI"÷        "LITERAL"
      else
        if @var.include?("LITERAL") then
          "LITERAL"
        else
          @var.include?("LITERAL") ? ("LITERAL") : (ENV.compiler)
        end
      end
    when "LITERAL" then;Fi[	@¿i}I"«        "LITERAL"
      else
        if @var.include?("LITERAL") then
          "LITERAL"
        else
          @var.include?("LITERAL") ? ("LITERAL") : (ENV.compiler)
        end
      end
    else;Fi[@˚@eI"# do nothing;FI"end;Fi[[	@ÍiîI"“      when "LITERAL" then
        "LITERAL"
      when "LITERAL" then
        "LITERAL"
      else
        # do nothing
      end
      problem("STRING") if (var.hash_type == "LITERAL")
      if var.empty? then;Fi[	@ÔiπI"ç      when "STRING" then
        "LITERAL"
      when "STRING" then
        "LITERAL"
      else
        # do nothing
      end
    end
  end;Fi[	@i8I"†        when "LITERAL" then
          "LITERAL"
        when "LITERAL" then
          "LITERAL"
        else
          # do nothing
        end
      end
      ;Fi[@˚@eI"
super;FI"end;Fi[[	@1i<I"´          when "LITERAL" then
            "LITERAL"
          when "LITERAL" then
            "LITERAL"
          else
            super
          end
        end
        ;Fi[	@1iKI"ÿ            when "LITERAL" then
              "LITERAL"
            when "LITERAL" then
              "LITERAL"
            else
              super
            end
          when "LITERAL" then
            "LITERAL";Fi[	I"0data//devise_proj/devise/models/lockable.rb;Ti\I"¬          super
        else
          if lock_strategy_enabled?("LITERAL") and attempts_exceeded? then
            "LITERAL"
          else
            super
          end
        end
      end;Fi[@E@FI"@var = var;FI"end;Fi[[	I"&data//bundler_proj/bundler/dsl.rb;TiõI"ä    def function(arglist)
      begin
        (@var, var = var, @var
        yield)
      ensure
        @var = var
      end
    end
    ;Fi[	I"@data//capistrano_proj/capistrano/recipes/deploy/scm/base.rb;Ti4I"◊          if block_given? then
            begin
              (var, @var = @var, true
              yield)
            ensure
              @var = var
            end
          else
            LocalProxy.new(self);Fi[	I";data//haml_proj/haml/helpers/action_view_extensions.rb;Ti3I"å        begin
          (@var = true
          var = @var
          yield)
        ensure
          @var = var
        end
      end
    end;Fi[@í@$I"if (var < "LITERAL") then;F@ i[[	@”iCI"    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else;Fi[	@‡i3I"    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else;Fi[	@Ìi2I"    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else;Fi[I"$# the executed +sql+ statement.;FI"def function(arglist);FI"exec_query(var, var, var);FI"end;Fi[[	I"^data//activerecord_proj/active_record/connection_adapters/abstract/database_statements.rb;TiJI"`      
      # Executes insert +sql+ statement in the context of this connection using
      # +binds+ as the bind substitutes. +name+ is logged along with
      # the executed +sql+ statement.
      def function(arglist)
        exec_query(var, var, var)
      end
      
      # Executes delete +sql+ statement in the context of this connection using;Fi[	@‡ iQI"`      
      # Executes delete +sql+ statement in the context of this connection using
      # +binds+ as the bind substitutes. +name+ is logged along with
      # the executed +sql+ statement.
      def function(arglist)
        exec_query(var, var, var)
      end
      
      # Executes update +sql+ statement in the context of this connection using;Fi[	@‡ iXI"T      
      # Executes update +sql+ statement in the context of this connection using
      # +binds+ as the bind substitutes. +name+ is logged along with
      # the executed +sql+ statement.
      def function(arglist)
        exec_query(var, var, var)
      end
      
      # Returns the last auto-generated ID from the affected table.;Fi[I"C# +binds+ as the bind substitutes. +name+ is logged along with;F@⁄ @€ @‹ i[[	@‡ iII"      end
      
      # Executes insert +sql+ statement in the context of this connection using
      # +binds+ as the bind substitutes. +name+ is logged along with
      # the executed +sql+ statement.
      def function(arglist)
        exec_query(var, var, var)
      end
      ;Fi[	@‡ iPI"      end
      
      # Executes delete +sql+ statement in the context of this connection using
      # +binds+ as the bind substitutes. +name+ is logged along with
      # the executed +sql+ statement.
      def function(arglist)
        exec_query(var, var, var)
      end
      ;Fi[	@‡ iWI"      end
      
      # Executes update +sql+ statement in the context of this connection using
      # +binds+ as the bind substitutes. +name+ is logged along with
      # the executed +sql+ statement.
      def function(arglist)
        exec_query(var, var, var)
      end
      ;Fi[I"(var << self[var]);FI"var = (var + "LITERAL");FI"var = (var + "LITERAL");FI"end;Fi[[	I"data//redmine_proj/diff.rb;TiªI"        case var["LITERAL"]
        when "STRING" then
          while (var < var["LITERAL"]) do
            (var << self[var])
            var = (var + "LITERAL")
            var = (var + "LITERAL")
          end
          var = (var + "LITERAL")
        when "STRING" then;Fi[	@ˆ i¬I"          var = (var + "LITERAL")
        when "STRING" then
          while (var < var["LITERAL"]) do
            (var << self[var])
            var = (var + "LITERAL")
            var = (var + "LITERAL")
          end
          (var << var["LITERAL"])
          var = (var + "LITERAL");Fi[	@ˆ iŒI"§      end
    end
    while (var < self.length) do
      (var << self[var])
      var = (var + "LITERAL")
      var = (var + "LITERAL")
    end
    return var
  end;Fi[@l@1I"var = var.length;FI"var = "LITERAL";Fi[[	@”i?I"–  end
  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[	@‡i/I"–  end
  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[	@Ìi.I"–  end
  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var]);Fi[@l@@$@— i[[	@”iBI""    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL");Fi[	@‡i2I""    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL");Fi[	@Ìi1I""    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL");Fi[@lI"	else;FI".if ((var >> "LITERAL") == "LITERAL") then;FI".(var << ((var - "LITERAL") << "LITERAL"));Fi[[	@liœ
I"      if (var.length == "LITERAL") then
        if (var <= "LITERAL") then
          (var << var)
          var = "LITERAL"
        else
          if ((var >> "LITERAL") == "LITERAL") then
            (var << ((var - "LITERAL") << "LITERAL"))
            var = "LITERAL"
          else;Fi[	@li”
I">        else
          if ((var >> "LITERAL") == "LITERAL") then
            (var << ((var - "LITERAL") << "LITERAL"))
            var = "LITERAL"
          else
            if ((var >> "LITERAL") == "LITERAL") then
              (var << ((var - "LITERAL") << "LITERAL"))
              var = "LITERAL"
            else;Fi[	@li◊
I"P          else
            if ((var >> "LITERAL") == "LITERAL") then
              (var << ((var - "LITERAL") << "LITERAL"))
              var = "LITERAL"
            else
              if ((var >> "LITERAL") == "LITERAL") then
                (var << ((var - "LITERAL") << "LITERAL"))
                var = "LITERAL"
              else;Fi[@öI"=var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL");FI"%var.column("LITERAL", "LITERAL");FI"%var.column("LITERAL", "LITERAL");Fi[[	@£iI"rActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@£iI"\  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL");Fi[	@£i.I"T    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[I"var = [];FI"=var = ((var % var) == "LITERAL") ? (var) : ((var + var));FI"2var.step(var, var) { |arglist| (var << var) };FI"return var;Fi[[	@Öi!I"P        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end
      ;Fi[	@àiI"P        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end
      ;Fi[	@ãiYI"P        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end
      ;Fi[I"@var = {};FI"@var = {};FI"@var = {};FI"@var = {};Fi[[	I"Ndata//activerecord_proj/active_record/connection_adapters/schema_cache.rb;TiI"§      
      def function(arglist)
        @var = var
        @var = {}
        @var = {}
        @var = {}
        @var = {}
        prepare_default_proc
      end;Fi[	@≥iI"À    def function(arglist)
      var = self.class.primary_key
      @var[var] = nil unless @var.key?(var)
      @var = {}
      @var = {}
      @var = {}
      @var = {}
      @var = {}
      @var = false;Fi[	@≥iI"ƒ      var = self.class.primary_key
      @var[var] = nil unless @var.key?(var)
      @var = {}
      @var = {}
      @var = {}
      @var = {}
      @var = {}
      @var = false
      @var = false;Fi[I"3var = ListMixin.create("LITERAL" => "LITERAL");F@ıI"3var = ListMixin.create("LITERAL" => "LITERAL");FI"%assert_equal("LITERAL", var.pos);Fi[[	@†iqI"(  end
  
  def function(arglist)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos);Fi[	@†isI"w  def function(arglist)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos);Fi[	@†iuI"n    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var = ListMixin.create("LITERAL" => "LITERAL")
    assert_equal("LITERAL", var.pos)
    var.insert_at("LITERAL")
    assert_equal("LITERAL", var.pos);Fi[@ZI"@var = var;F@ªI"	else;Fi[[	@”iùI"∆    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end;Fi[	@‡iòI"∆    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end;Fi[	@ÌiåI"∆    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL")
      end;Fi[I" #   person.pets.size # => 2;TI"#   person.pets;TI"#   # => [;TI";#   #       #<Pet id: 2, name: "Spook", person_id: 1>,;Ti[[	@‰iæI"I      #   person.pets.delete(Pet.find(1))
      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>]
      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰iˆI"I      #   person.pets.delete(Pet.find(1))
      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>]
      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i.I"J      #   person.pets.destroy(Pet.find(1))
      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>]
      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[I"&ListMixin.find("LITERAL").destroy;FI"àassert_equal(["LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"));FI";assert_equal("LITERAL", ListMixin.find("LITERAL").pos);FI";assert_equal("LITERAL", ListMixin.find("LITERAL").pos);Fi[[	@†iÜI"<  
  def function(arglist)
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").destroy
    assert_equal(["LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    ListMixin.find("LITERAL").destroy;Fi[	@†i±I"H  def function(arglist)
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").remove_from_list
    ListMixin.find("LITERAL").destroy
    assert_equal(["LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
  end;Fi[	@†iI"<  
  def function(arglist)
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").destroy
    assert_equal(["LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    ListMixin.find("LITERAL").destroy;Fi[@`!@a!@b!I";assert_equal("LITERAL", ListMixin.find("LITERAL").pos);Fi[[	@†iáI"ª  def function(arglist)
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").destroy
    assert_equal(["LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    ListMixin.find("LITERAL").destroy
    assert_equal(["LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"));Fi[	@†i≤I"4    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").remove_from_list
    ListMixin.find("LITERAL").destroy
    assert_equal(["LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
  end
end;Fi[	@†iI"ª  def function(arglist)
    assert_equal(["LITERAL", "LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    ListMixin.find("LITERAL").destroy
    assert_equal(["LITERAL", "LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"))
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    assert_equal("LITERAL", ListMixin.find("LITERAL").pos)
    ListMixin.find("LITERAL").destroy
    assert_equal(["LITERAL", "LITERAL"], ListMixin.find("LITERAL", "LITERAL" => "STRING", "LITERAL" => "STRING").map(&"LITERAL"));Fi[I""assert_equal(@var, @var.root);FI""assert_equal(@var, @var.root);FI""assert_equal(@var, @var.root);FI""assert_equal(@var, @var.root);Fi[[	I"Fdata//redmine_proj/plugins/acts_as_tree/test/acts_as_tree_test.rb;TipI"  
  def function(arglist)
    assert_equal(@var, TreeMixin.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root);Fi[	@z!iqI"  def function(arglist)
    assert_equal(@var, TreeMixin.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
  end;Fi[	@z!irI"˚    assert_equal(@var, TreeMixin.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
    assert_equal(@var, @var.root)
  end
  ;Fi[I"#   person.pets.delete_all;TI"#   # => [;TI"A#   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,;TI";#   #       #<Pet id: 2, name: "Spook", person_id: 1>,;Ti[[	@‰iDI"[      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰ieI"[      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[	@‰i~I"[      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.delete_all
      #   # => [
      #   #       #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>,
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ];Ti[@!@!@!I"%var.column("LITERAL", "LITERAL");Fi[[	@£iI"xActiveRecord::Schema.define("LITERAL" => "LITERAL") do |arglist|
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@£iI"\  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end;Fi[	@£i(I"T    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|
    var.column("LITERAL", "LITERAL", "LITERAL" => "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
    var.column("LITERAL", "LITERAL")
  end
  create_table("LITERAL", "LITERAL" => (true)) do |arglist|;Fi[I":#   #      #<Pet id: 2, name: "Spook", person_id: 1>,;TI"=#   #      #<Pet id: 3, name: "Choo-Choo", person_id: 1>;TI"#   #    ];TI"#;Ti[[	@‰iMI"4      #
      #   person.pets.select { |pet| pet.name =~ /oo/ }
      #   # => [
      #   #      #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #      #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.select(:name) { |pet| pet.name =~ /oo/ }
      #   # => [;Ti[	@‰i§I"7      #
      #   person.pets.last(2)
      #   # => [
      #   #      #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #      #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   another_person_without.pets         # => []
      #   another_person_without.pets.last    # => nil;Ti[	@‰iÿI"7      #
      #   person.pets.create([{name: 'Spook'}, {name: 'Choo-Choo'}])
      #   # => [
      #   #      #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #      #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.size  # => 3
      #   person.pets.count # => 3;Ti[@Ç@É@V!I">#   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>;Ti[[	@‰iøI"'      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>]
      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i˜I"'      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>]
      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[	@‰i/I"'      #   # => [#<Pet id: 1, name: "Fancy-Fancy", person_id: 1>]
      #
      #   person.pets.size # => 2
      #   person.pets
      #   # => [
      #   #       #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #       #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #;Ti[@îI"var = @var["STRING"];F@2@3i[[	@”iZI"   
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length;Fi[	@‡iOI"   
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length;Fi[	@ÌiII"   
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length;Fi[@˜I"4Category.left_and_rights_valid?.should(be_true);FI"Hcategories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"];FI"5categories("LITERAL").save("LITERAL" => (false));Fi[[	@üiöI"w    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end;Fi[	@üi†I"w    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end;Fi[	@üi¶I"w    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end;Fi[@î@ï@ﬂ@‡i[[	@äiÙI"π  
  def function(arglist)
    if self.BreakThePage?(var) then
      var = @var
      var = @var
      if (var > "LITERAL") then
        @var = "LITERAL"
        out("STRING")
      end;Fi[	@li÷I"    var = @var
    if ((@var + var) > @var) and (@var.! and AcceptPageBreak) then
      if @var[(@var + "LITERAL")].nil? then
        var = @var
        var = @var
        if (var > "LITERAL") then
          @var = "LITERAL"
          out("STRING")
        end;Fi[	@liWI"¸    var = @var
    if (@var > @var) and (@var.! and AcceptPageBreak) then
      if @var[(@var + "LITERAL")].nil? then
        var = @var
        var = @var
        if (var > "LITERAL") then
          @var = "LITERAL"
          out("STRING")
        end;Fi[@î@ï@´!@2i[[	@”iYI"Ò  end
  
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING");Fi[	@‡iNI"Ò  end
  
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING");Fi[	@ÌiHI"Ò  end
  
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING");Fi[@?@ñ!@ó!I"#   #    ];Ti[[	@‰iLI"9      # Array#select.
      #
      #   person.pets.select { |pet| pet.name =~ /oo/ }
      #   # => [
      #   #      #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #      #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.select(:name) { |pet| pet.name =~ /oo/ };Ti[	@‰i£I"N      #   person.pets.last # => #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #
      #   person.pets.last(2)
      #   # => [
      #   #      #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #      #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   another_person_without.pets         # => [];Ti[	@‰i◊I"S      #   # => #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>
      #
      #   person.pets.create([{name: 'Spook'}, {name: 'Choo-Choo'}])
      #   # => [
      #   #      #<Pet id: 2, name: "Spook", person_id: 1>,
      #   #      #<Pet id: 3, name: "Choo-Choo", person_id: 1>
      #   #    ]
      #
      #   person.pets.size  # => 3;Ti[I"k#       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee);FI"#     end;FI"#   end;FI"#;Fi[[	@ciBI"6      #     validate :must_be_friends
      #
      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #
      # With a block which is passed with the current record to be validated:
      #;Fi[	@ciPI"#      #     end
      #
      #     def must_be_friends
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #
      # Or with a block where self points to the current record to be validated:
      #;Fi[	@ciZI"?      #     include ActiveModel::Validations
      #
      #     validate do
      #       errors.add(:base, 'Must be friends to leave a comment') unless commenter.friend_of?(commentee)
      #     end
      #   end
      #
      # Options:
      # * <tt>:on</tt> - Specifies the context where this validation is active;Fi[I"^#   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,;FI"L#   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;FI"P#   method, proc or string should return or evaluate to a +true+ or +false+;FI"#   value.;Fi[[	@ci.I"^      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist)
        validates_with(BlockValidator, _merge_attributes(var), &var);Fi[	@cihI"<      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist)
        var = var.extract_options!;Fi[	@hi.I"]      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist)
        validates_with(AssociatedValidator, _merge_attributes(var));Fi[I"I# * <tt>:unless</tt> - Specifies a method, proc or string to call to;F@‰!@Â!@Ê!i[[	@ci-I"h      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist);Fi[	@cigI"h      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist);Fi[	@hi-I"h      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist);Fi[@¥!@µ!@∂!I"5Category.left_and_rights_valid?.should(be_false);Fi[[	@üiõI"^    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|;Fi[	@üi°I"^    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|;Fi[	@üißI"^    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|;Fi[@µ!@∂!@˘!I"end;Fi[[	@üiúI"]  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true);Fi[	@üi¢I"]  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true);Fi[	@üi®I"Z  end
  it("STRING") do |arglist|
    Category.left_and_rights_valid?.should(be_true)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save("LITERAL" => (false))
    Category.left_and_rights_valid?.should(be_false)
  end
  it("STRING") do |arglist|
    var = Category.create("LITERAL" => "STRING");Fi[@µ!I"&categories("LITERAL").save(false);FI".assert(Category.left_and_rights_valid?.!);FI"end;Fi[[	@¶iÎI"  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end
  
  def function(arglist);Fi[	@¶iÚI"  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end
  
  def function(arglist);Fi[	@¶i˘I"  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end
  
  def function(arglist);Fi[I"1(categories("LITERAL").should == var.parent);FI"7(categories("LITERAL").id.should == var.parent_id);F@=@>i[[	@üiÒI"O  end
  it("STRING") do |arglist|
    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (categories("LITERAL").id))
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end;Fi[	@üi˘I"L  end
  it("STRING") do |arglist|
    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (categories("LITERAL")))
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end;Fi[	@üi%I"<  end
  it("STRING") do |arglist|
    var = categories("LITERAL").children.create!("LITERAL" => "STRING")
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end;Fi[@"@=@>@?i[[	@üiÚI"e  it("STRING") do |arglist|
    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (categories("LITERAL").id))
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end
  it("STRING") do |arglist|;Fi[	@üi˙I"b  it("STRING") do |arglist|
    var = Category.create!("LITERAL" => "STRING", "LITERAL" => (categories("LITERAL")))
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end
  it("STRING") do |arglist|;Fi[	@üi&I"Ü  it("STRING") do |arglist|
    var = categories("LITERAL").children.create!("LITERAL" => "STRING")
    (categories("LITERAL").should == var.parent)
    (categories("LITERAL").id.should == var.parent_id)
    var.left.should_not(be_nil)
    var.right.should_not(be_nil)
    Category.valid?.should(be_true)
  end
  # create a new top-level node and move single-node top-level tree inside it.;Fi[I"L#   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The;F@Ê!I"#   value.;FI"def function(arglist);Fi[[	@ci/I"      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist)
        validates_with(BlockValidator, _merge_attributes(var), &var)
      end;Fi[	@ciiI"      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist)
        var = var.extract_options!
        if var.key?("LITERAL") then;Fi[	@hi/I"      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.
      def function(arglist)
        validates_with(AssociatedValidator, _merge_attributes(var))
      end;Fi[@]@Y@‰!@Â!i[[	@ci,I"ù      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.;Fi[	@cifI"ù      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.;Fi[	@hi,I"ù      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+
      #   value.;Fi[I",assert(Category.left_and_rights_valid?);FI"Hcategories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"];F@"@"i[[	@¶iÍI"Ò  end
  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end
  ;Fi[	@¶iÒI"Ò  end
  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end
  ;Fi[	@¶i¯I"Ò  end
  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end
  ;Fi[@\@]@Y@‰!i[[	@ci+I"’      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+;Fi[	@cieI"’      # * <tt>:allow_blank</tt> - Skip validation if attribute is blank.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+;Fi[	@hi+I"¨      #   and <tt>:update</tt>.
      # * <tt>:if</tt> - Specifies a method, proc or string to call to determine
      #   if the validation should occur (e.g. <tt>if: :allow_validation</tt>,
      #   or <tt>if: Proc.new { |user| user.signup_step > 2 }</tt>). The method,
      #   proc or string should return or evaluate to a +true+ or +false+ value.
      # * <tt>:unless</tt> - Specifies a method, proc or string to call to
      #   determine if the validation should not occur (e.g. <tt>unless: :skip_validation</tt>,
      #   or <tt>unless: Proc.new { |user| user.signup_step <= 2 }</tt>). The
      #   method, proc or string should return or evaluate to a +true+ or +false+;Fi[I"R# * <tt>:border_color</tt> - Default value is <tt>COLOR_PALETTE[:black]</tt>.;FI"@# * <tt>:border_width</tt> - Default value is <tt>0.5</tt>.;FI"U# * <tt>:fill</tt> - Fill the box, 0 = no, 1 = yes? Default value is <tt>1</tt>.;FI"[# * <tt>:fill_color</tt> - Default value is nothing or <tt>COLOR_PALETTE[:white]</tt>.;Fi[[	@/iI"Ò  # 
  # Options are:
  # * <tt>:border</tt> - Draw a border, 0 = no, 1 = yes? Default value is <tt>1</tt>.
  # * <tt>:border_color</tt> - Default value is <tt>COLOR_PALETTE[:black]</tt>.
  # * <tt>:border_width</tt> - Default value is <tt>0.5</tt>.
  # * <tt>:fill</tt> - Fill the box, 0 = no, 1 = yes? Default value is <tt>1</tt>.
  # * <tt>:fill_color</tt> - Default value is nothing or <tt>COLOR_PALETTE[:white]</tt>.
  # * <tt>:fill_colorspace</tt> - Default value is :rgb or <tt>''</tt>.
  #;Fi[	@/iqI"Ò  # 
  # Options are:
  # * <tt>:border</tt> - Draw a border, 0 = no, 1 = yes? Default value is <tt>1</tt>.
  # * <tt>:border_color</tt> - Default value is <tt>COLOR_PALETTE[:black]</tt>.
  # * <tt>:border_width</tt> - Default value is <tt>0.5</tt>.
  # * <tt>:fill</tt> - Fill the box, 0 = no, 1 = yes? Default value is <tt>1</tt>.
  # * <tt>:fill_color</tt> - Default value is nothing or <tt>COLOR_PALETTE[:white]</tt>.
  # * <tt>:fill_colorspace</tt> - Default value is :rgb or <tt>''</tt>.
  #;Fi[	@/iãI"£  # Options are:
  # * <tt>:align</tt> - Vertical alignment 'C' = center, 'L' = left, 'R' = right. Default value is <tt>'C'</tt>.
  # * <tt>:border</tt> - Draw a border, 0 = no, 1 = yes? Default value is <tt>0</tt>.
  # * <tt>:border_color</tt> - Default value is <tt>COLOR_PALETTE[:black]</tt>.
  # * <tt>:border_width</tt> - Default value is <tt>0.5</tt>.
  # * <tt>:fill</tt> - Fill the box, 0 = no, 1 = yes? Default value is <tt>1</tt>.
  # * <tt>:fill_color</tt> - Default value is nothing or <tt>COLOR_PALETTE[:white]</tt>.
  # * <tt>:font_color</tt> - Default value is <tt>COLOR_PALETTE[:black]</tt>.
  # * <tt>:font_size</tt> - Default value is nothing or <tt>8</tt>.;Fi[@*@+@,I"=var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"];Fi[[	@/iI";  	#
  def function(arglist)
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    SetLineWidth(var["LITERAL"]);Fi[	@/i}I";  	#
  def function(arglist)
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    SetLineWidth(var["LITERAL"]);Fi[	@/i§I"u  def function(arglist)
    var["LITERAL"] ||= "STRING"
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= "LITERAL"
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"]
    var["LITERAL"] ||= default_font
    var["LITERAL"] ||= Core::RFPDF::COLOR_PALETTE["LITERAL"];Fi[@+@«I"when "LITERAL" then;F@…i[[	@~iI"¯      GitDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      FossilDownloadStrategy;Fi[	@~i	I"ˇ      FossilDownloadStrategy
    when "LITERAL" then
      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy;Fi[	@~iI"	      MercurialDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      SubversionDownloadStrategy
    when "LITERAL" then
      CurlApacheMirrorDownloadStrategy;Fi[@+I"'raise(Capistrano::Error, "STRING");FI"when "LITERAL" then;FI"'raise(Capistrano::Error, "STRING");Fi[[	@∫iCI"8        # etc. are handled here.
        def function(arglist)
          case var
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            raise(Capistrano::Error, "STRING");Fi[	@∫iEI"F          case var
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            raise(Capistrano::Error, "STRING");Fi[	@∫iGI"=            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          when "LITERAL" then
            raise(Capistrano::Error, "STRING")
          else
            # do nothing;Fi[@d@ö@õI"var = filesize(var);Fi[[	@”i˘I"ı      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var));Fi[	@‡iI"ı      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var));Fi[	@ÌiËI"ı      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var));Fi[@d@öI"out("STRING");FI"(if (var["STRING"] == "STRING") then;Fi[[	@”i	I"»      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else;Fi[	@‡iI"»      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else;Fi[	@Ìi¯I"»      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else;Fi[I"if var["LITERAL"] then;FI"var = "STRING";FI"(var << "STRING");FI"(var << "STRING");Fi[[	@òiÀI">          end
        end
        if var["LITERAL"] then
          if var["LITERAL"] then
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"));Fi[	@òi“I"°            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
          if var["LITERAL"] then
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"));Fi[	@òi⁄I"            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
        end
        if var["LITERAL"] then
          var = "STRING"
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          (var << view.content_tag("LITERAL", var["LITERAL"], "LITERAL" => (var), "LITERAL" => "STRING"));Fi[@d@tI")var["STRING"].each_pair do |arglist|;FI"8var = (var + ((("STRING" + var) + "STRING") + var));Fi[[	@”i-I"          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"];Fi[	@‡i6I"          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"];Fi[	@ÌiI"          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"];Fi[I"'if var.respond_to?("LITERAL") then;F@Á@ËI"end;Fi[[	@ÎiI"€  
  module StylesheetUrl
    def self.included(arglist)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end
    end
    ;Fi[	@Îi.I"’  
  module FontUrl
    def self.included(arglist)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end
    end
    ;Fi[	@ÎizI"ﬂ  
  module GeneratedImageUrl
    def self.included(arglist)
      if var.respond_to?("LITERAL") then
        var.declare("LITERAL", ["LITERAL"])
        var.declare("LITERAL", ["LITERAL", "LITERAL"])
      end
    end
    ;Fi[@V@WI"@var = var["LITERAL"];FI"@var = var["LITERAL"];Fi[[	I"0data//cucumber_prok/cucumber/cli/options.rb;Ti%I"≤      end
      
      def function(arglist)
        @var = var
        @var = var
        @var = var["LITERAL"]
        @var = var["LITERAL"]
        @var = []
        @var = [];Fi[	I"6data//mongoid_proj/lib/mongoid/fields/standard.rb;TiWI"¯      #
      # @since 3.0.0
      def function(arglist)
        @var = var
        @var = var
        @var = var["LITERAL"]
        @var = var["LITERAL"]
        define_default_method(var["LITERAL"]) if default_val.respond_to?("LITERAL")
      end;Fi[	@viI"›    #   conditionals defined for each one
    def function(arglist)
      assert_valid_keys(var, "LITERAL", "LITERAL")
      @var = var
      @var = var
      @var = var["LITERAL"]
      @var = var["LITERAL"]
    end
    ;Fi[I"2AddCIDFont(var, "STRING", var, var, var, var);FI"?AddCIDFont(var, "STRING", (var + "STRING"), var, var, var);FI"?AddCIDFont(var, "STRING", (var + "STRING"), var, var, var);FI"?AddCIDFont(var, "STRING", (var + "STRING"), var, var, var);Fi[[	@”iI"  end
  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end
  ;Fi[	@‡iI"  end
  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end
  ;Fi[	@ÌiI"  end
  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end
  ;Fi[@∂"@∑"@∏"I"end;Fi[[	@”iI"*  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end
  
  def function(arglist);Fi[	@‡iI"*  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end
  
  def function(arglist);Fi[	@ÌiI"*  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end
  
  def function(arglist);Fi[I"D"LITERAL".upto("LITERAL") { |arglist| cw[var.chr] = "LITERAL" };FI"var = "STRING";FI":var = { "STRING" => "STRING", "STRING" => "LITERAL" };FI"(AddCIDFonts(var, var, cw, var, var);Fi[[	@”i0I"‚  end
  
  def function(arglist)
    "LITERAL".upto("LITERAL") { |arglist| cw[var.chr] = "LITERAL" }
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, cw, var, var)
  end
  ;Fi[	@‡i I"Ô  
  def function(arglist)
    var = "STRING"
    "LITERAL".upto("LITERAL") { |arglist| cw[var.chr] = "LITERAL" }
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, cw, var, var)
  end
  ;Fi[	@ÌiI"‚  end
  
  def function(arglist)
    "LITERAL".upto("LITERAL") { |arglist| cw[var.chr] = "LITERAL" }
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, cw, var, var)
  end
  ;Fi[@1I"var = var.length;FI"var = "LITERAL";F@i[[	@”i@I"Í  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then;Fi[	@‡i0I"Í  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then;Fi[	@Ìi/I"Í  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then;Fi[I"var.call;FI"	else;FI"var;FI"end;Fi[[	I"2data//activemodel_proj/active_model/errors.rb;TikI"Æ      when Symbol then
        generate_message(var, var, var.except(*CALLBACKS_OPTIONS))
      when Proc then
        var.call
      else
        var
      end
    end
  end;Fi[	I"?data//activerecord_proj/active_record/nested_attributes.rb;Ti™I"À        when Symbol then
          send(var)
        when Proc then
          var.call
        else
          var
        end
        raise(TooManyRecords, "STRING") if var and (var.size > var)
      end;Fi[	I"+data//rspec_proj/spec/rake/spectask.rb;TióI"é      def function(arglist)
        case var
        when Proc then
          var.call
        else
          var
        end
      end
      ;Fi[I"when Proc then;FI"var.call;FI"	else;FI"var;Fi[[	@Ê"ijI"∑      case var
      when Symbol then
        generate_message(var, var, var.except(*CALLBACKS_OPTIONS))
      when Proc then
        var.call
      else
        var
      end
    end;Fi[	@È"i©I"ÿ        var = case var
        when Symbol then
          send(var)
        when Proc then
          var.call
        else
          var
        end
        raise(TooManyRecords, "STRING") if var and (var.size > var);Fi[	@Ï"iñI"é      
      def function(arglist)
        case var
        when Proc then
          var.call
        else
          var
        end
      end;Fi[@$@— @ @Ài[[	@”iDI"     var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        var = (var + "LITERAL");Fi[	@‡i4I":    var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        if (var >= "LITERAL") and (var <= "LITERAL") then;Fi[	@Ìi3I"     var = var.length
    var = "LITERAL"
    while (var < var) do
      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        var = (var + "LITERAL");Fi[@@ÄI"raise("STRING");FI"end;Fi[[	I";data//cucumber_prok/cucumber/runtime/user_interface.rb;Ti'I"√        Cucumber::JRUBY ? (var = jruby_gets(var)) : (var = mri_gets(var))
        if var then
          puts(var)
          var
        else
          raise("STRING")
        end
      end
      ;Fi[	I"4data//devise_proj/devise/models/rememberable.rb;Ti5I"Ã          remember_token
        else
          if respond_to?("LITERAL") and var = authenticatable_salt then
            var
          else
            raise("STRING")
          end
        end
      end;Fi[	I"%data//jekyll_proj/jekyll/site.rb;Ti"I"¬    def function(arglist)
      var = self.converters.select { |arglist| (var.class == var) }
      if var = var.first then
        var
      else
        raise("STRING")
      end
    end
  end;Fi[@3@4@s@·i[[	@”i]I"C    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end;Fi[	@‡iRI"C    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end;Fi[	@ÌiLI"C    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
    var = var.gsub("STRING", "STRING")
    var = var.length
    if (var > "LITERAL") and (var[(var - "LITERAL")] == "STRING") then
      var = (var - "LITERAL")
    end;Fi[@@ÄI""STRING";FI"end;Fi[[	@iêI"•        def function(arglist)
          case var
          when "STRING" then
            var
          else
            "STRING"
          end
        end
      end;Fi[	I"9data//compass_proj/compass/configuration/defaults.rb;Ti{I"ß      
      def function(arglist)
        if var = top_level.fonts_dir_without_default then
          var
        else
          "STRING"
        end
      end
      ;Fi[	@miI"Î        @var.uniq!
        @var = @var["LITERAL", "LITERAL"]
        @var = if var and ["STRING", "STRING", "STRING", "STRING"].include?(var) then
          var
        else
          "STRING"
        end
        @var = var
        run;Fi[@3@ˆI"var = (var + "LITERAL");FI"	next;Fi[[	@”i“I"U            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var);Fi[	@Ìi¡I"U            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var);Fi[	@äi∫I"=            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end
          var = (var + "LITERAL") if (var == var);Fi[I"8var = "STRING" unless var.to_s.index("STRING").nil?;FI"@var = (var + "STRING") unless var.to_s.index("STRING").nil?;FI"@var = var.to_s.index("STRING") ? ((var + "STRING")) : (var);FI"end;Fi[[	@”ikI""        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end
    var = "LITERAL";Fi[	@‡i`I""        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end
    var = "LITERAL";Fi[	@ÌiZI""        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end
    var = "LITERAL";Fi[@èI"var = (var + "LITERAL");FI"var = "LITERAL";FI"var = var;Fi[[	@”iyI"L      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL");Fi[	@‡inI";      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = var
      if (var == "LITERAL") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL");Fi[	@ÌihI"L      var = var[var].is_a?(String) ? (var[var].ord) : (var[var])
      var = (var < "LITERAL")
      if (var.chr == "STRING") then
        Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        var = (var + "LITERAL")
        var = "LITERAL"
        var = var
        var = "LITERAL"
        var = (var + "LITERAL");Fi[@èI"	else;FI"DCell(var, var, var[var, (var - var)], var, "LITERAL", var, var);FI"Cvar = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var);Fi[[	@”iäI"¶      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        else
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL";Fi[	@‡iÑI"à      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          var = (var + var) if (var == var)
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        else
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL";Fi[	@Ìi~I"¶      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        else
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL";Fi[@»	I"!var = (var + var.iconv(var));FI""rescue Iconv::IllegalSequence;FI"var = (var + $!.success);Fi[[	@ÉiI"1        else
          var = Iconv.new("STRING", "STRING")
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry;Fi[	@Éi>I",        else
          var = Iconv.new("STRING", var)
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry;Fi[	@Éi|I",        else
          var = Iconv.new(var, "STRING")
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry;Fi[@ﬁ@—I"@var = @var;F@”i[[	@”iÕI"ç      var = var if (var.! or (var.chr == "STRING"))
      var = (var + (var ? (var[var.chr]) : ("LITERAL") or "LITERAL"))
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@‡i’I")        end
      end
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@ÌiºI"ç      var = var if (var.! or (var.chr == "STRING"))
      var = (var + (var ? (var[var.chr]) : ("LITERAL") or "LITERAL"))
      if (var > var) then
        if ((var == "LITERAL") or (var == var)) then
          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[I"Fvar = (var + "STRING") if var and var.to_s.index("STRING").nil?.!;FI"DCell(var, var, var[var, (var - var)], var, "LITERAL", var, var);F@êI"@var = @var;Fi[[	@”iòI".        var = (var + (var ? ("LITERAL") : ("LITERAL")))
      end
    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then;Fi[	@‡iìI"        var = var if (var >= "LITERAL")
      end
    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then;Fi[	@ÌiáI".        var = (var + (var ? ("LITERAL") : ("LITERAL")))
      end
    end
    var = (var + "STRING") if var and var.to_s.index("STRING").nil?.!
    Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then;Fi[@»	@≠I"rescue;FI"# do nothing;Fi[[	@1i I"í      end
      
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end
      end;Fi[	@1iI"ó      
      #:nodoc:
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end
      end;Fi[	@1iI"ó      
      #:nodoc:
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end
      end;Fi[@∑I"#     has_many :pets;TI"#   end;TI"#;Ti[[	@‰i¥I"      # You can pass an array of attributes hashes, this will return an array
      # with the new objects.
      #
      #   class Person
      #     has_many :pets
      #   end
      #
      #   person.pets.build
      #   # => #<Pet id: nil, name: nil, person_id: 1>;Ti[	@‰iœI"2      # attributes, linked to this object and that has already been saved (if it
      # passes the validations).
      #
      #   class Person
      #     has_many :pets
      #   end
      #
      #   person.pets.create(name: 'Fancy-Fancy')
      #   # => #<Pet id: 1, name: "Fancy-Fancy", person_id: 1>;Ti[	@‰iÎI"Ë      
      # Like +create+, except that if the record is invalid, raises an exception.
      #
      #   class Person
      #     has_many :pets
      #   end
      #
      #   class Pet
      #     validates :name, presence: true;Ti[@?@@@ˆ@##i[[	@”i—I"+          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end;Fi[	@Ìi¿I"+          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end;Fi[	@äiπI"+          if (@var > @var) then
            @var = @var
            @var = (@var + var)
            var = ((@var - @var) - @var)
            var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var)
            var = (var + "LITERAL")
            var = (var + "LITERAL")
            next
          end;Fi[I"var.each do |arglist|;FI""var = ("LITERAL" + "LITERAL");FI"(class_eval("STRING", "STRING", var);FI"end;Fi[[	I"<data//compass_proj/compass/configuration/inheritance.rb;TiI"€      
      module ClassMethods
        def function(arglist)
          var.each do |arglist|
            var = ("LITERAL" + "LITERAL")
            class_eval("STRING", "STRING", var)
          end
        end
        ;Fi[	@ë#iI"c        # value when not set. The inherited reader calls to a raw reader that acts like a normal attribute
        # reader but prefixes the attribute name with "raw_".
        def function(arglist)
          var.each do |arglist|
            var = ("LITERAL" + "LITERAL")
            class_eval("STRING", "STRING", var)
          end
        end
        ;Fi[	@ë#iRI"¸        def function(arglist)
          inherited_reader(*var)
          inherited_writer(*var)
          var.each do |arglist|
            var = ("LITERAL" + "LITERAL")
            class_eval("STRING", "STRING", var)
          end
        end
        ;Fi[@—I"	else;FI"TCell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var);FI"Cvar = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var);Fi[[	@”iÿI"ñ            next
          end
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        else
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL";Fi[	@‡i‡I"x            next
          end
          var = (var + var) if (var == var)
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        else
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL";Fi[	@Ìi«I"ñ            next
          end
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        else
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL";Fi[I"
false;FI"	else;FI"	true;FI"end;Fi[[	I"Wdata//activerecord_proj/active_record/associations/has_many_through_association.rb;TirI"ø        when "LITERAL" then
          inverse_updates_counter_cache?(through_reflection).!
        when "LITERAL" then
          false
        else
          true
        end
      end
      ;Fi[	@æi∑I"∆        else
          if ["STRING", "STRING", "STRING", "STRING", false].include?(peek) then
            shift
            false
          else
            true
          end
        end
      else;Fi[	I"*data//diaspora_proj/models/contact.rb;TibI"∏  def function(arglist)
    if user and user.blocks.where("LITERAL" => (person_id)).exists? then
      (errors["LITERAL"] << "STRING")
      false
    else
      true
    end
  end
end;Fi[@ö@õ@v"I"Error("STRING") if var.!;Fi[[	@”i˙I"    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING");Fi[	@‡iI"    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING");Fi[	@ÌiÈI"    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING");Fi[@öI"out("STRING");F@Ä"I"putType0(var);Fi[[	@”i
I"–    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"];Fi[	@‡iI"–    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"];Fi[	@Ìi˘I"–    end
    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"];Fi[@õ@v"@±#I"out(("STRING" + var));Fi[[	@”i˚I"3    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]));Fi[	@‡iI"3    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]));Fi[	@ÌiÍI"3    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]));Fi[@v"@±#@ƒ#I"2out("STRING") if (var["LITERAL"] == "STRING");Fi[[	@”i¸I"`      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?;Fi[	@‡iI"`      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?;Fi[	@ÌiÎI"^      newobj
      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) if var["STRING"].nil?.!;Fi[@±#@ƒ#@Õ#@ﬂi[[	@”i˝I"g      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?
      out("STRING");Fi[	@‡iI"g      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?
      out("STRING");Fi[	@ÌiÏI"e      @var[var]["STRING"] = @var
      var = (FPDF_FONTPATH + var) if defined("STRING")
      var = filesize(var)
      Error("STRING") if var.!
      out(("STRING" + var))
      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) if var["STRING"].nil?.!
      out("STRING");Fi[@ƒ#@MI"out("STRING");FI";out("STRING") if var.!=("STRING") and var.!=("STRING");Fi[[	@”iI"        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]));Fi[	@‡iI"        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]));Fi[	@ÌiˇI"        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]));Fi[@ﬂ@‡@·I"6out((("STRING" + (@var + "LITERAL")) + "STRING"));Fi[[	@”iI"W          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then;Fi[	@‡iI"W          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then;Fi[	@ÌiI"W          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then;Fi[@¿@!@!I"var = "LITERAL";Fi[[	@li–
I"+        if (var <= "LITERAL") then
          (var << var)
          var = "LITERAL"
        else
          if ((var >> "LITERAL") == "LITERAL") then
            (var << ((var - "LITERAL") << "LITERAL"))
            var = "LITERAL"
          else
            if ((var >> "LITERAL") == "LITERAL") then;Fi[	@li‘
I"i          if ((var >> "LITERAL") == "LITERAL") then
            (var << ((var - "LITERAL") << "LITERAL"))
            var = "LITERAL"
          else
            if ((var >> "LITERAL") == "LITERAL") then
              (var << ((var - "LITERAL") << "LITERAL"))
              var = "LITERAL"
            else
              if ((var >> "LITERAL") == "LITERAL") then;Fi[	@liÿ
I"d            if ((var >> "LITERAL") == "LITERAL") then
              (var << ((var - "LITERAL") << "LITERAL"))
              var = "LITERAL"
            else
              if ((var >> "LITERAL") == "LITERAL") then
                (var << ((var - "LITERAL") << "LITERAL"))
                var = "LITERAL"
              else
                (var << "LITERAL");Fi[@¿I"$out(("STRING" + var["STRING"]));FI"out("STRING");FI"out("STRING");Fi[[	@”iI"c        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"));Fi[	@‡iI"c        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"));Fi[	@ÌiI"c        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"));Fi[@ÕI"var = fopen(var, "STRING");FI"putstream(fread(var, var));FI"fclose(var);Fi[[	@”iI"*      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end;Fi[	@‡iI"*      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end;Fi[	@ÌiÒI"(      out("STRING") if (var["LITERAL"] == "STRING")
      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) if var["STRING"].nil?.!
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end;Fi[@Õ@Ä"I"putType0(var);FI"	else;Fi[[	@”iI"Ê    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var));Fi[	@‡iI"Ê    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var));Fi[	@Ìi˙I"Ê    @var.each_pair do |arglist|
      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var));Fi[@Õ@ﬂ#I"	else;F@˙#i[[	@”iI"%        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING");Fi[	@‡iI"%        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING");Fi[	@ÌiI"%        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING");Fi[@Õ@Œ@Ë#I"6out((("STRING" + (@var + "LITERAL")) + "STRING"));Fi[[	@”iI"h          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then;Fi[	@‡iI"h          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then;Fi[	@ÌiI"h          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then;Fi[@Õ@ŒI"'if var["STRING"].!=("STRING") then;FI"newobj;Fi[[	@”i"I"»            end
          end
        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING";Fi[	@‡i+I"»            end
          end
        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING";Fi[	@ÌiI"»            end
          end
        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING";Fi[@¿@ô#@ö#I"end;Fi[[	@”iŸI"ó          end
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        else
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var;Fi[	@‡i·I"y          end
          var = (var + var) if (var == var)
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        else
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var;Fi[	@Ìi»I"ó          end
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
        else
          Cell(var, var, var[var, (var - var)], "LITERAL", "LITERAL", "STRING", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var;Fi[@Õ@Œ@£I"iout((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"));Fi[[	@‡iNI"-    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    var = "STRING";Fi[	@Ìi4I"B    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    if (var["STRING"] == "STRING") then;Fi[	@liïI"-    out("STRING")
    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    var = "STRING";Fi[@¿@E#@F#I"end;Fi[[	@”iãI"û        if ((var == "LITERAL") or (var == var)) then
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        else
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var;Fi[	@‡iÖI"Ä        if ((var == "LITERAL") or (var == var)) then
          var = (var + var) if (var == var)
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        else
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var;Fi[	@ÌiI"û        if ((var == "LITERAL") or (var == var)) then
          var = (var + (var ? ("LITERAL") : ("LITERAL"))) if (var == var)
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
        else
          Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
          var = (var[var].chr == "STRING") ? ((var + "LITERAL")) : (var)
        end
        var = "LITERAL"
        var = var;Fi[@¿@ã@åI"end;Fi[[	@”iHI"ı      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        var = (var + "LITERAL")
        var = (var + "LITERAL")
      end
    end
    return ((var * @var) / "LITERAL");Fi[	@‡i<I"Ï        if (var >= "LITERAL") and (var <= "LITERAL") then
          var = (var + "LITERAL")
          var = (var + "LITERAL")
        else
          var = (var + "LITERAL")
          var = (var + "LITERAL")
        end
      end
    end;Fi[	@Ìi7I"ı      if (var < "LITERAL") then
        var = (var + var[var.chr]) if var[var.chr]
        var = (var + "LITERAL")
      else
        var = (var + "LITERAL")
        var = (var + "LITERAL")
      end
    end
    return ((var * @var) / "LITERAL");Fi[@Õ@Ë#@#$I"if var["STRING"] then;Fi[[	@”iI"j        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"));Fi[	@‡i I"j        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"));Fi[	@ÌiI"j        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"));Fi[@Õ@,$I"newobj;F@îi[[	@”i#I"È          end
        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|;Fi[	@‡i,I"È          end
        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|;Fi[	@ÌiI"È          end
        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|;Fi[@Õ@K@t@ï"i[[	@”i,I"(            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end;Fi[	@‡i5I"(            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end;Fi[	@ÌiI"(            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end;Fi[@¿I"var = var["STRING"];F@L@Mi[[	@”iI"      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING");Fi[	@‡iI"      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING");Fi[	@Ìi˝I"      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING");Fi[@¿@≠@ÆI"var = nil;Fi[[	@≥iÙI"       if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end
      end;Fi[	@≥i˛I"       if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end
      end;Fi[	@≥iI"       if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end
      end;Fi[@¿I"(var << "STRING");F@ÎI"end;Fi[[	@i+I"            (var << "STRING")
            if (false == variable("LITERAL")) then
              (var << "STRING")
            else
              (var << "STRING")
              (var << "STRING")
            end
          end
          var.compact.join("STRING").gsub("LITERAL", "STRING");Fi[	@iJI"˚            (var << "STRING")
            if (false == variable("LITERAL")) then
              (var << "STRING")
            else
              (var << "STRING")
              (var << "STRING")
            end
          end
          (var << "STRING");Fi[	@G iJI"€            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
          else
            (var << "STRING")
            (var << "STRING")
          end
        else
          (var << "STRING");Fi[@¿I"if (var == "LITERAL") then;FI"@var = var;F@ªi[[	@”iúI"     Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL");Fi[	@‡ióI"     Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL");Fi[	@ÌiãI"     Cell(var, var, var[var, (var - var)], var, "LITERAL", var, var)
    if (var == "LITERAL") then
      @var = @var
    else
      if (var == "LITERAL") then
        @var = var
        @var = (var + var)
      else
        @var = var if (var == "LITERAL");Fi[@Õ@£@?$I";out((("STRING" + (@var + "LITERAL").to_s) + "STRING"));Fi[[	@‡iOI"I    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    var = "STRING"
    var["STRING"].keys.sort.each do |arglist|;Fi[	@Ìi5I"E    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    if (var["STRING"] == "STRING") then
      var = "STRING";Fi[	@liñI"I    out("STRING")
    newobj
    out("STRING")
    out("STRING")
    out(("STRING" + var["STRING"]))
    out((((("STRING" + var["STRING"]["STRING"]) + "STRING") + var["STRING"]["STRING"].to_s) + "STRING"))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    var = "STRING"
    var["STRING"].keys.sort.each do |arglist|;Fi[@¿I"var = "STRING";F@-#@.#i[[	@”iiI"4        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end;Fi[	@‡i^I"4        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end;Fi[	@ÌiXI"4        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end;Fi[@$@$I"fclose(var);FI"out("STRING");Fi[[	@”iI"      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|;Fi[	@‡iI"      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|;Fi[	@ÌiÚI"      out(("STRING" + var["STRING"]))
      out((("STRING" + var["STRING"]) + "STRING")) if var["STRING"].nil?.!
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|;Fi[@$I"fclose(var);FI"out("STRING");FI"end;Fi[[	@”iI"˝      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj;Fi[	@‡iI"˝      out((("STRING" + var["STRING"]) + "STRING")) unless var["STRING"].nil?
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj;Fi[	@ÌiÛI"˚      out((("STRING" + var["STRING"]) + "STRING")) if var["STRING"].nil?.!
      out("STRING")
      var = fopen(var, "STRING")
      putstream(fread(var, var))
      fclose(var)
      out("STRING")
    end
    @var.each_pair do |arglist|
      newobj;Fi[@Ä"I"putType0(var);FI"	else;FI"var = var["STRING"];Fi[[	@”iI"Ú      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then;Fi[	@‡iI"Ú      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then;Fi[	@Ìi˚I"Ú      newobj
      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then;Fi[@Ä"I"out("STRING");F@ﬂ#I"	else;Fi[[	@”iI"      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING");Fi[	@‡iI"      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING");Fi[	@Ìi I"      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING");Fi[I"putType0(var);FI"	else;F@√$@Li[[	@”iI"˝      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING");Fi[	@‡iI"˝      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING");Fi[	@Ìi¸I"˝      @var[var]["STRING"] = @var
      out("STRING")
      if (var["STRING"] == "STRING") then
        putType0(var)
      else
        var = var["STRING"]
        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING");Fi[@ﬂ#I"	else;F@˙#I"out("STRING");Fi[[	@”iI"E        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"));Fi[	@‡iI"E        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"));Fi[	@ÌiI"E        out(("STRING" + var))
        if (var["STRING"] == "STRING") then
          out("STRING")
          out("STRING") if var.!=("STRING") and var.!=("STRING")
        else
          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"));Fi[@Ë#@#$@Z$@Ïi[[	@”iI"n          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else;Fi[	@‡i!I"n          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else;Fi[	@ÌiI"n          out(("STRING" + var["STRING"]))
          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else;Fi[@Ë#@Z$@Ï@Ìi[[	@”iI"`          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING");Fi[	@‡i"I"`          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING");Fi[	@ÌiI"`          out("STRING")
          out("STRING")
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING");Fi[@ÌI"	else;F@I"end;Fi[[	@”iI"          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end
          end
        end;Fi[	@‡i%I"          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end
          end
        end;Fi[	@ÌiI"          out((("STRING" + (@var + "LITERAL")) + "STRING"))
          if var["STRING"] then
            if var["STRING"].nil?.! then
              out((("STRING" + (var + var["STRING"])) + "STRING"))
            else
              out("STRING")
            end
          end
        end;Fi[@,$I"newobj;F@î@ïi[[	@”i$I"        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"));Fi[	@‡i-I"        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"));Fi[	@ÌiI"        end
        out("STRING")
        out("STRING")
        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"));Fi[@ìI" @var = file_name.underscore;FI" @var = plugin_name.titleize;FI"@var = "STRING";Fi[[	@+iI"¿  attr_reader(:plugin_path, :plugin_name, :plugin_pretty_name)
  
  def function(arglist)
    super
    @var = file_name.underscore
    @var = plugin_name.titleize
    @var = "STRING"
  end
  ;Fi[	I"cdata//redmine_proj/generators/redmine_plugin_controller/redmine_plugin_controller_generator.rb;TiI"‹  attr_reader(:plugin_path, :plugin_name, :plugin_pretty_name)
  
  def function(arglist)
    super
    @var = file_name.underscore
    @var = plugin_name.titleize
    @var = "STRING"
    @var = controller.camelize
  end;Fi[	I"Ydata//redmine_proj/generators/redmine_plugin_model/redmine_plugin_model_generator.rb;TiI"Í  attr_reader(:plugin_path, :plugin_name, :plugin_pretty_name)
  
  def function(arglist)
    super
    @var = file_name.underscore
    @var = plugin_name.titleize
    @var = "STRING"
    @var = model.camelize
    @var = @var.tableize;Fi[@t@ï"@ñ"I"end;Fi[[	@”i.I"          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"]
          if var then;Fi[	@‡i7I"          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"]
          if var then;Fi[	@ÌiI"          out((var + "STRING"))
          out("STRING")
          newobj
          var = ("STRING" + var)
          var["STRING"].each_pair do |arglist|
            var = (var + ((("STRING" + var) + "STRING") + var))
          end
          var = var["STRING"]
          if var then;Fi[I"var = nil;FI"	else;F@≠@Æi[[	@≥iÛI"⁄    def function(arglist)
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end;Fi[	@≥i˝I"È      var = nil if var and var.to_bool.!
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end;Fi[	@≥iI"⁄    def function(arglist)
      if color_stop?(var) then
        var.unshift(var)
        var = nil
      else
        if list_of_color_stops?(var) then
          var = (var.value + var)
          var = nil
        end;Fi[I"#:nodoc:;FI"def function(arglist);FI"@var.each do |arglist|;FI"
begin;Fi[[	I"9data//paperclip_proj/paperclip/storage/filesystem.rb;Ti#I"         @var = {}
      end
      
      #:nodoc:
      def function(arglist)
        @var.each do |arglist|
          begin
            (log("STRING")
            FileUtils.rm(var) if File.exist?(var));Fi[	@Æi∫I"Á        s3_interface.buckets.create(bucket_name)
      end
      
      #:nodoc:
      def function(arglist)
        @var.each do |arglist|
          begin
            (log("STRING")
            var = (@var[var] or @var["LITERAL"]);Fi[	@Æi÷I"€        @var = {}
      end
      
      #:nodoc:
      def function(arglist)
        @var.each do |arglist|
          begin
            (log("STRING")
            s3_bucket.objects[var.sub("LITERAL", "STRING")].delete);Fi[@-%@.%I"1run_callbacks("LITERAL") { |arglist| super };FI"end;Fi[[	I"7data//activerecord_proj/active_record/callbacks.rb;TiI"÷      define_model_callbacks("LITERAL", "LITERAL", "LITERAL", "LITERAL")
    end
    
    #:nodoc:
    def function(arglist)
      run_callbacks("LITERAL") { |arglist| super }
    end
    
    def function(arglist);Fi[	@>%i I"â    
    private
    
    #:nodoc:
    def function(arglist)
      run_callbacks("LITERAL") { |arglist| super }
    end
    
    #:nodoc:;Fi[	@>%i%I"¿      run_callbacks("LITERAL") { |arglist| super }
    end
    
    #:nodoc:
    def function(arglist)
      run_callbacks("LITERAL") { |arglist| super }
    end
    
    def function(arglist);Fi[@ñ@ñ@CI"end;Fi[[	@”i'I"        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING");Fi[	@‡i0I"        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING");Fi[	@ÌiI"        if var["STRING"].!=("STRING") then
          newobj
          var = var["STRING"]
          var = "STRING"
          "LITERAL".upto("LITERAL") do |arglist|
            var = (var + (var[var.chr] + "STRING"))
          end
          out((var + "STRING"))
          out("STRING");Fi[@ñ@-#@.#@/#i[[	@”ijI"%        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end;Fi[	@‡i_I"%        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end;Fi[	@ÌiYI"%        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var)
      end
    end;Fi[@ñ@∞@Õ"I"end;Fi[[	@”i1I"Ù  
  def function(arglist)
    "LITERAL".upto("LITERAL") { |arglist| cw[var.chr] = "LITERAL" }
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, cw, var, var)
  end
  
  def function(arglist);Fi[	@‡i!I"  def function(arglist)
    var = "STRING"
    "LITERAL".upto("LITERAL") { |arglist| cw[var.chr] = "LITERAL" }
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, cw, var, var)
  end
  
  def function(arglist);Fi[	@Ìi I"Ù  
  def function(arglist)
    "LITERAL".upto("LITERAL") { |arglist| cw[var.chr] = "LITERAL" }
    var = "STRING"
    var = { "STRING" => "STRING", "STRING" => "LITERAL" }
    AddCIDFonts(var, var, cw, var, var)
  end
  
  def function(arglist);Fi[@ñ@ó@ò@-#i[[	@”ihI"K      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var);Fi[	@‡i]I"K      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var);Fi[	@ÌiWI"K      if (var == "LITERAL") then
        var = "STRING"
        var = "STRING"
        var = "STRING"
      else
        var = "STRING"
        var = "STRING" unless var.to_s.index("STRING").nil?
        var = (var + "STRING") unless var.to_s.index("STRING").nil?
        var = var.to_s.index("STRING") ? ((var + "STRING")) : (var);Fi[@ñI"
begin;F@O#@P#i[[	@ÉiI"j          var = var.iconv(var)) rescue var = var.gsub("LITERAL", "STRING")
        else
          var = Iconv.new("STRING", "STRING")
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length]);Fi[	@Éi=I"e          var = var.iconv(var)) rescue var = var.gsub("LITERAL", "STRING")
        else
          var = Iconv.new("STRING", var)
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length]);Fi[	@Éi{I"e          var = var.iconv(var)) rescue var = var.gsub("LITERAL", "STRING")
        else
          var = Iconv.new(var, "STRING")
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length]);Fi[@I"<@var ||= Array(@var["LITERAL"]).inject({}) do |arglist|;FI"/var[var] = Twitter::Size.fetch_or_new(var);FI"var;Fi[[	I"0data//twitter_proj/twitter/configuration.rb;TiI"˘    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>]
    def function(arglist)
      @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
        var[var] = Twitter::Size.fetch_or_new(var)
        var
      end
    end;Fi[	I".data//twitter_proj/twitter/media/photo.rb;TiI"      # Returns an array of photo sizes
      #
      # @return [Array<Twitter::Size>]
      def function(arglist)
        @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
          var[var] = Twitter::Size.fetch_or_new(var)
          var
        end
      end;Fi[	I"1data//twitter_proj/twitter/profile_banner.rb;TiI"˘    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>]
    def function(arglist)
      @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
        var[var] = Twitter::Size.fetch_or_new(var)
        var
      end
    end;Fi[@!@!@Ò#I"	else;Fi[[	@li—
I"@          (var << var)
          var = "LITERAL"
        else
          if ((var >> "LITERAL") == "LITERAL") then
            (var << ((var - "LITERAL") << "LITERAL"))
            var = "LITERAL"
          else
            if ((var >> "LITERAL") == "LITERAL") then
              (var << ((var - "LITERAL") << "LITERAL"));Fi[	@li’
I"o            (var << ((var - "LITERAL") << "LITERAL"))
            var = "LITERAL"
          else
            if ((var >> "LITERAL") == "LITERAL") then
              (var << ((var - "LITERAL") << "LITERAL"))
              var = "LITERAL"
            else
              if ((var >> "LITERAL") == "LITERAL") then
                (var << ((var - "LITERAL") << "LITERAL"));Fi[	@liŸ
I"G              (var << ((var - "LITERAL") << "LITERAL"))
              var = "LITERAL"
            else
              if ((var >> "LITERAL") == "LITERAL") then
                (var << ((var - "LITERAL") << "LITERAL"))
                var = "LITERAL"
              else
                (var << "LITERAL")
                var = [];Fi[I"if (@var == true) then;FI"Ln;FI"@var = false;FI"end;Fi[[	@liKI"„        Ln if (@var == @var)
        @var = @var
      end
      if (@var == true) then
        Ln
        @var = false
      end
      (var == "STRING") ? (@var[@var] = false) : (@var[@var] = true)
      @var[@var] = "LITERAL";Fi[	@li2I"‘      Ln if (@var == "LITERAL")
    when "STRING", "STRING" then
      @var = (@var - "LITERAL")
      if (@var == true) then
        Ln
        @var = false
      end
    when "STRING" then
      @var = "STRING";Fi[	@li8I"ﬁ      end
    when "STRING" then
      @var = "STRING"
      if (@var == true) then
        Ln
        @var = false
      end
    when "STRING", "STRING", "STRING", "STRING", "STRING", "STRING" then
      SetFontSize(@var);Fi[@O#@P#@Q#I">var = ("STRING" + $!.failed["LITERAL", $!.failed.length]);Fi[[	@ÉiI"5          var = Iconv.new("STRING", "STRING")
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue;Fi[	@Éi?I"0          var = Iconv.new("STRING", var)
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue;Fi[	@Éi}I"0          var = Iconv.new(var, "STRING")
          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue;Fi[@P#@Q#@ì%I"
retry;Fi[[	@ÉiI",          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success);Fi[	@Éi@I",          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success);Fi[	@Éi~I",          var = "STRING"
          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success);Fi[@Q#@ì%I"
retry;FI"rescue;Fi[[	@ÉiI"!          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end;Fi[	@ÉiAI"!          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end;Fi[	@ÉiI"!          begin
            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end;Fi[@ì%I"
retry;FI"rescue;F@i[[	@ÉiI"%            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end
          var = var;Fi[	@ÉiBI"%            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end
          var = var;Fi[	@ÉiÄI"%            var = (var + var.iconv(var))
          rescue Iconv::IllegalSequence
            var = (var + $!.success)
            var = ("STRING" + $!.failed["LITERAL", $!.failed.length])
            retry
          rescue
            var = (var + $!.success)
          end
          var = var;Fi[I"var.alias_nb_pages;FI".var.footer_date = format_date(Date.today);FI"var.AddPage;FI"*var.SetFontStyle("STRING", "LITERAL");Fi[[	@üi∞I"?      def function(arglist)
        var = ITCPDF.new(current_language)
        var.SetTitle("STRING")
        var.alias_nb_pages
        var.footer_date = format_date(Date.today)
        var.AddPage
        var.SetFontStyle("STRING", "LITERAL")
        var = "STRING"
        var.RDMMultiCell("LITERAL", "LITERAL", var);Fi[	@üi`I"<      def function(arglist)
        var = ITCPDF.new(current_language)
        var.SetTitle(var.name)
        var.alias_nb_pages
        var.footer_date = format_date(Date.today)
        var.AddPage
        var.SetFontStyle("STRING", "LITERAL")
        var.RDMMultiCell("LITERAL", "LITERAL", var.name)
        var.Ln;Fi[	@üipI"<      def function(arglist)
        var = ITCPDF.new(current_language)
        var.SetTitle("STRING")
        var.alias_nb_pages
        var.footer_date = format_date(Date.today)
        var.AddPage
        var.SetFontStyle("STRING", "LITERAL")
        var.RDMMultiCell("LITERAL", "LITERAL", "STRING")
        var.Ln;Fi[I":var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL");FI"var = "STRING";FI"(var << "STRING");FI"(var << "STRING");Fi[[	@òi™I"<      def function(arglist)
        var = "STRING"
        if var["LITERAL"] and var["LITERAL"] then
          var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL")
          var = "STRING"
          (var << "STRING")
          (var << "STRING")
          (var << "STRING")
          var = "STRING" if var["LITERAL"];Fi[	@òi∏I"ù          end
          (var << view.content_tag("LITERAL", "STRING".html_safe, var))
          if var["LITERAL"] then
            var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL")
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"));Fi[	@òi¿I"Ç            (var << view.content_tag("LITERAL", "STRING".html_safe, "LITERAL" => (var), "LITERAL" => "STRING"))
          end
          if var["LITERAL"] then
            var = ((var["LITERAL"] - var["LITERAL"]) - "LITERAL")
            var = "STRING"
            (var << "STRING")
            (var << "STRING")
            (var << "STRING")
            var = "STRING" if var["LITERAL"];Fi[I"6var["LITERAL"].SetY((var["LITERAL"] + "LITERAL"));FI";var["LITERAL"].SetX((var["LITERAL"] + var["LITERAL"]));FI"Avar["LITERAL"].SetFillColor("LITERAL", "LITERAL", "LITERAL");FI"xvar["LITERAL"].RDMCell((var["LITERAL"] - var["LITERAL"]), var, "STRING", "LITERAL", "LITERAL", "STRING", "LITERAL");Fi[[	@òiÚI"      def function(arglist)
        var = (var["LITERAL"] or "LITERAL")
        if var["LITERAL"] and var["LITERAL"] then
          var["LITERAL"].SetY((var["LITERAL"] + "LITERAL"))
          var["LITERAL"].SetX((var["LITERAL"] + var["LITERAL"]))
          var["LITERAL"].SetFillColor("LITERAL", "LITERAL", "LITERAL")
          var["LITERAL"].RDMCell((var["LITERAL"] - var["LITERAL"]), var, "STRING", "LITERAL", "LITERAL", "STRING", "LITERAL")
          if var["LITERAL"] then
            var["LITERAL"].SetY((var["LITERAL"] + "LITERAL"));Fi[	@òi˜I"^          var["LITERAL"].SetFillColor("LITERAL", "LITERAL", "LITERAL")
          var["LITERAL"].RDMCell((var["LITERAL"] - var["LITERAL"]), var, "STRING", "LITERAL", "LITERAL", "STRING", "LITERAL")
          if var["LITERAL"] then
            var["LITERAL"].SetY((var["LITERAL"] + "LITERAL"))
            var["LITERAL"].SetX((var["LITERAL"] + var["LITERAL"]))
            var["LITERAL"].SetFillColor("LITERAL", "LITERAL", "LITERAL")
            var["LITERAL"].RDMCell((var["LITERAL"] - var["LITERAL"]), var, "STRING", "LITERAL", "LITERAL", "STRING", "LITERAL")
          end
          if var["LITERAL"] then;Fi[	@òi˝I"            var["LITERAL"].RDMCell((var["LITERAL"] - var["LITERAL"]), var, "STRING", "LITERAL", "LITERAL", "STRING", "LITERAL")
          end
          if var["LITERAL"] then
            var["LITERAL"].SetY((var["LITERAL"] + "LITERAL"))
            var["LITERAL"].SetX((var["LITERAL"] + var["LITERAL"]))
            var["LITERAL"].SetFillColor("LITERAL", "LITERAL", "LITERAL")
            var["LITERAL"].RDMCell((var["LITERAL"] - var["LITERAL"]), var, "STRING", "LITERAL", "LITERAL", "STRING", "LITERAL")
          end
        end;Fi[@@?I"Cunless (var.options["LITERAL"] or var.options["LITERAL"]) then;FI"7merge_user!(var.options, (var.pop or screen_name));Fi[[	@fi∞I"Ÿ      #   @example Return the specified user's profile banner
      #     Twitter.profile_banner('sferik')
      #     Twitter.profile_banner(7505382)  # Same as above
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name))
        end
        object_from_response(Twitter::ProfileBanner, "LITERAL", "STRING", var.options);Fi[	I",data//twitter_proj/twitter/api/utils.rb;TiI"~      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name))
        end
        objects_from_response(Twitter::User, var, var, var.options);Fi[	@„%i_I"      # @param args [Array]
      # @param method_name [Symbol]
      # @return [Twitter::Cursor]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name))
        end
        cursor_from_response(var, var, var, var, var.options, var);Fi[@@?@ﬁ@ﬂi[[	@Í	iHI"ß      #     Twitter.list_timeline('sferik', 8863586)
      #     Twitter.list_timeline(7505382, 'presidents')
      #     Twitter.list_timeline(7505382, 8863586)
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end;Fi[	@Í	iI"e      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end;Fi[	@Í	iI"Y        object_from_response(Twitter::List, var, var, var.options)
      end
      
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end;Fi[@I"'if (action_hook == "LITERAL") then;FI"Nowner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true));FI"	else;Fi[[	@æi;I"      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end;Fi[	@ƒi4I"      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end;Fi[	@«i8I"      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end;Fi[I"var = max_value;FI"var = min_value;FI"var = (var - var);F@Äi[[	@ÖiI"      end
      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"));Fi[	@àiI"      protected
      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"));Fi[	@ãiRI"      end
      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"));Fi[I"var = min_value;F@˝%@Ä@Åi[[	@ÖiI"V      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers;Fi[	@àiI"V      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers;Fi[	@ãiSI"V      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers;Fi[@Ä@Å@ÇI"Jvar = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers;Fi[[	@ÖiI"Ö        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var));Fi[	@àiI"Ö        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var));Fi[	@ãiUI"Ö        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var));Fi[@@%I"Rowner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true));FI"end;Fi[[	I"Rdata//state_machine_proj/state_machine/integrations/active_record/versions.rb;TigI"f        def self.active?(arglist)
          (::ActiveRecord::VERSION::MAJOR == "LITERAL") and (::ActiveRecord::VERSION::MINOR == "LITERAL")
        end
        def function(arglist)
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true))
          end
          super
        end;Fi[	I"Qdata//state_machine_proj/state_machine/integrations/mongo_mapper/versions.rb;TiOI"N        def self.active?(arglist)
          defined? ::MongoMapper::Version and ::MongoMapper::Version =~ "LITERAL"
        end
        def function(arglist)
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true))
          end
          super
        end;Fi[	I"Ldata//state_machine_proj/state_machine/integrations/mongoid/versions.rb;TiI"H        def function(arglist)
          define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
        end
        def function(arglist)
          if (action_hook == "LITERAL") then
            owner_class.set_callback("LITERAL", "LITERAL", "STRING", "LITERAL" => (true))
          end
          super
        end;Fi[@Ç@&I"var = [];F@&!i[[	@ÖiI"û        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var;Fi[	@àiI"û        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var;Fi[	@ãiWI"û        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var;Fi[@&I"var = [];F@&!@'!i[[	@Öi I"é        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end;Fi[	@àiI"é        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end;Fi[	@ãiXI"é        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end;Fi[@&!@'!I"return var;FI"end;Fi[[	@Öi"I"J        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end
      
      def function(arglist);Fi[	@àiI"J        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end
      
      def function(arglist);Fi[	@ãiZI"J        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) }
        return var
      end
      
      def function(arglist);Fi[I"var = if bar_gap then;FI":(var < "LITERAL") ? ((var / "LITERAL")) : ("LITERAL");FI"	else;FI""LITERAL";Fi[[	@Öi/I"A        var = min_value
        var = field_width
        var = ((@var.to_f - ((font_size * "LITERAL") * top_font)) / (get_y_labels.max - get_y_labels.min))
        var = if bar_gap then
          (var < "LITERAL") ? ((var / "LITERAL")) : ("LITERAL")
        else
          "LITERAL"
        end
        var = (var - var);Fi[	@ài0I"D        var = min_value
        var = field_height
        var = ((@var.to_f - ((font_size * "LITERAL") * right_font)) / (get_x_labels.max - get_x_labels.min))
        var = if bar_gap then
          (var < "LITERAL") ? ((var / "LITERAL")) : ("LITERAL")
        else
          "LITERAL"
        end
        var = (var - var);Fi[	@òivI"ı      def function(arglist)
        var = field_height
        var = field_width
        var = if bar_gap then
          (var < "LITERAL") ? ((var / "LITERAL")) : ("LITERAL")
        else
          "LITERAL"
        end
        var = (var - var);Fi[@B&I"	else;FI""LITERAL";FI"end;Fi[[	@Öi0I"c        var = field_width
        var = ((@var.to_f - ((font_size * "LITERAL") * top_font)) / (get_y_labels.max - get_y_labels.min))
        var = if bar_gap then
          (var < "LITERAL") ? ((var / "LITERAL")) : ("LITERAL")
        else
          "LITERAL"
        end
        var = (var - var)
        var = (var / @var.length) if (stack == "LITERAL");Fi[	@ài1I"f        var = field_height
        var = ((@var.to_f - ((font_size * "LITERAL") * right_font)) / (get_x_labels.max - get_x_labels.min))
        var = if bar_gap then
          (var < "LITERAL") ? ((var / "LITERAL")) : ("LITERAL")
        else
          "LITERAL"
        end
        var = (var - var)
        var = (var / @var.length) if (stack == "LITERAL");Fi[	@òiwI"Ò        var = field_height
        var = field_width
        var = if bar_gap then
          (var < "LITERAL") ? ((var / "LITERAL")) : ("LITERAL")
        else
          "LITERAL"
        end
        var = (var - var)
        var = "LITERAL";Fi[I"@var = [] unless @var;FI"Mraise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array);FI"Cunless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then;FI".raise((("STRING" + "STRING") + "STRING"));Fi[[	I")data//redmine_proj/SVG/Graph/Plot.rb;Ti:I"√      #   [ 1, 2 ]    # A data set with 1 point: (1,2)
      #   [ 1,2, 5,6] # A data set with 2 points: (1,2) and (5,6)  
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end
        return if (var["LITERAL"].length == "LITERAL");Fi[	@òiEI"ƒ      # will probably not be discernable if both data sets are plotted on the same
      # graph, since d1 is too granular.
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end
        return if (var["LITERAL"].length == "LITERAL");Fi[	@ùi6I"—      # Note that the data must be in time,value pairs, and that the date format
      # may be any date that is parseable by ParseDate.
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end
        return if (var["LITERAL"].length == "LITERAL");Fi[@Y&@Z&@[&I"end;Fi[[	@^&i;I"ù      #   [ 1,2, 5,6] # A data set with 2 points: (1,2) and (5,6)  
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end
        return if (var["LITERAL"].length == "LITERAL")
        var = [];Fi[	@òiFI"Ç      # graph, since d1 is too granular.
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end
        return if (var["LITERAL"].length == "LITERAL")
        var = [];Fi[	@ùi7I"ë      # may be any date that is parseable by ParseDate.
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end
        return if (var["LITERAL"].length == "LITERAL")
        var = [];Fi[I"%if check_next_sequence(var) then;FI"return "LITERAL";FI"	else;FI"var.pos -= "LITERAL";Fi[[	I">data//rescue_proj/resque/vendor/utf8_util/utf8_util_18.rb;TiI"Ó  def self.sequence_length(arglist)
    var = var.get_byte["LITERAL"]
    if ((var >> "LITERAL") == "LITERAL") then
      if check_next_sequence(var) then
        return "LITERAL"
      else
        var.pos -= "LITERAL"
      end
    else;Fi[	@t&i&I"Ù    else
      if ((var >> "LITERAL") == "LITERAL") then
        if check_next_sequence(var) then
          if check_next_sequence(var) then
            return "LITERAL"
          else
            var.pos -= "LITERAL"
          end
        else;Fi[	@t&i2I"4        if ((var >> "LITERAL") == "LITERAL") then
          if check_next_sequence(var) then
            if check_next_sequence(var) then
              if check_next_sequence(var) then
                return "LITERAL"
              else
                var.pos -= "LITERAL"
              end
            else;Fi[@o&I"	else;F@q&I"end;Fi[[	@t&iI"˙    var = var.get_byte["LITERAL"]
    if ((var >> "LITERAL") == "LITERAL") then
      if check_next_sequence(var) then
        return "LITERAL"
      else
        var.pos -= "LITERAL"
      end
    else
      if ((var >> "LITERAL") == "LITERAL") then;Fi[	@t&i'I"
      if ((var >> "LITERAL") == "LITERAL") then
        if check_next_sequence(var) then
          if check_next_sequence(var) then
            return "LITERAL"
          else
            var.pos -= "LITERAL"
          end
        else
          var.pos -= "LITERAL";Fi[	@t&i3I"%          if check_next_sequence(var) then
            if check_next_sequence(var) then
              if check_next_sequence(var) then
                return "LITERAL"
              else
                var.pos -= "LITERAL"
              end
            else
              var.pos -= "LITERAL";Fi[@I"0set_expected_received_count("LITERAL", var);FI"	self;FI"end;Fi[[	@i˜I"ß        self
      end
      
      def function(arglist)
        set_expected_received_count("LITERAL", var)
        self
      end
      
      def function(arglist);Fi[	@i¸I"ß        self
      end
      
      def function(arglist)
        set_expected_received_count("LITERAL", var)
        self
      end
      
      def function(arglist);Fi[	@iI"ß        self
      end
      
      def function(arglist)
        set_expected_received_count("LITERAL", var)
        self
      end
      
      def function(arglist);Fi[@@X&@Y&@Z&i[[	@^&i9I"Œ      # Adds data to the plot.  The data must be in X,Y pairs; EG
      #   [ 1, 2 ]    # A data set with 1 point: (1,2)
      #   [ 1,2, 5,6] # A data set with 2 points: (1,2) and (5,6)  
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end;Fi[	@òiDI"‹      # Also note that, in this example, we're mixing scales; the data from d1
      # will probably not be discernable if both data sets are plotted on the same
      # graph, since d1 is too granular.
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end;Fi[	@ùi5I"¢      #
      # Note that the data must be in time,value pairs, and that the date format
      # may be any date that is parseable by ParseDate.
      def function(arglist)
        @var = [] unless @var
        raise("STRING") unless var["LITERAL"] and var["LITERAL"].kind_of?(Array)
        unless ((var["LITERAL"].length % "LITERAL") == "LITERAL") then
          raise((("STRING" + "STRING") + "STRING"))
        end;Fi[I"/#    it "should do small edition stuff" do;FI"#      ...;FI"#    end;FI"#  end;Fi[[	I"&data//rspec_proj/spec/dsl/main.rb;Ti2I"Ï      #  describe SmallEdition do
      #    it_should_behave_like "All Editions"
      #
      #    it "should do small edition stuff" do
      #      ...
      #    end
      #  end
      def function(arglist)
        add_options(var);Fi[	@û&iGI"
      #  describe SmallEdition do
      #    it_should_behave_like AllEditions
      #
      #    it "should do small edition stuff" do
      #      ...
      #    end
      #  end
      #
      # And, for those of you who prefer to use something more like Ruby, you;Fi[	@û&iRI"Ì      #  describe SmallEdition do
      #    include AllEditions
      #
      #    it "should do small edition stuff" do
      #      ...
      #    end
      #  end
      def function(arglist)
        Spec.deprecate("STRING", "STRING");Fi[I"# See Spec::Matchers;FI"def function(arglist);FI"*cache_or_call_cached("LITERAL", &var);FI"end;Fi[[	I".data//rspec_proj/spec/matchers/matcher.rb;Ti8I"µ        match(&var)
      end
      
      # See Spec::Matchers
      def function(arglist)
        cache_or_call_cached("LITERAL", &var)
      end
      
      # See Spec::Matchers;Fi[	@´&i=I"œ        cache_or_call_cached("LITERAL", &var)
      end
      
      # See Spec::Matchers
      def function(arglist)
        cache_or_call_cached("LITERAL", &var)
      end
      
      # See Spec::Matchers;Fi[	@´&iBI"–        cache_or_call_cached("LITERAL", &var)
      end
      
      # See Spec::Matchers
      def function(arglist)
        cache_or_call_cached("LITERAL", &var)
      end
      
      attr_reader :function;Fi[I"@var = var if var;FI"@var = "LITERAL";FI"	self;FI"end;Fi[[	@iI"ô      end
      
      def function(arglist)
        @var = var if var
        @var = "LITERAL"
        self
      end
      
      def function(arglist);Fi[	@iI"ô      end
      
      def function(arglist)
        @var = var if var
        @var = "LITERAL"
        self
      end
      
      def function(arglist);Fi[	@iI"ô      end
      
      def function(arglist)
        @var = var if var
        @var = "LITERAL"
        self
      end
      
      def function(arglist);Fi[I"8# See <tt>append_before</tt> for scoping semantics.;FI"def function(arglist);FI",add_callback("LITERAL", var, var, &var);FI"end;Fi[[	I"2data//rspec_proj/spec/runner/configuration.rb;TiqI"3      
      # Prepends a global <tt>before</tt> block to all example groups.
      # 
      # See <tt>append_before</tt> for scoping semantics.
      def function(arglist)
        add_callback("LITERAL", var, var, &var)
      end
      
      # Prepends a global <tt>after</tt> block to all example groups.;Fi[	@ƒ&ixI"      
      # Prepends a global <tt>after</tt> block to all example groups.
      # 
      # See <tt>append_before</tt> for scoping semantics.
      def function(arglist)
        add_callback("LITERAL", var, var, &var)
      end
      
      alias_method("LITERAL", "LITERAL");Fi[	@ƒ&i|I"       
      # Appends a global <tt>after</tt> block to all example groups.
      # 
      # See <tt>append_before</tt> for scoping semantics.
      def function(arglist)
        add_callback("LITERAL", var, var, &var)
      end
      
      # DEPRECATED - use Spec::Matchers::DSL instead;Fi[@I"var = max_value;FI"var = min_value;F@˝%i[[	@ÖiI"ı        @var["LITERAL"]
      end
      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var);Fi[	@àiI"Í      
      protected
      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var);Fi[	@ãiQI"         @var = var if (var > @var)
      end
      
      def function(arglist)
        var = max_value
        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var);Fi[@I"out("STRING");F@@i[[	@”i=I"Ó    end
  end
  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING");Fi[	@‡iFI"Ó    end
  end
  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING");Fi[	@Ìi,I"Ó    end
  end
  
  def function(arglist)
    out("STRING")
    out(((("STRING" + var["STRING"]) + "STRING") + var["STRING"]))
    out(("STRING" + var["STRING"]))
    out((("STRING" + (@var + "LITERAL").to_s) + "STRING"))
    out("STRING");Fi[@@µ"@∂"@∑"i[[	@”iI"À    @var[var] = { "STRING" => (var), "STRING" => "STRING", "STRING" => (var), "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => (var), "STRING" => (var), "STRING" => (var) }
  end
  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end;Fi[	@‡iI"À    @var[var] = { "STRING" => (var), "STRING" => "STRING", "STRING" => (var), "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => (var), "STRING" => (var), "STRING" => (var) }
  end
  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end;Fi[	@ÌiI"À    @var[var] = { "STRING" => (var), "STRING" => "STRING", "STRING" => (var), "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => (var), "STRING" => (var), "STRING" => (var) }
  end
  
  def function(arglist)
    AddCIDFont(var, "STRING", var, var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
    AddCIDFont(var, "STRING", (var + "STRING"), var, var, var)
  end;Fi[@I"&var = (var.downcase + var.upcase);FI"*Error("STRING") unless @var[var].nil?;FI"$var = (@var.length + "LITERAL");Fi[[	@”i
I"
  
  GB_widths = {}
  
  def function(arglist)
    var = (var.downcase + var.upcase)
    Error("STRING") unless @var[var].nil?
    var = (@var.length + "LITERAL")
    var = var.gsub("STRING", "STRING")
    @var[var] = { "STRING" => (var), "STRING" => "STRING", "STRING" => (var), "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => (var), "STRING" => (var), "STRING" => (var) };Fi[	@‡iI"˙	module PDF_Japanese
  SJIS_widths = {}
  
  def function(arglist)
    var = (var.downcase + var.upcase)
    Error("STRING") unless @var[var].nil?
    var = (@var.length + "LITERAL")
    @var[var] = { "STRING" => (var), "STRING" => "STRING", "STRING" => (var), "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => (var), "STRING" => (var), "STRING" => (var) }
  end;Fi[	@ÌiI"
module PDF_Korean
  UHC_widths = {}
  
  def function(arglist)
    var = (var.downcase + var.upcase)
    Error("STRING") unless @var[var].nil?
    var = (@var.length + "LITERAL")
    var = var.gsub("STRING", "STRING")
    @var[var] = { "STRING" => (var), "STRING" => "STRING", "STRING" => (var), "STRING" => "LITERAL", "STRING" => "LITERAL", "STRING" => (var), "STRING" => (var), "STRING" => (var) };Fi[I"N# * <tt>:from</tt> - One or more states being transitioned from.  If none;FI"E#   are specified, then this will be the object's current state.;FI"N# * <tt>:to</tt> - One or more states being transitioned to.  If none are;FI"6#   specified, then this will match any to state.;Fi[[	I"4data//state_machine_proj/state_machine/event.rb;Ti|I"    # object.  If no transitions can be made, then this will return nil.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless
    #   conditionals defined for each one.  Default is true.;Fi[	@ØiI"    # Gets the list of events that can be fired on the given object.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.;Fi[	@Øi3I"
    # Gets the list of transitions that can be run on the given object.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none
    #   are specified, then this will match any event.;Fi[I"!# Valid requirement options:;FI"N# * <tt>:from</tt> - One or more states being transitioned from.  If none;F@Ú&@Û&i[[	@˜&i{I"    # Finds and builds the next transition that can be performed on the given
    # object.  If no transitions can be made, then this will return nil.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:guard</tt> - Whether to guard transitions with the if/unless;Fi[	@ØiI"’    
    # Gets the list of events that can be fired on the given object.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none;Fi[	@Øi2I"ÿ    
    # Gets the list of transitions that can be run on the given object.
    # 
    # Valid requirement options:
    # * <tt>:from</tt> - One or more states being transitioned from.  If none
    #   are specified, then this will be the object's current state.
    # * <tt>:to</tt> - One or more states being transitioned to.  If none are
    #   specified, then this will match any to state.
    # * <tt>:on</tt> - One or more events that fire the transition.  If none;Fi[@@∏
I"#       event :ignite do;FI",#         transition :parked => :idling;Fi[[	@∂i@I"…    # 
    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       ;Fi[	@∂irI"…    # 
    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #       ;Fi[	@Ÿi¸I"     # 
    # == Example
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       event :ignite do
    #         transition :parked => :idling
    #       end
    #     end;Fi[@@∏
I"!#       other_states :idling;FI"#     end;Fi[[	I"?data//state_machine_proj/state_machine/state_collection.rb;TiI"®    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   ;Fi[	@'i)I"®    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   ;Fi[	@'iDI"®    # 
    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   ;Fi[@@;"@<"@"i[[	@¶iÈI"    assert(Category.left_and_rights_valid?.!)
  end
  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end;Fi[	@¶iI"    assert(Category.left_and_rights_valid?.!)
  end
  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end;Fi[	@¶i˜I"    assert(Category.left_and_rights_valid?.!)
  end
  
  def function(arglist)
    assert(Category.left_and_rights_valid?)
    categories("LITERAL")["LITERAL"] = categories("LITERAL")["LITERAL"]
    categories("LITERAL").save(false)
    assert(Category.left_and_rights_valid?.!)
  end;Fi[@I"Paperclip.log("STRING");FI"6each_attachment { |arglist| var.send("LITERAL") };FI"end;Fi[[	I"7data//paperclip_proj/paperclip/instance_methods.rb;TiI"≠      end
    end
    
    def function(arglist)
      Paperclip.log("STRING")
      each_attachment { |arglist| var.send("LITERAL") }
    end
    
    def function(arglist);Fi[	@*'iI"€      each_attachment { |arglist| var.send("LITERAL") }
    end
    
    def function(arglist)
      Paperclip.log("STRING")
      each_attachment { |arglist| var.send("LITERAL") }
    end
    
    def function(arglist);Fi[	@*'iI"∆      each_attachment { |arglist| var.send("LITERAL") }
    end
    
    def function(arglist)
      Paperclip.log("STRING")
      each_attachment { |arglist| var.send("LITERAL") }
    end
  end
end;Fi[@∏
@'I"#     end;FI"#   end;Fi[[	@'iI"œ    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states;Fi[	@'i*I"œ    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states;Fi[	@'iEI"œ    # == Examples
    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states;Fi[I"#       event :park do;FI",#         transition :idling => :parked;FI"#       end;FI"#     end;Fi[[	@∂iFI"    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end
    #     
    #     state_machine :alarm_state, :namespace => 'alarm', :initial => :on do;Fi[	@∂ixI"    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end
    #     
    #     state_machine :alarm_state, :namespace => 'alarm', :initial => :active do;Fi[	@≈i£I"¬    #         transition :parked => :idling
    #       end
    #       
    #       event :park do
    #         transition :idling => :parked
    #       end
    #     end
    #   end
    #   ;Fi[@I"it("STRING") do |arglist|;FI"Eexpect((last_request.env["STRING"] or {})["STRING"]).to(eq(var));FI"end;Fi[[	I"5data//omni_proj/omniauth/test/strategy_macros.rb;TiI"¬        end
      end
      
      def function(arglist)
        it("STRING") do |arglist|
          expect((last_request.env["STRING"] or {})["STRING"]).to(eq(var))
        end
      end
      ;Fi[	@L'iI"¬        end
      end
      
      def function(arglist)
        it("STRING") do |arglist|
          expect((last_request.env["STRING"] or {})["STRING"]).to(eq(var))
        end
      end
      ;Fi[	@L'iI"√        end
      end
      
      def function(arglist)
        it("STRING") do |arglist|
          expect((last_request.env["STRING"] or {})["STRING"]).to(eq(var))
        end
      end
    end;Fi[@I"Pvar = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil);FI"3var = var.last.is_a?(Hash) ? (var.pop) : (nil);FI" var = NodeSet.new(document);Fi[[	I"1data//nokogiri_proj/nokogiri/xml/node_set.rb;TiFI"π      #
      # For more information see Nokogiri::XML::Node#css and
      # Nokogiri::XML::Node#xpath
      def function(arglist)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document)
        var.each do |arglist|
          var = (var + send((var =~ "LITERAL" ? ("LITERAL") : ("LITERAL")), *(var + [var, var]).compact));Fi[	@X'iWI"n      # Search this NodeSet for css +paths+
      #
      # For more information see Nokogiri::XML::Node#css
      def function(arglist)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document)
        each do |arglist|
          var = var.document;Fi[	@X'ikI"™      # Search this NodeSet for XPath +paths+
      #
      # For more information see Nokogiri::XML::Node#xpath
      def function(arglist)
        var = [Hash, String, Symbol].include?(var.last.class).! ? (var.pop) : (nil)
        var = var.last.is_a?(Hash) ? (var.pop) : (nil)
        var = NodeSet.new(document)
        each { |arglist| var = (var + var.xpath(*(var + [var, var].compact))) }
        document.decorate(var);Fi[@I"if Nokogiri.jruby? then;FI"5var = var.first.is_a?(Hash) ? (var.shift) : ({});FI"if var["LITERAL"].! then;Fi[[	I":data//nokogiri_proj/nokogiri/xml/document_fragment.rb;Ti'I"ã      ###
      # Convert this DocumentFragment to html
      # See Nokogiri::XML::NodeSet#to_html
      def function(arglist)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then
            var["LITERAL"] = Node::SaveOptions::NO_DECLARATION.|(Node::SaveOptions::NO_EMPTY_TAGS).|(Node::SaveOptions::AS_HTML)
          end;Fi[	@d'i5I"é      ###
      # Convert this DocumentFragment to xhtml
      # See Nokogiri::XML::NodeSet#to_xhtml
      def function(arglist)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then
            var["LITERAL"] = Node::SaveOptions::NO_DECLARATION.|(Node::SaveOptions::NO_EMPTY_TAGS).|(Node::SaveOptions::AS_XHTML)
          end;Fi[	@X'iÙI"^      
      ###
      # Convert this NodeSet to HTML
      def function(arglist)
        if Nokogiri.jruby? then
          var = var.first.is_a?(Hash) ? (var.shift) : ({})
          if var["LITERAL"].! then
            var["LITERAL"] = Node::SaveOptions::NO_DECLARATION.|(Node::SaveOptions::NO_EMPTY_TAGS).|(Node::SaveOptions::AS_HTML)
          end;Fi[I"#       event :disable do;F@5I"#       end;FI"#     end;Fi[[	@∂iPI"∫    #         transition all => :active
    #       end
    #       
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   ;Fi[	@∂i}I"∫    #         transition all => :active
    #       end
    #       
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   ;Fi[	@≈iîI"À    #     end
    #     
    #     state_machine :alarm_state, :initial => :active do
    #       event :disable do
    #         transition all => :off
    #       end
    #     end
    #   end
    #   ;Fi[@I" var = [var.first, var.last];FI"var;FI"end;Fi[[	@hiÿI"ï        var
      end
      
      def function(arglist)
        var = [var.first, var.last]
        var
      end
      
      def function(arglist);Fi[	@hi›I"ï        var
      end
      
      def function(arglist)
        var = [var.first, var.last]
        var
      end
      
      def function(arglist);Fi[	@hi‚I"ì        var
      end
      
      def function(arglist)
        var = [var.first, var.last]
        var
      end
      
      # reduce 41 omitted;Fi[I"B# Only runs validations on the action if using <tt>:save</tt>;FI"def function(arglist);FI"(action == "LITERAL");FI"end;Fi[[	@æiI"‰      
      protected
      
      # Only runs validations on the action if using <tt>:save</tt>
      def function(arglist)
        (action == "LITERAL")
      end
      
      # Gets the db default for the machine's attribute;Fi[	@ƒiI"‰      
      protected
      
      # Only runs validations on the action if using <tt>:save</tt>
      def function(arglist)
        (action == "LITERAL")
      end
      
      # Gets the db default for the machine's attribute;Fi[	@«iI"‰      
      protected
      
      # Only runs validations on the action if using <tt>:save</tt>
      def function(arglist)
        (action == "LITERAL")
      end
      
      # Gets the db default for the machine's attribute;Fi[@I"prepare do |arglist|;FI"if document[field] then;FI"var = document.send(field);Fi[[	I"=data//mongoid_proj/lib/mongoid/persistence/atomic/pop.rb;TiI"8        # @return [ Object ] The new array value.
        #
        # @since 2.1.0
        def function(arglist)
          prepare do |arglist|
            if document[field] then
              var = document.send(field)
              (value > "LITERAL") ? (var.pop) : (var.shift)
              execute("STRING");Fi[	I">data//mongoid_proj/lib/mongoid/persistence/atomic/pull.rb;TiI"        # @return [ Object ] The new array value.
        #
        # @since 2.1.0
        def function(arglist)
          prepare do |arglist|
            if document[field] then
              var = document.send(field)
              var.delete(value)
              execute("STRING");Fi[	I"Bdata//mongoid_proj/lib/mongoid/persistence/atomic/pull_all.rb;TiI":        # @return [ Object ] The new array value.
        #
        # @since 2.0.0
        def function(arglist)
          prepare do |arglist|
            if document[field] then
              var = document.send(field)
              var.delete_if { |arglist| value.include?(var) }
              execute("STRING");Fi[@@¸I"var.write("STRING");F@¯i[[	@ÑiäI"÷    (HOMEBREW_PREFIX / "STRING").unlink
  end
  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	@ÑiöI"’    assert_match("LITERAL", file(var))
  end
  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[	@Ñi™I"’    assert_match("LITERAL", file(var))
  end
  
  def function(arglist)
    var = (HOMEBREW_PREFIX / "STRING")
    var.write("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!);Fi[@@k@ÑI"assert(var.i386?.!);Fi[[	@Ñi&I"–    assert_match("LITERAL", file(var))
  end
  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!);Fi[	@Ñi^I"–    assert_match("LITERAL", file(var))
  end
  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?)
    assert(var.ppc7400?.!);Fi[	@ÑilI"“    assert_match("LITERAL", file(var))
  end
  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?.!)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[I"H# Uses around callbacks to run state events if using the :save hook;FI"def function(arglist);FI"'if (action_hook == "LITERAL") then;F@Ò%i[[	@æi:I"`        define_helper("LITERAL", "STRING", "STRING", ("LITERAL" + "LITERAL"))
      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super;Fi[	@ƒi3I"         super
      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super;Fi[	@«i7I"         super
      end
      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super;Fi[@Ø'@Ò%I"	else;FI"
super;Fi[[	@æi<I"      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end
      end;Fi[	@ƒi5I"      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end
      end;Fi[	@«i9I"      
      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end
      end;Fi[@Ò%I"	else;FI"
super;FI"end;Fi[[	@æi=I"      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end
      end
      ;Fi[	@ƒi6I"      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end
      end
      ;Fi[	@«i:I"      # Uses around callbacks to run state events if using the :save hook
      def function(arglist)
        if (action_hook == "LITERAL") then
          owner_class.set_callback("LITERAL", "LITERAL", self, "LITERAL" => (true))
        else
          super
        end
      end
      ;Fi[I":# Runs state events around the machine's :save action;FI"def function(arglist);FI"Rvar.class.state_machines.transitions(var, action).perform { |arglist| yield };FI"end;Fi[[	@æiCI"$        end
      end
      
      # Runs state events around the machine's :save action
      def function(arglist)
        var.class.state_machines.transitions(var, action).perform { |arglist| yield }
      end
      
      # Creates a scope for finding records *with* a particular state or;Fi[	@ƒi<I"$        end
      end
      
      # Runs state events around the machine's :save action
      def function(arglist)
        var.class.state_machines.transitions(var, action).perform { |arglist| yield }
      end
      
      # Creates a scope for finding records *with* a particular state or;Fi[	@«i@I"$        end
      end
      
      # Runs state events around the machine's :save action
      def function(arglist)
        var.class.state_machines.transitions(var, action).perform { |arglist| yield }
      end
      
      # Creates a scope for finding records *with* a particular state or;Fi[@I"#       ...;FI"#     end;FI"#;Fi[[	@≈iÁI"Ï    # In the following example, a custom +initialize+ method is defined:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize
    #     end;Fi[	@≈i¯I"≈    # like so:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize(attributes = {})
    #       ...;Fi[	@≈iI"Ë    # to initialize the state machine attributes:
    # 
    #   class Vehicle
    #     state_machine :state, :initial => :parked do
    #       ...
    #     end
    #     
    #     def initialize(attributes = {})
    #       ...;Fi[@'I"#     end;FI"#   end;FI"#;Fi[[	@'iI"    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states
    #   vehicle = Vehicle.new               # => #<Vehicle:0xb7c464b0 @state="parked">;Fi[	@'i+I"∆    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states
    #   ;Fi[	@'iFI"∆    # 
    #   class Vehicle
    #     state_machine :initial => :parked do
    #       other_states :idling
    #     end
    #   end
    #   
    #   states = Vehicle.state_machine.states
    #   ;Fi[@@k@lI"assert(var.i386?.!);Fi[[	@Ñi
I"˝  `/usr/bin/file -h '#{var}STRING`.chomp
end
class MachOPathnameTests < Test::Unit::TestCase
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@Ñi4I"–    assert_match("LITERAL", file(var))
  end
  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[	@ÑiBI"–    assert_match("LITERAL", file(var))
  end
  
  def function(arglist)
    var = Pathname.new("STRING")
    assert(var.universal?)
    assert(var.i386?.!)
    assert(var.x86_64?.!)
    assert(var.ppc7400?.!);Fi[@@ﬂ@‡I"$1.to_i;Fi[[	@i`I"ô    end
  end
  
  def function(arglist)
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i
    end
  end;Fi[	@inI"ô    end
  end
  
  def function(arglist)
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i
    end
  end;Fi[	@i|I"ô    end
  end
  
  def function(arglist)
    @var ||= if locate("STRING") then
      `#{locate("STRING")}STRING` =~ "LITERAL"
      $1.to_i
    end
  end;Fi[@@¯@˘I"super(var);Fi[[	@˛ilI"    self.attributes.merge(var) { |arglist| var.blank? ? (var) : (var) }
  end
  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var));Fi[	@˛iuI"¬    end
  end
  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var));Fi[	@˛i~I"¬    end
  end
  
  def function(arglist)
    return image_url if (var == "STRING")
    if (var.nil? or var.match("LITERAL")) then
      super(var)
    else
      super(absolutify_local_url(var));Fi[@I"(@var << "STRING");FI"	self;FI"end;Fi[[	I"%data//omni_proj/omniauth/form.rb;TiI"{      var
    end
    
    def function(arglist)
      (@var << "STRING")
      self
    end
    
    def function(arglist);Fi[	@(i I"|      self
    end
    
    def function(arglist)
      (@var << "STRING")
      self
    end
    
    def function(arglist);Fi[	@(iAI"|      self
    end
    
    def function(arglist)
      (@var << "STRING")
      self
    end
    
    def function(arglist);Fi[I"# @return [Twitter::User];FI"def function(arglist);FI"9@var ||= Twitter::User.fetch_or_new(@var["LITERAL"]);FI"end;Fi[[	I"1data//twitter_proj/twitter/direct_message.rb;TiI"≈    
    alias "LITERAL" "LITERAL"
    
    # @return [Twitter::User]
    def function(arglist)
      @var ||= Twitter::User.fetch_or_new(@var["LITERAL"])
    end
    
    # @return [Twitter::User];Fi[	@(iI"Ã      @var ||= Twitter::User.fetch_or_new(@var["LITERAL"])
    end
    
    # @return [Twitter::User]
    def function(arglist)
      @var ||= Twitter::User.fetch_or_new(@var["LITERAL"])
    end
  end
end;Fi[	I"'data//twitter_proj/twitter/list.rb;TiI"    
    attr_reader(:description, :following, :full_name, :member_count, :mode, :name, :slug, :subscriber_count, :uri)
    
    # @return [Twitter::User]
    def function(arglist)
      @var ||= Twitter::User.fetch_or_new(@var["LITERAL"])
    end
  end
end;Fi[@@©@™I"case var;Fi[[	@i|I"Ö        # Determines what the response should be for a particular bit of text
        # from the SCM. Password prompts, connection requests, passphrases,
        # etc. are handled here.
        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING")
          case var
          when "LITERAL" then
            unless var = variable("LITERAL") then;Fi[	@∑i8I"ç        # Determine response for SCM prompts
        # user/pass can come from ssh and http distribution methods
        # yes/no is for when ssh asks you about fingerprints
        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING")
          case var
          when "LITERAL" then
            if var = (variable("LITERAL") or variable("LITERAL")) then;Fi[	@kiFI"h        # Determines what the response should be for a particular bit of text
        # from the SCM. Password prompts, connection requests, passphrases,
        # etc. are handled here.
        def function(arglist)
          var = var["LITERAL"]["LITERAL"]
          logger.info("STRING")
          case var
          when "LITERAL" then
            "STRING";Fi[@I"@var = var if var;F@≥&I"	self;Fi[[	@iI"ä        self
      end
      
      def function(arglist)
        @var = var if var
        @var = "LITERAL"
        self
      end
      ;Fi[	@iI"ä        self
      end
      
      def function(arglist)
        @var = var if var
        @var = "LITERAL"
        self
      end
      ;Fi[	@iI"ä        self
      end
      
      def function(arglist)
        @var = var if var
        @var = "LITERAL"
        self
      end
      ;Fi[@I"@var.each do |arglist|;FI"
begin;FI"(log("STRING");Fi[[	@3%i$I"ﬁ      end
      
      #:nodoc:
      def function(arglist)
        @var.each do |arglist|
          begin
            (log("STRING")
            FileUtils.rm(var) if File.exist?(var))
          rescue Errno::ENOENT => var;Fi[	@ÆiªI"˙      end
      
      #:nodoc:
      def function(arglist)
        @var.each do |arglist|
          begin
            (log("STRING")
            var = (@var[var] or @var["LITERAL"])
            var = var.call(self, var) if var.respond_to?("LITERAL");Fi[	@Æi◊I"Û      end
      
      #:nodoc:
      def function(arglist)
        @var.each do |arglist|
          begin
            (log("STRING")
            s3_bucket.objects[var.sub("LITERAL", "STRING")].delete)
          rescue AWS::Errors::Base => var;Fi[@I"super("STRING");FI"@var = var;FI"end;Fi[[	I"4data//activerecord_proj/active_record/errors.rb;TijI"ú  class UnknownPrimaryKey < ActiveRecordError
    attr_reader(:model)
    
    def function(arglist)
      super("STRING")
      @var = var
    end
  end
  ;Fi[	@ziI"¥      class Different < StandardError
        attr_reader(:table)
        
        def function(arglist)
          super("STRING")
          @var = var
        end
      end
      ;Fi[	I"+data//cucumber_prok/cucumber/errors.rb;Ti	I"™  class Undefined < StandardError
    attr_reader(:step_name)
    
    def function(arglist)
      super("STRING")
      @var = var
    end
    
    def function(arglist);Fi[@‰	@Â	@Ê	I"%# @return [Array<Twitter::User>];Fi[[	@fi?I"›      # Returns users that match the given query
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/users/search
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>]
      # @param query [String] The search query to run against people search.
      # @param options [Hash] A customizable set of options.;Fi[	@fiPI"ﬁ      # Returns an array of users that the specified user can contribute to
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/users/contributees
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>]
      # @overload contributees(options={})
      #   @param options [Hash] A customizable set of options.;Fi[	@figI"‡      # Returns an array of users who can contribute to the specified account
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/users/contributors
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::User>]
      # @overload contributors(options={})
      #   @param options [Hash] A customizable set of options.;Fi[@Â	@Ê	@-
I"'# @overload friend_ids(options={});Fi[[	@0
iI"©      
      # @see https://dev.twitter.com/docs/api/1.1/get/friends/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #;Fi[	@0
i˝I"≠      #
      # @see https://dev.twitter.com/docs/api/1.1/get/followers/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #;Fi[	@0
iI"Ø      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #;Fi[@I"(if @var.respond_to?("LITERAL") then;FI"#@var.call(attachment.instance);FI"	else;Fi[[	I",data//paperclip_proj/paperclip/style.rb;Ti(I"f    # There is an important change of interface here: a style rule can set its own processors
    # by default we behave as before, though.
    # if a proc has been supplied, we call it here
    def function(arglist)
      if @var.respond_to?("LITERAL") then
        @var.call(attachment.instance)
      else
        (@var or attachment.processors)
      end;Fi[	@f(i:I"œ      whiny.!.!
    end
    
    def function(arglist)
      if @var.respond_to?("LITERAL") then
        @var.call(attachment.instance)
      else
        (@var or attachment.send("LITERAL", name))
      end;Fi[	@f(iBI"…      end
    end
    
    def function(arglist)
      if @var.respond_to?("LITERAL") then
        @var.call(attachment.instance)
      else
        (@var or attachment.send("LITERAL", name))
      end;Fi[@Â	@Ê	@ƒI"Í# @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.;Fi[[	@«i I"5      # @see https://dev.twitter.com/docs/api/1.1/get/geo/reverse_geocode
      # @note This request is an informative call and will deliver generalized results about geography.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :accuracy ('0m') A hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).;Fi[	@«i3I"Ì      #
      # @see https://dev.twitter.com/docs/api/1.1/get/geo/search
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :query Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name.;Fi[	@«iMI"≈      # @see https://dev.twitter.com/docs/api/1.1/get/geo/similar_places
      # @note Conceptually, you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to {Twitter::API::PlacesAndGeo#place} to create a new one. The token contained in the response is the token necessary to create a new place.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :name The name a place is known as.;Fi[@Â	@Ê	I"6# @return [Twitter::User] The authenticated user.;FI";# @param options [Hash] A customizable set of options.;Fi[[	@fi.I"D      #
      # @see https://dev.twitter.com/docs/api/1.1/get/account/verify_credentials
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.
      # @option options [Boolean, String, Integer] :skip_status Do not include user's Tweets when set to true, 't' or 1.
      # @example Return the requesting user if authentication was successful;Fi[	@fiOI"ß      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile
      # @note Only the options specified will be updated.
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :name Full name associated with the profile. Maximum of 20 characters.
      # @option options [String] :url URL associated with the profile. Will be prepended with "http://" if not present. Maximum of 100 characters.;Fi[	@fiqI"      #
      # @see https://dev.twitter.com/docs/api/1.1/post/account/update_profile_colors
      # @rate_limited No
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::User] The authenticated user.
      # @param options [Hash] A customizable set of options.
      # @option options [String] :profile_background_color Profile background color.
      # @option options [String] :profile_text_color Profile text color.;Fi[@Ê	@-
@X(I"[#   Returns an array of numeric IDs for every user the authenticated user is following;Fi[[	@0
iI"·      # @see https://dev.twitter.com/docs/api/1.1/get/friends/ids
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.;Fi[	@0
i˛I"‰      # @see https://dev.twitter.com/docs/api/1.1/get/followers/list
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.;Fi[	@0
iI"Ê      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.;Fi[@@c@1I"var = var.length;Fi[[	@”i>I"ó    end
  end
  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do;Fi[	@‡i.I"ó    end
  end
  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do;Fi[	@Ìi-I"ó    end
  end
  
  def function(arglist)
    var = "LITERAL"
    var = @var["STRING"]
    var = var.length
    var = "LITERAL"
    while (var < var) do;Fi[@Ê	@ƒ@m(I""# @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.;Fi[[	@«i!I"¨      # @note This request is an informative call and will deliver generalized results about geography.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :accuracy ('0m') A hint on the "region" in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).
      # @option options [String] :granularity ('neighborhood') This is the minimal granularity of place types to return and must be one of: 'poi', 'neighborhood', 'city', 'admin' or 'country'.;Fi[	@«i4I"e      # @see https://dev.twitter.com/docs/api/1.1/get/geo/search
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :query Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name.
      # @option options [String] :ip An IP address. Used when attempting to fix geolocation based off of the user's IP address.;Fi[	@«iNI"J      # @note Conceptually, you would use this method to get a list of known places to choose from first. Then, if the desired place doesn't exist, make a request to {Twitter::API::PlacesAndGeo#place} to create a new one. The token contained in the response is the token necessary to create a new place.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @param options [Hash] A customizable set of options.
      # @option options [Float] :lat The latitude to search around. This option will be ignored unless it is inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding :long option.
      # @option options [Float] :long The longitude to search around. The valid range for longitude is -180.0 to +180.0 (East is positive) inclusive. This option will be ignored if outside that range, if it is not a number, if geo_enabled is disabled, or if there not a corresponding :lat option.
      # @option options [String] :name The name a place is known as.
      # @option options [String] :contained_within This is the place_id which you would like to restrict the search results to. Setting this value means only places within the given place_id will be found.;Fi[@@nI"@var ||= Array.new;FI"@var ||= Array.new;Fi[[	@ni0I"      # 'lock' dump meaning wrapping mongodump with fsync & lock
      ##
      # Creates a new instance of the MongoDB database object
      def function(arglist)
        super(var)
        @var ||= Array.new
        @var ||= Array.new
        @var ||= false
        @var ||= false;Fi[	@qi)I"      # Path to mysqldump utility (optional)
      ##
      # Creates a new instance of the MySQL adapter object
      def function(arglist)
        super(var)
        @var ||= Array.new
        @var ||= Array.new
        @var ||= Array.new
        instance_eval(&var) if block_given?;Fi[	@ti*I"a      # Creates a new instance of the PostgreSQL adapter object
      # Sets the PGPASSWORD environment variable to the password
      # so it doesn't prompt and hang in the process
      def function(arglist)
        super(var)
        @var ||= Array.new
        @var ||= Array.new
        @var ||= Array.new
        instance_eval(&var) if block_given?;Fi[@@nI"@var = var;FI"end;Fi[[	@G(i-I"™  class WrappedDatabaseException < StatementInvalid
    attr_reader(:original_exception)
    
    def function(arglist)
      super(var)
      @var = var
    end
  end
  ;Fi[	I""data//haml_proj/haml/error.rb;TiI"ª    # @return [Fixnum]
    # @param message [String] The error message
    # @param line [Fixnum] See \{#line}
    def function(arglist)
      super(var)
      @var = var
    end
  end
  ;Fi[	I"&data//homebrew_proj/exceptions.rb;Ti2I"è  class InstallationError < RuntimeError
    attr("LITERAL")
    
    def function(arglist)
      super(var)
      @var = var
    end
  end
end;Fi[@@óI"var = @var;F@´!i[[	@”iXI"“    end
  end
  
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@‡iMI"“    end
  end
  
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[	@ÌiGI"“    end
  end
  
  def function(arglist)
    var = @var
    var = @var
    var = @var["STRING"]
    var = ((@var - @var) - @var) if (var == "LITERAL")
    var = (((var - ("LITERAL" * @var)) * "LITERAL") / @var);Fi[@ˆ@ä@ÂI"´# @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.;Fi[[	@Ì	iJI"ı      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @example Return the 20 most recent retweets posted by @sferik
      #   Twitter.retweeted_by_user('sferik');Fi[	@Ì	iaI"˘      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @example Return the 20 most recent retweets posted by the authenticating user
      #   Twitter.retweeted_by_me;Fi[	@Ì	iàI"m      # @param options [Hash] A customizable set of options.
      # @option options [Integer] :since_id Returns results with an ID greater than (that is, more recent than) the specified ID.
      # @option options [Integer] :max_id Returns results with an ID less than (that is, older than) or equal to the specified ID.
      # @option options [Integer] :count Specifies the number of records to retrieve. Must be less than or equal to 200.
      # @option options [Boolean, String, Integer] :trim_user Each tweet returned in a timeline will include a user object with only the author's numerical ID when set to true, 't' or 1.
      # @option options [Boolean, String, Integer] :exclude_replies This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies with the count parameter will mean you will receive up-to count tweets - this is because the count parameter retrieves that many tweets before filtering out retweets and replies.
      # @option options [Boolean, String, Integer] :contributor_details Specifies that the contributors element should be enhanced to include the screen_name of the contributor.
      # @option options [Boolean, String, Integer] :include_entities The tweet entities node will be disincluded when set to false.
      # @example Return the 20 most recent retweets posted by users followed by the authenticating user;Fi[@B@>@?@¨i[[	@DiUI"”      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)));Fi[	@DiwI"”      #     Twitter.favorite(25938088801)
      # @overload favorite(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          begin
            object_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options.merge("LITERAL" => (var)));Fi[	@IiZI"Œ      #     Twitter.saved_search_destroy(16129012)
      # @overload saved_search_destroy(*ids, options)
      #   @param ids [Array<Integer>, Set<Integer>] An array of Tweet IDs.
      #   @param options [Hash] A customizable set of options.
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          object_from_response(Twitter::SavedSearch, "LITERAL", "STRING", var.options)
        end;Fi[@@P@%@%i[[	@+i
I"¿  
  attr_reader(:plugin_path, :plugin_name, :plugin_pretty_name)
  
  def function(arglist)
    super
    @var = file_name.underscore
    @var = plugin_name.titleize
    @var = "STRING"
  end;Fi[	@%iI"Ÿ  
  attr_reader(:plugin_path, :plugin_name, :plugin_pretty_name)
  
  def function(arglist)
    super
    @var = file_name.underscore
    @var = plugin_name.titleize
    @var = "STRING"
    @var = controller.camelize;Fi[	@%iI"‘  
  attr_reader(:plugin_path, :plugin_name, :plugin_pretty_name)
  
  def function(arglist)
    super
    @var = file_name.underscore
    @var = plugin_name.titleize
    @var = "STRING"
    @var = model.camelize;Fi[@@PI"@var = [];FI"end;Fi[[	@Öi$I"»        replace(klass.find(var).index_by { |arglist| var.id }.values_at(*var))
      end
      
      def function(arglist)
        super
        @var = []
      end
      
      def function(arglist);Fi[	@ÒiI"À      class NestedTextFormatter < BaseTextFormatter
        INDENT = "STRING"
        
        def function(arglist)
          super
          @var = []
        end
        
        def function(arglist);Fi[	I"@data//rspec_proj/spec/runner/formatter/profile_formatter.rb;Ti
I"Õ  module Runner
    module Formatter
      class ProfileFormatter < ProgressBarFormatter
        def function(arglist)
          super
          @var = []
        end
        
        def function(arglist);Fi[@@PI"@var = false;FI"end;Fi[[	I"Qdata//activerecord_proj/active_record/associations/belongs_to_association.rb;TiI"ñ        self.target = var
      end
      
      def function(arglist)
        super
        @var = false
      end
      
      attr_reader :function;Fi[	I"<data//activerecord_proj/active_record/log_subscriber.rb;TiI"{      var
    end
    
    def function(arglist)
      super
      @var = false
    end
    
    def function(arglist);Fi[	I"Ddata//state_machine_proj/state_machine/transition_collection.rb;Ti’I"ø    end
    
    # Resets callback tracking
    def function(arglist)
      super
      @var = false
    end
    
    # Resets the event attribute so it can be re-evaluated if attempted again;Fi[@?@ﬁ@ﬂ@‡i[[	@Í	iII"¬      #     Twitter.list_timeline(7505382, 'presidents')
      #     Twitter.list_timeline(7505382, 8863586)
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end
        objects_from_response(Twitter::Tweet, "LITERAL", "STRING", var.options);Fi[	@Í	iI"ã      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end
        object_from_response(Twitter::List, var, var, var.options);Fi[	@Í	iI"i      end
      
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_owner!(var.options, (var.pop or screen_name))
        end
        cursor_from_response("LITERAL", Twitter::User, var, var, var.options, var);Fi[@?@›%@ﬁ%I"end;Fi[[	@fi±I"•      #     Twitter.profile_banner('sferik')
      #     Twitter.profile_banner(7505382)  # Same as above
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name))
        end
        object_from_response(Twitter::ProfileBanner, "LITERAL", "STRING", var.options)
      end;Fi[	@„%iI"k      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name))
        end
        objects_from_response(Twitter::User, var, var, var.options)
      end;Fi[	@„%i`I"m      # @param method_name [Symbol]
      # @return [Twitter::Cursor]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name))
        end
        cursor_from_response(var, var, var, var, var.options, var)
      end;Fi[@@C
@≠I"rescue;Fi[[	@1iˇI"£        @var.affected_rows
      end
      
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end;Fi[	@1iI"ó      end
      
      #:nodoc:
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end;Fi[	@1iI"ó      end
      
      #:nodoc:
      def function(arglist)
        begin
          execute("STRING")
        rescue
          # do nothing
        end;Fi[@@I"super("STRING");FI"end;Fi[[	I"0data//devise_proj/devise/omniauth/config.rb;TiI"§module Devise
  module OmniAuth
    class StrategyNotFound < NameError
      def function(arglist)
        @var = var
        super("STRING")
      end
    end
    ;Fi[	@Æ(iI"Øclass MultipleVersionsInstalledError < RuntimeError
  attr("LITERAL")
  
  def function(arglist)
    @var = var
    super("STRING")
  end
end
class NotAKegError < RuntimeError;Fi[	@Æ(iI"™class NoSuchKegError < RuntimeError
  attr("LITERAL")
  
  def function(arglist)
    @var = var
    super("STRING")
  end
end
class FormulaUnavailableError < RuntimeError;Fi[@@I"super(var);FI"end;Fi[[	I"3data//cucumber_prok/cucumber/ast/doc_string.rb;TiI"ù      
      attr_reader(:content_type)
      
      def function(arglist)
        @var = var
        super(var)
      end
      
      def function(arglist);Fi[	I"4data//state_machine_proj/state_machine/error.rb;Ti
I"à    attr_reader(:object)
    
    # The object that failed
    def function(arglist)
      @var = var
      super(var)
    end
  end
end;Fi[	I"7data//twitter_proj/twitter/response/raise_error.rb;TiI"ó        raise(var.from_response(var)) if var
      end
      
      def function(arglist)
        @var = var
        super(var)
      end
    end
  end;Fi[@-
@X(@Ä(I"#;Fi[[	@0
iI"”      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@0
iˇI"”      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[	@0
iI"”      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={})
      #   Returns an array of numeric IDs for every user the authenticated user is following
      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.;Fi[I">#   @example Return the authenticated user's friends' IDs;FI"#     Twitter.friend_ids;FI"-# @overload friend_ids(user, options={});FI"W#   Returns an array of numeric IDs for every user the specified user is following;Fi[[	@0
iI"À      #
      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@0
iI"ê      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@0
i&I"ê      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[@')@()@))I"#;Fi[[	@0
iI"      #   @param options [Hash] A customizable set of options.
      #   @option options [Integer] :cursor (-1) Breaks the results into pages. This is recommended for users who are following many users. Provide a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes to page back and forth in the list.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@0
iI"õ      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[	@0
i'I"õ      #   @option options [Boolean, String, Integer] :skip_status Do not include contributee's Tweets when set to true, 't' or 1.
      #   @option options [Boolean, String, Integer] :include_user_entities The user entities node will be disincluded when set to false.
      #   @example Return the authenticated user's friends' IDs
      #     Twitter.friend_ids
      # @overload friend_ids(user, options={})
      #   Returns an array of numeric IDs for every user the specified user is following
      #
      #   @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.
      #   @param options [Hash] A customizable set of options.;Fi[@@@I"@var = false;Fi[[	@‡iI"∏  
  attr("LITERAL", true)
  
  def function(arglist)
    @var = var
    @var = var
    @var = false
    @var = (ARGV.ignore_deps? or ARGV.interactive?)
    @var = install_bottle?(var);Fi[	I"$data//rescue_proj/resque/job.rb;TiI"›    # The name of the queue from which this job was pulled (or is to be
    # placed)
    # This job's associated payload object.
    def function(arglist)
      @var = var
      @var = var
      @var = false
    end
    ;Fi[	I"8data//rspec_proj/spec/mocks/argument_expectation.rb;Ti
I"Á    class ArgumentExpectation
      attr_reader(:args)
      
      def function(arglist)
        @var = var
        @var = var
        @var = false
        @var = nil
        if ArgumentMatchers::AnyArgsMatcher.===(var.first) then;Fi[I"E# @see https://dev.twitter.com/docs/api/1.1/get/friendships/show;FI"# @rate_limited Yes;FI",# @authentication Requires user context;FI"g# @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[[	@0
iœI"Û      
      # Returns detailed information about the relationship between two users
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Relationship]
      # @param source [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the source user.;Fi[	@0
iÈI"      
      # Test for the existence of friendship between two users
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Boolean] true if user_a follows user_b, otherwise false.
      # @param source [Integer, String, Twitter::User] The Twitter user ID, screen name, or object of the source user.;Fi[	@0
iI"‹      
      # Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/friendships/show
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Twitter::Cursor]
      # @overload friend_ids(options={});Fi[@@@I"@var = nil;Fi[[	I"4data//activerecord_proj/active_record/result.rb;TiI"ü    
    attr_reader(:columns, :rows, :column_types)
    
    def function(arglist)
      @var = var
      @var = var
      @var = nil
      @var = var
    end;Fi[	I"#data//homebrew_proj/patches.rb;TiAI"ß  
  # Used by formula to unpack after downloading
  # Used by audit
  def function(arglist)
    @var = var
    @var = var
    @var = nil
    @var = nil
    @var = nil;Fi[	@´&iI"∞      
      attr_reader(:expected, :actual)
      
      def function(arglist)
        @var = var
        @var = var
        @var = nil
        @var = false
        @var = nil;Fi[I"%# @param request_method [Symbol];FI"# @param path [String];FI"# @param args [Array];FI"%# @return [Array<Twitter::User>];Fi[[	@Í	iI"Ì      
      private
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var);Fi[	@„%iI"Ì      
      private
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var);Fi[	@„%iI"Ó        end
      end
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var);Fi[@^)@_)@`)I"def function(arglist);Fi[[	@Í	iI"      private
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop);Fi[	@„%iI"      private
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|;Fi[	@„%iI")      end
      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[@_)@`)@i)I"+var = Twitter::API::Arguments.new(var);Fi[[	@Í	iI"I      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        merge_list!(var.options, var.pop)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then;Fi[	@„%iI"\      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        var.flatten.threaded_map do |arglist|
          object_from_response(Twitter::User, var, var, merge_user(var.options, var));Fi[	@„%iI"\      
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array<Twitter::User>]
      def function(arglist)
        var = Twitter::API::Arguments.new(var)
        unless (var.options["LITERAL"] or var.options["LITERAL"]) then
          merge_user!(var.options, (var.pop or screen_name));Fi[I"K# @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline;FI"<# @note This method can only return up to 3,200 Tweets.;FI"# @rate_limited Yes;FI",# @authentication Requires user context;Fi[[	@Ì	i(I"π      
      # Returns the 20 most recent Tweets posted by the specified user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@Ì	i@I"ª      
      # Returns the 20 most recent retweets posted by the specified user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[	@Ì	iXI"¿      
      # Returns the 20 most recent retweets posted by the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>];Fi[@|)@})@~)I"g# @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.;Fi[[	@Ì	i)I"‰      # Returns the 20 most recent Tweets posted by the specified user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @overload user_timeline(user, options={});Fi[	@Ì	iAI"      # Returns the 20 most recent retweets posted by the specified user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param user [Integer, String, Twitter::User] A Twitter user ID, screen name, or object.;Fi[	@Ì	iYI"ˆ      # Returns the 20 most recent retweets posted by the authenticating user
      #
      # @see https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline
      # @note This method can only return up to 3,200 Tweets.
      # @rate_limited Yes
      # @authentication Requires user context
      # @raise [Twitter::Error::Unauthorized] Error raised when supplied user credentials are not valid.
      # @return [Array<Twitter::Tweet>]
      # @param options [Hash] A customizable set of options.;Fi[I"#     attr_accessor :name;FI"&#     validates_presence_of :name;FI"#   end;FI"#;Fi[[	@ciΩI"ÿ    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new
    #   person.valid? # => false;Fi[	@ciŒI"–    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new
    #   person.name = '';Fi[	@ciıI"–    #   class Person
    #     include ActiveModel::Validations
    #
    #     attr_accessor :name
    #     validates_presence_of :name
    #   end
    #
    #   person = Person.new
    #   person.name = '';Fi[I"# @param klass [Class];FI"%# @param request_method [Symbol];FI"# @param path [String];FI"# @param args [Array];Fi[[	@„%i&I"        objects_from_response(Twitter::User, var, var, var.options)
      end
      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array]
      def function(arglist);Fi[	@„%iBI"ı        var.map { |arglist| var.fetch_or_new(var) }
      end
      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @return [Array]
      def function(arglist);Fi[	@„%iYI"˚      end
      
      # @param collection_name [Symbol]
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param args [Array]
      # @param method_name [Symbol]
      # @return [Twitter::Cursor];Fi[@ú)@ù)@û)I"# @param options [Hash];Fi[[	@„%i1I"˝        objects_from_response(var, var, var, var.options)
      end
      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash]
      # @return [Array]
      def function(arglist);Fi[	@„%iNI"–        end
      end
      
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash]
      # @return [Object]
      def function(arglist);Fi[	@„%ihI"˝      end
      
      # @param collection_name [Symbol]
      # @param klass [Class]
      # @param request_method [Symbol]
      # @param path [String]
      # @param options [Hash]
      # @param method_name [Symbol]
      # @return [Twitter::Cursor];Fi[I"%# @return [Array<Twitter::Size>];FI"def function(arglist);F@p%@q%i[[	@u%iI"ˆ    
    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>]
    def function(arglist)
      @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
        var[var] = Twitter::Size.fetch_or_new(var)
        var
      end;Fi[	@x%iI"      
      # Returns an array of photo sizes
      #
      # @return [Array<Twitter::Size>]
      def function(arglist)
        @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
          var[var] = Twitter::Size.fetch_or_new(var)
          var
        end;Fi[	@{%i
I"  class ProfileBanner < Twitter::Base
    # Returns an array of photo sizes
    #
    # @return [Array<Twitter::Size>]
    def function(arglist)
      @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
        var[var] = Twitter::Size.fetch_or_new(var)
        var
      end;Fi[@p%@q%I"var;FI"end;Fi[[	@u%iI"Ÿ    #
    # @return [Array<Twitter::Size>]
    def function(arglist)
      @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
        var[var] = Twitter::Size.fetch_or_new(var)
        var
      end
    end
  end;Fi[	@x%iI"Î      #
      # @return [Array<Twitter::Size>]
      def function(arglist)
        @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
          var[var] = Twitter::Size.fetch_or_new(var)
          var
        end
      end
    end;Fi[	@{%iI"Ÿ    #
    # @return [Array<Twitter::Size>]
    def function(arglist)
      @var ||= Array(@var["LITERAL"]).inject({}) do |arglist|
        var[var] = Twitter::Size.fetch_or_new(var)
        var
      end
    end
  end;Fi[@Å@Ç@&I"var = [];Fi[[	@ÖiI"£        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) };Fi[	@àiI"£        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) };Fi[	@ãiVI"£        var = min_value
        var = (var - var)
        var = (var == "LITERAL") ? ("LITERAL") : ((var / "LITERAL"))
        var = ((var + var) - var)
        var = (scale_divisions or (var / "LITERAL"))
        var = (var < "LITERAL") ? ("LITERAL") : (var.round) if scale_integers
        var = []
        var = ((var % var) == "LITERAL") ? (var) : ((var + var))
        var.step(var, var) { |arglist| (var << var) };Fi
